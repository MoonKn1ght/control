
control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a04  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08005b8c  08005b8c  00006b8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ba4  08005ba4  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  08005ba4  08005ba4  00006ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005bac  08005bac  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005bac  08005bac  00006bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005bb0  08005bb0  00006bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005bb4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000700c  2**0
                  CONTENTS
 10 .bss          000005a0  2000000c  2000000c  0000700c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200005ac  200005ac  0000700c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000159c9  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003189  00000000  00000000  0001ca05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001418  00000000  00000000  0001fb90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fd1  00000000  00000000  00020fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000238f0  00000000  00000000  00021f79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a6e1  00000000  00000000  00045869  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da865  00000000  00000000  0005ff4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013a7af  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005504  00000000  00000000  0013a7f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000050  00000000  00000000  0013fcf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005b74 	.word	0x08005b74

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005b74 	.word	0x08005b74

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b084      	sub	sp, #16
 80004bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004be:	463b      	mov	r3, r7
 80004c0:	2200      	movs	r2, #0
 80004c2:	601a      	str	r2, [r3, #0]
 80004c4:	605a      	str	r2, [r3, #4]
 80004c6:	609a      	str	r2, [r3, #8]
 80004c8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80004ca:	4b21      	ldr	r3, [pc, #132]	@ (8000550 <MX_ADC1_Init+0x98>)
 80004cc:	4a21      	ldr	r2, [pc, #132]	@ (8000554 <MX_ADC1_Init+0x9c>)
 80004ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80004d0:	4b1f      	ldr	r3, [pc, #124]	@ (8000550 <MX_ADC1_Init+0x98>)
 80004d2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80004d6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004d8:	4b1d      	ldr	r3, [pc, #116]	@ (8000550 <MX_ADC1_Init+0x98>)
 80004da:	2200      	movs	r2, #0
 80004dc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80004de:	4b1c      	ldr	r3, [pc, #112]	@ (8000550 <MX_ADC1_Init+0x98>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80004e4:	4b1a      	ldr	r3, [pc, #104]	@ (8000550 <MX_ADC1_Init+0x98>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004ea:	4b19      	ldr	r3, [pc, #100]	@ (8000550 <MX_ADC1_Init+0x98>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004f2:	4b17      	ldr	r3, [pc, #92]	@ (8000550 <MX_ADC1_Init+0x98>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004f8:	4b15      	ldr	r3, [pc, #84]	@ (8000550 <MX_ADC1_Init+0x98>)
 80004fa:	4a17      	ldr	r2, [pc, #92]	@ (8000558 <MX_ADC1_Init+0xa0>)
 80004fc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004fe:	4b14      	ldr	r3, [pc, #80]	@ (8000550 <MX_ADC1_Init+0x98>)
 8000500:	2200      	movs	r2, #0
 8000502:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000504:	4b12      	ldr	r3, [pc, #72]	@ (8000550 <MX_ADC1_Init+0x98>)
 8000506:	2201      	movs	r2, #1
 8000508:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800050a:	4b11      	ldr	r3, [pc, #68]	@ (8000550 <MX_ADC1_Init+0x98>)
 800050c:	2200      	movs	r2, #0
 800050e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000512:	4b0f      	ldr	r3, [pc, #60]	@ (8000550 <MX_ADC1_Init+0x98>)
 8000514:	2201      	movs	r2, #1
 8000516:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000518:	480d      	ldr	r0, [pc, #52]	@ (8000550 <MX_ADC1_Init+0x98>)
 800051a:	f001 fe3b 	bl	8002194 <HAL_ADC_Init>
 800051e:	4603      	mov	r3, r0
 8000520:	2b00      	cmp	r3, #0
 8000522:	d001      	beq.n	8000528 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000524:	f000 fcc6 	bl	8000eb4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000528:	2306      	movs	r3, #6
 800052a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800052c:	2301      	movs	r3, #1
 800052e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000530:	2300      	movs	r3, #0
 8000532:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000534:	463b      	mov	r3, r7
 8000536:	4619      	mov	r1, r3
 8000538:	4805      	ldr	r0, [pc, #20]	@ (8000550 <MX_ADC1_Init+0x98>)
 800053a:	f001 fe6f 	bl	800221c <HAL_ADC_ConfigChannel>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d001      	beq.n	8000548 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000544:	f000 fcb6 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000548:	bf00      	nop
 800054a:	3710      	adds	r7, #16
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}
 8000550:	20000028 	.word	0x20000028
 8000554:	40012000 	.word	0x40012000
 8000558:	0f000001 	.word	0x0f000001

0800055c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b084      	sub	sp, #16
 8000560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000562:	463b      	mov	r3, r7
 8000564:	2200      	movs	r2, #0
 8000566:	601a      	str	r2, [r3, #0]
 8000568:	605a      	str	r2, [r3, #4]
 800056a:	609a      	str	r2, [r3, #8]
 800056c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800056e:	4b21      	ldr	r3, [pc, #132]	@ (80005f4 <MX_ADC2_Init+0x98>)
 8000570:	4a21      	ldr	r2, [pc, #132]	@ (80005f8 <MX_ADC2_Init+0x9c>)
 8000572:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000574:	4b1f      	ldr	r3, [pc, #124]	@ (80005f4 <MX_ADC2_Init+0x98>)
 8000576:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800057a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800057c:	4b1d      	ldr	r3, [pc, #116]	@ (80005f4 <MX_ADC2_Init+0x98>)
 800057e:	2200      	movs	r2, #0
 8000580:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000582:	4b1c      	ldr	r3, [pc, #112]	@ (80005f4 <MX_ADC2_Init+0x98>)
 8000584:	2200      	movs	r2, #0
 8000586:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000588:	4b1a      	ldr	r3, [pc, #104]	@ (80005f4 <MX_ADC2_Init+0x98>)
 800058a:	2200      	movs	r2, #0
 800058c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800058e:	4b19      	ldr	r3, [pc, #100]	@ (80005f4 <MX_ADC2_Init+0x98>)
 8000590:	2200      	movs	r2, #0
 8000592:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000596:	4b17      	ldr	r3, [pc, #92]	@ (80005f4 <MX_ADC2_Init+0x98>)
 8000598:	2200      	movs	r2, #0
 800059a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800059c:	4b15      	ldr	r3, [pc, #84]	@ (80005f4 <MX_ADC2_Init+0x98>)
 800059e:	4a17      	ldr	r2, [pc, #92]	@ (80005fc <MX_ADC2_Init+0xa0>)
 80005a0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005a2:	4b14      	ldr	r3, [pc, #80]	@ (80005f4 <MX_ADC2_Init+0x98>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80005a8:	4b12      	ldr	r3, [pc, #72]	@ (80005f4 <MX_ADC2_Init+0x98>)
 80005aa:	2201      	movs	r2, #1
 80005ac:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80005ae:	4b11      	ldr	r3, [pc, #68]	@ (80005f4 <MX_ADC2_Init+0x98>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005b6:	4b0f      	ldr	r3, [pc, #60]	@ (80005f4 <MX_ADC2_Init+0x98>)
 80005b8:	2201      	movs	r2, #1
 80005ba:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80005bc:	480d      	ldr	r0, [pc, #52]	@ (80005f4 <MX_ADC2_Init+0x98>)
 80005be:	f001 fde9 	bl	8002194 <HAL_ADC_Init>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80005c8:	f000 fc74 	bl	8000eb4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80005cc:	2302      	movs	r3, #2
 80005ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80005d0:	2301      	movs	r3, #1
 80005d2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80005d4:	2307      	movs	r3, #7
 80005d6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80005d8:	463b      	mov	r3, r7
 80005da:	4619      	mov	r1, r3
 80005dc:	4805      	ldr	r0, [pc, #20]	@ (80005f4 <MX_ADC2_Init+0x98>)
 80005de:	f001 fe1d 	bl	800221c <HAL_ADC_ConfigChannel>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80005e8:	f000 fc64 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80005ec:	bf00      	nop
 80005ee:	3710      	adds	r7, #16
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	20000070 	.word	0x20000070
 80005f8:	40012100 	.word	0x40012100
 80005fc:	0f000001 	.word	0x0f000001

08000600 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b084      	sub	sp, #16
 8000604:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000606:	463b      	mov	r3, r7
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000612:	4b21      	ldr	r3, [pc, #132]	@ (8000698 <MX_ADC3_Init+0x98>)
 8000614:	4a21      	ldr	r2, [pc, #132]	@ (800069c <MX_ADC3_Init+0x9c>)
 8000616:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000618:	4b1f      	ldr	r3, [pc, #124]	@ (8000698 <MX_ADC3_Init+0x98>)
 800061a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800061e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000620:	4b1d      	ldr	r3, [pc, #116]	@ (8000698 <MX_ADC3_Init+0x98>)
 8000622:	2200      	movs	r2, #0
 8000624:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8000626:	4b1c      	ldr	r3, [pc, #112]	@ (8000698 <MX_ADC3_Init+0x98>)
 8000628:	2200      	movs	r2, #0
 800062a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800062c:	4b1a      	ldr	r3, [pc, #104]	@ (8000698 <MX_ADC3_Init+0x98>)
 800062e:	2200      	movs	r2, #0
 8000630:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000632:	4b19      	ldr	r3, [pc, #100]	@ (8000698 <MX_ADC3_Init+0x98>)
 8000634:	2200      	movs	r2, #0
 8000636:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800063a:	4b17      	ldr	r3, [pc, #92]	@ (8000698 <MX_ADC3_Init+0x98>)
 800063c:	2200      	movs	r2, #0
 800063e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000640:	4b15      	ldr	r3, [pc, #84]	@ (8000698 <MX_ADC3_Init+0x98>)
 8000642:	4a17      	ldr	r2, [pc, #92]	@ (80006a0 <MX_ADC3_Init+0xa0>)
 8000644:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000646:	4b14      	ldr	r3, [pc, #80]	@ (8000698 <MX_ADC3_Init+0x98>)
 8000648:	2200      	movs	r2, #0
 800064a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800064c:	4b12      	ldr	r3, [pc, #72]	@ (8000698 <MX_ADC3_Init+0x98>)
 800064e:	2201      	movs	r2, #1
 8000650:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000652:	4b11      	ldr	r3, [pc, #68]	@ (8000698 <MX_ADC3_Init+0x98>)
 8000654:	2200      	movs	r2, #0
 8000656:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800065a:	4b0f      	ldr	r3, [pc, #60]	@ (8000698 <MX_ADC3_Init+0x98>)
 800065c:	2201      	movs	r2, #1
 800065e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000660:	480d      	ldr	r0, [pc, #52]	@ (8000698 <MX_ADC3_Init+0x98>)
 8000662:	f001 fd97 	bl	8002194 <HAL_ADC_Init>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 800066c:	f000 fc22 	bl	8000eb4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000670:	2303      	movs	r3, #3
 8000672:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000674:	2301      	movs	r3, #1
 8000676:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000678:	2300      	movs	r3, #0
 800067a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800067c:	463b      	mov	r3, r7
 800067e:	4619      	mov	r1, r3
 8000680:	4805      	ldr	r0, [pc, #20]	@ (8000698 <MX_ADC3_Init+0x98>)
 8000682:	f001 fdcb 	bl	800221c <HAL_ADC_ConfigChannel>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 800068c:	f000 fc12 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000690:	bf00      	nop
 8000692:	3710      	adds	r7, #16
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	200000b8 	.word	0x200000b8
 800069c:	40012200 	.word	0x40012200
 80006a0:	0f000001 	.word	0x0f000001

080006a4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b08e      	sub	sp, #56	@ 0x38
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
 80006b8:	60da      	str	r2, [r3, #12]
 80006ba:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a52      	ldr	r2, [pc, #328]	@ (800080c <HAL_ADC_MspInit+0x168>)
 80006c2:	4293      	cmp	r3, r2
 80006c4:	d142      	bne.n	800074c <HAL_ADC_MspInit+0xa8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006c6:	2300      	movs	r3, #0
 80006c8:	623b      	str	r3, [r7, #32]
 80006ca:	4b51      	ldr	r3, [pc, #324]	@ (8000810 <HAL_ADC_MspInit+0x16c>)
 80006cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006ce:	4a50      	ldr	r2, [pc, #320]	@ (8000810 <HAL_ADC_MspInit+0x16c>)
 80006d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80006d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80006d6:	4b4e      	ldr	r3, [pc, #312]	@ (8000810 <HAL_ADC_MspInit+0x16c>)
 80006d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80006de:	623b      	str	r3, [r7, #32]
 80006e0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	61fb      	str	r3, [r7, #28]
 80006e6:	4b4a      	ldr	r3, [pc, #296]	@ (8000810 <HAL_ADC_MspInit+0x16c>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ea:	4a49      	ldr	r2, [pc, #292]	@ (8000810 <HAL_ADC_MspInit+0x16c>)
 80006ec:	f043 0301 	orr.w	r3, r3, #1
 80006f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006f2:	4b47      	ldr	r3, [pc, #284]	@ (8000810 <HAL_ADC_MspInit+0x16c>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f6:	f003 0301 	and.w	r3, r3, #1
 80006fa:	61fb      	str	r3, [r7, #28]
 80006fc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	61bb      	str	r3, [r7, #24]
 8000702:	4b43      	ldr	r3, [pc, #268]	@ (8000810 <HAL_ADC_MspInit+0x16c>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000706:	4a42      	ldr	r2, [pc, #264]	@ (8000810 <HAL_ADC_MspInit+0x16c>)
 8000708:	f043 0302 	orr.w	r3, r3, #2
 800070c:	6313      	str	r3, [r2, #48]	@ 0x30
 800070e:	4b40      	ldr	r3, [pc, #256]	@ (8000810 <HAL_ADC_MspInit+0x16c>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000712:	f003 0302 	and.w	r3, r3, #2
 8000716:	61bb      	str	r3, [r7, #24]
 8000718:	69bb      	ldr	r3, [r7, #24]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800071a:	23c0      	movs	r3, #192	@ 0xc0
 800071c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800071e:	2303      	movs	r3, #3
 8000720:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000722:	2300      	movs	r3, #0
 8000724:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000726:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800072a:	4619      	mov	r1, r3
 800072c:	4839      	ldr	r0, [pc, #228]	@ (8000814 <HAL_ADC_MspInit+0x170>)
 800072e:	f002 fa33 	bl	8002b98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000732:	2303      	movs	r3, #3
 8000734:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000736:	2303      	movs	r3, #3
 8000738:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073a:	2300      	movs	r3, #0
 800073c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800073e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000742:	4619      	mov	r1, r3
 8000744:	4834      	ldr	r0, [pc, #208]	@ (8000818 <HAL_ADC_MspInit+0x174>)
 8000746:	f002 fa27 	bl	8002b98 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 800074a:	e05a      	b.n	8000802 <HAL_ADC_MspInit+0x15e>
  else if(adcHandle->Instance==ADC2)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a32      	ldr	r2, [pc, #200]	@ (800081c <HAL_ADC_MspInit+0x178>)
 8000752:	4293      	cmp	r3, r2
 8000754:	d128      	bne.n	80007a8 <HAL_ADC_MspInit+0x104>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	617b      	str	r3, [r7, #20]
 800075a:	4b2d      	ldr	r3, [pc, #180]	@ (8000810 <HAL_ADC_MspInit+0x16c>)
 800075c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800075e:	4a2c      	ldr	r2, [pc, #176]	@ (8000810 <HAL_ADC_MspInit+0x16c>)
 8000760:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000764:	6453      	str	r3, [r2, #68]	@ 0x44
 8000766:	4b2a      	ldr	r3, [pc, #168]	@ (8000810 <HAL_ADC_MspInit+0x16c>)
 8000768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800076a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800076e:	617b      	str	r3, [r7, #20]
 8000770:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	613b      	str	r3, [r7, #16]
 8000776:	4b26      	ldr	r3, [pc, #152]	@ (8000810 <HAL_ADC_MspInit+0x16c>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077a:	4a25      	ldr	r2, [pc, #148]	@ (8000810 <HAL_ADC_MspInit+0x16c>)
 800077c:	f043 0301 	orr.w	r3, r3, #1
 8000780:	6313      	str	r3, [r2, #48]	@ 0x30
 8000782:	4b23      	ldr	r3, [pc, #140]	@ (8000810 <HAL_ADC_MspInit+0x16c>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000786:	f003 0301 	and.w	r3, r3, #1
 800078a:	613b      	str	r3, [r7, #16]
 800078c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800078e:	2304      	movs	r3, #4
 8000790:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000792:	2303      	movs	r3, #3
 8000794:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000796:	2300      	movs	r3, #0
 8000798:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800079a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800079e:	4619      	mov	r1, r3
 80007a0:	481c      	ldr	r0, [pc, #112]	@ (8000814 <HAL_ADC_MspInit+0x170>)
 80007a2:	f002 f9f9 	bl	8002b98 <HAL_GPIO_Init>
}
 80007a6:	e02c      	b.n	8000802 <HAL_ADC_MspInit+0x15e>
  else if(adcHandle->Instance==ADC3)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a1c      	ldr	r2, [pc, #112]	@ (8000820 <HAL_ADC_MspInit+0x17c>)
 80007ae:	4293      	cmp	r3, r2
 80007b0:	d127      	bne.n	8000802 <HAL_ADC_MspInit+0x15e>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	60fb      	str	r3, [r7, #12]
 80007b6:	4b16      	ldr	r3, [pc, #88]	@ (8000810 <HAL_ADC_MspInit+0x16c>)
 80007b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007ba:	4a15      	ldr	r2, [pc, #84]	@ (8000810 <HAL_ADC_MspInit+0x16c>)
 80007bc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80007c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80007c2:	4b13      	ldr	r3, [pc, #76]	@ (8000810 <HAL_ADC_MspInit+0x16c>)
 80007c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	60bb      	str	r3, [r7, #8]
 80007d2:	4b0f      	ldr	r3, [pc, #60]	@ (8000810 <HAL_ADC_MspInit+0x16c>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d6:	4a0e      	ldr	r2, [pc, #56]	@ (8000810 <HAL_ADC_MspInit+0x16c>)
 80007d8:	f043 0301 	orr.w	r3, r3, #1
 80007dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007de:	4b0c      	ldr	r3, [pc, #48]	@ (8000810 <HAL_ADC_MspInit+0x16c>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	60bb      	str	r3, [r7, #8]
 80007e8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80007ea:	2308      	movs	r3, #8
 80007ec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007ee:	2303      	movs	r3, #3
 80007f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007fa:	4619      	mov	r1, r3
 80007fc:	4805      	ldr	r0, [pc, #20]	@ (8000814 <HAL_ADC_MspInit+0x170>)
 80007fe:	f002 f9cb 	bl	8002b98 <HAL_GPIO_Init>
}
 8000802:	bf00      	nop
 8000804:	3738      	adds	r7, #56	@ 0x38
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	40012000 	.word	0x40012000
 8000810:	40023800 	.word	0x40023800
 8000814:	40020000 	.word	0x40020000
 8000818:	40020400 	.word	0x40020400
 800081c:	40012100 	.word	0x40012100
 8000820:	40012200 	.word	0x40012200

08000824 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000828:	4b16      	ldr	r3, [pc, #88]	@ (8000884 <MX_CAN1_Init+0x60>)
 800082a:	4a17      	ldr	r2, [pc, #92]	@ (8000888 <MX_CAN1_Init+0x64>)
 800082c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800082e:	4b15      	ldr	r3, [pc, #84]	@ (8000884 <MX_CAN1_Init+0x60>)
 8000830:	2210      	movs	r2, #16
 8000832:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000834:	4b13      	ldr	r3, [pc, #76]	@ (8000884 <MX_CAN1_Init+0x60>)
 8000836:	2200      	movs	r2, #0
 8000838:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800083a:	4b12      	ldr	r3, [pc, #72]	@ (8000884 <MX_CAN1_Init+0x60>)
 800083c:	2200      	movs	r2, #0
 800083e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000840:	4b10      	ldr	r3, [pc, #64]	@ (8000884 <MX_CAN1_Init+0x60>)
 8000842:	2200      	movs	r2, #0
 8000844:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000846:	4b0f      	ldr	r3, [pc, #60]	@ (8000884 <MX_CAN1_Init+0x60>)
 8000848:	2200      	movs	r2, #0
 800084a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800084c:	4b0d      	ldr	r3, [pc, #52]	@ (8000884 <MX_CAN1_Init+0x60>)
 800084e:	2200      	movs	r2, #0
 8000850:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000852:	4b0c      	ldr	r3, [pc, #48]	@ (8000884 <MX_CAN1_Init+0x60>)
 8000854:	2200      	movs	r2, #0
 8000856:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000858:	4b0a      	ldr	r3, [pc, #40]	@ (8000884 <MX_CAN1_Init+0x60>)
 800085a:	2200      	movs	r2, #0
 800085c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800085e:	4b09      	ldr	r3, [pc, #36]	@ (8000884 <MX_CAN1_Init+0x60>)
 8000860:	2200      	movs	r2, #0
 8000862:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000864:	4b07      	ldr	r3, [pc, #28]	@ (8000884 <MX_CAN1_Init+0x60>)
 8000866:	2200      	movs	r2, #0
 8000868:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800086a:	4b06      	ldr	r3, [pc, #24]	@ (8000884 <MX_CAN1_Init+0x60>)
 800086c:	2200      	movs	r2, #0
 800086e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000870:	4804      	ldr	r0, [pc, #16]	@ (8000884 <MX_CAN1_Init+0x60>)
 8000872:	f001 fef1 	bl	8002658 <HAL_CAN_Init>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 800087c:	f000 fb1a 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000880:	bf00      	nop
 8000882:	bd80      	pop	{r7, pc}
 8000884:	20000100 	.word	0x20000100
 8000888:	40006400 	.word	0x40006400

0800088c <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000890:	4b16      	ldr	r3, [pc, #88]	@ (80008ec <MX_CAN2_Init+0x60>)
 8000892:	4a17      	ldr	r2, [pc, #92]	@ (80008f0 <MX_CAN2_Init+0x64>)
 8000894:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 8000896:	4b15      	ldr	r3, [pc, #84]	@ (80008ec <MX_CAN2_Init+0x60>)
 8000898:	2210      	movs	r2, #16
 800089a:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 800089c:	4b13      	ldr	r3, [pc, #76]	@ (80008ec <MX_CAN2_Init+0x60>)
 800089e:	2200      	movs	r2, #0
 80008a0:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80008a2:	4b12      	ldr	r3, [pc, #72]	@ (80008ec <MX_CAN2_Init+0x60>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 80008a8:	4b10      	ldr	r3, [pc, #64]	@ (80008ec <MX_CAN2_Init+0x60>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 80008ae:	4b0f      	ldr	r3, [pc, #60]	@ (80008ec <MX_CAN2_Init+0x60>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80008b4:	4b0d      	ldr	r3, [pc, #52]	@ (80008ec <MX_CAN2_Init+0x60>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80008ba:	4b0c      	ldr	r3, [pc, #48]	@ (80008ec <MX_CAN2_Init+0x60>)
 80008bc:	2200      	movs	r2, #0
 80008be:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80008c0:	4b0a      	ldr	r3, [pc, #40]	@ (80008ec <MX_CAN2_Init+0x60>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80008c6:	4b09      	ldr	r3, [pc, #36]	@ (80008ec <MX_CAN2_Init+0x60>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80008cc:	4b07      	ldr	r3, [pc, #28]	@ (80008ec <MX_CAN2_Init+0x60>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80008d2:	4b06      	ldr	r3, [pc, #24]	@ (80008ec <MX_CAN2_Init+0x60>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80008d8:	4804      	ldr	r0, [pc, #16]	@ (80008ec <MX_CAN2_Init+0x60>)
 80008da:	f001 febd 	bl	8002658 <HAL_CAN_Init>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 80008e4:	f000 fae6 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80008e8:	bf00      	nop
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	20000128 	.word	0x20000128
 80008f0:	40006800 	.word	0x40006800

080008f4 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b08c      	sub	sp, #48	@ 0x30
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fc:	f107 031c 	add.w	r3, r7, #28
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	605a      	str	r2, [r3, #4]
 8000906:	609a      	str	r2, [r3, #8]
 8000908:	60da      	str	r2, [r3, #12]
 800090a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a43      	ldr	r2, [pc, #268]	@ (8000a20 <HAL_CAN_MspInit+0x12c>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d136      	bne.n	8000984 <HAL_CAN_MspInit+0x90>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000916:	4b43      	ldr	r3, [pc, #268]	@ (8000a24 <HAL_CAN_MspInit+0x130>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	3301      	adds	r3, #1
 800091c:	4a41      	ldr	r2, [pc, #260]	@ (8000a24 <HAL_CAN_MspInit+0x130>)
 800091e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000920:	4b40      	ldr	r3, [pc, #256]	@ (8000a24 <HAL_CAN_MspInit+0x130>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	2b01      	cmp	r3, #1
 8000926:	d10d      	bne.n	8000944 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000928:	2300      	movs	r3, #0
 800092a:	61bb      	str	r3, [r7, #24]
 800092c:	4b3e      	ldr	r3, [pc, #248]	@ (8000a28 <HAL_CAN_MspInit+0x134>)
 800092e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000930:	4a3d      	ldr	r2, [pc, #244]	@ (8000a28 <HAL_CAN_MspInit+0x134>)
 8000932:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000936:	6413      	str	r3, [r2, #64]	@ 0x40
 8000938:	4b3b      	ldr	r3, [pc, #236]	@ (8000a28 <HAL_CAN_MspInit+0x134>)
 800093a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800093c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000940:	61bb      	str	r3, [r7, #24]
 8000942:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000944:	2300      	movs	r3, #0
 8000946:	617b      	str	r3, [r7, #20]
 8000948:	4b37      	ldr	r3, [pc, #220]	@ (8000a28 <HAL_CAN_MspInit+0x134>)
 800094a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094c:	4a36      	ldr	r2, [pc, #216]	@ (8000a28 <HAL_CAN_MspInit+0x134>)
 800094e:	f043 0301 	orr.w	r3, r3, #1
 8000952:	6313      	str	r3, [r2, #48]	@ 0x30
 8000954:	4b34      	ldr	r3, [pc, #208]	@ (8000a28 <HAL_CAN_MspInit+0x134>)
 8000956:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000958:	f003 0301 	and.w	r3, r3, #1
 800095c:	617b      	str	r3, [r7, #20]
 800095e:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000960:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000964:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000966:	2302      	movs	r3, #2
 8000968:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800096e:	2303      	movs	r3, #3
 8000970:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000972:	2309      	movs	r3, #9
 8000974:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000976:	f107 031c 	add.w	r3, r7, #28
 800097a:	4619      	mov	r1, r3
 800097c:	482b      	ldr	r0, [pc, #172]	@ (8000a2c <HAL_CAN_MspInit+0x138>)
 800097e:	f002 f90b 	bl	8002b98 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8000982:	e048      	b.n	8000a16 <HAL_CAN_MspInit+0x122>
  else if(canHandle->Instance==CAN2)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a29      	ldr	r2, [pc, #164]	@ (8000a30 <HAL_CAN_MspInit+0x13c>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d143      	bne.n	8000a16 <HAL_CAN_MspInit+0x122>
    __HAL_RCC_CAN2_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	613b      	str	r3, [r7, #16]
 8000992:	4b25      	ldr	r3, [pc, #148]	@ (8000a28 <HAL_CAN_MspInit+0x134>)
 8000994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000996:	4a24      	ldr	r2, [pc, #144]	@ (8000a28 <HAL_CAN_MspInit+0x134>)
 8000998:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800099c:	6413      	str	r3, [r2, #64]	@ 0x40
 800099e:	4b22      	ldr	r3, [pc, #136]	@ (8000a28 <HAL_CAN_MspInit+0x134>)
 80009a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009a2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80009a6:	613b      	str	r3, [r7, #16]
 80009a8:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80009aa:	4b1e      	ldr	r3, [pc, #120]	@ (8000a24 <HAL_CAN_MspInit+0x130>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	3301      	adds	r3, #1
 80009b0:	4a1c      	ldr	r2, [pc, #112]	@ (8000a24 <HAL_CAN_MspInit+0x130>)
 80009b2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80009b4:	4b1b      	ldr	r3, [pc, #108]	@ (8000a24 <HAL_CAN_MspInit+0x130>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	d10d      	bne.n	80009d8 <HAL_CAN_MspInit+0xe4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80009bc:	2300      	movs	r3, #0
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	4b19      	ldr	r3, [pc, #100]	@ (8000a28 <HAL_CAN_MspInit+0x134>)
 80009c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009c4:	4a18      	ldr	r2, [pc, #96]	@ (8000a28 <HAL_CAN_MspInit+0x134>)
 80009c6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80009ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80009cc:	4b16      	ldr	r3, [pc, #88]	@ (8000a28 <HAL_CAN_MspInit+0x134>)
 80009ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80009d4:	60fb      	str	r3, [r7, #12]
 80009d6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d8:	2300      	movs	r3, #0
 80009da:	60bb      	str	r3, [r7, #8]
 80009dc:	4b12      	ldr	r3, [pc, #72]	@ (8000a28 <HAL_CAN_MspInit+0x134>)
 80009de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e0:	4a11      	ldr	r2, [pc, #68]	@ (8000a28 <HAL_CAN_MspInit+0x134>)
 80009e2:	f043 0302 	orr.w	r3, r3, #2
 80009e6:	6313      	str	r3, [r2, #48]	@ 0x30
 80009e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000a28 <HAL_CAN_MspInit+0x134>)
 80009ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ec:	f003 0302 	and.w	r3, r3, #2
 80009f0:	60bb      	str	r3, [r7, #8]
 80009f2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_6;
 80009f4:	f44f 5382 	mov.w	r3, #4160	@ 0x1040
 80009f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fa:	2302      	movs	r3, #2
 80009fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a02:	2303      	movs	r3, #3
 8000a04:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000a06:	2309      	movs	r3, #9
 8000a08:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a0a:	f107 031c 	add.w	r3, r7, #28
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4808      	ldr	r0, [pc, #32]	@ (8000a34 <HAL_CAN_MspInit+0x140>)
 8000a12:	f002 f8c1 	bl	8002b98 <HAL_GPIO_Init>
}
 8000a16:	bf00      	nop
 8000a18:	3730      	adds	r7, #48	@ 0x30
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40006400 	.word	0x40006400
 8000a24:	20000150 	.word	0x20000150
 8000a28:	40023800 	.word	0x40023800
 8000a2c:	40020000 	.word	0x40020000
 8000a30:	40006800 	.word	0x40006800
 8000a34:	40020400 	.word	0x40020400

08000a38 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b08c      	sub	sp, #48	@ 0x30
 8000a3c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3e:	f107 031c 	add.w	r3, r7, #28
 8000a42:	2200      	movs	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	605a      	str	r2, [r3, #4]
 8000a48:	609a      	str	r2, [r3, #8]
 8000a4a:	60da      	str	r2, [r3, #12]
 8000a4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	61bb      	str	r3, [r7, #24]
 8000a52:	4b56      	ldr	r3, [pc, #344]	@ (8000bac <MX_GPIO_Init+0x174>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a56:	4a55      	ldr	r2, [pc, #340]	@ (8000bac <MX_GPIO_Init+0x174>)
 8000a58:	f043 0310 	orr.w	r3, r3, #16
 8000a5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a5e:	4b53      	ldr	r3, [pc, #332]	@ (8000bac <MX_GPIO_Init+0x174>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a62:	f003 0310 	and.w	r3, r3, #16
 8000a66:	61bb      	str	r3, [r7, #24]
 8000a68:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	617b      	str	r3, [r7, #20]
 8000a6e:	4b4f      	ldr	r3, [pc, #316]	@ (8000bac <MX_GPIO_Init+0x174>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a72:	4a4e      	ldr	r2, [pc, #312]	@ (8000bac <MX_GPIO_Init+0x174>)
 8000a74:	f043 0304 	orr.w	r3, r3, #4
 8000a78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a7a:	4b4c      	ldr	r3, [pc, #304]	@ (8000bac <MX_GPIO_Init+0x174>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7e:	f003 0304 	and.w	r3, r3, #4
 8000a82:	617b      	str	r3, [r7, #20]
 8000a84:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	613b      	str	r3, [r7, #16]
 8000a8a:	4b48      	ldr	r3, [pc, #288]	@ (8000bac <MX_GPIO_Init+0x174>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8e:	4a47      	ldr	r2, [pc, #284]	@ (8000bac <MX_GPIO_Init+0x174>)
 8000a90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a96:	4b45      	ldr	r3, [pc, #276]	@ (8000bac <MX_GPIO_Init+0x174>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a9e:	613b      	str	r3, [r7, #16]
 8000aa0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	60fb      	str	r3, [r7, #12]
 8000aa6:	4b41      	ldr	r3, [pc, #260]	@ (8000bac <MX_GPIO_Init+0x174>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aaa:	4a40      	ldr	r2, [pc, #256]	@ (8000bac <MX_GPIO_Init+0x174>)
 8000aac:	f043 0301 	orr.w	r3, r3, #1
 8000ab0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ab2:	4b3e      	ldr	r3, [pc, #248]	@ (8000bac <MX_GPIO_Init+0x174>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab6:	f003 0301 	and.w	r3, r3, #1
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	60bb      	str	r3, [r7, #8]
 8000ac2:	4b3a      	ldr	r3, [pc, #232]	@ (8000bac <MX_GPIO_Init+0x174>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac6:	4a39      	ldr	r2, [pc, #228]	@ (8000bac <MX_GPIO_Init+0x174>)
 8000ac8:	f043 0302 	orr.w	r3, r3, #2
 8000acc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ace:	4b37      	ldr	r3, [pc, #220]	@ (8000bac <MX_GPIO_Init+0x174>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad2:	f003 0302 	and.w	r3, r3, #2
 8000ad6:	60bb      	str	r3, [r7, #8]
 8000ad8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	607b      	str	r3, [r7, #4]
 8000ade:	4b33      	ldr	r3, [pc, #204]	@ (8000bac <MX_GPIO_Init+0x174>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae2:	4a32      	ldr	r2, [pc, #200]	@ (8000bac <MX_GPIO_Init+0x174>)
 8000ae4:	f043 0308 	orr.w	r3, r3, #8
 8000ae8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aea:	4b30      	ldr	r3, [pc, #192]	@ (8000bac <MX_GPIO_Init+0x174>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aee:	f003 0308 	and.w	r3, r3, #8
 8000af2:	607b      	str	r3, [r7, #4]
 8000af4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, BEEP_Pin|CCD_SI_Pin, GPIO_PIN_RESET);
 8000af6:	2200      	movs	r2, #0
 8000af8:	2105      	movs	r1, #5
 8000afa:	482d      	ldr	r0, [pc, #180]	@ (8000bb0 <MX_GPIO_Init+0x178>)
 8000afc:	f002 f9e8 	bl	8002ed0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000b00:	2200      	movs	r2, #0
 8000b02:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b06:	482b      	ldr	r0, [pc, #172]	@ (8000bb4 <MX_GPIO_Init+0x17c>)
 8000b08:	f002 f9e2 	bl	8002ed0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	2102      	movs	r1, #2
 8000b10:	4828      	ldr	r0, [pc, #160]	@ (8000bb4 <MX_GPIO_Init+0x17c>)
 8000b12:	f002 f9dd 	bl	8002ed0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BEEP_Pin;
 8000b16:	2304      	movs	r3, #4
 8000b18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b22:	2300      	movs	r3, #0
 8000b24:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(BEEP_GPIO_Port, &GPIO_InitStruct);
 8000b26:	f107 031c 	add.w	r3, r7, #28
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4820      	ldr	r0, [pc, #128]	@ (8000bb0 <MX_GPIO_Init+0x178>)
 8000b2e:	f002 f833 	bl	8002b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000b32:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b40:	2300      	movs	r3, #0
 8000b42:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000b44:	f107 031c 	add.w	r3, r7, #28
 8000b48:	4619      	mov	r1, r3
 8000b4a:	481a      	ldr	r0, [pc, #104]	@ (8000bb4 <MX_GPIO_Init+0x17c>)
 8000b4c:	f002 f824 	bl	8002b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8000b50:	2302      	movs	r3, #2
 8000b52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b54:	2301      	movs	r3, #1
 8000b56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b5c:	2303      	movs	r3, #3
 8000b5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8000b60:	f107 031c 	add.w	r3, r7, #28
 8000b64:	4619      	mov	r1, r3
 8000b66:	4813      	ldr	r0, [pc, #76]	@ (8000bb4 <MX_GPIO_Init+0x17c>)
 8000b68:	f002 f816 	bl	8002b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_Pin;
 8000b6c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000b70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b72:	2300      	movs	r3, #0
 8000b74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b76:	2301      	movs	r3, #1
 8000b78:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 8000b7a:	f107 031c 	add.w	r3, r7, #28
 8000b7e:	4619      	mov	r1, r3
 8000b80:	480d      	ldr	r0, [pc, #52]	@ (8000bb8 <MX_GPIO_Init+0x180>)
 8000b82:	f002 f809 	bl	8002b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CCD_SI_Pin;
 8000b86:	2301      	movs	r3, #1
 8000b88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b92:	2303      	movs	r3, #3
 8000b94:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CCD_SI_GPIO_Port, &GPIO_InitStruct);
 8000b96:	f107 031c 	add.w	r3, r7, #28
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4804      	ldr	r0, [pc, #16]	@ (8000bb0 <MX_GPIO_Init+0x178>)
 8000b9e:	f001 fffb 	bl	8002b98 <HAL_GPIO_Init>

}
 8000ba2:	bf00      	nop
 8000ba4:	3730      	adds	r7, #48	@ 0x30
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40023800 	.word	0x40023800
 8000bb0:	40021000 	.word	0x40021000
 8000bb4:	40020800 	.word	0x40020800
 8000bb8:	40020000 	.word	0x40020000

08000bbc <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000bc0:	4b12      	ldr	r3, [pc, #72]	@ (8000c0c <MX_I2C1_Init+0x50>)
 8000bc2:	4a13      	ldr	r2, [pc, #76]	@ (8000c10 <MX_I2C1_Init+0x54>)
 8000bc4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000bc6:	4b11      	ldr	r3, [pc, #68]	@ (8000c0c <MX_I2C1_Init+0x50>)
 8000bc8:	4a12      	ldr	r2, [pc, #72]	@ (8000c14 <MX_I2C1_Init+0x58>)
 8000bca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000bcc:	4b0f      	ldr	r3, [pc, #60]	@ (8000c0c <MX_I2C1_Init+0x50>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000bd2:	4b0e      	ldr	r3, [pc, #56]	@ (8000c0c <MX_I2C1_Init+0x50>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bd8:	4b0c      	ldr	r3, [pc, #48]	@ (8000c0c <MX_I2C1_Init+0x50>)
 8000bda:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000bde:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000be0:	4b0a      	ldr	r3, [pc, #40]	@ (8000c0c <MX_I2C1_Init+0x50>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000be6:	4b09      	ldr	r3, [pc, #36]	@ (8000c0c <MX_I2C1_Init+0x50>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bec:	4b07      	ldr	r3, [pc, #28]	@ (8000c0c <MX_I2C1_Init+0x50>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bf2:	4b06      	ldr	r3, [pc, #24]	@ (8000c0c <MX_I2C1_Init+0x50>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bf8:	4804      	ldr	r0, [pc, #16]	@ (8000c0c <MX_I2C1_Init+0x50>)
 8000bfa:	f002 f983 	bl	8002f04 <HAL_I2C_Init>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c04:	f000 f956 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c08:	bf00      	nop
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	20000154 	.word	0x20000154
 8000c10:	40005400 	.word	0x40005400
 8000c14:	000186a0 	.word	0x000186a0

08000c18 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000c1c:	4b12      	ldr	r3, [pc, #72]	@ (8000c68 <MX_I2C2_Init+0x50>)
 8000c1e:	4a13      	ldr	r2, [pc, #76]	@ (8000c6c <MX_I2C2_Init+0x54>)
 8000c20:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000c22:	4b11      	ldr	r3, [pc, #68]	@ (8000c68 <MX_I2C2_Init+0x50>)
 8000c24:	4a12      	ldr	r2, [pc, #72]	@ (8000c70 <MX_I2C2_Init+0x58>)
 8000c26:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c28:	4b0f      	ldr	r3, [pc, #60]	@ (8000c68 <MX_I2C2_Init+0x50>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000c2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c68 <MX_I2C2_Init+0x50>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c34:	4b0c      	ldr	r3, [pc, #48]	@ (8000c68 <MX_I2C2_Init+0x50>)
 8000c36:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000c3a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c3c:	4b0a      	ldr	r3, [pc, #40]	@ (8000c68 <MX_I2C2_Init+0x50>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000c42:	4b09      	ldr	r3, [pc, #36]	@ (8000c68 <MX_I2C2_Init+0x50>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c48:	4b07      	ldr	r3, [pc, #28]	@ (8000c68 <MX_I2C2_Init+0x50>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c4e:	4b06      	ldr	r3, [pc, #24]	@ (8000c68 <MX_I2C2_Init+0x50>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000c54:	4804      	ldr	r0, [pc, #16]	@ (8000c68 <MX_I2C2_Init+0x50>)
 8000c56:	f002 f955 	bl	8002f04 <HAL_I2C_Init>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000c60:	f000 f928 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000c64:	bf00      	nop
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	200001a8 	.word	0x200001a8
 8000c6c:	40005800 	.word	0x40005800
 8000c70:	000186a0 	.word	0x000186a0

08000c74 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b08c      	sub	sp, #48	@ 0x30
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7c:	f107 031c 	add.w	r3, r7, #28
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	605a      	str	r2, [r3, #4]
 8000c86:	609a      	str	r2, [r3, #8]
 8000c88:	60da      	str	r2, [r3, #12]
 8000c8a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a33      	ldr	r2, [pc, #204]	@ (8000d60 <HAL_I2C_MspInit+0xec>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d12d      	bne.n	8000cf2 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	61bb      	str	r3, [r7, #24]
 8000c9a:	4b32      	ldr	r3, [pc, #200]	@ (8000d64 <HAL_I2C_MspInit+0xf0>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9e:	4a31      	ldr	r2, [pc, #196]	@ (8000d64 <HAL_I2C_MspInit+0xf0>)
 8000ca0:	f043 0302 	orr.w	r3, r3, #2
 8000ca4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ca6:	4b2f      	ldr	r3, [pc, #188]	@ (8000d64 <HAL_I2C_MspInit+0xf0>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000caa:	f003 0302 	and.w	r3, r3, #2
 8000cae:	61bb      	str	r3, [r7, #24]
 8000cb0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000cb2:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000cb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cb8:	2312      	movs	r3, #18
 8000cba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc0:	2303      	movs	r3, #3
 8000cc2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cc4:	2304      	movs	r3, #4
 8000cc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc8:	f107 031c 	add.w	r3, r7, #28
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4826      	ldr	r0, [pc, #152]	@ (8000d68 <HAL_I2C_MspInit+0xf4>)
 8000cd0:	f001 ff62 	bl	8002b98 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	617b      	str	r3, [r7, #20]
 8000cd8:	4b22      	ldr	r3, [pc, #136]	@ (8000d64 <HAL_I2C_MspInit+0xf0>)
 8000cda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cdc:	4a21      	ldr	r2, [pc, #132]	@ (8000d64 <HAL_I2C_MspInit+0xf0>)
 8000cde:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ce2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ce4:	4b1f      	ldr	r3, [pc, #124]	@ (8000d64 <HAL_I2C_MspInit+0xf0>)
 8000ce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ce8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000cec:	617b      	str	r3, [r7, #20]
 8000cee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000cf0:	e031      	b.n	8000d56 <HAL_I2C_MspInit+0xe2>
  else if(i2cHandle->Instance==I2C2)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4a1d      	ldr	r2, [pc, #116]	@ (8000d6c <HAL_I2C_MspInit+0xf8>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d12c      	bne.n	8000d56 <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	613b      	str	r3, [r7, #16]
 8000d00:	4b18      	ldr	r3, [pc, #96]	@ (8000d64 <HAL_I2C_MspInit+0xf0>)
 8000d02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d04:	4a17      	ldr	r2, [pc, #92]	@ (8000d64 <HAL_I2C_MspInit+0xf0>)
 8000d06:	f043 0302 	orr.w	r3, r3, #2
 8000d0a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d0c:	4b15      	ldr	r3, [pc, #84]	@ (8000d64 <HAL_I2C_MspInit+0xf0>)
 8000d0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d10:	f003 0302 	and.w	r3, r3, #2
 8000d14:	613b      	str	r3, [r7, #16]
 8000d16:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000d18:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000d1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d1e:	2312      	movs	r3, #18
 8000d20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d26:	2303      	movs	r3, #3
 8000d28:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000d2a:	2304      	movs	r3, #4
 8000d2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d2e:	f107 031c 	add.w	r3, r7, #28
 8000d32:	4619      	mov	r1, r3
 8000d34:	480c      	ldr	r0, [pc, #48]	@ (8000d68 <HAL_I2C_MspInit+0xf4>)
 8000d36:	f001 ff2f 	bl	8002b98 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	60fb      	str	r3, [r7, #12]
 8000d3e:	4b09      	ldr	r3, [pc, #36]	@ (8000d64 <HAL_I2C_MspInit+0xf0>)
 8000d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d42:	4a08      	ldr	r2, [pc, #32]	@ (8000d64 <HAL_I2C_MspInit+0xf0>)
 8000d44:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000d48:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d4a:	4b06      	ldr	r3, [pc, #24]	@ (8000d64 <HAL_I2C_MspInit+0xf0>)
 8000d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	68fb      	ldr	r3, [r7, #12]
}
 8000d56:	bf00      	nop
 8000d58:	3730      	adds	r7, #48	@ 0x30
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	40005400 	.word	0x40005400
 8000d64:	40023800 	.word	0x40023800
 8000d68:	40020400 	.word	0x40020400
 8000d6c:	40005800 	.word	0x40005800

08000d70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d74:	f001 f99c 	bl	80020b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d78:	f000 f832 	bl	8000de0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d7c:	f7ff fe5c 	bl	8000a38 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000d80:	f7ff fb9a 	bl	80004b8 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000d84:	f7ff fbea 	bl	800055c <MX_ADC2_Init>
  MX_CAN1_Init();
 8000d88:	f7ff fd4c 	bl	8000824 <MX_CAN1_Init>
  MX_CAN2_Init();
 8000d8c:	f7ff fd7e 	bl	800088c <MX_CAN2_Init>
  MX_I2C1_Init();
 8000d90:	f7ff ff14 	bl	8000bbc <MX_I2C1_Init>
  MX_SPI2_Init();
 8000d94:	f000 f894 	bl	8000ec0 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000d98:	f000 f9b2 	bl	8001100 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000d9c:	f000 fa7a 	bl	8001294 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000da0:	f000 facc 	bl	800133c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000da4:	f000 fb1e 	bl	80013e4 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000da8:	f000 fb70 	bl	800148c <MX_TIM5_Init>
  MX_TIM8_Init();
 8000dac:	f000 fbc2 	bl	8001534 <MX_TIM8_Init>
  MX_TIM9_Init();
 8000db0:	f000 fc8a 	bl	80016c8 <MX_TIM9_Init>
  MX_TIM12_Init();
 8000db4:	f000 fd44 	bl	8001840 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 8000db8:	f001 f816 	bl	8001de8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000dbc:	f001 f83e 	bl	8001e3c <MX_USART2_UART_Init>
  MX_ADC3_Init();
 8000dc0:	f7ff fc1e 	bl	8000600 <MX_ADC3_Init>
  MX_I2C2_Init();
 8000dc4:	f7ff ff28 	bl	8000c18 <MX_I2C2_Init>
  MX_TIM11_Init();
 8000dc8:	f000 fcec 	bl	80017a4 <MX_TIM11_Init>
  MX_USART3_UART_Init();
 8000dcc:	f001 f860 	bl	8001e90 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8000dd0:	213c      	movs	r1, #60	@ 0x3c
 8000dd2:	4802      	ldr	r0, [pc, #8]	@ (8000ddc <main+0x6c>)
 8000dd4:	f003 f849 	bl	8003e6a <HAL_TIM_Encoder_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000dd8:	bf00      	nop
 8000dda:	e7fd      	b.n	8000dd8 <main+0x68>
 8000ddc:	2000029c 	.word	0x2000029c

08000de0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b094      	sub	sp, #80	@ 0x50
 8000de4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000de6:	f107 0320 	add.w	r3, r7, #32
 8000dea:	2230      	movs	r2, #48	@ 0x30
 8000dec:	2100      	movs	r1, #0
 8000dee:	4618      	mov	r0, r3
 8000df0:	f004 fe94 	bl	8005b1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000df4:	f107 030c 	add.w	r3, r7, #12
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
 8000e02:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e04:	2300      	movs	r3, #0
 8000e06:	60bb      	str	r3, [r7, #8]
 8000e08:	4b28      	ldr	r3, [pc, #160]	@ (8000eac <SystemClock_Config+0xcc>)
 8000e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e0c:	4a27      	ldr	r2, [pc, #156]	@ (8000eac <SystemClock_Config+0xcc>)
 8000e0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e12:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e14:	4b25      	ldr	r3, [pc, #148]	@ (8000eac <SystemClock_Config+0xcc>)
 8000e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e1c:	60bb      	str	r3, [r7, #8]
 8000e1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e20:	2300      	movs	r3, #0
 8000e22:	607b      	str	r3, [r7, #4]
 8000e24:	4b22      	ldr	r3, [pc, #136]	@ (8000eb0 <SystemClock_Config+0xd0>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a21      	ldr	r2, [pc, #132]	@ (8000eb0 <SystemClock_Config+0xd0>)
 8000e2a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e2e:	6013      	str	r3, [r2, #0]
 8000e30:	4b1f      	ldr	r3, [pc, #124]	@ (8000eb0 <SystemClock_Config+0xd0>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e38:	607b      	str	r3, [r7, #4]
 8000e3a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e40:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e44:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e46:	2302      	movs	r3, #2
 8000e48:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e4a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000e4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e50:	2304      	movs	r3, #4
 8000e52:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000e54:	23a8      	movs	r3, #168	@ 0xa8
 8000e56:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e5c:	2304      	movs	r3, #4
 8000e5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e60:	f107 0320 	add.w	r3, r7, #32
 8000e64:	4618      	mov	r0, r3
 8000e66:	f002 f991 	bl	800318c <HAL_RCC_OscConfig>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e70:	f000 f820 	bl	8000eb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e74:	230f      	movs	r3, #15
 8000e76:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e78:	2302      	movs	r3, #2
 8000e7a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e80:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000e84:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e86:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e8a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e8c:	f107 030c 	add.w	r3, r7, #12
 8000e90:	2105      	movs	r1, #5
 8000e92:	4618      	mov	r0, r3
 8000e94:	f002 fbf2 	bl	800367c <HAL_RCC_ClockConfig>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000e9e:	f000 f809 	bl	8000eb4 <Error_Handler>
  }
}
 8000ea2:	bf00      	nop
 8000ea4:	3750      	adds	r7, #80	@ 0x50
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40023800 	.word	0x40023800
 8000eb0:	40007000 	.word	0x40007000

08000eb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eb8:	b672      	cpsid	i
}
 8000eba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ebc:	bf00      	nop
 8000ebe:	e7fd      	b.n	8000ebc <Error_Handler+0x8>

08000ec0 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000ec4:	4b17      	ldr	r3, [pc, #92]	@ (8000f24 <MX_SPI2_Init+0x64>)
 8000ec6:	4a18      	ldr	r2, [pc, #96]	@ (8000f28 <MX_SPI2_Init+0x68>)
 8000ec8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000eca:	4b16      	ldr	r3, [pc, #88]	@ (8000f24 <MX_SPI2_Init+0x64>)
 8000ecc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000ed0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000ed2:	4b14      	ldr	r3, [pc, #80]	@ (8000f24 <MX_SPI2_Init+0x64>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ed8:	4b12      	ldr	r3, [pc, #72]	@ (8000f24 <MX_SPI2_Init+0x64>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ede:	4b11      	ldr	r3, [pc, #68]	@ (8000f24 <MX_SPI2_Init+0x64>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ee4:	4b0f      	ldr	r3, [pc, #60]	@ (8000f24 <MX_SPI2_Init+0x64>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000eea:	4b0e      	ldr	r3, [pc, #56]	@ (8000f24 <MX_SPI2_Init+0x64>)
 8000eec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ef0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ef2:	4b0c      	ldr	r3, [pc, #48]	@ (8000f24 <MX_SPI2_Init+0x64>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ef8:	4b0a      	ldr	r3, [pc, #40]	@ (8000f24 <MX_SPI2_Init+0x64>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000efe:	4b09      	ldr	r3, [pc, #36]	@ (8000f24 <MX_SPI2_Init+0x64>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f04:	4b07      	ldr	r3, [pc, #28]	@ (8000f24 <MX_SPI2_Init+0x64>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000f0a:	4b06      	ldr	r3, [pc, #24]	@ (8000f24 <MX_SPI2_Init+0x64>)
 8000f0c:	220a      	movs	r2, #10
 8000f0e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000f10:	4804      	ldr	r0, [pc, #16]	@ (8000f24 <MX_SPI2_Init+0x64>)
 8000f12:	f002 fdd3 	bl	8003abc <HAL_SPI_Init>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000f1c:	f7ff ffca 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000f20:	bf00      	nop
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	200001fc 	.word	0x200001fc
 8000f28:	40003800 	.word	0x40003800

08000f2c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b08a      	sub	sp, #40	@ 0x28
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f34:	f107 0314 	add.w	r3, r7, #20
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	605a      	str	r2, [r3, #4]
 8000f3e:	609a      	str	r2, [r3, #8]
 8000f40:	60da      	str	r2, [r3, #12]
 8000f42:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a28      	ldr	r2, [pc, #160]	@ (8000fec <HAL_SPI_MspInit+0xc0>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d14a      	bne.n	8000fe4 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	613b      	str	r3, [r7, #16]
 8000f52:	4b27      	ldr	r3, [pc, #156]	@ (8000ff0 <HAL_SPI_MspInit+0xc4>)
 8000f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f56:	4a26      	ldr	r2, [pc, #152]	@ (8000ff0 <HAL_SPI_MspInit+0xc4>)
 8000f58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f5e:	4b24      	ldr	r3, [pc, #144]	@ (8000ff0 <HAL_SPI_MspInit+0xc4>)
 8000f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f66:	613b      	str	r3, [r7, #16]
 8000f68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	60fb      	str	r3, [r7, #12]
 8000f6e:	4b20      	ldr	r3, [pc, #128]	@ (8000ff0 <HAL_SPI_MspInit+0xc4>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f72:	4a1f      	ldr	r2, [pc, #124]	@ (8000ff0 <HAL_SPI_MspInit+0xc4>)
 8000f74:	f043 0304 	orr.w	r3, r3, #4
 8000f78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f7a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ff0 <HAL_SPI_MspInit+0xc4>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7e:	f003 0304 	and.w	r3, r3, #4
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	60bb      	str	r3, [r7, #8]
 8000f8a:	4b19      	ldr	r3, [pc, #100]	@ (8000ff0 <HAL_SPI_MspInit+0xc4>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8e:	4a18      	ldr	r2, [pc, #96]	@ (8000ff0 <HAL_SPI_MspInit+0xc4>)
 8000f90:	f043 0302 	orr.w	r3, r3, #2
 8000f94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f96:	4b16      	ldr	r3, [pc, #88]	@ (8000ff0 <HAL_SPI_MspInit+0xc4>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9a:	f003 0302 	and.w	r3, r3, #2
 8000f9e:	60bb      	str	r3, [r7, #8]
 8000fa0:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000fa2:	230c      	movs	r3, #12
 8000fa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fae:	2303      	movs	r3, #3
 8000fb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000fb2:	2305      	movs	r3, #5
 8000fb4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fb6:	f107 0314 	add.w	r3, r7, #20
 8000fba:	4619      	mov	r1, r3
 8000fbc:	480d      	ldr	r0, [pc, #52]	@ (8000ff4 <HAL_SPI_MspInit+0xc8>)
 8000fbe:	f001 fdeb 	bl	8002b98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000fc2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd0:	2303      	movs	r3, #3
 8000fd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000fd4:	2305      	movs	r3, #5
 8000fd6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd8:	f107 0314 	add.w	r3, r7, #20
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4806      	ldr	r0, [pc, #24]	@ (8000ff8 <HAL_SPI_MspInit+0xcc>)
 8000fe0:	f001 fdda 	bl	8002b98 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000fe4:	bf00      	nop
 8000fe6:	3728      	adds	r7, #40	@ 0x28
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	40003800 	.word	0x40003800
 8000ff0:	40023800 	.word	0x40023800
 8000ff4:	40020800 	.word	0x40020800
 8000ff8:	40020400 	.word	0x40020400

08000ffc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	607b      	str	r3, [r7, #4]
 8001006:	4b10      	ldr	r3, [pc, #64]	@ (8001048 <HAL_MspInit+0x4c>)
 8001008:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800100a:	4a0f      	ldr	r2, [pc, #60]	@ (8001048 <HAL_MspInit+0x4c>)
 800100c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001010:	6453      	str	r3, [r2, #68]	@ 0x44
 8001012:	4b0d      	ldr	r3, [pc, #52]	@ (8001048 <HAL_MspInit+0x4c>)
 8001014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001016:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800101a:	607b      	str	r3, [r7, #4]
 800101c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	603b      	str	r3, [r7, #0]
 8001022:	4b09      	ldr	r3, [pc, #36]	@ (8001048 <HAL_MspInit+0x4c>)
 8001024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001026:	4a08      	ldr	r2, [pc, #32]	@ (8001048 <HAL_MspInit+0x4c>)
 8001028:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800102c:	6413      	str	r3, [r2, #64]	@ 0x40
 800102e:	4b06      	ldr	r3, [pc, #24]	@ (8001048 <HAL_MspInit+0x4c>)
 8001030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001032:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001036:	603b      	str	r3, [r7, #0]
 8001038:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800103a:	bf00      	nop
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	40023800 	.word	0x40023800

0800104c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001050:	bf00      	nop
 8001052:	e7fd      	b.n	8001050 <NMI_Handler+0x4>

08001054 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001058:	bf00      	nop
 800105a:	e7fd      	b.n	8001058 <HardFault_Handler+0x4>

0800105c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001060:	bf00      	nop
 8001062:	e7fd      	b.n	8001060 <MemManage_Handler+0x4>

08001064 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001068:	bf00      	nop
 800106a:	e7fd      	b.n	8001068 <BusFault_Handler+0x4>

0800106c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001070:	bf00      	nop
 8001072:	e7fd      	b.n	8001070 <UsageFault_Handler+0x4>

08001074 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001078:	bf00      	nop
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr

08001082 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001082:	b480      	push	{r7}
 8001084:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001086:	bf00      	nop
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001094:	bf00      	nop
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr

0800109e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010a2:	f001 f857 	bl	8002154 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
	...

080010ac <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80010b0:	4803      	ldr	r0, [pc, #12]	@ (80010c0 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 80010b2:	f002 ff68 	bl	8003f86 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 80010b6:	4803      	ldr	r0, [pc, #12]	@ (80010c4 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 80010b8:	f002 ff65 	bl	8003f86 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	20000254 	.word	0x20000254
 80010c4:	2000044c 	.word	0x2000044c

080010c8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80010cc:	4802      	ldr	r0, [pc, #8]	@ (80010d8 <USART1_IRQHandler+0x10>)
 80010ce:	f003 fe5f 	bl	8004d90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80010d2:	bf00      	nop
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	200004dc 	.word	0x200004dc

080010dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010e0:	4b06      	ldr	r3, [pc, #24]	@ (80010fc <SystemInit+0x20>)
 80010e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010e6:	4a05      	ldr	r2, [pc, #20]	@ (80010fc <SystemInit+0x20>)
 80010e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010f0:	bf00      	nop
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	e000ed00 	.word	0xe000ed00

08001100 <MX_TIM1_Init>:
TIM_HandleTypeDef htim11;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b096      	sub	sp, #88	@ 0x58
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001106:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	605a      	str	r2, [r3, #4]
 8001110:	609a      	str	r2, [r3, #8]
 8001112:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001114:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800111e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	605a      	str	r2, [r3, #4]
 8001128:	609a      	str	r2, [r3, #8]
 800112a:	60da      	str	r2, [r3, #12]
 800112c:	611a      	str	r2, [r3, #16]
 800112e:	615a      	str	r2, [r3, #20]
 8001130:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001132:	1d3b      	adds	r3, r7, #4
 8001134:	2220      	movs	r2, #32
 8001136:	2100      	movs	r1, #0
 8001138:	4618      	mov	r0, r3
 800113a:	f004 fcef 	bl	8005b1c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800113e:	4b53      	ldr	r3, [pc, #332]	@ (800128c <MX_TIM1_Init+0x18c>)
 8001140:	4a53      	ldr	r2, [pc, #332]	@ (8001290 <MX_TIM1_Init+0x190>)
 8001142:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001144:	4b51      	ldr	r3, [pc, #324]	@ (800128c <MX_TIM1_Init+0x18c>)
 8001146:	2200      	movs	r2, #0
 8001148:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800114a:	4b50      	ldr	r3, [pc, #320]	@ (800128c <MX_TIM1_Init+0x18c>)
 800114c:	2200      	movs	r2, #0
 800114e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4096 - 1;
 8001150:	4b4e      	ldr	r3, [pc, #312]	@ (800128c <MX_TIM1_Init+0x18c>)
 8001152:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001156:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001158:	4b4c      	ldr	r3, [pc, #304]	@ (800128c <MX_TIM1_Init+0x18c>)
 800115a:	2200      	movs	r2, #0
 800115c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800115e:	4b4b      	ldr	r3, [pc, #300]	@ (800128c <MX_TIM1_Init+0x18c>)
 8001160:	2200      	movs	r2, #0
 8001162:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001164:	4b49      	ldr	r3, [pc, #292]	@ (800128c <MX_TIM1_Init+0x18c>)
 8001166:	2200      	movs	r2, #0
 8001168:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800116a:	4848      	ldr	r0, [pc, #288]	@ (800128c <MX_TIM1_Init+0x18c>)
 800116c:	f002 fd2f 	bl	8003bce <HAL_TIM_Base_Init>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001176:	f7ff fe9d 	bl	8000eb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800117a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800117e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001180:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001184:	4619      	mov	r1, r3
 8001186:	4841      	ldr	r0, [pc, #260]	@ (800128c <MX_TIM1_Init+0x18c>)
 8001188:	f003 f8c8 	bl	800431c <HAL_TIM_ConfigClockSource>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001192:	f7ff fe8f 	bl	8000eb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001196:	483d      	ldr	r0, [pc, #244]	@ (800128c <MX_TIM1_Init+0x18c>)
 8001198:	f002 fd68 	bl	8003c6c <HAL_TIM_PWM_Init>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80011a2:	f7ff fe87 	bl	8000eb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011a6:	2300      	movs	r3, #0
 80011a8:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011aa:	2300      	movs	r3, #0
 80011ac:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011ae:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80011b2:	4619      	mov	r1, r3
 80011b4:	4835      	ldr	r0, [pc, #212]	@ (800128c <MX_TIM1_Init+0x18c>)
 80011b6:	f003 fcbb 	bl	8004b30 <HAL_TIMEx_MasterConfigSynchronization>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80011c0:	f7ff fe78 	bl	8000eb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011c4:	2360      	movs	r3, #96	@ 0x60
 80011c6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80011c8:	2300      	movs	r3, #0
 80011ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011cc:	2300      	movs	r3, #0
 80011ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011d0:	2300      	movs	r3, #0
 80011d2:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011d4:	2300      	movs	r3, #0
 80011d6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011d8:	2300      	movs	r3, #0
 80011da:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011dc:	2300      	movs	r3, #0
 80011de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011e4:	2200      	movs	r2, #0
 80011e6:	4619      	mov	r1, r3
 80011e8:	4828      	ldr	r0, [pc, #160]	@ (800128c <MX_TIM1_Init+0x18c>)
 80011ea:	f002 ffd5 	bl	8004198 <HAL_TIM_PWM_ConfigChannel>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80011f4:	f7ff fe5e 	bl	8000eb4 <Error_Handler>
  }
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80011f8:	2302      	movs	r3, #2
 80011fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80011fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001200:	2204      	movs	r2, #4
 8001202:	4619      	mov	r1, r3
 8001204:	4821      	ldr	r0, [pc, #132]	@ (800128c <MX_TIM1_Init+0x18c>)
 8001206:	f002 ffc7 	bl	8004198 <HAL_TIM_PWM_ConfigChannel>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8001210:	f7ff fe50 	bl	8000eb4 <Error_Handler>
  }
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001214:	2300      	movs	r3, #0
 8001216:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001218:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800121c:	2208      	movs	r2, #8
 800121e:	4619      	mov	r1, r3
 8001220:	481a      	ldr	r0, [pc, #104]	@ (800128c <MX_TIM1_Init+0x18c>)
 8001222:	f002 ffb9 	bl	8004198 <HAL_TIM_PWM_ConfigChannel>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 800122c:	f7ff fe42 	bl	8000eb4 <Error_Handler>
  }
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001230:	2302      	movs	r3, #2
 8001232:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001234:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001238:	220c      	movs	r2, #12
 800123a:	4619      	mov	r1, r3
 800123c:	4813      	ldr	r0, [pc, #76]	@ (800128c <MX_TIM1_Init+0x18c>)
 800123e:	f002 ffab 	bl	8004198 <HAL_TIM_PWM_ConfigChannel>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_TIM1_Init+0x14c>
  {
    Error_Handler();
 8001248:	f7ff fe34 	bl	8000eb4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800124c:	2300      	movs	r3, #0
 800124e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001250:	2300      	movs	r3, #0
 8001252:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001254:	2300      	movs	r3, #0
 8001256:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001258:	2300      	movs	r3, #0
 800125a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800125c:	2300      	movs	r3, #0
 800125e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001260:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001264:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001266:	2300      	movs	r3, #0
 8001268:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800126a:	1d3b      	adds	r3, r7, #4
 800126c:	4619      	mov	r1, r3
 800126e:	4807      	ldr	r0, [pc, #28]	@ (800128c <MX_TIM1_Init+0x18c>)
 8001270:	f003 fcda 	bl	8004c28 <HAL_TIMEx_ConfigBreakDeadTime>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_TIM1_Init+0x17e>
  {
    Error_Handler();
 800127a:	f7ff fe1b 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800127e:	4803      	ldr	r0, [pc, #12]	@ (800128c <MX_TIM1_Init+0x18c>)
 8001280:	f000 fcd8 	bl	8001c34 <HAL_TIM_MspPostInit>

}
 8001284:	bf00      	nop
 8001286:	3758      	adds	r7, #88	@ 0x58
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	20000254 	.word	0x20000254
 8001290:	40010000 	.word	0x40010000

08001294 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b08c      	sub	sp, #48	@ 0x30
 8001298:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800129a:	f107 030c 	add.w	r3, r7, #12
 800129e:	2224      	movs	r2, #36	@ 0x24
 80012a0:	2100      	movs	r1, #0
 80012a2:	4618      	mov	r0, r3
 80012a4:	f004 fc3a 	bl	8005b1c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012a8:	1d3b      	adds	r3, r7, #4
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]
 80012ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012b0:	4b21      	ldr	r3, [pc, #132]	@ (8001338 <MX_TIM2_Init+0xa4>)
 80012b2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012b6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80012b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001338 <MX_TIM2_Init+0xa4>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012be:	4b1e      	ldr	r3, [pc, #120]	@ (8001338 <MX_TIM2_Init+0xa4>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65536;
 80012c4:	4b1c      	ldr	r3, [pc, #112]	@ (8001338 <MX_TIM2_Init+0xa4>)
 80012c6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80012ca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001338 <MX_TIM2_Init+0xa4>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012d2:	4b19      	ldr	r3, [pc, #100]	@ (8001338 <MX_TIM2_Init+0xa4>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80012d8:	2301      	movs	r3, #1
 80012da:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80012dc:	2300      	movs	r3, #0
 80012de:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80012e0:	2301      	movs	r3, #1
 80012e2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80012e4:	2300      	movs	r3, #0
 80012e6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80012e8:	2300      	movs	r3, #0
 80012ea:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80012ec:	2300      	movs	r3, #0
 80012ee:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80012f0:	2301      	movs	r3, #1
 80012f2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80012f4:	2300      	movs	r3, #0
 80012f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80012f8:	2300      	movs	r3, #0
 80012fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80012fc:	f107 030c 	add.w	r3, r7, #12
 8001300:	4619      	mov	r1, r3
 8001302:	480d      	ldr	r0, [pc, #52]	@ (8001338 <MX_TIM2_Init+0xa4>)
 8001304:	f002 fd0b 	bl	8003d1e <HAL_TIM_Encoder_Init>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800130e:	f7ff fdd1 	bl	8000eb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001312:	2300      	movs	r3, #0
 8001314:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001316:	2300      	movs	r3, #0
 8001318:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800131a:	1d3b      	adds	r3, r7, #4
 800131c:	4619      	mov	r1, r3
 800131e:	4806      	ldr	r0, [pc, #24]	@ (8001338 <MX_TIM2_Init+0xa4>)
 8001320:	f003 fc06 	bl	8004b30 <HAL_TIMEx_MasterConfigSynchronization>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800132a:	f7ff fdc3 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800132e:	bf00      	nop
 8001330:	3730      	adds	r7, #48	@ 0x30
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	2000029c 	.word	0x2000029c

0800133c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b08c      	sub	sp, #48	@ 0x30
 8001340:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001342:	f107 030c 	add.w	r3, r7, #12
 8001346:	2224      	movs	r2, #36	@ 0x24
 8001348:	2100      	movs	r1, #0
 800134a:	4618      	mov	r0, r3
 800134c:	f004 fbe6 	bl	8005b1c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001350:	1d3b      	adds	r3, r7, #4
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001358:	4b20      	ldr	r3, [pc, #128]	@ (80013dc <MX_TIM3_Init+0xa0>)
 800135a:	4a21      	ldr	r2, [pc, #132]	@ (80013e0 <MX_TIM3_Init+0xa4>)
 800135c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800135e:	4b1f      	ldr	r3, [pc, #124]	@ (80013dc <MX_TIM3_Init+0xa0>)
 8001360:	2200      	movs	r2, #0
 8001362:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001364:	4b1d      	ldr	r3, [pc, #116]	@ (80013dc <MX_TIM3_Init+0xa0>)
 8001366:	2200      	movs	r2, #0
 8001368:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800136a:	4b1c      	ldr	r3, [pc, #112]	@ (80013dc <MX_TIM3_Init+0xa0>)
 800136c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001370:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001372:	4b1a      	ldr	r3, [pc, #104]	@ (80013dc <MX_TIM3_Init+0xa0>)
 8001374:	2200      	movs	r2, #0
 8001376:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001378:	4b18      	ldr	r3, [pc, #96]	@ (80013dc <MX_TIM3_Init+0xa0>)
 800137a:	2200      	movs	r2, #0
 800137c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800137e:	2303      	movs	r3, #3
 8001380:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001382:	2300      	movs	r3, #0
 8001384:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001386:	2301      	movs	r3, #1
 8001388:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800138a:	2300      	movs	r3, #0
 800138c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800138e:	2300      	movs	r3, #0
 8001390:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001392:	2300      	movs	r3, #0
 8001394:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001396:	2301      	movs	r3, #1
 8001398:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800139a:	2300      	movs	r3, #0
 800139c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800139e:	2300      	movs	r3, #0
 80013a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80013a2:	f107 030c 	add.w	r3, r7, #12
 80013a6:	4619      	mov	r1, r3
 80013a8:	480c      	ldr	r0, [pc, #48]	@ (80013dc <MX_TIM3_Init+0xa0>)
 80013aa:	f002 fcb8 	bl	8003d1e <HAL_TIM_Encoder_Init>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80013b4:	f7ff fd7e 	bl	8000eb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013b8:	2300      	movs	r3, #0
 80013ba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013bc:	2300      	movs	r3, #0
 80013be:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013c0:	1d3b      	adds	r3, r7, #4
 80013c2:	4619      	mov	r1, r3
 80013c4:	4805      	ldr	r0, [pc, #20]	@ (80013dc <MX_TIM3_Init+0xa0>)
 80013c6:	f003 fbb3 	bl	8004b30 <HAL_TIMEx_MasterConfigSynchronization>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80013d0:	f7ff fd70 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80013d4:	bf00      	nop
 80013d6:	3730      	adds	r7, #48	@ 0x30
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	200002e4 	.word	0x200002e4
 80013e0:	40000400 	.word	0x40000400

080013e4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b08c      	sub	sp, #48	@ 0x30
 80013e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80013ea:	f107 030c 	add.w	r3, r7, #12
 80013ee:	2224      	movs	r2, #36	@ 0x24
 80013f0:	2100      	movs	r1, #0
 80013f2:	4618      	mov	r0, r3
 80013f4:	f004 fb92 	bl	8005b1c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013f8:	1d3b      	adds	r3, r7, #4
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001400:	4b20      	ldr	r3, [pc, #128]	@ (8001484 <MX_TIM4_Init+0xa0>)
 8001402:	4a21      	ldr	r2, [pc, #132]	@ (8001488 <MX_TIM4_Init+0xa4>)
 8001404:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001406:	4b1f      	ldr	r3, [pc, #124]	@ (8001484 <MX_TIM4_Init+0xa0>)
 8001408:	2200      	movs	r2, #0
 800140a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800140c:	4b1d      	ldr	r3, [pc, #116]	@ (8001484 <MX_TIM4_Init+0xa0>)
 800140e:	2200      	movs	r2, #0
 8001410:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001412:	4b1c      	ldr	r3, [pc, #112]	@ (8001484 <MX_TIM4_Init+0xa0>)
 8001414:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001418:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800141a:	4b1a      	ldr	r3, [pc, #104]	@ (8001484 <MX_TIM4_Init+0xa0>)
 800141c:	2200      	movs	r2, #0
 800141e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001420:	4b18      	ldr	r3, [pc, #96]	@ (8001484 <MX_TIM4_Init+0xa0>)
 8001422:	2200      	movs	r2, #0
 8001424:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001426:	2303      	movs	r3, #3
 8001428:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800142a:	2300      	movs	r3, #0
 800142c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800142e:	2301      	movs	r3, #1
 8001430:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001432:	2300      	movs	r3, #0
 8001434:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001436:	2300      	movs	r3, #0
 8001438:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800143a:	2300      	movs	r3, #0
 800143c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800143e:	2301      	movs	r3, #1
 8001440:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001442:	2300      	movs	r3, #0
 8001444:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001446:	2300      	movs	r3, #0
 8001448:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800144a:	f107 030c 	add.w	r3, r7, #12
 800144e:	4619      	mov	r1, r3
 8001450:	480c      	ldr	r0, [pc, #48]	@ (8001484 <MX_TIM4_Init+0xa0>)
 8001452:	f002 fc64 	bl	8003d1e <HAL_TIM_Encoder_Init>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800145c:	f7ff fd2a 	bl	8000eb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001460:	2300      	movs	r3, #0
 8001462:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001464:	2300      	movs	r3, #0
 8001466:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001468:	1d3b      	adds	r3, r7, #4
 800146a:	4619      	mov	r1, r3
 800146c:	4805      	ldr	r0, [pc, #20]	@ (8001484 <MX_TIM4_Init+0xa0>)
 800146e:	f003 fb5f 	bl	8004b30 <HAL_TIMEx_MasterConfigSynchronization>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001478:	f7ff fd1c 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800147c:	bf00      	nop
 800147e:	3730      	adds	r7, #48	@ 0x30
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	2000032c 	.word	0x2000032c
 8001488:	40000800 	.word	0x40000800

0800148c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b08c      	sub	sp, #48	@ 0x30
 8001490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001492:	f107 030c 	add.w	r3, r7, #12
 8001496:	2224      	movs	r2, #36	@ 0x24
 8001498:	2100      	movs	r1, #0
 800149a:	4618      	mov	r0, r3
 800149c:	f004 fb3e 	bl	8005b1c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014a0:	1d3b      	adds	r3, r7, #4
 80014a2:	2200      	movs	r2, #0
 80014a4:	601a      	str	r2, [r3, #0]
 80014a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80014a8:	4b20      	ldr	r3, [pc, #128]	@ (800152c <MX_TIM5_Init+0xa0>)
 80014aa:	4a21      	ldr	r2, [pc, #132]	@ (8001530 <MX_TIM5_Init+0xa4>)
 80014ac:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80014ae:	4b1f      	ldr	r3, [pc, #124]	@ (800152c <MX_TIM5_Init+0xa0>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014b4:	4b1d      	ldr	r3, [pc, #116]	@ (800152c <MX_TIM5_Init+0xa0>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 80014ba:	4b1c      	ldr	r3, [pc, #112]	@ (800152c <MX_TIM5_Init+0xa0>)
 80014bc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014c0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014c2:	4b1a      	ldr	r3, [pc, #104]	@ (800152c <MX_TIM5_Init+0xa0>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014c8:	4b18      	ldr	r3, [pc, #96]	@ (800152c <MX_TIM5_Init+0xa0>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80014ce:	2303      	movs	r3, #3
 80014d0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80014d2:	2300      	movs	r3, #0
 80014d4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80014d6:	2301      	movs	r3, #1
 80014d8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80014da:	2300      	movs	r3, #0
 80014dc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80014de:	2300      	movs	r3, #0
 80014e0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80014e2:	2300      	movs	r3, #0
 80014e4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80014e6:	2301      	movs	r3, #1
 80014e8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80014ea:	2300      	movs	r3, #0
 80014ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80014ee:	2300      	movs	r3, #0
 80014f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 80014f2:	f107 030c 	add.w	r3, r7, #12
 80014f6:	4619      	mov	r1, r3
 80014f8:	480c      	ldr	r0, [pc, #48]	@ (800152c <MX_TIM5_Init+0xa0>)
 80014fa:	f002 fc10 	bl	8003d1e <HAL_TIM_Encoder_Init>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001504:	f7ff fcd6 	bl	8000eb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001508:	2300      	movs	r3, #0
 800150a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800150c:	2300      	movs	r3, #0
 800150e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001510:	1d3b      	adds	r3, r7, #4
 8001512:	4619      	mov	r1, r3
 8001514:	4805      	ldr	r0, [pc, #20]	@ (800152c <MX_TIM5_Init+0xa0>)
 8001516:	f003 fb0b 	bl	8004b30 <HAL_TIMEx_MasterConfigSynchronization>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001520:	f7ff fcc8 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001524:	bf00      	nop
 8001526:	3730      	adds	r7, #48	@ 0x30
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	20000374 	.word	0x20000374
 8001530:	40000c00 	.word	0x40000c00

08001534 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b096      	sub	sp, #88	@ 0x58
 8001538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800153a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800153e:	2200      	movs	r2, #0
 8001540:	601a      	str	r2, [r3, #0]
 8001542:	605a      	str	r2, [r3, #4]
 8001544:	609a      	str	r2, [r3, #8]
 8001546:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001548:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001552:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001556:	2200      	movs	r2, #0
 8001558:	601a      	str	r2, [r3, #0]
 800155a:	605a      	str	r2, [r3, #4]
 800155c:	609a      	str	r2, [r3, #8]
 800155e:	60da      	str	r2, [r3, #12]
 8001560:	611a      	str	r2, [r3, #16]
 8001562:	615a      	str	r2, [r3, #20]
 8001564:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001566:	1d3b      	adds	r3, r7, #4
 8001568:	2220      	movs	r2, #32
 800156a:	2100      	movs	r1, #0
 800156c:	4618      	mov	r0, r3
 800156e:	f004 fad5 	bl	8005b1c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001572:	4b53      	ldr	r3, [pc, #332]	@ (80016c0 <MX_TIM8_Init+0x18c>)
 8001574:	4a53      	ldr	r2, [pc, #332]	@ (80016c4 <MX_TIM8_Init+0x190>)
 8001576:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001578:	4b51      	ldr	r3, [pc, #324]	@ (80016c0 <MX_TIM8_Init+0x18c>)
 800157a:	2200      	movs	r2, #0
 800157c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800157e:	4b50      	ldr	r3, [pc, #320]	@ (80016c0 <MX_TIM8_Init+0x18c>)
 8001580:	2200      	movs	r2, #0
 8001582:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 4096 - 1;
 8001584:	4b4e      	ldr	r3, [pc, #312]	@ (80016c0 <MX_TIM8_Init+0x18c>)
 8001586:	f640 72ff 	movw	r2, #4095	@ 0xfff
 800158a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800158c:	4b4c      	ldr	r3, [pc, #304]	@ (80016c0 <MX_TIM8_Init+0x18c>)
 800158e:	2200      	movs	r2, #0
 8001590:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001592:	4b4b      	ldr	r3, [pc, #300]	@ (80016c0 <MX_TIM8_Init+0x18c>)
 8001594:	2200      	movs	r2, #0
 8001596:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001598:	4b49      	ldr	r3, [pc, #292]	@ (80016c0 <MX_TIM8_Init+0x18c>)
 800159a:	2200      	movs	r2, #0
 800159c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800159e:	4848      	ldr	r0, [pc, #288]	@ (80016c0 <MX_TIM8_Init+0x18c>)
 80015a0:	f002 fb15 	bl	8003bce <HAL_TIM_Base_Init>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80015aa:	f7ff fc83 	bl	8000eb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015b2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80015b4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80015b8:	4619      	mov	r1, r3
 80015ba:	4841      	ldr	r0, [pc, #260]	@ (80016c0 <MX_TIM8_Init+0x18c>)
 80015bc:	f002 feae 	bl	800431c <HAL_TIM_ConfigClockSource>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80015c6:	f7ff fc75 	bl	8000eb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80015ca:	483d      	ldr	r0, [pc, #244]	@ (80016c0 <MX_TIM8_Init+0x18c>)
 80015cc:	f002 fb4e 	bl	8003c6c <HAL_TIM_PWM_Init>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80015d6:	f7ff fc6d 	bl	8000eb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015da:	2300      	movs	r3, #0
 80015dc:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015de:	2300      	movs	r3, #0
 80015e0:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80015e2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80015e6:	4619      	mov	r1, r3
 80015e8:	4835      	ldr	r0, [pc, #212]	@ (80016c0 <MX_TIM8_Init+0x18c>)
 80015ea:	f003 faa1 	bl	8004b30 <HAL_TIMEx_MasterConfigSynchronization>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80015f4:	f7ff fc5e 	bl	8000eb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015f8:	2360      	movs	r3, #96	@ 0x60
 80015fa:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80015fc:	2300      	movs	r3, #0
 80015fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001600:	2300      	movs	r3, #0
 8001602:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001604:	2300      	movs	r3, #0
 8001606:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001608:	2300      	movs	r3, #0
 800160a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800160c:	2300      	movs	r3, #0
 800160e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001610:	2300      	movs	r3, #0
 8001612:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001614:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001618:	2200      	movs	r2, #0
 800161a:	4619      	mov	r1, r3
 800161c:	4828      	ldr	r0, [pc, #160]	@ (80016c0 <MX_TIM8_Init+0x18c>)
 800161e:	f002 fdbb 	bl	8004198 <HAL_TIM_PWM_ConfigChannel>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001628:	f7ff fc44 	bl	8000eb4 <Error_Handler>
  }
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800162c:	2302      	movs	r3, #2
 800162e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001630:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001634:	2204      	movs	r2, #4
 8001636:	4619      	mov	r1, r3
 8001638:	4821      	ldr	r0, [pc, #132]	@ (80016c0 <MX_TIM8_Init+0x18c>)
 800163a:	f002 fdad 	bl	8004198 <HAL_TIM_PWM_ConfigChannel>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_TIM8_Init+0x114>
  {
    Error_Handler();
 8001644:	f7ff fc36 	bl	8000eb4 <Error_Handler>
  }
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001648:	2300      	movs	r3, #0
 800164a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800164c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001650:	2208      	movs	r2, #8
 8001652:	4619      	mov	r1, r3
 8001654:	481a      	ldr	r0, [pc, #104]	@ (80016c0 <MX_TIM8_Init+0x18c>)
 8001656:	f002 fd9f 	bl	8004198 <HAL_TIM_PWM_ConfigChannel>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <MX_TIM8_Init+0x130>
  {
    Error_Handler();
 8001660:	f7ff fc28 	bl	8000eb4 <Error_Handler>
  }
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001664:	2302      	movs	r3, #2
 8001666:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001668:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800166c:	220c      	movs	r2, #12
 800166e:	4619      	mov	r1, r3
 8001670:	4813      	ldr	r0, [pc, #76]	@ (80016c0 <MX_TIM8_Init+0x18c>)
 8001672:	f002 fd91 	bl	8004198 <HAL_TIM_PWM_ConfigChannel>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <MX_TIM8_Init+0x14c>
  {
    Error_Handler();
 800167c:	f7ff fc1a 	bl	8000eb4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001680:	2300      	movs	r3, #0
 8001682:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001684:	2300      	movs	r3, #0
 8001686:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001688:	2300      	movs	r3, #0
 800168a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800168c:	2300      	movs	r3, #0
 800168e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001690:	2300      	movs	r3, #0
 8001692:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001694:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001698:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800169a:	2300      	movs	r3, #0
 800169c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800169e:	1d3b      	adds	r3, r7, #4
 80016a0:	4619      	mov	r1, r3
 80016a2:	4807      	ldr	r0, [pc, #28]	@ (80016c0 <MX_TIM8_Init+0x18c>)
 80016a4:	f003 fac0 	bl	8004c28 <HAL_TIMEx_ConfigBreakDeadTime>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <MX_TIM8_Init+0x17e>
  {
    Error_Handler();
 80016ae:	f7ff fc01 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80016b2:	4803      	ldr	r0, [pc, #12]	@ (80016c0 <MX_TIM8_Init+0x18c>)
 80016b4:	f000 fabe 	bl	8001c34 <HAL_TIM_MspPostInit>

}
 80016b8:	bf00      	nop
 80016ba:	3758      	adds	r7, #88	@ 0x58
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	200003bc 	.word	0x200003bc
 80016c4:	40010400 	.word	0x40010400

080016c8 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b08c      	sub	sp, #48	@ 0x30
 80016cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016ce:	f107 0320 	add.w	r3, r7, #32
 80016d2:	2200      	movs	r2, #0
 80016d4:	601a      	str	r2, [r3, #0]
 80016d6:	605a      	str	r2, [r3, #4]
 80016d8:	609a      	str	r2, [r3, #8]
 80016da:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016dc:	1d3b      	adds	r3, r7, #4
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	605a      	str	r2, [r3, #4]
 80016e4:	609a      	str	r2, [r3, #8]
 80016e6:	60da      	str	r2, [r3, #12]
 80016e8:	611a      	str	r2, [r3, #16]
 80016ea:	615a      	str	r2, [r3, #20]
 80016ec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80016ee:	4b2b      	ldr	r3, [pc, #172]	@ (800179c <MX_TIM9_Init+0xd4>)
 80016f0:	4a2b      	ldr	r2, [pc, #172]	@ (80017a0 <MX_TIM9_Init+0xd8>)
 80016f2:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 336 - 1;
 80016f4:	4b29      	ldr	r3, [pc, #164]	@ (800179c <MX_TIM9_Init+0xd4>)
 80016f6:	f240 124f 	movw	r2, #335	@ 0x14f
 80016fa:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016fc:	4b27      	ldr	r3, [pc, #156]	@ (800179c <MX_TIM9_Init+0xd4>)
 80016fe:	2200      	movs	r2, #0
 8001700:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 10000 - 1;
 8001702:	4b26      	ldr	r3, [pc, #152]	@ (800179c <MX_TIM9_Init+0xd4>)
 8001704:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001708:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800170a:	4b24      	ldr	r3, [pc, #144]	@ (800179c <MX_TIM9_Init+0xd4>)
 800170c:	2200      	movs	r2, #0
 800170e:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001710:	4b22      	ldr	r3, [pc, #136]	@ (800179c <MX_TIM9_Init+0xd4>)
 8001712:	2200      	movs	r2, #0
 8001714:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001716:	4821      	ldr	r0, [pc, #132]	@ (800179c <MX_TIM9_Init+0xd4>)
 8001718:	f002 fa59 	bl	8003bce <HAL_TIM_Base_Init>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_TIM9_Init+0x5e>
  {
    Error_Handler();
 8001722:	f7ff fbc7 	bl	8000eb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001726:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800172a:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800172c:	f107 0320 	add.w	r3, r7, #32
 8001730:	4619      	mov	r1, r3
 8001732:	481a      	ldr	r0, [pc, #104]	@ (800179c <MX_TIM9_Init+0xd4>)
 8001734:	f002 fdf2 	bl	800431c <HAL_TIM_ConfigClockSource>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_TIM9_Init+0x7a>
  {
    Error_Handler();
 800173e:	f7ff fbb9 	bl	8000eb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8001742:	4816      	ldr	r0, [pc, #88]	@ (800179c <MX_TIM9_Init+0xd4>)
 8001744:	f002 fa92 	bl	8003c6c <HAL_TIM_PWM_Init>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 800174e:	f7ff fbb1 	bl	8000eb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001752:	2360      	movs	r3, #96	@ 0x60
 8001754:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001756:	2300      	movs	r3, #0
 8001758:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800175a:	2300      	movs	r3, #0
 800175c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800175e:	2300      	movs	r3, #0
 8001760:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001762:	1d3b      	adds	r3, r7, #4
 8001764:	2200      	movs	r2, #0
 8001766:	4619      	mov	r1, r3
 8001768:	480c      	ldr	r0, [pc, #48]	@ (800179c <MX_TIM9_Init+0xd4>)
 800176a:	f002 fd15 	bl	8004198 <HAL_TIM_PWM_ConfigChannel>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <MX_TIM9_Init+0xb0>
  {
    Error_Handler();
 8001774:	f7ff fb9e 	bl	8000eb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001778:	1d3b      	adds	r3, r7, #4
 800177a:	2204      	movs	r2, #4
 800177c:	4619      	mov	r1, r3
 800177e:	4807      	ldr	r0, [pc, #28]	@ (800179c <MX_TIM9_Init+0xd4>)
 8001780:	f002 fd0a 	bl	8004198 <HAL_TIM_PWM_ConfigChannel>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <MX_TIM9_Init+0xc6>
  {
    Error_Handler();
 800178a:	f7ff fb93 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 800178e:	4803      	ldr	r0, [pc, #12]	@ (800179c <MX_TIM9_Init+0xd4>)
 8001790:	f000 fa50 	bl	8001c34 <HAL_TIM_MspPostInit>

}
 8001794:	bf00      	nop
 8001796:	3730      	adds	r7, #48	@ 0x30
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	20000404 	.word	0x20000404
 80017a0:	40014000 	.word	0x40014000

080017a4 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b088      	sub	sp, #32
 80017a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80017aa:	1d3b      	adds	r3, r7, #4
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	605a      	str	r2, [r3, #4]
 80017b2:	609a      	str	r2, [r3, #8]
 80017b4:	60da      	str	r2, [r3, #12]
 80017b6:	611a      	str	r2, [r3, #16]
 80017b8:	615a      	str	r2, [r3, #20]
 80017ba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80017bc:	4b1e      	ldr	r3, [pc, #120]	@ (8001838 <MX_TIM11_Init+0x94>)
 80017be:	4a1f      	ldr	r2, [pc, #124]	@ (800183c <MX_TIM11_Init+0x98>)
 80017c0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 80017c2:	4b1d      	ldr	r3, [pc, #116]	@ (8001838 <MX_TIM11_Init+0x94>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001838 <MX_TIM11_Init+0x94>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80017ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001838 <MX_TIM11_Init+0x94>)
 80017d0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80017d4:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017d6:	4b18      	ldr	r3, [pc, #96]	@ (8001838 <MX_TIM11_Init+0x94>)
 80017d8:	2200      	movs	r2, #0
 80017da:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017dc:	4b16      	ldr	r3, [pc, #88]	@ (8001838 <MX_TIM11_Init+0x94>)
 80017de:	2200      	movs	r2, #0
 80017e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80017e2:	4815      	ldr	r0, [pc, #84]	@ (8001838 <MX_TIM11_Init+0x94>)
 80017e4:	f002 f9f3 	bl	8003bce <HAL_TIM_Base_Init>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 80017ee:	f7ff fb61 	bl	8000eb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 80017f2:	4811      	ldr	r0, [pc, #68]	@ (8001838 <MX_TIM11_Init+0x94>)
 80017f4:	f002 fa3a 	bl	8003c6c <HAL_TIM_PWM_Init>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 80017fe:	f7ff fb59 	bl	8000eb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001802:	2360      	movs	r3, #96	@ 0x60
 8001804:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001806:	2300      	movs	r3, #0
 8001808:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800180a:	2300      	movs	r3, #0
 800180c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800180e:	2300      	movs	r3, #0
 8001810:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001812:	1d3b      	adds	r3, r7, #4
 8001814:	2200      	movs	r2, #0
 8001816:	4619      	mov	r1, r3
 8001818:	4807      	ldr	r0, [pc, #28]	@ (8001838 <MX_TIM11_Init+0x94>)
 800181a:	f002 fcbd 	bl	8004198 <HAL_TIM_PWM_ConfigChannel>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8001824:	f7ff fb46 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8001828:	4803      	ldr	r0, [pc, #12]	@ (8001838 <MX_TIM11_Init+0x94>)
 800182a:	f000 fa03 	bl	8001c34 <HAL_TIM_MspPostInit>

}
 800182e:	bf00      	nop
 8001830:	3720      	adds	r7, #32
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	2000044c 	.word	0x2000044c
 800183c:	40014800 	.word	0x40014800

08001840 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b08c      	sub	sp, #48	@ 0x30
 8001844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001846:	f107 0320 	add.w	r3, r7, #32
 800184a:	2200      	movs	r2, #0
 800184c:	601a      	str	r2, [r3, #0]
 800184e:	605a      	str	r2, [r3, #4]
 8001850:	609a      	str	r2, [r3, #8]
 8001852:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001854:	1d3b      	adds	r3, r7, #4
 8001856:	2200      	movs	r2, #0
 8001858:	601a      	str	r2, [r3, #0]
 800185a:	605a      	str	r2, [r3, #4]
 800185c:	609a      	str	r2, [r3, #8]
 800185e:	60da      	str	r2, [r3, #12]
 8001860:	611a      	str	r2, [r3, #16]
 8001862:	615a      	str	r2, [r3, #20]
 8001864:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001866:	4b2b      	ldr	r3, [pc, #172]	@ (8001914 <MX_TIM12_Init+0xd4>)
 8001868:	4a2b      	ldr	r2, [pc, #172]	@ (8001918 <MX_TIM12_Init+0xd8>)
 800186a:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 168 - 1;
 800186c:	4b29      	ldr	r3, [pc, #164]	@ (8001914 <MX_TIM12_Init+0xd4>)
 800186e:	22a7      	movs	r2, #167	@ 0xa7
 8001870:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001872:	4b28      	ldr	r3, [pc, #160]	@ (8001914 <MX_TIM12_Init+0xd4>)
 8001874:	2200      	movs	r2, #0
 8001876:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 10000 - 1;
 8001878:	4b26      	ldr	r3, [pc, #152]	@ (8001914 <MX_TIM12_Init+0xd4>)
 800187a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800187e:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001880:	4b24      	ldr	r3, [pc, #144]	@ (8001914 <MX_TIM12_Init+0xd4>)
 8001882:	2200      	movs	r2, #0
 8001884:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001886:	4b23      	ldr	r3, [pc, #140]	@ (8001914 <MX_TIM12_Init+0xd4>)
 8001888:	2200      	movs	r2, #0
 800188a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 800188c:	4821      	ldr	r0, [pc, #132]	@ (8001914 <MX_TIM12_Init+0xd4>)
 800188e:	f002 f99e 	bl	8003bce <HAL_TIM_Base_Init>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 8001898:	f7ff fb0c 	bl	8000eb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800189c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018a0:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 80018a2:	f107 0320 	add.w	r3, r7, #32
 80018a6:	4619      	mov	r1, r3
 80018a8:	481a      	ldr	r0, [pc, #104]	@ (8001914 <MX_TIM12_Init+0xd4>)
 80018aa:	f002 fd37 	bl	800431c <HAL_TIM_ConfigClockSource>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 80018b4:	f7ff fafe 	bl	8000eb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80018b8:	4816      	ldr	r0, [pc, #88]	@ (8001914 <MX_TIM12_Init+0xd4>)
 80018ba:	f002 f9d7 	bl	8003c6c <HAL_TIM_PWM_Init>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 80018c4:	f7ff faf6 	bl	8000eb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018c8:	2360      	movs	r3, #96	@ 0x60
 80018ca:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80018cc:	2300      	movs	r3, #0
 80018ce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018d0:	2300      	movs	r3, #0
 80018d2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018d4:	2300      	movs	r3, #0
 80018d6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018d8:	1d3b      	adds	r3, r7, #4
 80018da:	2200      	movs	r2, #0
 80018dc:	4619      	mov	r1, r3
 80018de:	480d      	ldr	r0, [pc, #52]	@ (8001914 <MX_TIM12_Init+0xd4>)
 80018e0:	f002 fc5a 	bl	8004198 <HAL_TIM_PWM_ConfigChannel>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 80018ea:	f7ff fae3 	bl	8000eb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018ee:	1d3b      	adds	r3, r7, #4
 80018f0:	2204      	movs	r2, #4
 80018f2:	4619      	mov	r1, r3
 80018f4:	4807      	ldr	r0, [pc, #28]	@ (8001914 <MX_TIM12_Init+0xd4>)
 80018f6:	f002 fc4f 	bl	8004198 <HAL_TIM_PWM_ConfigChannel>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <MX_TIM12_Init+0xc4>
  {
    Error_Handler();
 8001900:	f7ff fad8 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001904:	4803      	ldr	r0, [pc, #12]	@ (8001914 <MX_TIM12_Init+0xd4>)
 8001906:	f000 f995 	bl	8001c34 <HAL_TIM_MspPostInit>

}
 800190a:	bf00      	nop
 800190c:	3730      	adds	r7, #48	@ 0x30
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	20000494 	.word	0x20000494
 8001918:	40001800 	.word	0x40001800

0800191c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b088      	sub	sp, #32
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a3a      	ldr	r2, [pc, #232]	@ (8001a14 <HAL_TIM_Base_MspInit+0xf8>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d116      	bne.n	800195c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800192e:	2300      	movs	r3, #0
 8001930:	61fb      	str	r3, [r7, #28]
 8001932:	4b39      	ldr	r3, [pc, #228]	@ (8001a18 <HAL_TIM_Base_MspInit+0xfc>)
 8001934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001936:	4a38      	ldr	r2, [pc, #224]	@ (8001a18 <HAL_TIM_Base_MspInit+0xfc>)
 8001938:	f043 0301 	orr.w	r3, r3, #1
 800193c:	6453      	str	r3, [r2, #68]	@ 0x44
 800193e:	4b36      	ldr	r3, [pc, #216]	@ (8001a18 <HAL_TIM_Base_MspInit+0xfc>)
 8001940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001942:	f003 0301 	and.w	r3, r3, #1
 8001946:	61fb      	str	r3, [r7, #28]
 8001948:	69fb      	ldr	r3, [r7, #28]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800194a:	2200      	movs	r2, #0
 800194c:	2100      	movs	r1, #0
 800194e:	201a      	movs	r0, #26
 8001950:	f001 f859 	bl	8002a06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001954:	201a      	movs	r0, #26
 8001956:	f001 f872 	bl	8002a3e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM12_CLK_ENABLE();
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 800195a:	e056      	b.n	8001a0a <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM8)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a2e      	ldr	r2, [pc, #184]	@ (8001a1c <HAL_TIM_Base_MspInit+0x100>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d10e      	bne.n	8001984 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001966:	2300      	movs	r3, #0
 8001968:	61bb      	str	r3, [r7, #24]
 800196a:	4b2b      	ldr	r3, [pc, #172]	@ (8001a18 <HAL_TIM_Base_MspInit+0xfc>)
 800196c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800196e:	4a2a      	ldr	r2, [pc, #168]	@ (8001a18 <HAL_TIM_Base_MspInit+0xfc>)
 8001970:	f043 0302 	orr.w	r3, r3, #2
 8001974:	6453      	str	r3, [r2, #68]	@ 0x44
 8001976:	4b28      	ldr	r3, [pc, #160]	@ (8001a18 <HAL_TIM_Base_MspInit+0xfc>)
 8001978:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800197a:	f003 0302 	and.w	r3, r3, #2
 800197e:	61bb      	str	r3, [r7, #24]
 8001980:	69bb      	ldr	r3, [r7, #24]
}
 8001982:	e042      	b.n	8001a0a <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM9)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a25      	ldr	r2, [pc, #148]	@ (8001a20 <HAL_TIM_Base_MspInit+0x104>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d10e      	bne.n	80019ac <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800198e:	2300      	movs	r3, #0
 8001990:	617b      	str	r3, [r7, #20]
 8001992:	4b21      	ldr	r3, [pc, #132]	@ (8001a18 <HAL_TIM_Base_MspInit+0xfc>)
 8001994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001996:	4a20      	ldr	r2, [pc, #128]	@ (8001a18 <HAL_TIM_Base_MspInit+0xfc>)
 8001998:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800199c:	6453      	str	r3, [r2, #68]	@ 0x44
 800199e:	4b1e      	ldr	r3, [pc, #120]	@ (8001a18 <HAL_TIM_Base_MspInit+0xfc>)
 80019a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019a6:	617b      	str	r3, [r7, #20]
 80019a8:	697b      	ldr	r3, [r7, #20]
}
 80019aa:	e02e      	b.n	8001a0a <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM11)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a1c      	ldr	r2, [pc, #112]	@ (8001a24 <HAL_TIM_Base_MspInit+0x108>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d116      	bne.n	80019e4 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80019b6:	2300      	movs	r3, #0
 80019b8:	613b      	str	r3, [r7, #16]
 80019ba:	4b17      	ldr	r3, [pc, #92]	@ (8001a18 <HAL_TIM_Base_MspInit+0xfc>)
 80019bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019be:	4a16      	ldr	r2, [pc, #88]	@ (8001a18 <HAL_TIM_Base_MspInit+0xfc>)
 80019c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80019c6:	4b14      	ldr	r3, [pc, #80]	@ (8001a18 <HAL_TIM_Base_MspInit+0xfc>)
 80019c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80019ce:	613b      	str	r3, [r7, #16]
 80019d0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80019d2:	2200      	movs	r2, #0
 80019d4:	2100      	movs	r1, #0
 80019d6:	201a      	movs	r0, #26
 80019d8:	f001 f815 	bl	8002a06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80019dc:	201a      	movs	r0, #26
 80019de:	f001 f82e 	bl	8002a3e <HAL_NVIC_EnableIRQ>
}
 80019e2:	e012      	b.n	8001a0a <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM12)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a0f      	ldr	r2, [pc, #60]	@ (8001a28 <HAL_TIM_Base_MspInit+0x10c>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d10d      	bne.n	8001a0a <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80019ee:	2300      	movs	r3, #0
 80019f0:	60fb      	str	r3, [r7, #12]
 80019f2:	4b09      	ldr	r3, [pc, #36]	@ (8001a18 <HAL_TIM_Base_MspInit+0xfc>)
 80019f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f6:	4a08      	ldr	r2, [pc, #32]	@ (8001a18 <HAL_TIM_Base_MspInit+0xfc>)
 80019f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80019fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80019fe:	4b06      	ldr	r3, [pc, #24]	@ (8001a18 <HAL_TIM_Base_MspInit+0xfc>)
 8001a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a06:	60fb      	str	r3, [r7, #12]
 8001a08:	68fb      	ldr	r3, [r7, #12]
}
 8001a0a:	bf00      	nop
 8001a0c:	3720      	adds	r7, #32
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	40010000 	.word	0x40010000
 8001a18:	40023800 	.word	0x40023800
 8001a1c:	40010400 	.word	0x40010400
 8001a20:	40014000 	.word	0x40014000
 8001a24:	40014800 	.word	0x40014800
 8001a28:	40001800 	.word	0x40001800

08001a2c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b090      	sub	sp, #64	@ 0x40
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a34:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]
 8001a3c:	605a      	str	r2, [r3, #4]
 8001a3e:	609a      	str	r2, [r3, #8]
 8001a40:	60da      	str	r2, [r3, #12]
 8001a42:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a4c:	d14a      	bne.n	8001ae4 <HAL_TIM_Encoder_MspInit+0xb8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a4e:	2300      	movs	r3, #0
 8001a50:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a52:	4b71      	ldr	r3, [pc, #452]	@ (8001c18 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a56:	4a70      	ldr	r2, [pc, #448]	@ (8001c18 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001a58:	f043 0301 	orr.w	r3, r3, #1
 8001a5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a5e:	4b6e      	ldr	r3, [pc, #440]	@ (8001c18 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a62:	f003 0301 	and.w	r3, r3, #1
 8001a66:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a68:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a6e:	4b6a      	ldr	r3, [pc, #424]	@ (8001c18 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a72:	4a69      	ldr	r2, [pc, #420]	@ (8001c18 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001a74:	f043 0301 	orr.w	r3, r3, #1
 8001a78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a7a:	4b67      	ldr	r3, [pc, #412]	@ (8001c18 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a86:	2300      	movs	r3, #0
 8001a88:	623b      	str	r3, [r7, #32]
 8001a8a:	4b63      	ldr	r3, [pc, #396]	@ (8001c18 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a8e:	4a62      	ldr	r2, [pc, #392]	@ (8001c18 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001a90:	f043 0302 	orr.w	r3, r3, #2
 8001a94:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a96:	4b60      	ldr	r3, [pc, #384]	@ (8001c18 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	623b      	str	r3, [r7, #32]
 8001aa0:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001aa2:	2320      	movs	r3, #32
 8001aa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ab6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001aba:	4619      	mov	r1, r3
 8001abc:	4857      	ldr	r0, [pc, #348]	@ (8001c1c <HAL_TIM_Encoder_MspInit+0x1f0>)
 8001abe:	f001 f86b 	bl	8002b98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001ac2:	2308      	movs	r3, #8
 8001ac4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001aca:	2301      	movs	r3, #1
 8001acc:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ad6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ada:	4619      	mov	r1, r3
 8001adc:	4850      	ldr	r0, [pc, #320]	@ (8001c20 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8001ade:	f001 f85b 	bl	8002b98 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8001ae2:	e095      	b.n	8001c10 <HAL_TIM_Encoder_MspInit+0x1e4>
  else if(tim_encoderHandle->Instance==TIM3)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a4e      	ldr	r2, [pc, #312]	@ (8001c24 <HAL_TIM_Encoder_MspInit+0x1f8>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d12c      	bne.n	8001b48 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001aee:	2300      	movs	r3, #0
 8001af0:	61fb      	str	r3, [r7, #28]
 8001af2:	4b49      	ldr	r3, [pc, #292]	@ (8001c18 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af6:	4a48      	ldr	r2, [pc, #288]	@ (8001c18 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001af8:	f043 0302 	orr.w	r3, r3, #2
 8001afc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001afe:	4b46      	ldr	r3, [pc, #280]	@ (8001c18 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b02:	f003 0302 	and.w	r3, r3, #2
 8001b06:	61fb      	str	r3, [r7, #28]
 8001b08:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	61bb      	str	r3, [r7, #24]
 8001b0e:	4b42      	ldr	r3, [pc, #264]	@ (8001c18 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b12:	4a41      	ldr	r2, [pc, #260]	@ (8001c18 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001b14:	f043 0302 	orr.w	r3, r3, #2
 8001b18:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b1a:	4b3f      	ldr	r3, [pc, #252]	@ (8001c18 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b1e:	f003 0302 	and.w	r3, r3, #2
 8001b22:	61bb      	str	r3, [r7, #24]
 8001b24:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001b26:	2330      	movs	r3, #48	@ 0x30
 8001b28:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b32:	2300      	movs	r3, #0
 8001b34:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b36:	2302      	movs	r3, #2
 8001b38:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b3a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b3e:	4619      	mov	r1, r3
 8001b40:	4837      	ldr	r0, [pc, #220]	@ (8001c20 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8001b42:	f001 f829 	bl	8002b98 <HAL_GPIO_Init>
}
 8001b46:	e063      	b.n	8001c10 <HAL_TIM_Encoder_MspInit+0x1e4>
  else if(tim_encoderHandle->Instance==TIM4)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a36      	ldr	r2, [pc, #216]	@ (8001c28 <HAL_TIM_Encoder_MspInit+0x1fc>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d12d      	bne.n	8001bae <HAL_TIM_Encoder_MspInit+0x182>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001b52:	2300      	movs	r3, #0
 8001b54:	617b      	str	r3, [r7, #20]
 8001b56:	4b30      	ldr	r3, [pc, #192]	@ (8001c18 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b5a:	4a2f      	ldr	r2, [pc, #188]	@ (8001c18 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001b5c:	f043 0304 	orr.w	r3, r3, #4
 8001b60:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b62:	4b2d      	ldr	r3, [pc, #180]	@ (8001c18 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b66:	f003 0304 	and.w	r3, r3, #4
 8001b6a:	617b      	str	r3, [r7, #20]
 8001b6c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b6e:	2300      	movs	r3, #0
 8001b70:	613b      	str	r3, [r7, #16]
 8001b72:	4b29      	ldr	r3, [pc, #164]	@ (8001c18 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b76:	4a28      	ldr	r2, [pc, #160]	@ (8001c18 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001b78:	f043 0308 	orr.w	r3, r3, #8
 8001b7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b7e:	4b26      	ldr	r3, [pc, #152]	@ (8001c18 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b82:	f003 0308 	and.w	r3, r3, #8
 8001b86:	613b      	str	r3, [r7, #16]
 8001b88:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001b8a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001b8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b90:	2302      	movs	r3, #2
 8001b92:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b94:	2300      	movs	r3, #0
 8001b96:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ba0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4821      	ldr	r0, [pc, #132]	@ (8001c2c <HAL_TIM_Encoder_MspInit+0x200>)
 8001ba8:	f000 fff6 	bl	8002b98 <HAL_GPIO_Init>
}
 8001bac:	e030      	b.n	8001c10 <HAL_TIM_Encoder_MspInit+0x1e4>
  else if(tim_encoderHandle->Instance==TIM5)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a1f      	ldr	r2, [pc, #124]	@ (8001c30 <HAL_TIM_Encoder_MspInit+0x204>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d12b      	bne.n	8001c10 <HAL_TIM_Encoder_MspInit+0x1e4>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001bb8:	2300      	movs	r3, #0
 8001bba:	60fb      	str	r3, [r7, #12]
 8001bbc:	4b16      	ldr	r3, [pc, #88]	@ (8001c18 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc0:	4a15      	ldr	r2, [pc, #84]	@ (8001c18 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001bc2:	f043 0308 	orr.w	r3, r3, #8
 8001bc6:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bc8:	4b13      	ldr	r3, [pc, #76]	@ (8001c18 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bcc:	f003 0308 	and.w	r3, r3, #8
 8001bd0:	60fb      	str	r3, [r7, #12]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	60bb      	str	r3, [r7, #8]
 8001bd8:	4b0f      	ldr	r3, [pc, #60]	@ (8001c18 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001bda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bdc:	4a0e      	ldr	r2, [pc, #56]	@ (8001c18 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001bde:	f043 0301 	orr.w	r3, r3, #1
 8001be2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001be4:	4b0c      	ldr	r3, [pc, #48]	@ (8001c18 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001be6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be8:	f003 0301 	and.w	r3, r3, #1
 8001bec:	60bb      	str	r3, [r7, #8]
 8001bee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001c00:	2302      	movs	r3, #2
 8001c02:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c04:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c08:	4619      	mov	r1, r3
 8001c0a:	4804      	ldr	r0, [pc, #16]	@ (8001c1c <HAL_TIM_Encoder_MspInit+0x1f0>)
 8001c0c:	f000 ffc4 	bl	8002b98 <HAL_GPIO_Init>
}
 8001c10:	bf00      	nop
 8001c12:	3740      	adds	r7, #64	@ 0x40
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	40023800 	.word	0x40023800
 8001c1c:	40020000 	.word	0x40020000
 8001c20:	40020400 	.word	0x40020400
 8001c24:	40000400 	.word	0x40000400
 8001c28:	40000800 	.word	0x40000800
 8001c2c:	40020c00 	.word	0x40020c00
 8001c30:	40000c00 	.word	0x40000c00

08001c34 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b08c      	sub	sp, #48	@ 0x30
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c3c:	f107 031c 	add.w	r3, r7, #28
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	605a      	str	r2, [r3, #4]
 8001c46:	609a      	str	r2, [r3, #8]
 8001c48:	60da      	str	r2, [r3, #12]
 8001c4a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a5c      	ldr	r2, [pc, #368]	@ (8001dc4 <HAL_TIM_MspPostInit+0x190>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d11f      	bne.n	8001c96 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c56:	2300      	movs	r3, #0
 8001c58:	61bb      	str	r3, [r7, #24]
 8001c5a:	4b5b      	ldr	r3, [pc, #364]	@ (8001dc8 <HAL_TIM_MspPostInit+0x194>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c5e:	4a5a      	ldr	r2, [pc, #360]	@ (8001dc8 <HAL_TIM_MspPostInit+0x194>)
 8001c60:	f043 0310 	orr.w	r3, r3, #16
 8001c64:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c66:	4b58      	ldr	r3, [pc, #352]	@ (8001dc8 <HAL_TIM_MspPostInit+0x194>)
 8001c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c6a:	f003 0310 	and.w	r3, r3, #16
 8001c6e:	61bb      	str	r3, [r7, #24]
 8001c70:	69bb      	ldr	r3, [r7, #24]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8001c72:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 8001c76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c78:	2302      	movs	r3, #2
 8001c7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c80:	2300      	movs	r3, #0
 8001c82:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001c84:	2301      	movs	r3, #1
 8001c86:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c88:	f107 031c 	add.w	r3, r7, #28
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	484f      	ldr	r0, [pc, #316]	@ (8001dcc <HAL_TIM_MspPostInit+0x198>)
 8001c90:	f000 ff82 	bl	8002b98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8001c94:	e091      	b.n	8001dba <HAL_TIM_MspPostInit+0x186>
  else if(timHandle->Instance==TIM8)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a4d      	ldr	r2, [pc, #308]	@ (8001dd0 <HAL_TIM_MspPostInit+0x19c>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d11f      	bne.n	8001ce0 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	617b      	str	r3, [r7, #20]
 8001ca4:	4b48      	ldr	r3, [pc, #288]	@ (8001dc8 <HAL_TIM_MspPostInit+0x194>)
 8001ca6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca8:	4a47      	ldr	r2, [pc, #284]	@ (8001dc8 <HAL_TIM_MspPostInit+0x194>)
 8001caa:	f043 0304 	orr.w	r3, r3, #4
 8001cae:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cb0:	4b45      	ldr	r3, [pc, #276]	@ (8001dc8 <HAL_TIM_MspPostInit+0x194>)
 8001cb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb4:	f003 0304 	and.w	r3, r3, #4
 8001cb8:	617b      	str	r3, [r7, #20]
 8001cba:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001cbc:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8001cc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cd2:	f107 031c 	add.w	r3, r7, #28
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	483e      	ldr	r0, [pc, #248]	@ (8001dd4 <HAL_TIM_MspPostInit+0x1a0>)
 8001cda:	f000 ff5d 	bl	8002b98 <HAL_GPIO_Init>
}
 8001cde:	e06c      	b.n	8001dba <HAL_TIM_MspPostInit+0x186>
  else if(timHandle->Instance==TIM9)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a3c      	ldr	r2, [pc, #240]	@ (8001dd8 <HAL_TIM_MspPostInit+0x1a4>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d11e      	bne.n	8001d28 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001cea:	2300      	movs	r3, #0
 8001cec:	613b      	str	r3, [r7, #16]
 8001cee:	4b36      	ldr	r3, [pc, #216]	@ (8001dc8 <HAL_TIM_MspPostInit+0x194>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf2:	4a35      	ldr	r2, [pc, #212]	@ (8001dc8 <HAL_TIM_MspPostInit+0x194>)
 8001cf4:	f043 0310 	orr.w	r3, r3, #16
 8001cf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cfa:	4b33      	ldr	r3, [pc, #204]	@ (8001dc8 <HAL_TIM_MspPostInit+0x194>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cfe:	f003 0310 	and.w	r3, r3, #16
 8001d02:	613b      	str	r3, [r7, #16]
 8001d04:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001d06:	2360      	movs	r3, #96	@ 0x60
 8001d08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d12:	2300      	movs	r3, #0
 8001d14:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8001d16:	2303      	movs	r3, #3
 8001d18:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d1a:	f107 031c 	add.w	r3, r7, #28
 8001d1e:	4619      	mov	r1, r3
 8001d20:	482a      	ldr	r0, [pc, #168]	@ (8001dcc <HAL_TIM_MspPostInit+0x198>)
 8001d22:	f000 ff39 	bl	8002b98 <HAL_GPIO_Init>
}
 8001d26:	e048      	b.n	8001dba <HAL_TIM_MspPostInit+0x186>
  else if(timHandle->Instance==TIM11)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a2b      	ldr	r2, [pc, #172]	@ (8001ddc <HAL_TIM_MspPostInit+0x1a8>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d11f      	bne.n	8001d72 <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d32:	2300      	movs	r3, #0
 8001d34:	60fb      	str	r3, [r7, #12]
 8001d36:	4b24      	ldr	r3, [pc, #144]	@ (8001dc8 <HAL_TIM_MspPostInit+0x194>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d3a:	4a23      	ldr	r2, [pc, #140]	@ (8001dc8 <HAL_TIM_MspPostInit+0x194>)
 8001d3c:	f043 0302 	orr.w	r3, r3, #2
 8001d40:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d42:	4b21      	ldr	r3, [pc, #132]	@ (8001dc8 <HAL_TIM_MspPostInit+0x194>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	60fb      	str	r3, [r7, #12]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001d4e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d54:	2302      	movs	r3, #2
 8001d56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8001d60:	2303      	movs	r3, #3
 8001d62:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d64:	f107 031c 	add.w	r3, r7, #28
 8001d68:	4619      	mov	r1, r3
 8001d6a:	481d      	ldr	r0, [pc, #116]	@ (8001de0 <HAL_TIM_MspPostInit+0x1ac>)
 8001d6c:	f000 ff14 	bl	8002b98 <HAL_GPIO_Init>
}
 8001d70:	e023      	b.n	8001dba <HAL_TIM_MspPostInit+0x186>
  else if(timHandle->Instance==TIM12)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a1b      	ldr	r2, [pc, #108]	@ (8001de4 <HAL_TIM_MspPostInit+0x1b0>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d11e      	bne.n	8001dba <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	60bb      	str	r3, [r7, #8]
 8001d80:	4b11      	ldr	r3, [pc, #68]	@ (8001dc8 <HAL_TIM_MspPostInit+0x194>)
 8001d82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d84:	4a10      	ldr	r2, [pc, #64]	@ (8001dc8 <HAL_TIM_MspPostInit+0x194>)
 8001d86:	f043 0302 	orr.w	r3, r3, #2
 8001d8a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d8c:	4b0e      	ldr	r3, [pc, #56]	@ (8001dc8 <HAL_TIM_MspPostInit+0x194>)
 8001d8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d90:	f003 0302 	and.w	r3, r3, #2
 8001d94:	60bb      	str	r3, [r7, #8]
 8001d96:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001d98:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001d9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d9e:	2302      	movs	r3, #2
 8001da0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da2:	2300      	movs	r3, #0
 8001da4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da6:	2300      	movs	r3, #0
 8001da8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001daa:	2309      	movs	r3, #9
 8001dac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dae:	f107 031c 	add.w	r3, r7, #28
 8001db2:	4619      	mov	r1, r3
 8001db4:	480a      	ldr	r0, [pc, #40]	@ (8001de0 <HAL_TIM_MspPostInit+0x1ac>)
 8001db6:	f000 feef 	bl	8002b98 <HAL_GPIO_Init>
}
 8001dba:	bf00      	nop
 8001dbc:	3730      	adds	r7, #48	@ 0x30
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	40010000 	.word	0x40010000
 8001dc8:	40023800 	.word	0x40023800
 8001dcc:	40021000 	.word	0x40021000
 8001dd0:	40010400 	.word	0x40010400
 8001dd4:	40020800 	.word	0x40020800
 8001dd8:	40014000 	.word	0x40014000
 8001ddc:	40014800 	.word	0x40014800
 8001de0:	40020400 	.word	0x40020400
 8001de4:	40001800 	.word	0x40001800

08001de8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001dec:	4b11      	ldr	r3, [pc, #68]	@ (8001e34 <MX_USART1_UART_Init+0x4c>)
 8001dee:	4a12      	ldr	r2, [pc, #72]	@ (8001e38 <MX_USART1_UART_Init+0x50>)
 8001df0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001df2:	4b10      	ldr	r3, [pc, #64]	@ (8001e34 <MX_USART1_UART_Init+0x4c>)
 8001df4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001df8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001dfa:	4b0e      	ldr	r3, [pc, #56]	@ (8001e34 <MX_USART1_UART_Init+0x4c>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e00:	4b0c      	ldr	r3, [pc, #48]	@ (8001e34 <MX_USART1_UART_Init+0x4c>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e06:	4b0b      	ldr	r3, [pc, #44]	@ (8001e34 <MX_USART1_UART_Init+0x4c>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e0c:	4b09      	ldr	r3, [pc, #36]	@ (8001e34 <MX_USART1_UART_Init+0x4c>)
 8001e0e:	220c      	movs	r2, #12
 8001e10:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e12:	4b08      	ldr	r3, [pc, #32]	@ (8001e34 <MX_USART1_UART_Init+0x4c>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e18:	4b06      	ldr	r3, [pc, #24]	@ (8001e34 <MX_USART1_UART_Init+0x4c>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e1e:	4805      	ldr	r0, [pc, #20]	@ (8001e34 <MX_USART1_UART_Init+0x4c>)
 8001e20:	f002 ff68 	bl	8004cf4 <HAL_UART_Init>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001e2a:	f7ff f843 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e2e:	bf00      	nop
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	200004dc 	.word	0x200004dc
 8001e38:	40011000 	.word	0x40011000

08001e3c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e40:	4b11      	ldr	r3, [pc, #68]	@ (8001e88 <MX_USART2_UART_Init+0x4c>)
 8001e42:	4a12      	ldr	r2, [pc, #72]	@ (8001e8c <MX_USART2_UART_Init+0x50>)
 8001e44:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e46:	4b10      	ldr	r3, [pc, #64]	@ (8001e88 <MX_USART2_UART_Init+0x4c>)
 8001e48:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e4c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e4e:	4b0e      	ldr	r3, [pc, #56]	@ (8001e88 <MX_USART2_UART_Init+0x4c>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e54:	4b0c      	ldr	r3, [pc, #48]	@ (8001e88 <MX_USART2_UART_Init+0x4c>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e5a:	4b0b      	ldr	r3, [pc, #44]	@ (8001e88 <MX_USART2_UART_Init+0x4c>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e60:	4b09      	ldr	r3, [pc, #36]	@ (8001e88 <MX_USART2_UART_Init+0x4c>)
 8001e62:	220c      	movs	r2, #12
 8001e64:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e66:	4b08      	ldr	r3, [pc, #32]	@ (8001e88 <MX_USART2_UART_Init+0x4c>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e6c:	4b06      	ldr	r3, [pc, #24]	@ (8001e88 <MX_USART2_UART_Init+0x4c>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e72:	4805      	ldr	r0, [pc, #20]	@ (8001e88 <MX_USART2_UART_Init+0x4c>)
 8001e74:	f002 ff3e 	bl	8004cf4 <HAL_UART_Init>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001e7e:	f7ff f819 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e82:	bf00      	nop
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	20000520 	.word	0x20000520
 8001e8c:	40004400 	.word	0x40004400

08001e90 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001e94:	4b11      	ldr	r3, [pc, #68]	@ (8001edc <MX_USART3_UART_Init+0x4c>)
 8001e96:	4a12      	ldr	r2, [pc, #72]	@ (8001ee0 <MX_USART3_UART_Init+0x50>)
 8001e98:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001e9a:	4b10      	ldr	r3, [pc, #64]	@ (8001edc <MX_USART3_UART_Init+0x4c>)
 8001e9c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ea0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001ea2:	4b0e      	ldr	r3, [pc, #56]	@ (8001edc <MX_USART3_UART_Init+0x4c>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001ea8:	4b0c      	ldr	r3, [pc, #48]	@ (8001edc <MX_USART3_UART_Init+0x4c>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001eae:	4b0b      	ldr	r3, [pc, #44]	@ (8001edc <MX_USART3_UART_Init+0x4c>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001eb4:	4b09      	ldr	r3, [pc, #36]	@ (8001edc <MX_USART3_UART_Init+0x4c>)
 8001eb6:	220c      	movs	r2, #12
 8001eb8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eba:	4b08      	ldr	r3, [pc, #32]	@ (8001edc <MX_USART3_UART_Init+0x4c>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ec0:	4b06      	ldr	r3, [pc, #24]	@ (8001edc <MX_USART3_UART_Init+0x4c>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001ec6:	4805      	ldr	r0, [pc, #20]	@ (8001edc <MX_USART3_UART_Init+0x4c>)
 8001ec8:	f002 ff14 	bl	8004cf4 <HAL_UART_Init>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001ed2:	f7fe ffef 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001ed6:	bf00      	nop
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	20000564 	.word	0x20000564
 8001ee0:	40004800 	.word	0x40004800

08001ee4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b08e      	sub	sp, #56	@ 0x38
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	605a      	str	r2, [r3, #4]
 8001ef6:	609a      	str	r2, [r3, #8]
 8001ef8:	60da      	str	r2, [r3, #12]
 8001efa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a50      	ldr	r2, [pc, #320]	@ (8002044 <HAL_UART_MspInit+0x160>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d135      	bne.n	8001f72 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f06:	2300      	movs	r3, #0
 8001f08:	623b      	str	r3, [r7, #32]
 8001f0a:	4b4f      	ldr	r3, [pc, #316]	@ (8002048 <HAL_UART_MspInit+0x164>)
 8001f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f0e:	4a4e      	ldr	r2, [pc, #312]	@ (8002048 <HAL_UART_MspInit+0x164>)
 8001f10:	f043 0310 	orr.w	r3, r3, #16
 8001f14:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f16:	4b4c      	ldr	r3, [pc, #304]	@ (8002048 <HAL_UART_MspInit+0x164>)
 8001f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f1a:	f003 0310 	and.w	r3, r3, #16
 8001f1e:	623b      	str	r3, [r7, #32]
 8001f20:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f22:	2300      	movs	r3, #0
 8001f24:	61fb      	str	r3, [r7, #28]
 8001f26:	4b48      	ldr	r3, [pc, #288]	@ (8002048 <HAL_UART_MspInit+0x164>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f2a:	4a47      	ldr	r2, [pc, #284]	@ (8002048 <HAL_UART_MspInit+0x164>)
 8001f2c:	f043 0301 	orr.w	r3, r3, #1
 8001f30:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f32:	4b45      	ldr	r3, [pc, #276]	@ (8002048 <HAL_UART_MspInit+0x164>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	61fb      	str	r3, [r7, #28]
 8001f3c:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001f3e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001f42:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f44:	2302      	movs	r3, #2
 8001f46:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f50:	2307      	movs	r3, #7
 8001f52:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f58:	4619      	mov	r1, r3
 8001f5a:	483c      	ldr	r0, [pc, #240]	@ (800204c <HAL_UART_MspInit+0x168>)
 8001f5c:	f000 fe1c 	bl	8002b98 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001f60:	2200      	movs	r2, #0
 8001f62:	2100      	movs	r1, #0
 8001f64:	2025      	movs	r0, #37	@ 0x25
 8001f66:	f000 fd4e 	bl	8002a06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001f6a:	2025      	movs	r0, #37	@ 0x25
 8001f6c:	f000 fd67 	bl	8002a3e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001f70:	e063      	b.n	800203a <HAL_UART_MspInit+0x156>
  else if(uartHandle->Instance==USART2)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a36      	ldr	r2, [pc, #216]	@ (8002050 <HAL_UART_MspInit+0x16c>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d12c      	bne.n	8001fd6 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	61bb      	str	r3, [r7, #24]
 8001f80:	4b31      	ldr	r3, [pc, #196]	@ (8002048 <HAL_UART_MspInit+0x164>)
 8001f82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f84:	4a30      	ldr	r2, [pc, #192]	@ (8002048 <HAL_UART_MspInit+0x164>)
 8001f86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f8a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f8c:	4b2e      	ldr	r3, [pc, #184]	@ (8002048 <HAL_UART_MspInit+0x164>)
 8001f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f94:	61bb      	str	r3, [r7, #24]
 8001f96:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f98:	2300      	movs	r3, #0
 8001f9a:	617b      	str	r3, [r7, #20]
 8001f9c:	4b2a      	ldr	r3, [pc, #168]	@ (8002048 <HAL_UART_MspInit+0x164>)
 8001f9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa0:	4a29      	ldr	r2, [pc, #164]	@ (8002048 <HAL_UART_MspInit+0x164>)
 8001fa2:	f043 0308 	orr.w	r3, r3, #8
 8001fa6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fa8:	4b27      	ldr	r3, [pc, #156]	@ (8002048 <HAL_UART_MspInit+0x164>)
 8001faa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fac:	f003 0308 	and.w	r3, r3, #8
 8001fb0:	617b      	str	r3, [r7, #20]
 8001fb2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001fb4:	2360      	movs	r3, #96	@ 0x60
 8001fb6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb8:	2302      	movs	r3, #2
 8001fba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001fc4:	2307      	movs	r3, #7
 8001fc6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fc8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fcc:	4619      	mov	r1, r3
 8001fce:	4821      	ldr	r0, [pc, #132]	@ (8002054 <HAL_UART_MspInit+0x170>)
 8001fd0:	f000 fde2 	bl	8002b98 <HAL_GPIO_Init>
}
 8001fd4:	e031      	b.n	800203a <HAL_UART_MspInit+0x156>
  else if(uartHandle->Instance==USART3)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a1f      	ldr	r2, [pc, #124]	@ (8002058 <HAL_UART_MspInit+0x174>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d12c      	bne.n	800203a <HAL_UART_MspInit+0x156>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	613b      	str	r3, [r7, #16]
 8001fe4:	4b18      	ldr	r3, [pc, #96]	@ (8002048 <HAL_UART_MspInit+0x164>)
 8001fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe8:	4a17      	ldr	r2, [pc, #92]	@ (8002048 <HAL_UART_MspInit+0x164>)
 8001fea:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001fee:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ff0:	4b15      	ldr	r3, [pc, #84]	@ (8002048 <HAL_UART_MspInit+0x164>)
 8001ff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ff8:	613b      	str	r3, [r7, #16]
 8001ffa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	60fb      	str	r3, [r7, #12]
 8002000:	4b11      	ldr	r3, [pc, #68]	@ (8002048 <HAL_UART_MspInit+0x164>)
 8002002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002004:	4a10      	ldr	r2, [pc, #64]	@ (8002048 <HAL_UART_MspInit+0x164>)
 8002006:	f043 0308 	orr.w	r3, r3, #8
 800200a:	6313      	str	r3, [r2, #48]	@ 0x30
 800200c:	4b0e      	ldr	r3, [pc, #56]	@ (8002048 <HAL_UART_MspInit+0x164>)
 800200e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002010:	f003 0308 	and.w	r3, r3, #8
 8002014:	60fb      	str	r3, [r7, #12]
 8002016:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002018:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800201c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800201e:	2302      	movs	r3, #2
 8002020:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002022:	2300      	movs	r3, #0
 8002024:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002026:	2303      	movs	r3, #3
 8002028:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800202a:	2307      	movs	r3, #7
 800202c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800202e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002032:	4619      	mov	r1, r3
 8002034:	4807      	ldr	r0, [pc, #28]	@ (8002054 <HAL_UART_MspInit+0x170>)
 8002036:	f000 fdaf 	bl	8002b98 <HAL_GPIO_Init>
}
 800203a:	bf00      	nop
 800203c:	3738      	adds	r7, #56	@ 0x38
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	40011000 	.word	0x40011000
 8002048:	40023800 	.word	0x40023800
 800204c:	40020000 	.word	0x40020000
 8002050:	40004400 	.word	0x40004400
 8002054:	40020c00 	.word	0x40020c00
 8002058:	40004800 	.word	0x40004800

0800205c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800205c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002094 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002060:	480d      	ldr	r0, [pc, #52]	@ (8002098 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002062:	490e      	ldr	r1, [pc, #56]	@ (800209c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002064:	4a0e      	ldr	r2, [pc, #56]	@ (80020a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002066:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002068:	e002      	b.n	8002070 <LoopCopyDataInit>

0800206a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800206a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800206c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800206e:	3304      	adds	r3, #4

08002070 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002070:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002072:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002074:	d3f9      	bcc.n	800206a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002076:	4a0b      	ldr	r2, [pc, #44]	@ (80020a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002078:	4c0b      	ldr	r4, [pc, #44]	@ (80020a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800207a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800207c:	e001      	b.n	8002082 <LoopFillZerobss>

0800207e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800207e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002080:	3204      	adds	r2, #4

08002082 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002082:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002084:	d3fb      	bcc.n	800207e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002086:	f7ff f829 	bl	80010dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800208a:	f003 fd4f 	bl	8005b2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800208e:	f7fe fe6f 	bl	8000d70 <main>
  bx  lr    
 8002092:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002094:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002098:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800209c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80020a0:	08005bb4 	.word	0x08005bb4
  ldr r2, =_sbss
 80020a4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80020a8:	200005ac 	.word	0x200005ac

080020ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020ac:	e7fe      	b.n	80020ac <ADC_IRQHandler>
	...

080020b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020b4:	4b0e      	ldr	r3, [pc, #56]	@ (80020f0 <HAL_Init+0x40>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a0d      	ldr	r2, [pc, #52]	@ (80020f0 <HAL_Init+0x40>)
 80020ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020c0:	4b0b      	ldr	r3, [pc, #44]	@ (80020f0 <HAL_Init+0x40>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a0a      	ldr	r2, [pc, #40]	@ (80020f0 <HAL_Init+0x40>)
 80020c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80020ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020cc:	4b08      	ldr	r3, [pc, #32]	@ (80020f0 <HAL_Init+0x40>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a07      	ldr	r2, [pc, #28]	@ (80020f0 <HAL_Init+0x40>)
 80020d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020d8:	2003      	movs	r0, #3
 80020da:	f000 fc89 	bl	80029f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020de:	200f      	movs	r0, #15
 80020e0:	f000 f808 	bl	80020f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020e4:	f7fe ff8a 	bl	8000ffc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	40023c00 	.word	0x40023c00

080020f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020fc:	4b12      	ldr	r3, [pc, #72]	@ (8002148 <HAL_InitTick+0x54>)
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	4b12      	ldr	r3, [pc, #72]	@ (800214c <HAL_InitTick+0x58>)
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	4619      	mov	r1, r3
 8002106:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800210a:	fbb3 f3f1 	udiv	r3, r3, r1
 800210e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002112:	4618      	mov	r0, r3
 8002114:	f000 fca1 	bl	8002a5a <HAL_SYSTICK_Config>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e00e      	b.n	8002140 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2b0f      	cmp	r3, #15
 8002126:	d80a      	bhi.n	800213e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002128:	2200      	movs	r2, #0
 800212a:	6879      	ldr	r1, [r7, #4]
 800212c:	f04f 30ff 	mov.w	r0, #4294967295
 8002130:	f000 fc69 	bl	8002a06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002134:	4a06      	ldr	r2, [pc, #24]	@ (8002150 <HAL_InitTick+0x5c>)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800213a:	2300      	movs	r3, #0
 800213c:	e000      	b.n	8002140 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
}
 8002140:	4618      	mov	r0, r3
 8002142:	3708      	adds	r7, #8
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	20000000 	.word	0x20000000
 800214c:	20000008 	.word	0x20000008
 8002150:	20000004 	.word	0x20000004

08002154 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002158:	4b06      	ldr	r3, [pc, #24]	@ (8002174 <HAL_IncTick+0x20>)
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	461a      	mov	r2, r3
 800215e:	4b06      	ldr	r3, [pc, #24]	@ (8002178 <HAL_IncTick+0x24>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4413      	add	r3, r2
 8002164:	4a04      	ldr	r2, [pc, #16]	@ (8002178 <HAL_IncTick+0x24>)
 8002166:	6013      	str	r3, [r2, #0]
}
 8002168:	bf00      	nop
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	20000008 	.word	0x20000008
 8002178:	200005a8 	.word	0x200005a8

0800217c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  return uwTick;
 8002180:	4b03      	ldr	r3, [pc, #12]	@ (8002190 <HAL_GetTick+0x14>)
 8002182:	681b      	ldr	r3, [r3, #0]
}
 8002184:	4618      	mov	r0, r3
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	200005a8 	.word	0x200005a8

08002194 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800219c:	2300      	movs	r3, #0
 800219e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d101      	bne.n	80021aa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e033      	b.n	8002212 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d109      	bne.n	80021c6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f7fe fa76 	bl	80006a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2200      	movs	r2, #0
 80021bc:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2200      	movs	r2, #0
 80021c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ca:	f003 0310 	and.w	r3, r3, #16
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d118      	bne.n	8002204 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80021da:	f023 0302 	bic.w	r3, r3, #2
 80021de:	f043 0202 	orr.w	r2, r3, #2
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f000 f93a 	bl	8002460 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f6:	f023 0303 	bic.w	r3, r3, #3
 80021fa:	f043 0201 	orr.w	r2, r3, #1
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	641a      	str	r2, [r3, #64]	@ 0x40
 8002202:	e001      	b.n	8002208 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002210:	7bfb      	ldrb	r3, [r7, #15]
}
 8002212:	4618      	mov	r0, r3
 8002214:	3710      	adds	r7, #16
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
	...

0800221c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800221c:	b480      	push	{r7}
 800221e:	b085      	sub	sp, #20
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002226:	2300      	movs	r3, #0
 8002228:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002230:	2b01      	cmp	r3, #1
 8002232:	d101      	bne.n	8002238 <HAL_ADC_ConfigChannel+0x1c>
 8002234:	2302      	movs	r3, #2
 8002236:	e105      	b.n	8002444 <HAL_ADC_ConfigChannel+0x228>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2b09      	cmp	r3, #9
 8002246:	d925      	bls.n	8002294 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	68d9      	ldr	r1, [r3, #12]
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	b29b      	uxth	r3, r3
 8002254:	461a      	mov	r2, r3
 8002256:	4613      	mov	r3, r2
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	4413      	add	r3, r2
 800225c:	3b1e      	subs	r3, #30
 800225e:	2207      	movs	r2, #7
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	43da      	mvns	r2, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	400a      	ands	r2, r1
 800226c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	68d9      	ldr	r1, [r3, #12]
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	689a      	ldr	r2, [r3, #8]
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	b29b      	uxth	r3, r3
 800227e:	4618      	mov	r0, r3
 8002280:	4603      	mov	r3, r0
 8002282:	005b      	lsls	r3, r3, #1
 8002284:	4403      	add	r3, r0
 8002286:	3b1e      	subs	r3, #30
 8002288:	409a      	lsls	r2, r3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	430a      	orrs	r2, r1
 8002290:	60da      	str	r2, [r3, #12]
 8002292:	e022      	b.n	80022da <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	6919      	ldr	r1, [r3, #16]
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	b29b      	uxth	r3, r3
 80022a0:	461a      	mov	r2, r3
 80022a2:	4613      	mov	r3, r2
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	4413      	add	r3, r2
 80022a8:	2207      	movs	r2, #7
 80022aa:	fa02 f303 	lsl.w	r3, r2, r3
 80022ae:	43da      	mvns	r2, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	400a      	ands	r2, r1
 80022b6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	6919      	ldr	r1, [r3, #16]
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	689a      	ldr	r2, [r3, #8]
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	4618      	mov	r0, r3
 80022ca:	4603      	mov	r3, r0
 80022cc:	005b      	lsls	r3, r3, #1
 80022ce:	4403      	add	r3, r0
 80022d0:	409a      	lsls	r2, r3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	430a      	orrs	r2, r1
 80022d8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	2b06      	cmp	r3, #6
 80022e0:	d824      	bhi.n	800232c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685a      	ldr	r2, [r3, #4]
 80022ec:	4613      	mov	r3, r2
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	4413      	add	r3, r2
 80022f2:	3b05      	subs	r3, #5
 80022f4:	221f      	movs	r2, #31
 80022f6:	fa02 f303 	lsl.w	r3, r2, r3
 80022fa:	43da      	mvns	r2, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	400a      	ands	r2, r1
 8002302:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	b29b      	uxth	r3, r3
 8002310:	4618      	mov	r0, r3
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	685a      	ldr	r2, [r3, #4]
 8002316:	4613      	mov	r3, r2
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	4413      	add	r3, r2
 800231c:	3b05      	subs	r3, #5
 800231e:	fa00 f203 	lsl.w	r2, r0, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	430a      	orrs	r2, r1
 8002328:	635a      	str	r2, [r3, #52]	@ 0x34
 800232a:	e04c      	b.n	80023c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	2b0c      	cmp	r3, #12
 8002332:	d824      	bhi.n	800237e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	685a      	ldr	r2, [r3, #4]
 800233e:	4613      	mov	r3, r2
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	4413      	add	r3, r2
 8002344:	3b23      	subs	r3, #35	@ 0x23
 8002346:	221f      	movs	r2, #31
 8002348:	fa02 f303 	lsl.w	r3, r2, r3
 800234c:	43da      	mvns	r2, r3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	400a      	ands	r2, r1
 8002354:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	b29b      	uxth	r3, r3
 8002362:	4618      	mov	r0, r3
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685a      	ldr	r2, [r3, #4]
 8002368:	4613      	mov	r3, r2
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	4413      	add	r3, r2
 800236e:	3b23      	subs	r3, #35	@ 0x23
 8002370:	fa00 f203 	lsl.w	r2, r0, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	430a      	orrs	r2, r1
 800237a:	631a      	str	r2, [r3, #48]	@ 0x30
 800237c:	e023      	b.n	80023c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685a      	ldr	r2, [r3, #4]
 8002388:	4613      	mov	r3, r2
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	4413      	add	r3, r2
 800238e:	3b41      	subs	r3, #65	@ 0x41
 8002390:	221f      	movs	r2, #31
 8002392:	fa02 f303 	lsl.w	r3, r2, r3
 8002396:	43da      	mvns	r2, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	400a      	ands	r2, r1
 800239e:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	4618      	mov	r0, r3
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	685a      	ldr	r2, [r3, #4]
 80023b2:	4613      	mov	r3, r2
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	4413      	add	r3, r2
 80023b8:	3b41      	subs	r3, #65	@ 0x41
 80023ba:	fa00 f203 	lsl.w	r2, r0, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	430a      	orrs	r2, r1
 80023c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023c6:	4b22      	ldr	r3, [pc, #136]	@ (8002450 <HAL_ADC_ConfigChannel+0x234>)
 80023c8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a21      	ldr	r2, [pc, #132]	@ (8002454 <HAL_ADC_ConfigChannel+0x238>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d109      	bne.n	80023e8 <HAL_ADC_ConfigChannel+0x1cc>
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2b12      	cmp	r3, #18
 80023da:	d105      	bne.n	80023e8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a19      	ldr	r2, [pc, #100]	@ (8002454 <HAL_ADC_ConfigChannel+0x238>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d123      	bne.n	800243a <HAL_ADC_ConfigChannel+0x21e>
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	2b10      	cmp	r3, #16
 80023f8:	d003      	beq.n	8002402 <HAL_ADC_ConfigChannel+0x1e6>
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2b11      	cmp	r3, #17
 8002400:	d11b      	bne.n	800243a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	2b10      	cmp	r3, #16
 8002414:	d111      	bne.n	800243a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002416:	4b10      	ldr	r3, [pc, #64]	@ (8002458 <HAL_ADC_ConfigChannel+0x23c>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a10      	ldr	r2, [pc, #64]	@ (800245c <HAL_ADC_ConfigChannel+0x240>)
 800241c:	fba2 2303 	umull	r2, r3, r2, r3
 8002420:	0c9a      	lsrs	r2, r3, #18
 8002422:	4613      	mov	r3, r2
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	4413      	add	r3, r2
 8002428:	005b      	lsls	r3, r3, #1
 800242a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800242c:	e002      	b.n	8002434 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	3b01      	subs	r3, #1
 8002432:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d1f9      	bne.n	800242e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002442:	2300      	movs	r3, #0
}
 8002444:	4618      	mov	r0, r3
 8002446:	3714      	adds	r7, #20
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr
 8002450:	40012300 	.word	0x40012300
 8002454:	40012000 	.word	0x40012000
 8002458:	20000000 	.word	0x20000000
 800245c:	431bde83 	.word	0x431bde83

08002460 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002460:	b480      	push	{r7}
 8002462:	b085      	sub	sp, #20
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002468:	4b79      	ldr	r3, [pc, #484]	@ (8002650 <ADC_Init+0x1f0>)
 800246a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	685a      	ldr	r2, [r3, #4]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	431a      	orrs	r2, r3
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	685a      	ldr	r2, [r3, #4]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002494:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	6859      	ldr	r1, [r3, #4]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	691b      	ldr	r3, [r3, #16]
 80024a0:	021a      	lsls	r2, r3, #8
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	430a      	orrs	r2, r1
 80024a8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	685a      	ldr	r2, [r3, #4]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80024b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	6859      	ldr	r1, [r3, #4]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	689a      	ldr	r2, [r3, #8]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	430a      	orrs	r2, r1
 80024ca:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	689a      	ldr	r2, [r3, #8]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80024da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	6899      	ldr	r1, [r3, #8]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	68da      	ldr	r2, [r3, #12]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	430a      	orrs	r2, r1
 80024ec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024f2:	4a58      	ldr	r2, [pc, #352]	@ (8002654 <ADC_Init+0x1f4>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d022      	beq.n	800253e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	689a      	ldr	r2, [r3, #8]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002506:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	6899      	ldr	r1, [r3, #8]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	430a      	orrs	r2, r1
 8002518:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	689a      	ldr	r2, [r3, #8]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002528:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	6899      	ldr	r1, [r3, #8]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	430a      	orrs	r2, r1
 800253a:	609a      	str	r2, [r3, #8]
 800253c:	e00f      	b.n	800255e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	689a      	ldr	r2, [r3, #8]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800254c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	689a      	ldr	r2, [r3, #8]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800255c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	689a      	ldr	r2, [r3, #8]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f022 0202 	bic.w	r2, r2, #2
 800256c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	6899      	ldr	r1, [r3, #8]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	7e1b      	ldrb	r3, [r3, #24]
 8002578:	005a      	lsls	r2, r3, #1
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	430a      	orrs	r2, r1
 8002580:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d01b      	beq.n	80025c4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	685a      	ldr	r2, [r3, #4]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800259a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	685a      	ldr	r2, [r3, #4]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80025aa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	6859      	ldr	r1, [r3, #4]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025b6:	3b01      	subs	r3, #1
 80025b8:	035a      	lsls	r2, r3, #13
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	430a      	orrs	r2, r1
 80025c0:	605a      	str	r2, [r3, #4]
 80025c2:	e007      	b.n	80025d4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	685a      	ldr	r2, [r3, #4]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80025d2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80025e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	69db      	ldr	r3, [r3, #28]
 80025ee:	3b01      	subs	r3, #1
 80025f0:	051a      	lsls	r2, r3, #20
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	430a      	orrs	r2, r1
 80025f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	689a      	ldr	r2, [r3, #8]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002608:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	6899      	ldr	r1, [r3, #8]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002616:	025a      	lsls	r2, r3, #9
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	430a      	orrs	r2, r1
 800261e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	689a      	ldr	r2, [r3, #8]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800262e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	6899      	ldr	r1, [r3, #8]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	695b      	ldr	r3, [r3, #20]
 800263a:	029a      	lsls	r2, r3, #10
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	430a      	orrs	r2, r1
 8002642:	609a      	str	r2, [r3, #8]
}
 8002644:	bf00      	nop
 8002646:	3714      	adds	r7, #20
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr
 8002650:	40012300 	.word	0x40012300
 8002654:	0f000001 	.word	0x0f000001

08002658 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d101      	bne.n	800266a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e0ed      	b.n	8002846 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002670:	b2db      	uxtb	r3, r3
 8002672:	2b00      	cmp	r3, #0
 8002674:	d102      	bne.n	800267c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f7fe f93c 	bl	80008f4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f042 0201 	orr.w	r2, r2, #1
 800268a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800268c:	f7ff fd76 	bl	800217c <HAL_GetTick>
 8002690:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002692:	e012      	b.n	80026ba <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002694:	f7ff fd72 	bl	800217c <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b0a      	cmp	r3, #10
 80026a0:	d90b      	bls.n	80026ba <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026a6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2205      	movs	r2, #5
 80026b2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e0c5      	b.n	8002846 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f003 0301 	and.w	r3, r3, #1
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d0e5      	beq.n	8002694 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f022 0202 	bic.w	r2, r2, #2
 80026d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80026d8:	f7ff fd50 	bl	800217c <HAL_GetTick>
 80026dc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80026de:	e012      	b.n	8002706 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80026e0:	f7ff fd4c 	bl	800217c <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b0a      	cmp	r3, #10
 80026ec:	d90b      	bls.n	8002706 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026f2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2205      	movs	r2, #5
 80026fe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e09f      	b.n	8002846 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f003 0302 	and.w	r3, r3, #2
 8002710:	2b00      	cmp	r3, #0
 8002712:	d1e5      	bne.n	80026e0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	7e1b      	ldrb	r3, [r3, #24]
 8002718:	2b01      	cmp	r3, #1
 800271a:	d108      	bne.n	800272e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800272a:	601a      	str	r2, [r3, #0]
 800272c:	e007      	b.n	800273e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800273c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	7e5b      	ldrb	r3, [r3, #25]
 8002742:	2b01      	cmp	r3, #1
 8002744:	d108      	bne.n	8002758 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002754:	601a      	str	r2, [r3, #0]
 8002756:	e007      	b.n	8002768 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002766:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	7e9b      	ldrb	r3, [r3, #26]
 800276c:	2b01      	cmp	r3, #1
 800276e:	d108      	bne.n	8002782 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f042 0220 	orr.w	r2, r2, #32
 800277e:	601a      	str	r2, [r3, #0]
 8002780:	e007      	b.n	8002792 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f022 0220 	bic.w	r2, r2, #32
 8002790:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	7edb      	ldrb	r3, [r3, #27]
 8002796:	2b01      	cmp	r3, #1
 8002798:	d108      	bne.n	80027ac <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f022 0210 	bic.w	r2, r2, #16
 80027a8:	601a      	str	r2, [r3, #0]
 80027aa:	e007      	b.n	80027bc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f042 0210 	orr.w	r2, r2, #16
 80027ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	7f1b      	ldrb	r3, [r3, #28]
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d108      	bne.n	80027d6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f042 0208 	orr.w	r2, r2, #8
 80027d2:	601a      	str	r2, [r3, #0]
 80027d4:	e007      	b.n	80027e6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f022 0208 	bic.w	r2, r2, #8
 80027e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	7f5b      	ldrb	r3, [r3, #29]
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d108      	bne.n	8002800 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f042 0204 	orr.w	r2, r2, #4
 80027fc:	601a      	str	r2, [r3, #0]
 80027fe:	e007      	b.n	8002810 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f022 0204 	bic.w	r2, r2, #4
 800280e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	689a      	ldr	r2, [r3, #8]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	431a      	orrs	r2, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	431a      	orrs	r2, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	695b      	ldr	r3, [r3, #20]
 8002824:	ea42 0103 	orr.w	r1, r2, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	1e5a      	subs	r2, r3, #1
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	430a      	orrs	r2, r1
 8002834:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2201      	movs	r2, #1
 8002840:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	3710      	adds	r7, #16
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
	...

08002850 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002850:	b480      	push	{r7}
 8002852:	b085      	sub	sp, #20
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f003 0307 	and.w	r3, r3, #7
 800285e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002860:	4b0c      	ldr	r3, [pc, #48]	@ (8002894 <__NVIC_SetPriorityGrouping+0x44>)
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002866:	68ba      	ldr	r2, [r7, #8]
 8002868:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800286c:	4013      	ands	r3, r2
 800286e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002878:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800287c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002880:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002882:	4a04      	ldr	r2, [pc, #16]	@ (8002894 <__NVIC_SetPriorityGrouping+0x44>)
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	60d3      	str	r3, [r2, #12]
}
 8002888:	bf00      	nop
 800288a:	3714      	adds	r7, #20
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr
 8002894:	e000ed00 	.word	0xe000ed00

08002898 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800289c:	4b04      	ldr	r3, [pc, #16]	@ (80028b0 <__NVIC_GetPriorityGrouping+0x18>)
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	0a1b      	lsrs	r3, r3, #8
 80028a2:	f003 0307 	and.w	r3, r3, #7
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr
 80028b0:	e000ed00 	.word	0xe000ed00

080028b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	4603      	mov	r3, r0
 80028bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	db0b      	blt.n	80028de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028c6:	79fb      	ldrb	r3, [r7, #7]
 80028c8:	f003 021f 	and.w	r2, r3, #31
 80028cc:	4907      	ldr	r1, [pc, #28]	@ (80028ec <__NVIC_EnableIRQ+0x38>)
 80028ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d2:	095b      	lsrs	r3, r3, #5
 80028d4:	2001      	movs	r0, #1
 80028d6:	fa00 f202 	lsl.w	r2, r0, r2
 80028da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028de:	bf00      	nop
 80028e0:	370c      	adds	r7, #12
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop
 80028ec:	e000e100 	.word	0xe000e100

080028f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	4603      	mov	r3, r0
 80028f8:	6039      	str	r1, [r7, #0]
 80028fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002900:	2b00      	cmp	r3, #0
 8002902:	db0a      	blt.n	800291a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	b2da      	uxtb	r2, r3
 8002908:	490c      	ldr	r1, [pc, #48]	@ (800293c <__NVIC_SetPriority+0x4c>)
 800290a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800290e:	0112      	lsls	r2, r2, #4
 8002910:	b2d2      	uxtb	r2, r2
 8002912:	440b      	add	r3, r1
 8002914:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002918:	e00a      	b.n	8002930 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	b2da      	uxtb	r2, r3
 800291e:	4908      	ldr	r1, [pc, #32]	@ (8002940 <__NVIC_SetPriority+0x50>)
 8002920:	79fb      	ldrb	r3, [r7, #7]
 8002922:	f003 030f 	and.w	r3, r3, #15
 8002926:	3b04      	subs	r3, #4
 8002928:	0112      	lsls	r2, r2, #4
 800292a:	b2d2      	uxtb	r2, r2
 800292c:	440b      	add	r3, r1
 800292e:	761a      	strb	r2, [r3, #24]
}
 8002930:	bf00      	nop
 8002932:	370c      	adds	r7, #12
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr
 800293c:	e000e100 	.word	0xe000e100
 8002940:	e000ed00 	.word	0xe000ed00

08002944 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002944:	b480      	push	{r7}
 8002946:	b089      	sub	sp, #36	@ 0x24
 8002948:	af00      	add	r7, sp, #0
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	60b9      	str	r1, [r7, #8]
 800294e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f003 0307 	and.w	r3, r3, #7
 8002956:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	f1c3 0307 	rsb	r3, r3, #7
 800295e:	2b04      	cmp	r3, #4
 8002960:	bf28      	it	cs
 8002962:	2304      	movcs	r3, #4
 8002964:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	3304      	adds	r3, #4
 800296a:	2b06      	cmp	r3, #6
 800296c:	d902      	bls.n	8002974 <NVIC_EncodePriority+0x30>
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	3b03      	subs	r3, #3
 8002972:	e000      	b.n	8002976 <NVIC_EncodePriority+0x32>
 8002974:	2300      	movs	r3, #0
 8002976:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002978:	f04f 32ff 	mov.w	r2, #4294967295
 800297c:	69bb      	ldr	r3, [r7, #24]
 800297e:	fa02 f303 	lsl.w	r3, r2, r3
 8002982:	43da      	mvns	r2, r3
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	401a      	ands	r2, r3
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800298c:	f04f 31ff 	mov.w	r1, #4294967295
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	fa01 f303 	lsl.w	r3, r1, r3
 8002996:	43d9      	mvns	r1, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800299c:	4313      	orrs	r3, r2
         );
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3724      	adds	r7, #36	@ 0x24
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
	...

080029ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	3b01      	subs	r3, #1
 80029b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80029bc:	d301      	bcc.n	80029c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029be:	2301      	movs	r3, #1
 80029c0:	e00f      	b.n	80029e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029c2:	4a0a      	ldr	r2, [pc, #40]	@ (80029ec <SysTick_Config+0x40>)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	3b01      	subs	r3, #1
 80029c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029ca:	210f      	movs	r1, #15
 80029cc:	f04f 30ff 	mov.w	r0, #4294967295
 80029d0:	f7ff ff8e 	bl	80028f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029d4:	4b05      	ldr	r3, [pc, #20]	@ (80029ec <SysTick_Config+0x40>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029da:	4b04      	ldr	r3, [pc, #16]	@ (80029ec <SysTick_Config+0x40>)
 80029dc:	2207      	movs	r2, #7
 80029de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3708      	adds	r7, #8
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	e000e010 	.word	0xe000e010

080029f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f7ff ff29 	bl	8002850 <__NVIC_SetPriorityGrouping>
}
 80029fe:	bf00      	nop
 8002a00:	3708      	adds	r7, #8
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}

08002a06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a06:	b580      	push	{r7, lr}
 8002a08:	b086      	sub	sp, #24
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	60b9      	str	r1, [r7, #8]
 8002a10:	607a      	str	r2, [r7, #4]
 8002a12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a14:	2300      	movs	r3, #0
 8002a16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a18:	f7ff ff3e 	bl	8002898 <__NVIC_GetPriorityGrouping>
 8002a1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	68b9      	ldr	r1, [r7, #8]
 8002a22:	6978      	ldr	r0, [r7, #20]
 8002a24:	f7ff ff8e 	bl	8002944 <NVIC_EncodePriority>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a2e:	4611      	mov	r1, r2
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7ff ff5d 	bl	80028f0 <__NVIC_SetPriority>
}
 8002a36:	bf00      	nop
 8002a38:	3718      	adds	r7, #24
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}

08002a3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a3e:	b580      	push	{r7, lr}
 8002a40:	b082      	sub	sp, #8
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	4603      	mov	r3, r0
 8002a46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f7ff ff31 	bl	80028b4 <__NVIC_EnableIRQ>
}
 8002a52:	bf00      	nop
 8002a54:	3708      	adds	r7, #8
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}

08002a5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a5a:	b580      	push	{r7, lr}
 8002a5c:	b082      	sub	sp, #8
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f7ff ffa2 	bl	80029ac <SysTick_Config>
 8002a68:	4603      	mov	r3, r0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3708      	adds	r7, #8
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}

08002a72 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a72:	b580      	push	{r7, lr}
 8002a74:	b084      	sub	sp, #16
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a7e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002a80:	f7ff fb7c 	bl	800217c <HAL_GetTick>
 8002a84:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d008      	beq.n	8002aa4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2280      	movs	r2, #128	@ 0x80
 8002a96:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e052      	b.n	8002b4a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f022 0216 	bic.w	r2, r2, #22
 8002ab2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	695a      	ldr	r2, [r3, #20]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002ac2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d103      	bne.n	8002ad4 <HAL_DMA_Abort+0x62>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d007      	beq.n	8002ae4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f022 0208 	bic.w	r2, r2, #8
 8002ae2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f022 0201 	bic.w	r2, r2, #1
 8002af2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002af4:	e013      	b.n	8002b1e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002af6:	f7ff fb41 	bl	800217c <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	2b05      	cmp	r3, #5
 8002b02:	d90c      	bls.n	8002b1e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2220      	movs	r2, #32
 8002b08:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2203      	movs	r2, #3
 8002b0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e015      	b.n	8002b4a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0301 	and.w	r3, r3, #1
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d1e4      	bne.n	8002af6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b30:	223f      	movs	r2, #63	@ 0x3f
 8002b32:	409a      	lsls	r2, r3
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3710      	adds	r7, #16
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b52:	b480      	push	{r7}
 8002b54:	b083      	sub	sp, #12
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d004      	beq.n	8002b70 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2280      	movs	r2, #128	@ 0x80
 8002b6a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e00c      	b.n	8002b8a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2205      	movs	r2, #5
 8002b74:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f022 0201 	bic.w	r2, r2, #1
 8002b86:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	370c      	adds	r7, #12
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
	...

08002b98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b089      	sub	sp, #36	@ 0x24
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002baa:	2300      	movs	r3, #0
 8002bac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bae:	2300      	movs	r3, #0
 8002bb0:	61fb      	str	r3, [r7, #28]
 8002bb2:	e16b      	b.n	8002e8c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	697a      	ldr	r2, [r7, #20]
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bc8:	693a      	ldr	r2, [r7, #16]
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	f040 815a 	bne.w	8002e86 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f003 0303 	and.w	r3, r3, #3
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d005      	beq.n	8002bea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	d130      	bne.n	8002c4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	005b      	lsls	r3, r3, #1
 8002bf4:	2203      	movs	r2, #3
 8002bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfa:	43db      	mvns	r3, r3
 8002bfc:	69ba      	ldr	r2, [r7, #24]
 8002bfe:	4013      	ands	r3, r2
 8002c00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	68da      	ldr	r2, [r3, #12]
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	005b      	lsls	r3, r3, #1
 8002c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0e:	69ba      	ldr	r2, [r7, #24]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	69ba      	ldr	r2, [r7, #24]
 8002c18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c20:	2201      	movs	r2, #1
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	fa02 f303 	lsl.w	r3, r2, r3
 8002c28:	43db      	mvns	r3, r3
 8002c2a:	69ba      	ldr	r2, [r7, #24]
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	091b      	lsrs	r3, r3, #4
 8002c36:	f003 0201 	and.w	r2, r3, #1
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c40:	69ba      	ldr	r2, [r7, #24]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	69ba      	ldr	r2, [r7, #24]
 8002c4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f003 0303 	and.w	r3, r3, #3
 8002c54:	2b03      	cmp	r3, #3
 8002c56:	d017      	beq.n	8002c88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	005b      	lsls	r3, r3, #1
 8002c62:	2203      	movs	r2, #3
 8002c64:	fa02 f303 	lsl.w	r3, r2, r3
 8002c68:	43db      	mvns	r3, r3
 8002c6a:	69ba      	ldr	r2, [r7, #24]
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	689a      	ldr	r2, [r3, #8]
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	005b      	lsls	r3, r3, #1
 8002c78:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7c:	69ba      	ldr	r2, [r7, #24]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	69ba      	ldr	r2, [r7, #24]
 8002c86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f003 0303 	and.w	r3, r3, #3
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d123      	bne.n	8002cdc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	08da      	lsrs	r2, r3, #3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	3208      	adds	r2, #8
 8002c9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ca0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	f003 0307 	and.w	r3, r3, #7
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	220f      	movs	r2, #15
 8002cac:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb0:	43db      	mvns	r3, r3
 8002cb2:	69ba      	ldr	r2, [r7, #24]
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	691a      	ldr	r2, [r3, #16]
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	f003 0307 	and.w	r3, r3, #7
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc8:	69ba      	ldr	r2, [r7, #24]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	08da      	lsrs	r2, r3, #3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	3208      	adds	r2, #8
 8002cd6:	69b9      	ldr	r1, [r7, #24]
 8002cd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	005b      	lsls	r3, r3, #1
 8002ce6:	2203      	movs	r2, #3
 8002ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cec:	43db      	mvns	r3, r3
 8002cee:	69ba      	ldr	r2, [r7, #24]
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f003 0203 	and.w	r2, r3, #3
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	005b      	lsls	r3, r3, #1
 8002d00:	fa02 f303 	lsl.w	r3, r2, r3
 8002d04:	69ba      	ldr	r2, [r7, #24]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	f000 80b4 	beq.w	8002e86 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d1e:	2300      	movs	r3, #0
 8002d20:	60fb      	str	r3, [r7, #12]
 8002d22:	4b60      	ldr	r3, [pc, #384]	@ (8002ea4 <HAL_GPIO_Init+0x30c>)
 8002d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d26:	4a5f      	ldr	r2, [pc, #380]	@ (8002ea4 <HAL_GPIO_Init+0x30c>)
 8002d28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d2e:	4b5d      	ldr	r3, [pc, #372]	@ (8002ea4 <HAL_GPIO_Init+0x30c>)
 8002d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d36:	60fb      	str	r3, [r7, #12]
 8002d38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d3a:	4a5b      	ldr	r2, [pc, #364]	@ (8002ea8 <HAL_GPIO_Init+0x310>)
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	089b      	lsrs	r3, r3, #2
 8002d40:	3302      	adds	r3, #2
 8002d42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	f003 0303 	and.w	r3, r3, #3
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	220f      	movs	r2, #15
 8002d52:	fa02 f303 	lsl.w	r3, r2, r3
 8002d56:	43db      	mvns	r3, r3
 8002d58:	69ba      	ldr	r2, [r7, #24]
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a52      	ldr	r2, [pc, #328]	@ (8002eac <HAL_GPIO_Init+0x314>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d02b      	beq.n	8002dbe <HAL_GPIO_Init+0x226>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a51      	ldr	r2, [pc, #324]	@ (8002eb0 <HAL_GPIO_Init+0x318>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d025      	beq.n	8002dba <HAL_GPIO_Init+0x222>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a50      	ldr	r2, [pc, #320]	@ (8002eb4 <HAL_GPIO_Init+0x31c>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d01f      	beq.n	8002db6 <HAL_GPIO_Init+0x21e>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a4f      	ldr	r2, [pc, #316]	@ (8002eb8 <HAL_GPIO_Init+0x320>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d019      	beq.n	8002db2 <HAL_GPIO_Init+0x21a>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a4e      	ldr	r2, [pc, #312]	@ (8002ebc <HAL_GPIO_Init+0x324>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d013      	beq.n	8002dae <HAL_GPIO_Init+0x216>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a4d      	ldr	r2, [pc, #308]	@ (8002ec0 <HAL_GPIO_Init+0x328>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d00d      	beq.n	8002daa <HAL_GPIO_Init+0x212>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a4c      	ldr	r2, [pc, #304]	@ (8002ec4 <HAL_GPIO_Init+0x32c>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d007      	beq.n	8002da6 <HAL_GPIO_Init+0x20e>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a4b      	ldr	r2, [pc, #300]	@ (8002ec8 <HAL_GPIO_Init+0x330>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d101      	bne.n	8002da2 <HAL_GPIO_Init+0x20a>
 8002d9e:	2307      	movs	r3, #7
 8002da0:	e00e      	b.n	8002dc0 <HAL_GPIO_Init+0x228>
 8002da2:	2308      	movs	r3, #8
 8002da4:	e00c      	b.n	8002dc0 <HAL_GPIO_Init+0x228>
 8002da6:	2306      	movs	r3, #6
 8002da8:	e00a      	b.n	8002dc0 <HAL_GPIO_Init+0x228>
 8002daa:	2305      	movs	r3, #5
 8002dac:	e008      	b.n	8002dc0 <HAL_GPIO_Init+0x228>
 8002dae:	2304      	movs	r3, #4
 8002db0:	e006      	b.n	8002dc0 <HAL_GPIO_Init+0x228>
 8002db2:	2303      	movs	r3, #3
 8002db4:	e004      	b.n	8002dc0 <HAL_GPIO_Init+0x228>
 8002db6:	2302      	movs	r3, #2
 8002db8:	e002      	b.n	8002dc0 <HAL_GPIO_Init+0x228>
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e000      	b.n	8002dc0 <HAL_GPIO_Init+0x228>
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	69fa      	ldr	r2, [r7, #28]
 8002dc2:	f002 0203 	and.w	r2, r2, #3
 8002dc6:	0092      	lsls	r2, r2, #2
 8002dc8:	4093      	lsls	r3, r2
 8002dca:	69ba      	ldr	r2, [r7, #24]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002dd0:	4935      	ldr	r1, [pc, #212]	@ (8002ea8 <HAL_GPIO_Init+0x310>)
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	089b      	lsrs	r3, r3, #2
 8002dd6:	3302      	adds	r3, #2
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002dde:	4b3b      	ldr	r3, [pc, #236]	@ (8002ecc <HAL_GPIO_Init+0x334>)
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	43db      	mvns	r3, r3
 8002de8:	69ba      	ldr	r2, [r7, #24]
 8002dea:	4013      	ands	r3, r2
 8002dec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d003      	beq.n	8002e02 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002dfa:	69ba      	ldr	r2, [r7, #24]
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e02:	4a32      	ldr	r2, [pc, #200]	@ (8002ecc <HAL_GPIO_Init+0x334>)
 8002e04:	69bb      	ldr	r3, [r7, #24]
 8002e06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e08:	4b30      	ldr	r3, [pc, #192]	@ (8002ecc <HAL_GPIO_Init+0x334>)
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	43db      	mvns	r3, r3
 8002e12:	69ba      	ldr	r2, [r7, #24]
 8002e14:	4013      	ands	r3, r2
 8002e16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d003      	beq.n	8002e2c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e2c:	4a27      	ldr	r2, [pc, #156]	@ (8002ecc <HAL_GPIO_Init+0x334>)
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e32:	4b26      	ldr	r3, [pc, #152]	@ (8002ecc <HAL_GPIO_Init+0x334>)
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	43db      	mvns	r3, r3
 8002e3c:	69ba      	ldr	r2, [r7, #24]
 8002e3e:	4013      	ands	r3, r2
 8002e40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d003      	beq.n	8002e56 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002e4e:	69ba      	ldr	r2, [r7, #24]
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e56:	4a1d      	ldr	r2, [pc, #116]	@ (8002ecc <HAL_GPIO_Init+0x334>)
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e5c:	4b1b      	ldr	r3, [pc, #108]	@ (8002ecc <HAL_GPIO_Init+0x334>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	43db      	mvns	r3, r3
 8002e66:	69ba      	ldr	r2, [r7, #24]
 8002e68:	4013      	ands	r3, r2
 8002e6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d003      	beq.n	8002e80 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002e78:	69ba      	ldr	r2, [r7, #24]
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e80:	4a12      	ldr	r2, [pc, #72]	@ (8002ecc <HAL_GPIO_Init+0x334>)
 8002e82:	69bb      	ldr	r3, [r7, #24]
 8002e84:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	3301      	adds	r3, #1
 8002e8a:	61fb      	str	r3, [r7, #28]
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	2b0f      	cmp	r3, #15
 8002e90:	f67f ae90 	bls.w	8002bb4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e94:	bf00      	nop
 8002e96:	bf00      	nop
 8002e98:	3724      	adds	r7, #36	@ 0x24
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr
 8002ea2:	bf00      	nop
 8002ea4:	40023800 	.word	0x40023800
 8002ea8:	40013800 	.word	0x40013800
 8002eac:	40020000 	.word	0x40020000
 8002eb0:	40020400 	.word	0x40020400
 8002eb4:	40020800 	.word	0x40020800
 8002eb8:	40020c00 	.word	0x40020c00
 8002ebc:	40021000 	.word	0x40021000
 8002ec0:	40021400 	.word	0x40021400
 8002ec4:	40021800 	.word	0x40021800
 8002ec8:	40021c00 	.word	0x40021c00
 8002ecc:	40013c00 	.word	0x40013c00

08002ed0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	460b      	mov	r3, r1
 8002eda:	807b      	strh	r3, [r7, #2]
 8002edc:	4613      	mov	r3, r2
 8002ede:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ee0:	787b      	ldrb	r3, [r7, #1]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d003      	beq.n	8002eee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ee6:	887a      	ldrh	r2, [r7, #2]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002eec:	e003      	b.n	8002ef6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002eee:	887b      	ldrh	r3, [r7, #2]
 8002ef0:	041a      	lsls	r2, r3, #16
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	619a      	str	r2, [r3, #24]
}
 8002ef6:	bf00      	nop
 8002ef8:	370c      	adds	r7, #12
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
	...

08002f04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d101      	bne.n	8002f16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e12b      	b.n	800316e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d106      	bne.n	8002f30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f7fd fea2 	bl	8000c74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2224      	movs	r2, #36	@ 0x24
 8002f34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f022 0201 	bic.w	r2, r2, #1
 8002f46:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002f56:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f66:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f68:	f000 fd80 	bl	8003a6c <HAL_RCC_GetPCLK1Freq>
 8002f6c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	4a81      	ldr	r2, [pc, #516]	@ (8003178 <HAL_I2C_Init+0x274>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d807      	bhi.n	8002f88 <HAL_I2C_Init+0x84>
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	4a80      	ldr	r2, [pc, #512]	@ (800317c <HAL_I2C_Init+0x278>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	bf94      	ite	ls
 8002f80:	2301      	movls	r3, #1
 8002f82:	2300      	movhi	r3, #0
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	e006      	b.n	8002f96 <HAL_I2C_Init+0x92>
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	4a7d      	ldr	r2, [pc, #500]	@ (8003180 <HAL_I2C_Init+0x27c>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	bf94      	ite	ls
 8002f90:	2301      	movls	r3, #1
 8002f92:	2300      	movhi	r3, #0
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d001      	beq.n	8002f9e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e0e7      	b.n	800316e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	4a78      	ldr	r2, [pc, #480]	@ (8003184 <HAL_I2C_Init+0x280>)
 8002fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa6:	0c9b      	lsrs	r3, r3, #18
 8002fa8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	68ba      	ldr	r2, [r7, #8]
 8002fba:	430a      	orrs	r2, r1
 8002fbc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	6a1b      	ldr	r3, [r3, #32]
 8002fc4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	4a6a      	ldr	r2, [pc, #424]	@ (8003178 <HAL_I2C_Init+0x274>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d802      	bhi.n	8002fd8 <HAL_I2C_Init+0xd4>
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	e009      	b.n	8002fec <HAL_I2C_Init+0xe8>
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002fde:	fb02 f303 	mul.w	r3, r2, r3
 8002fe2:	4a69      	ldr	r2, [pc, #420]	@ (8003188 <HAL_I2C_Init+0x284>)
 8002fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe8:	099b      	lsrs	r3, r3, #6
 8002fea:	3301      	adds	r3, #1
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	6812      	ldr	r2, [r2, #0]
 8002ff0:	430b      	orrs	r3, r1
 8002ff2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	69db      	ldr	r3, [r3, #28]
 8002ffa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002ffe:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	495c      	ldr	r1, [pc, #368]	@ (8003178 <HAL_I2C_Init+0x274>)
 8003008:	428b      	cmp	r3, r1
 800300a:	d819      	bhi.n	8003040 <HAL_I2C_Init+0x13c>
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	1e59      	subs	r1, r3, #1
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	005b      	lsls	r3, r3, #1
 8003016:	fbb1 f3f3 	udiv	r3, r1, r3
 800301a:	1c59      	adds	r1, r3, #1
 800301c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003020:	400b      	ands	r3, r1
 8003022:	2b00      	cmp	r3, #0
 8003024:	d00a      	beq.n	800303c <HAL_I2C_Init+0x138>
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	1e59      	subs	r1, r3, #1
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	005b      	lsls	r3, r3, #1
 8003030:	fbb1 f3f3 	udiv	r3, r1, r3
 8003034:	3301      	adds	r3, #1
 8003036:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800303a:	e051      	b.n	80030e0 <HAL_I2C_Init+0x1dc>
 800303c:	2304      	movs	r3, #4
 800303e:	e04f      	b.n	80030e0 <HAL_I2C_Init+0x1dc>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d111      	bne.n	800306c <HAL_I2C_Init+0x168>
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	1e58      	subs	r0, r3, #1
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6859      	ldr	r1, [r3, #4]
 8003050:	460b      	mov	r3, r1
 8003052:	005b      	lsls	r3, r3, #1
 8003054:	440b      	add	r3, r1
 8003056:	fbb0 f3f3 	udiv	r3, r0, r3
 800305a:	3301      	adds	r3, #1
 800305c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003060:	2b00      	cmp	r3, #0
 8003062:	bf0c      	ite	eq
 8003064:	2301      	moveq	r3, #1
 8003066:	2300      	movne	r3, #0
 8003068:	b2db      	uxtb	r3, r3
 800306a:	e012      	b.n	8003092 <HAL_I2C_Init+0x18e>
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	1e58      	subs	r0, r3, #1
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6859      	ldr	r1, [r3, #4]
 8003074:	460b      	mov	r3, r1
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	440b      	add	r3, r1
 800307a:	0099      	lsls	r1, r3, #2
 800307c:	440b      	add	r3, r1
 800307e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003082:	3301      	adds	r3, #1
 8003084:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003088:	2b00      	cmp	r3, #0
 800308a:	bf0c      	ite	eq
 800308c:	2301      	moveq	r3, #1
 800308e:	2300      	movne	r3, #0
 8003090:	b2db      	uxtb	r3, r3
 8003092:	2b00      	cmp	r3, #0
 8003094:	d001      	beq.n	800309a <HAL_I2C_Init+0x196>
 8003096:	2301      	movs	r3, #1
 8003098:	e022      	b.n	80030e0 <HAL_I2C_Init+0x1dc>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d10e      	bne.n	80030c0 <HAL_I2C_Init+0x1bc>
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	1e58      	subs	r0, r3, #1
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6859      	ldr	r1, [r3, #4]
 80030aa:	460b      	mov	r3, r1
 80030ac:	005b      	lsls	r3, r3, #1
 80030ae:	440b      	add	r3, r1
 80030b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80030b4:	3301      	adds	r3, #1
 80030b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80030be:	e00f      	b.n	80030e0 <HAL_I2C_Init+0x1dc>
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	1e58      	subs	r0, r3, #1
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6859      	ldr	r1, [r3, #4]
 80030c8:	460b      	mov	r3, r1
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	440b      	add	r3, r1
 80030ce:	0099      	lsls	r1, r3, #2
 80030d0:	440b      	add	r3, r1
 80030d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80030d6:	3301      	adds	r3, #1
 80030d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030dc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80030e0:	6879      	ldr	r1, [r7, #4]
 80030e2:	6809      	ldr	r1, [r1, #0]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	69da      	ldr	r2, [r3, #28]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a1b      	ldr	r3, [r3, #32]
 80030fa:	431a      	orrs	r2, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	430a      	orrs	r2, r1
 8003102:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800310e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	6911      	ldr	r1, [r2, #16]
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	68d2      	ldr	r2, [r2, #12]
 800311a:	4311      	orrs	r1, r2
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	6812      	ldr	r2, [r2, #0]
 8003120:	430b      	orrs	r3, r1
 8003122:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	695a      	ldr	r2, [r3, #20]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	699b      	ldr	r3, [r3, #24]
 8003136:	431a      	orrs	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	430a      	orrs	r2, r1
 800313e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f042 0201 	orr.w	r2, r2, #1
 800314e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2220      	movs	r2, #32
 800315a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	3710      	adds	r7, #16
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	000186a0 	.word	0x000186a0
 800317c:	001e847f 	.word	0x001e847f
 8003180:	003d08ff 	.word	0x003d08ff
 8003184:	431bde83 	.word	0x431bde83
 8003188:	10624dd3 	.word	0x10624dd3

0800318c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b086      	sub	sp, #24
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d101      	bne.n	800319e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e267      	b.n	800366e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0301 	and.w	r3, r3, #1
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d075      	beq.n	8003296 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031aa:	4b88      	ldr	r3, [pc, #544]	@ (80033cc <HAL_RCC_OscConfig+0x240>)
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f003 030c 	and.w	r3, r3, #12
 80031b2:	2b04      	cmp	r3, #4
 80031b4:	d00c      	beq.n	80031d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031b6:	4b85      	ldr	r3, [pc, #532]	@ (80033cc <HAL_RCC_OscConfig+0x240>)
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031be:	2b08      	cmp	r3, #8
 80031c0:	d112      	bne.n	80031e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031c2:	4b82      	ldr	r3, [pc, #520]	@ (80033cc <HAL_RCC_OscConfig+0x240>)
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80031ce:	d10b      	bne.n	80031e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031d0:	4b7e      	ldr	r3, [pc, #504]	@ (80033cc <HAL_RCC_OscConfig+0x240>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d05b      	beq.n	8003294 <HAL_RCC_OscConfig+0x108>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d157      	bne.n	8003294 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e242      	b.n	800366e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031f0:	d106      	bne.n	8003200 <HAL_RCC_OscConfig+0x74>
 80031f2:	4b76      	ldr	r3, [pc, #472]	@ (80033cc <HAL_RCC_OscConfig+0x240>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a75      	ldr	r2, [pc, #468]	@ (80033cc <HAL_RCC_OscConfig+0x240>)
 80031f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031fc:	6013      	str	r3, [r2, #0]
 80031fe:	e01d      	b.n	800323c <HAL_RCC_OscConfig+0xb0>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003208:	d10c      	bne.n	8003224 <HAL_RCC_OscConfig+0x98>
 800320a:	4b70      	ldr	r3, [pc, #448]	@ (80033cc <HAL_RCC_OscConfig+0x240>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a6f      	ldr	r2, [pc, #444]	@ (80033cc <HAL_RCC_OscConfig+0x240>)
 8003210:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003214:	6013      	str	r3, [r2, #0]
 8003216:	4b6d      	ldr	r3, [pc, #436]	@ (80033cc <HAL_RCC_OscConfig+0x240>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a6c      	ldr	r2, [pc, #432]	@ (80033cc <HAL_RCC_OscConfig+0x240>)
 800321c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003220:	6013      	str	r3, [r2, #0]
 8003222:	e00b      	b.n	800323c <HAL_RCC_OscConfig+0xb0>
 8003224:	4b69      	ldr	r3, [pc, #420]	@ (80033cc <HAL_RCC_OscConfig+0x240>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a68      	ldr	r2, [pc, #416]	@ (80033cc <HAL_RCC_OscConfig+0x240>)
 800322a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800322e:	6013      	str	r3, [r2, #0]
 8003230:	4b66      	ldr	r3, [pc, #408]	@ (80033cc <HAL_RCC_OscConfig+0x240>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a65      	ldr	r2, [pc, #404]	@ (80033cc <HAL_RCC_OscConfig+0x240>)
 8003236:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800323a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d013      	beq.n	800326c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003244:	f7fe ff9a 	bl	800217c <HAL_GetTick>
 8003248:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800324a:	e008      	b.n	800325e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800324c:	f7fe ff96 	bl	800217c <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	2b64      	cmp	r3, #100	@ 0x64
 8003258:	d901      	bls.n	800325e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e207      	b.n	800366e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800325e:	4b5b      	ldr	r3, [pc, #364]	@ (80033cc <HAL_RCC_OscConfig+0x240>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d0f0      	beq.n	800324c <HAL_RCC_OscConfig+0xc0>
 800326a:	e014      	b.n	8003296 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800326c:	f7fe ff86 	bl	800217c <HAL_GetTick>
 8003270:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003272:	e008      	b.n	8003286 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003274:	f7fe ff82 	bl	800217c <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	2b64      	cmp	r3, #100	@ 0x64
 8003280:	d901      	bls.n	8003286 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e1f3      	b.n	800366e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003286:	4b51      	ldr	r3, [pc, #324]	@ (80033cc <HAL_RCC_OscConfig+0x240>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d1f0      	bne.n	8003274 <HAL_RCC_OscConfig+0xe8>
 8003292:	e000      	b.n	8003296 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003294:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0302 	and.w	r3, r3, #2
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d063      	beq.n	800336a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032a2:	4b4a      	ldr	r3, [pc, #296]	@ (80033cc <HAL_RCC_OscConfig+0x240>)
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f003 030c 	and.w	r3, r3, #12
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d00b      	beq.n	80032c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032ae:	4b47      	ldr	r3, [pc, #284]	@ (80033cc <HAL_RCC_OscConfig+0x240>)
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032b6:	2b08      	cmp	r3, #8
 80032b8:	d11c      	bne.n	80032f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032ba:	4b44      	ldr	r3, [pc, #272]	@ (80033cc <HAL_RCC_OscConfig+0x240>)
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d116      	bne.n	80032f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032c6:	4b41      	ldr	r3, [pc, #260]	@ (80033cc <HAL_RCC_OscConfig+0x240>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d005      	beq.n	80032de <HAL_RCC_OscConfig+0x152>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d001      	beq.n	80032de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e1c7      	b.n	800366e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032de:	4b3b      	ldr	r3, [pc, #236]	@ (80033cc <HAL_RCC_OscConfig+0x240>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	691b      	ldr	r3, [r3, #16]
 80032ea:	00db      	lsls	r3, r3, #3
 80032ec:	4937      	ldr	r1, [pc, #220]	@ (80033cc <HAL_RCC_OscConfig+0x240>)
 80032ee:	4313      	orrs	r3, r2
 80032f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032f2:	e03a      	b.n	800336a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d020      	beq.n	800333e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032fc:	4b34      	ldr	r3, [pc, #208]	@ (80033d0 <HAL_RCC_OscConfig+0x244>)
 80032fe:	2201      	movs	r2, #1
 8003300:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003302:	f7fe ff3b 	bl	800217c <HAL_GetTick>
 8003306:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003308:	e008      	b.n	800331c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800330a:	f7fe ff37 	bl	800217c <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	2b02      	cmp	r3, #2
 8003316:	d901      	bls.n	800331c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	e1a8      	b.n	800366e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800331c:	4b2b      	ldr	r3, [pc, #172]	@ (80033cc <HAL_RCC_OscConfig+0x240>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0302 	and.w	r3, r3, #2
 8003324:	2b00      	cmp	r3, #0
 8003326:	d0f0      	beq.n	800330a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003328:	4b28      	ldr	r3, [pc, #160]	@ (80033cc <HAL_RCC_OscConfig+0x240>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	691b      	ldr	r3, [r3, #16]
 8003334:	00db      	lsls	r3, r3, #3
 8003336:	4925      	ldr	r1, [pc, #148]	@ (80033cc <HAL_RCC_OscConfig+0x240>)
 8003338:	4313      	orrs	r3, r2
 800333a:	600b      	str	r3, [r1, #0]
 800333c:	e015      	b.n	800336a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800333e:	4b24      	ldr	r3, [pc, #144]	@ (80033d0 <HAL_RCC_OscConfig+0x244>)
 8003340:	2200      	movs	r2, #0
 8003342:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003344:	f7fe ff1a 	bl	800217c <HAL_GetTick>
 8003348:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800334a:	e008      	b.n	800335e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800334c:	f7fe ff16 	bl	800217c <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	2b02      	cmp	r3, #2
 8003358:	d901      	bls.n	800335e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e187      	b.n	800366e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800335e:	4b1b      	ldr	r3, [pc, #108]	@ (80033cc <HAL_RCC_OscConfig+0x240>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0302 	and.w	r3, r3, #2
 8003366:	2b00      	cmp	r3, #0
 8003368:	d1f0      	bne.n	800334c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0308 	and.w	r3, r3, #8
 8003372:	2b00      	cmp	r3, #0
 8003374:	d036      	beq.n	80033e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	695b      	ldr	r3, [r3, #20]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d016      	beq.n	80033ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800337e:	4b15      	ldr	r3, [pc, #84]	@ (80033d4 <HAL_RCC_OscConfig+0x248>)
 8003380:	2201      	movs	r2, #1
 8003382:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003384:	f7fe fefa 	bl	800217c <HAL_GetTick>
 8003388:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800338a:	e008      	b.n	800339e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800338c:	f7fe fef6 	bl	800217c <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	2b02      	cmp	r3, #2
 8003398:	d901      	bls.n	800339e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e167      	b.n	800366e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800339e:	4b0b      	ldr	r3, [pc, #44]	@ (80033cc <HAL_RCC_OscConfig+0x240>)
 80033a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033a2:	f003 0302 	and.w	r3, r3, #2
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d0f0      	beq.n	800338c <HAL_RCC_OscConfig+0x200>
 80033aa:	e01b      	b.n	80033e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033ac:	4b09      	ldr	r3, [pc, #36]	@ (80033d4 <HAL_RCC_OscConfig+0x248>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033b2:	f7fe fee3 	bl	800217c <HAL_GetTick>
 80033b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033b8:	e00e      	b.n	80033d8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033ba:	f7fe fedf 	bl	800217c <HAL_GetTick>
 80033be:	4602      	mov	r2, r0
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d907      	bls.n	80033d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	e150      	b.n	800366e <HAL_RCC_OscConfig+0x4e2>
 80033cc:	40023800 	.word	0x40023800
 80033d0:	42470000 	.word	0x42470000
 80033d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033d8:	4b88      	ldr	r3, [pc, #544]	@ (80035fc <HAL_RCC_OscConfig+0x470>)
 80033da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033dc:	f003 0302 	and.w	r3, r3, #2
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d1ea      	bne.n	80033ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0304 	and.w	r3, r3, #4
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	f000 8097 	beq.w	8003520 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033f2:	2300      	movs	r3, #0
 80033f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033f6:	4b81      	ldr	r3, [pc, #516]	@ (80035fc <HAL_RCC_OscConfig+0x470>)
 80033f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d10f      	bne.n	8003422 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003402:	2300      	movs	r3, #0
 8003404:	60bb      	str	r3, [r7, #8]
 8003406:	4b7d      	ldr	r3, [pc, #500]	@ (80035fc <HAL_RCC_OscConfig+0x470>)
 8003408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800340a:	4a7c      	ldr	r2, [pc, #496]	@ (80035fc <HAL_RCC_OscConfig+0x470>)
 800340c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003410:	6413      	str	r3, [r2, #64]	@ 0x40
 8003412:	4b7a      	ldr	r3, [pc, #488]	@ (80035fc <HAL_RCC_OscConfig+0x470>)
 8003414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003416:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800341a:	60bb      	str	r3, [r7, #8]
 800341c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800341e:	2301      	movs	r3, #1
 8003420:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003422:	4b77      	ldr	r3, [pc, #476]	@ (8003600 <HAL_RCC_OscConfig+0x474>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800342a:	2b00      	cmp	r3, #0
 800342c:	d118      	bne.n	8003460 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800342e:	4b74      	ldr	r3, [pc, #464]	@ (8003600 <HAL_RCC_OscConfig+0x474>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a73      	ldr	r2, [pc, #460]	@ (8003600 <HAL_RCC_OscConfig+0x474>)
 8003434:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003438:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800343a:	f7fe fe9f 	bl	800217c <HAL_GetTick>
 800343e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003440:	e008      	b.n	8003454 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003442:	f7fe fe9b 	bl	800217c <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	2b02      	cmp	r3, #2
 800344e:	d901      	bls.n	8003454 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e10c      	b.n	800366e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003454:	4b6a      	ldr	r3, [pc, #424]	@ (8003600 <HAL_RCC_OscConfig+0x474>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800345c:	2b00      	cmp	r3, #0
 800345e:	d0f0      	beq.n	8003442 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	2b01      	cmp	r3, #1
 8003466:	d106      	bne.n	8003476 <HAL_RCC_OscConfig+0x2ea>
 8003468:	4b64      	ldr	r3, [pc, #400]	@ (80035fc <HAL_RCC_OscConfig+0x470>)
 800346a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800346c:	4a63      	ldr	r2, [pc, #396]	@ (80035fc <HAL_RCC_OscConfig+0x470>)
 800346e:	f043 0301 	orr.w	r3, r3, #1
 8003472:	6713      	str	r3, [r2, #112]	@ 0x70
 8003474:	e01c      	b.n	80034b0 <HAL_RCC_OscConfig+0x324>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	2b05      	cmp	r3, #5
 800347c:	d10c      	bne.n	8003498 <HAL_RCC_OscConfig+0x30c>
 800347e:	4b5f      	ldr	r3, [pc, #380]	@ (80035fc <HAL_RCC_OscConfig+0x470>)
 8003480:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003482:	4a5e      	ldr	r2, [pc, #376]	@ (80035fc <HAL_RCC_OscConfig+0x470>)
 8003484:	f043 0304 	orr.w	r3, r3, #4
 8003488:	6713      	str	r3, [r2, #112]	@ 0x70
 800348a:	4b5c      	ldr	r3, [pc, #368]	@ (80035fc <HAL_RCC_OscConfig+0x470>)
 800348c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800348e:	4a5b      	ldr	r2, [pc, #364]	@ (80035fc <HAL_RCC_OscConfig+0x470>)
 8003490:	f043 0301 	orr.w	r3, r3, #1
 8003494:	6713      	str	r3, [r2, #112]	@ 0x70
 8003496:	e00b      	b.n	80034b0 <HAL_RCC_OscConfig+0x324>
 8003498:	4b58      	ldr	r3, [pc, #352]	@ (80035fc <HAL_RCC_OscConfig+0x470>)
 800349a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800349c:	4a57      	ldr	r2, [pc, #348]	@ (80035fc <HAL_RCC_OscConfig+0x470>)
 800349e:	f023 0301 	bic.w	r3, r3, #1
 80034a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80034a4:	4b55      	ldr	r3, [pc, #340]	@ (80035fc <HAL_RCC_OscConfig+0x470>)
 80034a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034a8:	4a54      	ldr	r2, [pc, #336]	@ (80035fc <HAL_RCC_OscConfig+0x470>)
 80034aa:	f023 0304 	bic.w	r3, r3, #4
 80034ae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d015      	beq.n	80034e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034b8:	f7fe fe60 	bl	800217c <HAL_GetTick>
 80034bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034be:	e00a      	b.n	80034d6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034c0:	f7fe fe5c 	bl	800217c <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d901      	bls.n	80034d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e0cb      	b.n	800366e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034d6:	4b49      	ldr	r3, [pc, #292]	@ (80035fc <HAL_RCC_OscConfig+0x470>)
 80034d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d0ee      	beq.n	80034c0 <HAL_RCC_OscConfig+0x334>
 80034e2:	e014      	b.n	800350e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034e4:	f7fe fe4a 	bl	800217c <HAL_GetTick>
 80034e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034ea:	e00a      	b.n	8003502 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034ec:	f7fe fe46 	bl	800217c <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d901      	bls.n	8003502 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e0b5      	b.n	800366e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003502:	4b3e      	ldr	r3, [pc, #248]	@ (80035fc <HAL_RCC_OscConfig+0x470>)
 8003504:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003506:	f003 0302 	and.w	r3, r3, #2
 800350a:	2b00      	cmp	r3, #0
 800350c:	d1ee      	bne.n	80034ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800350e:	7dfb      	ldrb	r3, [r7, #23]
 8003510:	2b01      	cmp	r3, #1
 8003512:	d105      	bne.n	8003520 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003514:	4b39      	ldr	r3, [pc, #228]	@ (80035fc <HAL_RCC_OscConfig+0x470>)
 8003516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003518:	4a38      	ldr	r2, [pc, #224]	@ (80035fc <HAL_RCC_OscConfig+0x470>)
 800351a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800351e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	699b      	ldr	r3, [r3, #24]
 8003524:	2b00      	cmp	r3, #0
 8003526:	f000 80a1 	beq.w	800366c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800352a:	4b34      	ldr	r3, [pc, #208]	@ (80035fc <HAL_RCC_OscConfig+0x470>)
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f003 030c 	and.w	r3, r3, #12
 8003532:	2b08      	cmp	r3, #8
 8003534:	d05c      	beq.n	80035f0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	2b02      	cmp	r3, #2
 800353c:	d141      	bne.n	80035c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800353e:	4b31      	ldr	r3, [pc, #196]	@ (8003604 <HAL_RCC_OscConfig+0x478>)
 8003540:	2200      	movs	r2, #0
 8003542:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003544:	f7fe fe1a 	bl	800217c <HAL_GetTick>
 8003548:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800354a:	e008      	b.n	800355e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800354c:	f7fe fe16 	bl	800217c <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	2b02      	cmp	r3, #2
 8003558:	d901      	bls.n	800355e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e087      	b.n	800366e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800355e:	4b27      	ldr	r3, [pc, #156]	@ (80035fc <HAL_RCC_OscConfig+0x470>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d1f0      	bne.n	800354c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	69da      	ldr	r2, [r3, #28]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a1b      	ldr	r3, [r3, #32]
 8003572:	431a      	orrs	r2, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003578:	019b      	lsls	r3, r3, #6
 800357a:	431a      	orrs	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003580:	085b      	lsrs	r3, r3, #1
 8003582:	3b01      	subs	r3, #1
 8003584:	041b      	lsls	r3, r3, #16
 8003586:	431a      	orrs	r2, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800358c:	061b      	lsls	r3, r3, #24
 800358e:	491b      	ldr	r1, [pc, #108]	@ (80035fc <HAL_RCC_OscConfig+0x470>)
 8003590:	4313      	orrs	r3, r2
 8003592:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003594:	4b1b      	ldr	r3, [pc, #108]	@ (8003604 <HAL_RCC_OscConfig+0x478>)
 8003596:	2201      	movs	r2, #1
 8003598:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800359a:	f7fe fdef 	bl	800217c <HAL_GetTick>
 800359e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035a0:	e008      	b.n	80035b4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035a2:	f7fe fdeb 	bl	800217c <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d901      	bls.n	80035b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e05c      	b.n	800366e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035b4:	4b11      	ldr	r3, [pc, #68]	@ (80035fc <HAL_RCC_OscConfig+0x470>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d0f0      	beq.n	80035a2 <HAL_RCC_OscConfig+0x416>
 80035c0:	e054      	b.n	800366c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035c2:	4b10      	ldr	r3, [pc, #64]	@ (8003604 <HAL_RCC_OscConfig+0x478>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c8:	f7fe fdd8 	bl	800217c <HAL_GetTick>
 80035cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035ce:	e008      	b.n	80035e2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035d0:	f7fe fdd4 	bl	800217c <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d901      	bls.n	80035e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e045      	b.n	800366e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035e2:	4b06      	ldr	r3, [pc, #24]	@ (80035fc <HAL_RCC_OscConfig+0x470>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d1f0      	bne.n	80035d0 <HAL_RCC_OscConfig+0x444>
 80035ee:	e03d      	b.n	800366c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	699b      	ldr	r3, [r3, #24]
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d107      	bne.n	8003608 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e038      	b.n	800366e <HAL_RCC_OscConfig+0x4e2>
 80035fc:	40023800 	.word	0x40023800
 8003600:	40007000 	.word	0x40007000
 8003604:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003608:	4b1b      	ldr	r3, [pc, #108]	@ (8003678 <HAL_RCC_OscConfig+0x4ec>)
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	699b      	ldr	r3, [r3, #24]
 8003612:	2b01      	cmp	r3, #1
 8003614:	d028      	beq.n	8003668 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003620:	429a      	cmp	r2, r3
 8003622:	d121      	bne.n	8003668 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800362e:	429a      	cmp	r2, r3
 8003630:	d11a      	bne.n	8003668 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003632:	68fa      	ldr	r2, [r7, #12]
 8003634:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003638:	4013      	ands	r3, r2
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800363e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003640:	4293      	cmp	r3, r2
 8003642:	d111      	bne.n	8003668 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800364e:	085b      	lsrs	r3, r3, #1
 8003650:	3b01      	subs	r3, #1
 8003652:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003654:	429a      	cmp	r2, r3
 8003656:	d107      	bne.n	8003668 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003662:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003664:	429a      	cmp	r2, r3
 8003666:	d001      	beq.n	800366c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e000      	b.n	800366e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800366c:	2300      	movs	r3, #0
}
 800366e:	4618      	mov	r0, r3
 8003670:	3718      	adds	r7, #24
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	40023800 	.word	0x40023800

0800367c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d101      	bne.n	8003690 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e0cc      	b.n	800382a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003690:	4b68      	ldr	r3, [pc, #416]	@ (8003834 <HAL_RCC_ClockConfig+0x1b8>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0307 	and.w	r3, r3, #7
 8003698:	683a      	ldr	r2, [r7, #0]
 800369a:	429a      	cmp	r2, r3
 800369c:	d90c      	bls.n	80036b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800369e:	4b65      	ldr	r3, [pc, #404]	@ (8003834 <HAL_RCC_ClockConfig+0x1b8>)
 80036a0:	683a      	ldr	r2, [r7, #0]
 80036a2:	b2d2      	uxtb	r2, r2
 80036a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036a6:	4b63      	ldr	r3, [pc, #396]	@ (8003834 <HAL_RCC_ClockConfig+0x1b8>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0307 	and.w	r3, r3, #7
 80036ae:	683a      	ldr	r2, [r7, #0]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d001      	beq.n	80036b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e0b8      	b.n	800382a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0302 	and.w	r3, r3, #2
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d020      	beq.n	8003706 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0304 	and.w	r3, r3, #4
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d005      	beq.n	80036dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036d0:	4b59      	ldr	r3, [pc, #356]	@ (8003838 <HAL_RCC_ClockConfig+0x1bc>)
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	4a58      	ldr	r2, [pc, #352]	@ (8003838 <HAL_RCC_ClockConfig+0x1bc>)
 80036d6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80036da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0308 	and.w	r3, r3, #8
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d005      	beq.n	80036f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036e8:	4b53      	ldr	r3, [pc, #332]	@ (8003838 <HAL_RCC_ClockConfig+0x1bc>)
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	4a52      	ldr	r2, [pc, #328]	@ (8003838 <HAL_RCC_ClockConfig+0x1bc>)
 80036ee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80036f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036f4:	4b50      	ldr	r3, [pc, #320]	@ (8003838 <HAL_RCC_ClockConfig+0x1bc>)
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	494d      	ldr	r1, [pc, #308]	@ (8003838 <HAL_RCC_ClockConfig+0x1bc>)
 8003702:	4313      	orrs	r3, r2
 8003704:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0301 	and.w	r3, r3, #1
 800370e:	2b00      	cmp	r3, #0
 8003710:	d044      	beq.n	800379c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	2b01      	cmp	r3, #1
 8003718:	d107      	bne.n	800372a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800371a:	4b47      	ldr	r3, [pc, #284]	@ (8003838 <HAL_RCC_ClockConfig+0x1bc>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d119      	bne.n	800375a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e07f      	b.n	800382a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	2b02      	cmp	r3, #2
 8003730:	d003      	beq.n	800373a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003736:	2b03      	cmp	r3, #3
 8003738:	d107      	bne.n	800374a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800373a:	4b3f      	ldr	r3, [pc, #252]	@ (8003838 <HAL_RCC_ClockConfig+0x1bc>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d109      	bne.n	800375a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e06f      	b.n	800382a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800374a:	4b3b      	ldr	r3, [pc, #236]	@ (8003838 <HAL_RCC_ClockConfig+0x1bc>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0302 	and.w	r3, r3, #2
 8003752:	2b00      	cmp	r3, #0
 8003754:	d101      	bne.n	800375a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e067      	b.n	800382a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800375a:	4b37      	ldr	r3, [pc, #220]	@ (8003838 <HAL_RCC_ClockConfig+0x1bc>)
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	f023 0203 	bic.w	r2, r3, #3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	4934      	ldr	r1, [pc, #208]	@ (8003838 <HAL_RCC_ClockConfig+0x1bc>)
 8003768:	4313      	orrs	r3, r2
 800376a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800376c:	f7fe fd06 	bl	800217c <HAL_GetTick>
 8003770:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003772:	e00a      	b.n	800378a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003774:	f7fe fd02 	bl	800217c <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003782:	4293      	cmp	r3, r2
 8003784:	d901      	bls.n	800378a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e04f      	b.n	800382a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800378a:	4b2b      	ldr	r3, [pc, #172]	@ (8003838 <HAL_RCC_ClockConfig+0x1bc>)
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f003 020c 	and.w	r2, r3, #12
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	429a      	cmp	r2, r3
 800379a:	d1eb      	bne.n	8003774 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800379c:	4b25      	ldr	r3, [pc, #148]	@ (8003834 <HAL_RCC_ClockConfig+0x1b8>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0307 	and.w	r3, r3, #7
 80037a4:	683a      	ldr	r2, [r7, #0]
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d20c      	bcs.n	80037c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037aa:	4b22      	ldr	r3, [pc, #136]	@ (8003834 <HAL_RCC_ClockConfig+0x1b8>)
 80037ac:	683a      	ldr	r2, [r7, #0]
 80037ae:	b2d2      	uxtb	r2, r2
 80037b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037b2:	4b20      	ldr	r3, [pc, #128]	@ (8003834 <HAL_RCC_ClockConfig+0x1b8>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0307 	and.w	r3, r3, #7
 80037ba:	683a      	ldr	r2, [r7, #0]
 80037bc:	429a      	cmp	r2, r3
 80037be:	d001      	beq.n	80037c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e032      	b.n	800382a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0304 	and.w	r3, r3, #4
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d008      	beq.n	80037e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037d0:	4b19      	ldr	r3, [pc, #100]	@ (8003838 <HAL_RCC_ClockConfig+0x1bc>)
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	4916      	ldr	r1, [pc, #88]	@ (8003838 <HAL_RCC_ClockConfig+0x1bc>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0308 	and.w	r3, r3, #8
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d009      	beq.n	8003802 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037ee:	4b12      	ldr	r3, [pc, #72]	@ (8003838 <HAL_RCC_ClockConfig+0x1bc>)
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	00db      	lsls	r3, r3, #3
 80037fc:	490e      	ldr	r1, [pc, #56]	@ (8003838 <HAL_RCC_ClockConfig+0x1bc>)
 80037fe:	4313      	orrs	r3, r2
 8003800:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003802:	f000 f821 	bl	8003848 <HAL_RCC_GetSysClockFreq>
 8003806:	4602      	mov	r2, r0
 8003808:	4b0b      	ldr	r3, [pc, #44]	@ (8003838 <HAL_RCC_ClockConfig+0x1bc>)
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	091b      	lsrs	r3, r3, #4
 800380e:	f003 030f 	and.w	r3, r3, #15
 8003812:	490a      	ldr	r1, [pc, #40]	@ (800383c <HAL_RCC_ClockConfig+0x1c0>)
 8003814:	5ccb      	ldrb	r3, [r1, r3]
 8003816:	fa22 f303 	lsr.w	r3, r2, r3
 800381a:	4a09      	ldr	r2, [pc, #36]	@ (8003840 <HAL_RCC_ClockConfig+0x1c4>)
 800381c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800381e:	4b09      	ldr	r3, [pc, #36]	@ (8003844 <HAL_RCC_ClockConfig+0x1c8>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4618      	mov	r0, r3
 8003824:	f7fe fc66 	bl	80020f4 <HAL_InitTick>

  return HAL_OK;
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	3710      	adds	r7, #16
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	40023c00 	.word	0x40023c00
 8003838:	40023800 	.word	0x40023800
 800383c:	08005b8c 	.word	0x08005b8c
 8003840:	20000000 	.word	0x20000000
 8003844:	20000004 	.word	0x20000004

08003848 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003848:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800384c:	b094      	sub	sp, #80	@ 0x50
 800384e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003850:	2300      	movs	r3, #0
 8003852:	647b      	str	r3, [r7, #68]	@ 0x44
 8003854:	2300      	movs	r3, #0
 8003856:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003858:	2300      	movs	r3, #0
 800385a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800385c:	2300      	movs	r3, #0
 800385e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003860:	4b79      	ldr	r3, [pc, #484]	@ (8003a48 <HAL_RCC_GetSysClockFreq+0x200>)
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	f003 030c 	and.w	r3, r3, #12
 8003868:	2b08      	cmp	r3, #8
 800386a:	d00d      	beq.n	8003888 <HAL_RCC_GetSysClockFreq+0x40>
 800386c:	2b08      	cmp	r3, #8
 800386e:	f200 80e1 	bhi.w	8003a34 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003872:	2b00      	cmp	r3, #0
 8003874:	d002      	beq.n	800387c <HAL_RCC_GetSysClockFreq+0x34>
 8003876:	2b04      	cmp	r3, #4
 8003878:	d003      	beq.n	8003882 <HAL_RCC_GetSysClockFreq+0x3a>
 800387a:	e0db      	b.n	8003a34 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800387c:	4b73      	ldr	r3, [pc, #460]	@ (8003a4c <HAL_RCC_GetSysClockFreq+0x204>)
 800387e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003880:	e0db      	b.n	8003a3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003882:	4b73      	ldr	r3, [pc, #460]	@ (8003a50 <HAL_RCC_GetSysClockFreq+0x208>)
 8003884:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003886:	e0d8      	b.n	8003a3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003888:	4b6f      	ldr	r3, [pc, #444]	@ (8003a48 <HAL_RCC_GetSysClockFreq+0x200>)
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003890:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003892:	4b6d      	ldr	r3, [pc, #436]	@ (8003a48 <HAL_RCC_GetSysClockFreq+0x200>)
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d063      	beq.n	8003966 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800389e:	4b6a      	ldr	r3, [pc, #424]	@ (8003a48 <HAL_RCC_GetSysClockFreq+0x200>)
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	099b      	lsrs	r3, r3, #6
 80038a4:	2200      	movs	r2, #0
 80038a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80038a8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80038aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80038b2:	2300      	movs	r3, #0
 80038b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80038b6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80038ba:	4622      	mov	r2, r4
 80038bc:	462b      	mov	r3, r5
 80038be:	f04f 0000 	mov.w	r0, #0
 80038c2:	f04f 0100 	mov.w	r1, #0
 80038c6:	0159      	lsls	r1, r3, #5
 80038c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038cc:	0150      	lsls	r0, r2, #5
 80038ce:	4602      	mov	r2, r0
 80038d0:	460b      	mov	r3, r1
 80038d2:	4621      	mov	r1, r4
 80038d4:	1a51      	subs	r1, r2, r1
 80038d6:	6139      	str	r1, [r7, #16]
 80038d8:	4629      	mov	r1, r5
 80038da:	eb63 0301 	sbc.w	r3, r3, r1
 80038de:	617b      	str	r3, [r7, #20]
 80038e0:	f04f 0200 	mov.w	r2, #0
 80038e4:	f04f 0300 	mov.w	r3, #0
 80038e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80038ec:	4659      	mov	r1, fp
 80038ee:	018b      	lsls	r3, r1, #6
 80038f0:	4651      	mov	r1, sl
 80038f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80038f6:	4651      	mov	r1, sl
 80038f8:	018a      	lsls	r2, r1, #6
 80038fa:	4651      	mov	r1, sl
 80038fc:	ebb2 0801 	subs.w	r8, r2, r1
 8003900:	4659      	mov	r1, fp
 8003902:	eb63 0901 	sbc.w	r9, r3, r1
 8003906:	f04f 0200 	mov.w	r2, #0
 800390a:	f04f 0300 	mov.w	r3, #0
 800390e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003912:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003916:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800391a:	4690      	mov	r8, r2
 800391c:	4699      	mov	r9, r3
 800391e:	4623      	mov	r3, r4
 8003920:	eb18 0303 	adds.w	r3, r8, r3
 8003924:	60bb      	str	r3, [r7, #8]
 8003926:	462b      	mov	r3, r5
 8003928:	eb49 0303 	adc.w	r3, r9, r3
 800392c:	60fb      	str	r3, [r7, #12]
 800392e:	f04f 0200 	mov.w	r2, #0
 8003932:	f04f 0300 	mov.w	r3, #0
 8003936:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800393a:	4629      	mov	r1, r5
 800393c:	024b      	lsls	r3, r1, #9
 800393e:	4621      	mov	r1, r4
 8003940:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003944:	4621      	mov	r1, r4
 8003946:	024a      	lsls	r2, r1, #9
 8003948:	4610      	mov	r0, r2
 800394a:	4619      	mov	r1, r3
 800394c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800394e:	2200      	movs	r2, #0
 8003950:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003952:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003954:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003958:	f7fc fc36 	bl	80001c8 <__aeabi_uldivmod>
 800395c:	4602      	mov	r2, r0
 800395e:	460b      	mov	r3, r1
 8003960:	4613      	mov	r3, r2
 8003962:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003964:	e058      	b.n	8003a18 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003966:	4b38      	ldr	r3, [pc, #224]	@ (8003a48 <HAL_RCC_GetSysClockFreq+0x200>)
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	099b      	lsrs	r3, r3, #6
 800396c:	2200      	movs	r2, #0
 800396e:	4618      	mov	r0, r3
 8003970:	4611      	mov	r1, r2
 8003972:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003976:	623b      	str	r3, [r7, #32]
 8003978:	2300      	movs	r3, #0
 800397a:	627b      	str	r3, [r7, #36]	@ 0x24
 800397c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003980:	4642      	mov	r2, r8
 8003982:	464b      	mov	r3, r9
 8003984:	f04f 0000 	mov.w	r0, #0
 8003988:	f04f 0100 	mov.w	r1, #0
 800398c:	0159      	lsls	r1, r3, #5
 800398e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003992:	0150      	lsls	r0, r2, #5
 8003994:	4602      	mov	r2, r0
 8003996:	460b      	mov	r3, r1
 8003998:	4641      	mov	r1, r8
 800399a:	ebb2 0a01 	subs.w	sl, r2, r1
 800399e:	4649      	mov	r1, r9
 80039a0:	eb63 0b01 	sbc.w	fp, r3, r1
 80039a4:	f04f 0200 	mov.w	r2, #0
 80039a8:	f04f 0300 	mov.w	r3, #0
 80039ac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80039b0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80039b4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80039b8:	ebb2 040a 	subs.w	r4, r2, sl
 80039bc:	eb63 050b 	sbc.w	r5, r3, fp
 80039c0:	f04f 0200 	mov.w	r2, #0
 80039c4:	f04f 0300 	mov.w	r3, #0
 80039c8:	00eb      	lsls	r3, r5, #3
 80039ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039ce:	00e2      	lsls	r2, r4, #3
 80039d0:	4614      	mov	r4, r2
 80039d2:	461d      	mov	r5, r3
 80039d4:	4643      	mov	r3, r8
 80039d6:	18e3      	adds	r3, r4, r3
 80039d8:	603b      	str	r3, [r7, #0]
 80039da:	464b      	mov	r3, r9
 80039dc:	eb45 0303 	adc.w	r3, r5, r3
 80039e0:	607b      	str	r3, [r7, #4]
 80039e2:	f04f 0200 	mov.w	r2, #0
 80039e6:	f04f 0300 	mov.w	r3, #0
 80039ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80039ee:	4629      	mov	r1, r5
 80039f0:	028b      	lsls	r3, r1, #10
 80039f2:	4621      	mov	r1, r4
 80039f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80039f8:	4621      	mov	r1, r4
 80039fa:	028a      	lsls	r2, r1, #10
 80039fc:	4610      	mov	r0, r2
 80039fe:	4619      	mov	r1, r3
 8003a00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a02:	2200      	movs	r2, #0
 8003a04:	61bb      	str	r3, [r7, #24]
 8003a06:	61fa      	str	r2, [r7, #28]
 8003a08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a0c:	f7fc fbdc 	bl	80001c8 <__aeabi_uldivmod>
 8003a10:	4602      	mov	r2, r0
 8003a12:	460b      	mov	r3, r1
 8003a14:	4613      	mov	r3, r2
 8003a16:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a18:	4b0b      	ldr	r3, [pc, #44]	@ (8003a48 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	0c1b      	lsrs	r3, r3, #16
 8003a1e:	f003 0303 	and.w	r3, r3, #3
 8003a22:	3301      	adds	r3, #1
 8003a24:	005b      	lsls	r3, r3, #1
 8003a26:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003a28:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003a2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a30:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a32:	e002      	b.n	8003a3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a34:	4b05      	ldr	r3, [pc, #20]	@ (8003a4c <HAL_RCC_GetSysClockFreq+0x204>)
 8003a36:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3750      	adds	r7, #80	@ 0x50
 8003a40:	46bd      	mov	sp, r7
 8003a42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a46:	bf00      	nop
 8003a48:	40023800 	.word	0x40023800
 8003a4c:	00f42400 	.word	0x00f42400
 8003a50:	007a1200 	.word	0x007a1200

08003a54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a54:	b480      	push	{r7}
 8003a56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a58:	4b03      	ldr	r3, [pc, #12]	@ (8003a68 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr
 8003a66:	bf00      	nop
 8003a68:	20000000 	.word	0x20000000

08003a6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a70:	f7ff fff0 	bl	8003a54 <HAL_RCC_GetHCLKFreq>
 8003a74:	4602      	mov	r2, r0
 8003a76:	4b05      	ldr	r3, [pc, #20]	@ (8003a8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	0a9b      	lsrs	r3, r3, #10
 8003a7c:	f003 0307 	and.w	r3, r3, #7
 8003a80:	4903      	ldr	r1, [pc, #12]	@ (8003a90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a82:	5ccb      	ldrb	r3, [r1, r3]
 8003a84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	40023800 	.word	0x40023800
 8003a90:	08005b9c 	.word	0x08005b9c

08003a94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003a98:	f7ff ffdc 	bl	8003a54 <HAL_RCC_GetHCLKFreq>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	4b05      	ldr	r3, [pc, #20]	@ (8003ab4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	0b5b      	lsrs	r3, r3, #13
 8003aa4:	f003 0307 	and.w	r3, r3, #7
 8003aa8:	4903      	ldr	r1, [pc, #12]	@ (8003ab8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003aaa:	5ccb      	ldrb	r3, [r1, r3]
 8003aac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	40023800 	.word	0x40023800
 8003ab8:	08005b9c 	.word	0x08005b9c

08003abc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b082      	sub	sp, #8
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d101      	bne.n	8003ace <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e07b      	b.n	8003bc6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d108      	bne.n	8003ae8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ade:	d009      	beq.n	8003af4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	61da      	str	r2, [r3, #28]
 8003ae6:	e005      	b.n	8003af4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d106      	bne.n	8003b14 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f7fd fa0c 	bl	8000f2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2202      	movs	r2, #2
 8003b18:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b2a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003b3c:	431a      	orrs	r2, r3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b46:	431a      	orrs	r2, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	691b      	ldr	r3, [r3, #16]
 8003b4c:	f003 0302 	and.w	r3, r3, #2
 8003b50:	431a      	orrs	r2, r3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	695b      	ldr	r3, [r3, #20]
 8003b56:	f003 0301 	and.w	r3, r3, #1
 8003b5a:	431a      	orrs	r2, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	699b      	ldr	r3, [r3, #24]
 8003b60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b64:	431a      	orrs	r2, r3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	69db      	ldr	r3, [r3, #28]
 8003b6a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003b6e:	431a      	orrs	r2, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a1b      	ldr	r3, [r3, #32]
 8003b74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b78:	ea42 0103 	orr.w	r1, r2, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b80:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	430a      	orrs	r2, r1
 8003b8a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	699b      	ldr	r3, [r3, #24]
 8003b90:	0c1b      	lsrs	r3, r3, #16
 8003b92:	f003 0104 	and.w	r1, r3, #4
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b9a:	f003 0210 	and.w	r2, r3, #16
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	430a      	orrs	r2, r1
 8003ba4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	69da      	ldr	r2, [r3, #28]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003bb4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3708      	adds	r7, #8
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}

08003bce <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003bce:	b580      	push	{r7, lr}
 8003bd0:	b082      	sub	sp, #8
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d101      	bne.n	8003be0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e041      	b.n	8003c64 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d106      	bne.n	8003bfa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f7fd fe91 	bl	800191c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2202      	movs	r2, #2
 8003bfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	3304      	adds	r3, #4
 8003c0a:	4619      	mov	r1, r3
 8003c0c:	4610      	mov	r0, r2
 8003c0e:	f000 fc7f 	bl	8004510 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2201      	movs	r2, #1
 8003c16:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2201      	movs	r2, #1
 8003c26:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2201      	movs	r2, #1
 8003c36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2201      	movs	r2, #1
 8003c46:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2201      	movs	r2, #1
 8003c56:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c62:	2300      	movs	r3, #0
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3708      	adds	r7, #8
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}

08003c6c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b082      	sub	sp, #8
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d101      	bne.n	8003c7e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e041      	b.n	8003d02 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d106      	bne.n	8003c98 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f000 f839 	bl	8003d0a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2202      	movs	r2, #2
 8003c9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	3304      	adds	r3, #4
 8003ca8:	4619      	mov	r1, r3
 8003caa:	4610      	mov	r0, r2
 8003cac:	f000 fc30 	bl	8004510 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3708      	adds	r7, #8
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}

08003d0a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003d0a:	b480      	push	{r7}
 8003d0c:	b083      	sub	sp, #12
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003d12:	bf00      	nop
 8003d14:	370c      	adds	r7, #12
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr

08003d1e <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003d1e:	b580      	push	{r7, lr}
 8003d20:	b086      	sub	sp, #24
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6078      	str	r0, [r7, #4]
 8003d26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d101      	bne.n	8003d32 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e097      	b.n	8003e62 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d106      	bne.n	8003d4c <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f7fd fe70 	bl	8001a2c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2202      	movs	r2, #2
 8003d50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	6812      	ldr	r2, [r2, #0]
 8003d5e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003d62:	f023 0307 	bic.w	r3, r3, #7
 8003d66:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	3304      	adds	r3, #4
 8003d70:	4619      	mov	r1, r3
 8003d72:	4610      	mov	r0, r2
 8003d74:	f000 fbcc 	bl	8004510 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	699b      	ldr	r3, [r3, #24]
 8003d86:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	6a1b      	ldr	r3, [r3, #32]
 8003d8e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	697a      	ldr	r2, [r7, #20]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003da0:	f023 0303 	bic.w	r3, r3, #3
 8003da4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	689a      	ldr	r2, [r3, #8]
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	699b      	ldr	r3, [r3, #24]
 8003dae:	021b      	lsls	r3, r3, #8
 8003db0:	4313      	orrs	r3, r2
 8003db2:	693a      	ldr	r2, [r7, #16]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003dbe:	f023 030c 	bic.w	r3, r3, #12
 8003dc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003dca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003dce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	68da      	ldr	r2, [r3, #12]
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	69db      	ldr	r3, [r3, #28]
 8003dd8:	021b      	lsls	r3, r3, #8
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	693a      	ldr	r2, [r7, #16]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	691b      	ldr	r3, [r3, #16]
 8003de6:	011a      	lsls	r2, r3, #4
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	6a1b      	ldr	r3, [r3, #32]
 8003dec:	031b      	lsls	r3, r3, #12
 8003dee:	4313      	orrs	r3, r2
 8003df0:	693a      	ldr	r2, [r7, #16]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003dfc:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8003e04:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	685a      	ldr	r2, [r3, #4]
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	695b      	ldr	r3, [r3, #20]
 8003e0e:	011b      	lsls	r3, r3, #4
 8003e10:	4313      	orrs	r3, r2
 8003e12:	68fa      	ldr	r2, [r7, #12]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	697a      	ldr	r2, [r7, #20]
 8003e1e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	693a      	ldr	r2, [r7, #16]
 8003e26:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	68fa      	ldr	r2, [r7, #12]
 8003e2e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3718      	adds	r7, #24
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}

08003e6a <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e6a:	b580      	push	{r7, lr}
 8003e6c:	b084      	sub	sp, #16
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	6078      	str	r0, [r7, #4]
 8003e72:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003e7a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003e82:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003e8a:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003e92:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d110      	bne.n	8003ebc <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003e9a:	7bfb      	ldrb	r3, [r7, #15]
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d102      	bne.n	8003ea6 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003ea0:	7b7b      	ldrb	r3, [r7, #13]
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d001      	beq.n	8003eaa <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e069      	b.n	8003f7e <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2202      	movs	r2, #2
 8003eae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2202      	movs	r2, #2
 8003eb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003eba:	e031      	b.n	8003f20 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	2b04      	cmp	r3, #4
 8003ec0:	d110      	bne.n	8003ee4 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ec2:	7bbb      	ldrb	r3, [r7, #14]
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d102      	bne.n	8003ece <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003ec8:	7b3b      	ldrb	r3, [r7, #12]
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d001      	beq.n	8003ed2 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e055      	b.n	8003f7e <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2202      	movs	r2, #2
 8003ed6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2202      	movs	r2, #2
 8003ede:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003ee2:	e01d      	b.n	8003f20 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ee4:	7bfb      	ldrb	r3, [r7, #15]
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d108      	bne.n	8003efc <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003eea:	7bbb      	ldrb	r3, [r7, #14]
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d105      	bne.n	8003efc <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ef0:	7b7b      	ldrb	r3, [r7, #13]
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d102      	bne.n	8003efc <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003ef6:	7b3b      	ldrb	r3, [r7, #12]
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d001      	beq.n	8003f00 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e03e      	b.n	8003f7e <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2202      	movs	r2, #2
 8003f04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2202      	movs	r2, #2
 8003f0c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2202      	movs	r2, #2
 8003f14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2202      	movs	r2, #2
 8003f1c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d003      	beq.n	8003f2e <HAL_TIM_Encoder_Start+0xc4>
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	2b04      	cmp	r3, #4
 8003f2a:	d008      	beq.n	8003f3e <HAL_TIM_Encoder_Start+0xd4>
 8003f2c:	e00f      	b.n	8003f4e <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2201      	movs	r2, #1
 8003f34:	2100      	movs	r1, #0
 8003f36:	4618      	mov	r0, r3
 8003f38:	f000 fdd4 	bl	8004ae4 <TIM_CCxChannelCmd>
      break;
 8003f3c:	e016      	b.n	8003f6c <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	2201      	movs	r2, #1
 8003f44:	2104      	movs	r1, #4
 8003f46:	4618      	mov	r0, r3
 8003f48:	f000 fdcc 	bl	8004ae4 <TIM_CCxChannelCmd>
      break;
 8003f4c:	e00e      	b.n	8003f6c <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	2201      	movs	r2, #1
 8003f54:	2100      	movs	r1, #0
 8003f56:	4618      	mov	r0, r3
 8003f58:	f000 fdc4 	bl	8004ae4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2201      	movs	r2, #1
 8003f62:	2104      	movs	r1, #4
 8003f64:	4618      	mov	r0, r3
 8003f66:	f000 fdbd 	bl	8004ae4 <TIM_CCxChannelCmd>
      break;
 8003f6a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f042 0201 	orr.w	r2, r2, #1
 8003f7a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003f7c:	2300      	movs	r3, #0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3710      	adds	r7, #16
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}

08003f86 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f86:	b580      	push	{r7, lr}
 8003f88:	b082      	sub	sp, #8
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	691b      	ldr	r3, [r3, #16]
 8003f94:	f003 0302 	and.w	r3, r3, #2
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	d122      	bne.n	8003fe2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	f003 0302 	and.w	r3, r3, #2
 8003fa6:	2b02      	cmp	r3, #2
 8003fa8:	d11b      	bne.n	8003fe2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f06f 0202 	mvn.w	r2, #2
 8003fb2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	699b      	ldr	r3, [r3, #24]
 8003fc0:	f003 0303 	and.w	r3, r3, #3
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d003      	beq.n	8003fd0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f000 fa82 	bl	80044d2 <HAL_TIM_IC_CaptureCallback>
 8003fce:	e005      	b.n	8003fdc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f000 fa74 	bl	80044be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f000 fa85 	bl	80044e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	691b      	ldr	r3, [r3, #16]
 8003fe8:	f003 0304 	and.w	r3, r3, #4
 8003fec:	2b04      	cmp	r3, #4
 8003fee:	d122      	bne.n	8004036 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	f003 0304 	and.w	r3, r3, #4
 8003ffa:	2b04      	cmp	r3, #4
 8003ffc:	d11b      	bne.n	8004036 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f06f 0204 	mvn.w	r2, #4
 8004006:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2202      	movs	r2, #2
 800400c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	699b      	ldr	r3, [r3, #24]
 8004014:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004018:	2b00      	cmp	r3, #0
 800401a:	d003      	beq.n	8004024 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f000 fa58 	bl	80044d2 <HAL_TIM_IC_CaptureCallback>
 8004022:	e005      	b.n	8004030 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f000 fa4a 	bl	80044be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f000 fa5b 	bl	80044e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	691b      	ldr	r3, [r3, #16]
 800403c:	f003 0308 	and.w	r3, r3, #8
 8004040:	2b08      	cmp	r3, #8
 8004042:	d122      	bne.n	800408a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	f003 0308 	and.w	r3, r3, #8
 800404e:	2b08      	cmp	r3, #8
 8004050:	d11b      	bne.n	800408a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f06f 0208 	mvn.w	r2, #8
 800405a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2204      	movs	r2, #4
 8004060:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	69db      	ldr	r3, [r3, #28]
 8004068:	f003 0303 	and.w	r3, r3, #3
 800406c:	2b00      	cmp	r3, #0
 800406e:	d003      	beq.n	8004078 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f000 fa2e 	bl	80044d2 <HAL_TIM_IC_CaptureCallback>
 8004076:	e005      	b.n	8004084 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f000 fa20 	bl	80044be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f000 fa31 	bl	80044e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	691b      	ldr	r3, [r3, #16]
 8004090:	f003 0310 	and.w	r3, r3, #16
 8004094:	2b10      	cmp	r3, #16
 8004096:	d122      	bne.n	80040de <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	f003 0310 	and.w	r3, r3, #16
 80040a2:	2b10      	cmp	r3, #16
 80040a4:	d11b      	bne.n	80040de <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f06f 0210 	mvn.w	r2, #16
 80040ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2208      	movs	r2, #8
 80040b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	69db      	ldr	r3, [r3, #28]
 80040bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d003      	beq.n	80040cc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f000 fa04 	bl	80044d2 <HAL_TIM_IC_CaptureCallback>
 80040ca:	e005      	b.n	80040d8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f000 f9f6 	bl	80044be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f000 fa07 	bl	80044e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	691b      	ldr	r3, [r3, #16]
 80040e4:	f003 0301 	and.w	r3, r3, #1
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d10e      	bne.n	800410a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	f003 0301 	and.w	r3, r3, #1
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d107      	bne.n	800410a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f06f 0201 	mvn.w	r2, #1
 8004102:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f000 f9d0 	bl	80044aa <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	691b      	ldr	r3, [r3, #16]
 8004110:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004114:	2b80      	cmp	r3, #128	@ 0x80
 8004116:	d10e      	bne.n	8004136 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004122:	2b80      	cmp	r3, #128	@ 0x80
 8004124:	d107      	bne.n	8004136 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800412e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f000 fdd5 	bl	8004ce0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	691b      	ldr	r3, [r3, #16]
 800413c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004140:	2b40      	cmp	r3, #64	@ 0x40
 8004142:	d10e      	bne.n	8004162 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800414e:	2b40      	cmp	r3, #64	@ 0x40
 8004150:	d107      	bne.n	8004162 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800415a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f000 f9cc 	bl	80044fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	691b      	ldr	r3, [r3, #16]
 8004168:	f003 0320 	and.w	r3, r3, #32
 800416c:	2b20      	cmp	r3, #32
 800416e:	d10e      	bne.n	800418e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	f003 0320 	and.w	r3, r3, #32
 800417a:	2b20      	cmp	r3, #32
 800417c:	d107      	bne.n	800418e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f06f 0220 	mvn.w	r2, #32
 8004186:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f000 fd9f 	bl	8004ccc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800418e:	bf00      	nop
 8004190:	3708      	adds	r7, #8
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
	...

08004198 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b086      	sub	sp, #24
 800419c:	af00      	add	r7, sp, #0
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041a4:	2300      	movs	r3, #0
 80041a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d101      	bne.n	80041b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80041b2:	2302      	movs	r3, #2
 80041b4:	e0ae      	b.n	8004314 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2201      	movs	r2, #1
 80041ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2b0c      	cmp	r3, #12
 80041c2:	f200 809f 	bhi.w	8004304 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80041c6:	a201      	add	r2, pc, #4	@ (adr r2, 80041cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80041c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041cc:	08004201 	.word	0x08004201
 80041d0:	08004305 	.word	0x08004305
 80041d4:	08004305 	.word	0x08004305
 80041d8:	08004305 	.word	0x08004305
 80041dc:	08004241 	.word	0x08004241
 80041e0:	08004305 	.word	0x08004305
 80041e4:	08004305 	.word	0x08004305
 80041e8:	08004305 	.word	0x08004305
 80041ec:	08004283 	.word	0x08004283
 80041f0:	08004305 	.word	0x08004305
 80041f4:	08004305 	.word	0x08004305
 80041f8:	08004305 	.word	0x08004305
 80041fc:	080042c3 	.word	0x080042c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	68b9      	ldr	r1, [r7, #8]
 8004206:	4618      	mov	r0, r3
 8004208:	f000 fa22 	bl	8004650 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	699a      	ldr	r2, [r3, #24]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f042 0208 	orr.w	r2, r2, #8
 800421a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	699a      	ldr	r2, [r3, #24]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f022 0204 	bic.w	r2, r2, #4
 800422a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	6999      	ldr	r1, [r3, #24]
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	691a      	ldr	r2, [r3, #16]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	430a      	orrs	r2, r1
 800423c:	619a      	str	r2, [r3, #24]
      break;
 800423e:	e064      	b.n	800430a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	68b9      	ldr	r1, [r7, #8]
 8004246:	4618      	mov	r0, r3
 8004248:	f000 fa72 	bl	8004730 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	699a      	ldr	r2, [r3, #24]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800425a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	699a      	ldr	r2, [r3, #24]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800426a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	6999      	ldr	r1, [r3, #24]
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	021a      	lsls	r2, r3, #8
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	430a      	orrs	r2, r1
 800427e:	619a      	str	r2, [r3, #24]
      break;
 8004280:	e043      	b.n	800430a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	68b9      	ldr	r1, [r7, #8]
 8004288:	4618      	mov	r0, r3
 800428a:	f000 fac7 	bl	800481c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	69da      	ldr	r2, [r3, #28]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f042 0208 	orr.w	r2, r2, #8
 800429c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	69da      	ldr	r2, [r3, #28]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f022 0204 	bic.w	r2, r2, #4
 80042ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	69d9      	ldr	r1, [r3, #28]
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	691a      	ldr	r2, [r3, #16]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	430a      	orrs	r2, r1
 80042be:	61da      	str	r2, [r3, #28]
      break;
 80042c0:	e023      	b.n	800430a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	68b9      	ldr	r1, [r7, #8]
 80042c8:	4618      	mov	r0, r3
 80042ca:	f000 fb1b 	bl	8004904 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	69da      	ldr	r2, [r3, #28]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80042dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	69da      	ldr	r2, [r3, #28]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	69d9      	ldr	r1, [r3, #28]
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	691b      	ldr	r3, [r3, #16]
 80042f8:	021a      	lsls	r2, r3, #8
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	430a      	orrs	r2, r1
 8004300:	61da      	str	r2, [r3, #28]
      break;
 8004302:	e002      	b.n	800430a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	75fb      	strb	r3, [r7, #23]
      break;
 8004308:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2200      	movs	r2, #0
 800430e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004312:	7dfb      	ldrb	r3, [r7, #23]
}
 8004314:	4618      	mov	r0, r3
 8004316:	3718      	adds	r7, #24
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}

0800431c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004326:	2300      	movs	r3, #0
 8004328:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004330:	2b01      	cmp	r3, #1
 8004332:	d101      	bne.n	8004338 <HAL_TIM_ConfigClockSource+0x1c>
 8004334:	2302      	movs	r3, #2
 8004336:	e0b4      	b.n	80044a2 <HAL_TIM_ConfigClockSource+0x186>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2202      	movs	r2, #2
 8004344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004356:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800435e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	68ba      	ldr	r2, [r7, #8]
 8004366:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004370:	d03e      	beq.n	80043f0 <HAL_TIM_ConfigClockSource+0xd4>
 8004372:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004376:	f200 8087 	bhi.w	8004488 <HAL_TIM_ConfigClockSource+0x16c>
 800437a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800437e:	f000 8086 	beq.w	800448e <HAL_TIM_ConfigClockSource+0x172>
 8004382:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004386:	d87f      	bhi.n	8004488 <HAL_TIM_ConfigClockSource+0x16c>
 8004388:	2b70      	cmp	r3, #112	@ 0x70
 800438a:	d01a      	beq.n	80043c2 <HAL_TIM_ConfigClockSource+0xa6>
 800438c:	2b70      	cmp	r3, #112	@ 0x70
 800438e:	d87b      	bhi.n	8004488 <HAL_TIM_ConfigClockSource+0x16c>
 8004390:	2b60      	cmp	r3, #96	@ 0x60
 8004392:	d050      	beq.n	8004436 <HAL_TIM_ConfigClockSource+0x11a>
 8004394:	2b60      	cmp	r3, #96	@ 0x60
 8004396:	d877      	bhi.n	8004488 <HAL_TIM_ConfigClockSource+0x16c>
 8004398:	2b50      	cmp	r3, #80	@ 0x50
 800439a:	d03c      	beq.n	8004416 <HAL_TIM_ConfigClockSource+0xfa>
 800439c:	2b50      	cmp	r3, #80	@ 0x50
 800439e:	d873      	bhi.n	8004488 <HAL_TIM_ConfigClockSource+0x16c>
 80043a0:	2b40      	cmp	r3, #64	@ 0x40
 80043a2:	d058      	beq.n	8004456 <HAL_TIM_ConfigClockSource+0x13a>
 80043a4:	2b40      	cmp	r3, #64	@ 0x40
 80043a6:	d86f      	bhi.n	8004488 <HAL_TIM_ConfigClockSource+0x16c>
 80043a8:	2b30      	cmp	r3, #48	@ 0x30
 80043aa:	d064      	beq.n	8004476 <HAL_TIM_ConfigClockSource+0x15a>
 80043ac:	2b30      	cmp	r3, #48	@ 0x30
 80043ae:	d86b      	bhi.n	8004488 <HAL_TIM_ConfigClockSource+0x16c>
 80043b0:	2b20      	cmp	r3, #32
 80043b2:	d060      	beq.n	8004476 <HAL_TIM_ConfigClockSource+0x15a>
 80043b4:	2b20      	cmp	r3, #32
 80043b6:	d867      	bhi.n	8004488 <HAL_TIM_ConfigClockSource+0x16c>
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d05c      	beq.n	8004476 <HAL_TIM_ConfigClockSource+0x15a>
 80043bc:	2b10      	cmp	r3, #16
 80043be:	d05a      	beq.n	8004476 <HAL_TIM_ConfigClockSource+0x15a>
 80043c0:	e062      	b.n	8004488 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6818      	ldr	r0, [r3, #0]
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	6899      	ldr	r1, [r3, #8]
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	685a      	ldr	r2, [r3, #4]
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	f000 fb67 	bl	8004aa4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80043e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	68ba      	ldr	r2, [r7, #8]
 80043ec:	609a      	str	r2, [r3, #8]
      break;
 80043ee:	e04f      	b.n	8004490 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6818      	ldr	r0, [r3, #0]
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	6899      	ldr	r1, [r3, #8]
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	685a      	ldr	r2, [r3, #4]
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	f000 fb50 	bl	8004aa4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	689a      	ldr	r2, [r3, #8]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004412:	609a      	str	r2, [r3, #8]
      break;
 8004414:	e03c      	b.n	8004490 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6818      	ldr	r0, [r3, #0]
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	6859      	ldr	r1, [r3, #4]
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	461a      	mov	r2, r3
 8004424:	f000 fac4 	bl	80049b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	2150      	movs	r1, #80	@ 0x50
 800442e:	4618      	mov	r0, r3
 8004430:	f000 fb1d 	bl	8004a6e <TIM_ITRx_SetConfig>
      break;
 8004434:	e02c      	b.n	8004490 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6818      	ldr	r0, [r3, #0]
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	6859      	ldr	r1, [r3, #4]
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	461a      	mov	r2, r3
 8004444:	f000 fae3 	bl	8004a0e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	2160      	movs	r1, #96	@ 0x60
 800444e:	4618      	mov	r0, r3
 8004450:	f000 fb0d 	bl	8004a6e <TIM_ITRx_SetConfig>
      break;
 8004454:	e01c      	b.n	8004490 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6818      	ldr	r0, [r3, #0]
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	6859      	ldr	r1, [r3, #4]
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	461a      	mov	r2, r3
 8004464:	f000 faa4 	bl	80049b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2140      	movs	r1, #64	@ 0x40
 800446e:	4618      	mov	r0, r3
 8004470:	f000 fafd 	bl	8004a6e <TIM_ITRx_SetConfig>
      break;
 8004474:	e00c      	b.n	8004490 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4619      	mov	r1, r3
 8004480:	4610      	mov	r0, r2
 8004482:	f000 faf4 	bl	8004a6e <TIM_ITRx_SetConfig>
      break;
 8004486:	e003      	b.n	8004490 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	73fb      	strb	r3, [r7, #15]
      break;
 800448c:	e000      	b.n	8004490 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800448e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80044a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3710      	adds	r7, #16
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}

080044aa <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044aa:	b480      	push	{r7}
 80044ac:	b083      	sub	sp, #12
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80044b2:	bf00      	nop
 80044b4:	370c      	adds	r7, #12
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr

080044be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044be:	b480      	push	{r7}
 80044c0:	b083      	sub	sp, #12
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80044c6:	bf00      	nop
 80044c8:	370c      	adds	r7, #12
 80044ca:	46bd      	mov	sp, r7
 80044cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d0:	4770      	bx	lr

080044d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80044d2:	b480      	push	{r7}
 80044d4:	b083      	sub	sp, #12
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80044da:	bf00      	nop
 80044dc:	370c      	adds	r7, #12
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr

080044e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80044e6:	b480      	push	{r7}
 80044e8:	b083      	sub	sp, #12
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80044ee:	bf00      	nop
 80044f0:	370c      	adds	r7, #12
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr

080044fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80044fa:	b480      	push	{r7}
 80044fc:	b083      	sub	sp, #12
 80044fe:	af00      	add	r7, sp, #0
 8004500:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004502:	bf00      	nop
 8004504:	370c      	adds	r7, #12
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr
	...

08004510 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004510:	b480      	push	{r7}
 8004512:	b085      	sub	sp, #20
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	4a40      	ldr	r2, [pc, #256]	@ (8004624 <TIM_Base_SetConfig+0x114>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d013      	beq.n	8004550 <TIM_Base_SetConfig+0x40>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800452e:	d00f      	beq.n	8004550 <TIM_Base_SetConfig+0x40>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	4a3d      	ldr	r2, [pc, #244]	@ (8004628 <TIM_Base_SetConfig+0x118>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d00b      	beq.n	8004550 <TIM_Base_SetConfig+0x40>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	4a3c      	ldr	r2, [pc, #240]	@ (800462c <TIM_Base_SetConfig+0x11c>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d007      	beq.n	8004550 <TIM_Base_SetConfig+0x40>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	4a3b      	ldr	r2, [pc, #236]	@ (8004630 <TIM_Base_SetConfig+0x120>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d003      	beq.n	8004550 <TIM_Base_SetConfig+0x40>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	4a3a      	ldr	r2, [pc, #232]	@ (8004634 <TIM_Base_SetConfig+0x124>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d108      	bne.n	8004562 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004556:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	68fa      	ldr	r2, [r7, #12]
 800455e:	4313      	orrs	r3, r2
 8004560:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4a2f      	ldr	r2, [pc, #188]	@ (8004624 <TIM_Base_SetConfig+0x114>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d02b      	beq.n	80045c2 <TIM_Base_SetConfig+0xb2>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004570:	d027      	beq.n	80045c2 <TIM_Base_SetConfig+0xb2>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4a2c      	ldr	r2, [pc, #176]	@ (8004628 <TIM_Base_SetConfig+0x118>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d023      	beq.n	80045c2 <TIM_Base_SetConfig+0xb2>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4a2b      	ldr	r2, [pc, #172]	@ (800462c <TIM_Base_SetConfig+0x11c>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d01f      	beq.n	80045c2 <TIM_Base_SetConfig+0xb2>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4a2a      	ldr	r2, [pc, #168]	@ (8004630 <TIM_Base_SetConfig+0x120>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d01b      	beq.n	80045c2 <TIM_Base_SetConfig+0xb2>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4a29      	ldr	r2, [pc, #164]	@ (8004634 <TIM_Base_SetConfig+0x124>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d017      	beq.n	80045c2 <TIM_Base_SetConfig+0xb2>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	4a28      	ldr	r2, [pc, #160]	@ (8004638 <TIM_Base_SetConfig+0x128>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d013      	beq.n	80045c2 <TIM_Base_SetConfig+0xb2>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4a27      	ldr	r2, [pc, #156]	@ (800463c <TIM_Base_SetConfig+0x12c>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d00f      	beq.n	80045c2 <TIM_Base_SetConfig+0xb2>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4a26      	ldr	r2, [pc, #152]	@ (8004640 <TIM_Base_SetConfig+0x130>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d00b      	beq.n	80045c2 <TIM_Base_SetConfig+0xb2>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4a25      	ldr	r2, [pc, #148]	@ (8004644 <TIM_Base_SetConfig+0x134>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d007      	beq.n	80045c2 <TIM_Base_SetConfig+0xb2>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4a24      	ldr	r2, [pc, #144]	@ (8004648 <TIM_Base_SetConfig+0x138>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d003      	beq.n	80045c2 <TIM_Base_SetConfig+0xb2>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a23      	ldr	r2, [pc, #140]	@ (800464c <TIM_Base_SetConfig+0x13c>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d108      	bne.n	80045d4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	68fa      	ldr	r2, [r7, #12]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	695b      	ldr	r3, [r3, #20]
 80045de:	4313      	orrs	r3, r2
 80045e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	68fa      	ldr	r2, [r7, #12]
 80045e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	689a      	ldr	r2, [r3, #8]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	4a0a      	ldr	r2, [pc, #40]	@ (8004624 <TIM_Base_SetConfig+0x114>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d003      	beq.n	8004608 <TIM_Base_SetConfig+0xf8>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	4a0c      	ldr	r2, [pc, #48]	@ (8004634 <TIM_Base_SetConfig+0x124>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d103      	bne.n	8004610 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	691a      	ldr	r2, [r3, #16]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	615a      	str	r2, [r3, #20]
}
 8004616:	bf00      	nop
 8004618:	3714      	adds	r7, #20
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr
 8004622:	bf00      	nop
 8004624:	40010000 	.word	0x40010000
 8004628:	40000400 	.word	0x40000400
 800462c:	40000800 	.word	0x40000800
 8004630:	40000c00 	.word	0x40000c00
 8004634:	40010400 	.word	0x40010400
 8004638:	40014000 	.word	0x40014000
 800463c:	40014400 	.word	0x40014400
 8004640:	40014800 	.word	0x40014800
 8004644:	40001800 	.word	0x40001800
 8004648:	40001c00 	.word	0x40001c00
 800464c:	40002000 	.word	0x40002000

08004650 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004650:	b480      	push	{r7}
 8004652:	b087      	sub	sp, #28
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6a1b      	ldr	r3, [r3, #32]
 800465e:	f023 0201 	bic.w	r2, r3, #1
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a1b      	ldr	r3, [r3, #32]
 800466a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	699b      	ldr	r3, [r3, #24]
 8004676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800467e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f023 0303 	bic.w	r3, r3, #3
 8004686:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	68fa      	ldr	r2, [r7, #12]
 800468e:	4313      	orrs	r3, r2
 8004690:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	f023 0302 	bic.w	r3, r3, #2
 8004698:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	697a      	ldr	r2, [r7, #20]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	4a20      	ldr	r2, [pc, #128]	@ (8004728 <TIM_OC1_SetConfig+0xd8>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d003      	beq.n	80046b4 <TIM_OC1_SetConfig+0x64>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	4a1f      	ldr	r2, [pc, #124]	@ (800472c <TIM_OC1_SetConfig+0xdc>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d10c      	bne.n	80046ce <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	f023 0308 	bic.w	r3, r3, #8
 80046ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	697a      	ldr	r2, [r7, #20]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	f023 0304 	bic.w	r3, r3, #4
 80046cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4a15      	ldr	r2, [pc, #84]	@ (8004728 <TIM_OC1_SetConfig+0xd8>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d003      	beq.n	80046de <TIM_OC1_SetConfig+0x8e>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4a14      	ldr	r2, [pc, #80]	@ (800472c <TIM_OC1_SetConfig+0xdc>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d111      	bne.n	8004702 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80046e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80046ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	695b      	ldr	r3, [r3, #20]
 80046f2:	693a      	ldr	r2, [r7, #16]
 80046f4:	4313      	orrs	r3, r2
 80046f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	699b      	ldr	r3, [r3, #24]
 80046fc:	693a      	ldr	r2, [r7, #16]
 80046fe:	4313      	orrs	r3, r2
 8004700:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	693a      	ldr	r2, [r7, #16]
 8004706:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	68fa      	ldr	r2, [r7, #12]
 800470c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	685a      	ldr	r2, [r3, #4]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	697a      	ldr	r2, [r7, #20]
 800471a:	621a      	str	r2, [r3, #32]
}
 800471c:	bf00      	nop
 800471e:	371c      	adds	r7, #28
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr
 8004728:	40010000 	.word	0x40010000
 800472c:	40010400 	.word	0x40010400

08004730 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004730:	b480      	push	{r7}
 8004732:	b087      	sub	sp, #28
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a1b      	ldr	r3, [r3, #32]
 800473e:	f023 0210 	bic.w	r2, r3, #16
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a1b      	ldr	r3, [r3, #32]
 800474a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	699b      	ldr	r3, [r3, #24]
 8004756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800475e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004766:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	021b      	lsls	r3, r3, #8
 800476e:	68fa      	ldr	r2, [r7, #12]
 8004770:	4313      	orrs	r3, r2
 8004772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	f023 0320 	bic.w	r3, r3, #32
 800477a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	011b      	lsls	r3, r3, #4
 8004782:	697a      	ldr	r2, [r7, #20]
 8004784:	4313      	orrs	r3, r2
 8004786:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	4a22      	ldr	r2, [pc, #136]	@ (8004814 <TIM_OC2_SetConfig+0xe4>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d003      	beq.n	8004798 <TIM_OC2_SetConfig+0x68>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	4a21      	ldr	r2, [pc, #132]	@ (8004818 <TIM_OC2_SetConfig+0xe8>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d10d      	bne.n	80047b4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800479e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	011b      	lsls	r3, r3, #4
 80047a6:	697a      	ldr	r2, [r7, #20]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047b2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4a17      	ldr	r2, [pc, #92]	@ (8004814 <TIM_OC2_SetConfig+0xe4>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d003      	beq.n	80047c4 <TIM_OC2_SetConfig+0x94>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	4a16      	ldr	r2, [pc, #88]	@ (8004818 <TIM_OC2_SetConfig+0xe8>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d113      	bne.n	80047ec <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80047ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80047d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	695b      	ldr	r3, [r3, #20]
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	693a      	ldr	r2, [r7, #16]
 80047dc:	4313      	orrs	r3, r2
 80047de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	699b      	ldr	r3, [r3, #24]
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	693a      	ldr	r2, [r7, #16]
 80047e8:	4313      	orrs	r3, r2
 80047ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	693a      	ldr	r2, [r7, #16]
 80047f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	68fa      	ldr	r2, [r7, #12]
 80047f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	685a      	ldr	r2, [r3, #4]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	697a      	ldr	r2, [r7, #20]
 8004804:	621a      	str	r2, [r3, #32]
}
 8004806:	bf00      	nop
 8004808:	371c      	adds	r7, #28
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr
 8004812:	bf00      	nop
 8004814:	40010000 	.word	0x40010000
 8004818:	40010400 	.word	0x40010400

0800481c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800481c:	b480      	push	{r7}
 800481e:	b087      	sub	sp, #28
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6a1b      	ldr	r3, [r3, #32]
 800482a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a1b      	ldr	r3, [r3, #32]
 8004836:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	69db      	ldr	r3, [r3, #28]
 8004842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800484a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f023 0303 	bic.w	r3, r3, #3
 8004852:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	68fa      	ldr	r2, [r7, #12]
 800485a:	4313      	orrs	r3, r2
 800485c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004864:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	021b      	lsls	r3, r3, #8
 800486c:	697a      	ldr	r2, [r7, #20]
 800486e:	4313      	orrs	r3, r2
 8004870:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4a21      	ldr	r2, [pc, #132]	@ (80048fc <TIM_OC3_SetConfig+0xe0>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d003      	beq.n	8004882 <TIM_OC3_SetConfig+0x66>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a20      	ldr	r2, [pc, #128]	@ (8004900 <TIM_OC3_SetConfig+0xe4>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d10d      	bne.n	800489e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004888:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	68db      	ldr	r3, [r3, #12]
 800488e:	021b      	lsls	r3, r3, #8
 8004890:	697a      	ldr	r2, [r7, #20]
 8004892:	4313      	orrs	r3, r2
 8004894:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800489c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a16      	ldr	r2, [pc, #88]	@ (80048fc <TIM_OC3_SetConfig+0xe0>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d003      	beq.n	80048ae <TIM_OC3_SetConfig+0x92>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a15      	ldr	r2, [pc, #84]	@ (8004900 <TIM_OC3_SetConfig+0xe4>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d113      	bne.n	80048d6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80048b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80048bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	695b      	ldr	r3, [r3, #20]
 80048c2:	011b      	lsls	r3, r3, #4
 80048c4:	693a      	ldr	r2, [r7, #16]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	699b      	ldr	r3, [r3, #24]
 80048ce:	011b      	lsls	r3, r3, #4
 80048d0:	693a      	ldr	r2, [r7, #16]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	693a      	ldr	r2, [r7, #16]
 80048da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	68fa      	ldr	r2, [r7, #12]
 80048e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	685a      	ldr	r2, [r3, #4]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	697a      	ldr	r2, [r7, #20]
 80048ee:	621a      	str	r2, [r3, #32]
}
 80048f0:	bf00      	nop
 80048f2:	371c      	adds	r7, #28
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr
 80048fc:	40010000 	.word	0x40010000
 8004900:	40010400 	.word	0x40010400

08004904 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004904:	b480      	push	{r7}
 8004906:	b087      	sub	sp, #28
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a1b      	ldr	r3, [r3, #32]
 8004912:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a1b      	ldr	r3, [r3, #32]
 800491e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	69db      	ldr	r3, [r3, #28]
 800492a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004932:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800493a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	021b      	lsls	r3, r3, #8
 8004942:	68fa      	ldr	r2, [r7, #12]
 8004944:	4313      	orrs	r3, r2
 8004946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800494e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	031b      	lsls	r3, r3, #12
 8004956:	693a      	ldr	r2, [r7, #16]
 8004958:	4313      	orrs	r3, r2
 800495a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	4a12      	ldr	r2, [pc, #72]	@ (80049a8 <TIM_OC4_SetConfig+0xa4>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d003      	beq.n	800496c <TIM_OC4_SetConfig+0x68>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	4a11      	ldr	r2, [pc, #68]	@ (80049ac <TIM_OC4_SetConfig+0xa8>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d109      	bne.n	8004980 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004972:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	695b      	ldr	r3, [r3, #20]
 8004978:	019b      	lsls	r3, r3, #6
 800497a:	697a      	ldr	r2, [r7, #20]
 800497c:	4313      	orrs	r3, r2
 800497e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	697a      	ldr	r2, [r7, #20]
 8004984:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	68fa      	ldr	r2, [r7, #12]
 800498a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	685a      	ldr	r2, [r3, #4]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	693a      	ldr	r2, [r7, #16]
 8004998:	621a      	str	r2, [r3, #32]
}
 800499a:	bf00      	nop
 800499c:	371c      	adds	r7, #28
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr
 80049a6:	bf00      	nop
 80049a8:	40010000 	.word	0x40010000
 80049ac:	40010400 	.word	0x40010400

080049b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b087      	sub	sp, #28
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	60b9      	str	r1, [r7, #8]
 80049ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6a1b      	ldr	r3, [r3, #32]
 80049c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6a1b      	ldr	r3, [r3, #32]
 80049c6:	f023 0201 	bic.w	r2, r3, #1
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	699b      	ldr	r3, [r3, #24]
 80049d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80049da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	011b      	lsls	r3, r3, #4
 80049e0:	693a      	ldr	r2, [r7, #16]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	f023 030a 	bic.w	r3, r3, #10
 80049ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80049ee:	697a      	ldr	r2, [r7, #20]
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	693a      	ldr	r2, [r7, #16]
 80049fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	697a      	ldr	r2, [r7, #20]
 8004a00:	621a      	str	r2, [r3, #32]
}
 8004a02:	bf00      	nop
 8004a04:	371c      	adds	r7, #28
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr

08004a0e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a0e:	b480      	push	{r7}
 8004a10:	b087      	sub	sp, #28
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	60f8      	str	r0, [r7, #12]
 8004a16:	60b9      	str	r1, [r7, #8]
 8004a18:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	6a1b      	ldr	r3, [r3, #32]
 8004a1e:	f023 0210 	bic.w	r2, r3, #16
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	699b      	ldr	r3, [r3, #24]
 8004a2a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6a1b      	ldr	r3, [r3, #32]
 8004a30:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004a38:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	031b      	lsls	r3, r3, #12
 8004a3e:	697a      	ldr	r2, [r7, #20]
 8004a40:	4313      	orrs	r3, r2
 8004a42:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004a4a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	011b      	lsls	r3, r3, #4
 8004a50:	693a      	ldr	r2, [r7, #16]
 8004a52:	4313      	orrs	r3, r2
 8004a54:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	697a      	ldr	r2, [r7, #20]
 8004a5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	693a      	ldr	r2, [r7, #16]
 8004a60:	621a      	str	r2, [r3, #32]
}
 8004a62:	bf00      	nop
 8004a64:	371c      	adds	r7, #28
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr

08004a6e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a6e:	b480      	push	{r7}
 8004a70:	b085      	sub	sp, #20
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	6078      	str	r0, [r7, #4]
 8004a76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a84:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a86:	683a      	ldr	r2, [r7, #0]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	f043 0307 	orr.w	r3, r3, #7
 8004a90:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	68fa      	ldr	r2, [r7, #12]
 8004a96:	609a      	str	r2, [r3, #8]
}
 8004a98:	bf00      	nop
 8004a9a:	3714      	adds	r7, #20
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b087      	sub	sp, #28
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	60f8      	str	r0, [r7, #12]
 8004aac:	60b9      	str	r1, [r7, #8]
 8004aae:	607a      	str	r2, [r7, #4]
 8004ab0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004abe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	021a      	lsls	r2, r3, #8
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	431a      	orrs	r2, r3
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	697a      	ldr	r2, [r7, #20]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	697a      	ldr	r2, [r7, #20]
 8004ad6:	609a      	str	r2, [r3, #8]
}
 8004ad8:	bf00      	nop
 8004ada:	371c      	adds	r7, #28
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b087      	sub	sp, #28
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	60f8      	str	r0, [r7, #12]
 8004aec:	60b9      	str	r1, [r7, #8]
 8004aee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	f003 031f 	and.w	r3, r3, #31
 8004af6:	2201      	movs	r2, #1
 8004af8:	fa02 f303 	lsl.w	r3, r2, r3
 8004afc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	6a1a      	ldr	r2, [r3, #32]
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	43db      	mvns	r3, r3
 8004b06:	401a      	ands	r2, r3
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6a1a      	ldr	r2, [r3, #32]
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	f003 031f 	and.w	r3, r3, #31
 8004b16:	6879      	ldr	r1, [r7, #4]
 8004b18:	fa01 f303 	lsl.w	r3, r1, r3
 8004b1c:	431a      	orrs	r2, r3
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	621a      	str	r2, [r3, #32]
}
 8004b22:	bf00      	nop
 8004b24:	371c      	adds	r7, #28
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr
	...

08004b30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b085      	sub	sp, #20
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
 8004b38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d101      	bne.n	8004b48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b44:	2302      	movs	r3, #2
 8004b46:	e05a      	b.n	8004bfe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2202      	movs	r2, #2
 8004b54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	68fa      	ldr	r2, [r7, #12]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	68fa      	ldr	r2, [r7, #12]
 8004b80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a21      	ldr	r2, [pc, #132]	@ (8004c0c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d022      	beq.n	8004bd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b94:	d01d      	beq.n	8004bd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a1d      	ldr	r2, [pc, #116]	@ (8004c10 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d018      	beq.n	8004bd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a1b      	ldr	r2, [pc, #108]	@ (8004c14 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d013      	beq.n	8004bd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a1a      	ldr	r2, [pc, #104]	@ (8004c18 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d00e      	beq.n	8004bd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a18      	ldr	r2, [pc, #96]	@ (8004c1c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d009      	beq.n	8004bd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a17      	ldr	r2, [pc, #92]	@ (8004c20 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d004      	beq.n	8004bd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a15      	ldr	r2, [pc, #84]	@ (8004c24 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d10c      	bne.n	8004bec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004bd8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	68ba      	ldr	r2, [r7, #8]
 8004be0:	4313      	orrs	r3, r2
 8004be2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	68ba      	ldr	r2, [r7, #8]
 8004bea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3714      	adds	r7, #20
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr
 8004c0a:	bf00      	nop
 8004c0c:	40010000 	.word	0x40010000
 8004c10:	40000400 	.word	0x40000400
 8004c14:	40000800 	.word	0x40000800
 8004c18:	40000c00 	.word	0x40000c00
 8004c1c:	40010400 	.word	0x40010400
 8004c20:	40014000 	.word	0x40014000
 8004c24:	40001800 	.word	0x40001800

08004c28 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b085      	sub	sp, #20
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004c32:	2300      	movs	r3, #0
 8004c34:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d101      	bne.n	8004c44 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004c40:	2302      	movs	r3, #2
 8004c42:	e03d      	b.n	8004cc0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2201      	movs	r2, #1
 8004c48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	4313      	orrs	r3, r2
 8004c74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4313      	orrs	r3, r2
 8004c82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	691b      	ldr	r3, [r3, #16]
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	695b      	ldr	r3, [r3, #20]
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	69db      	ldr	r3, [r3, #28]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	68fa      	ldr	r2, [r7, #12]
 8004cb4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004cbe:	2300      	movs	r3, #0
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3714      	adds	r7, #20
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr

08004ccc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b083      	sub	sp, #12
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004cd4:	bf00      	nop
 8004cd6:	370c      	adds	r7, #12
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr

08004ce0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b083      	sub	sp, #12
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ce8:	bf00      	nop
 8004cea:	370c      	adds	r7, #12
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr

08004cf4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b082      	sub	sp, #8
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d101      	bne.n	8004d06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e03f      	b.n	8004d86 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d106      	bne.n	8004d20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f7fd f8e2 	bl	8001ee4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2224      	movs	r2, #36	@ 0x24
 8004d24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	68da      	ldr	r2, [r3, #12]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004d36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f000 fc7b 	bl	8005634 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	691a      	ldr	r2, [r3, #16]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004d4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	695a      	ldr	r2, [r3, #20]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004d5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	68da      	ldr	r2, [r3, #12]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004d6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2220      	movs	r2, #32
 8004d78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2220      	movs	r2, #32
 8004d80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004d84:	2300      	movs	r3, #0
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3708      	adds	r7, #8
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
	...

08004d90 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b0ba      	sub	sp, #232	@ 0xe8
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	695b      	ldr	r3, [r3, #20]
 8004db2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004db6:	2300      	movs	r3, #0
 8004db8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004dc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dc6:	f003 030f 	and.w	r3, r3, #15
 8004dca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004dce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d10f      	bne.n	8004df6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004dd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dda:	f003 0320 	and.w	r3, r3, #32
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d009      	beq.n	8004df6 <HAL_UART_IRQHandler+0x66>
 8004de2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004de6:	f003 0320 	and.w	r3, r3, #32
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d003      	beq.n	8004df6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f000 fb65 	bl	80054be <UART_Receive_IT>
      return;
 8004df4:	e256      	b.n	80052a4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004df6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	f000 80de 	beq.w	8004fbc <HAL_UART_IRQHandler+0x22c>
 8004e00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e04:	f003 0301 	and.w	r3, r3, #1
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d106      	bne.n	8004e1a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004e0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e10:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	f000 80d1 	beq.w	8004fbc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004e1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e1e:	f003 0301 	and.w	r3, r3, #1
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d00b      	beq.n	8004e3e <HAL_UART_IRQHandler+0xae>
 8004e26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d005      	beq.n	8004e3e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e36:	f043 0201 	orr.w	r2, r3, #1
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e42:	f003 0304 	and.w	r3, r3, #4
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d00b      	beq.n	8004e62 <HAL_UART_IRQHandler+0xd2>
 8004e4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e4e:	f003 0301 	and.w	r3, r3, #1
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d005      	beq.n	8004e62 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e5a:	f043 0202 	orr.w	r2, r3, #2
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e66:	f003 0302 	and.w	r3, r3, #2
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d00b      	beq.n	8004e86 <HAL_UART_IRQHandler+0xf6>
 8004e6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e72:	f003 0301 	and.w	r3, r3, #1
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d005      	beq.n	8004e86 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e7e:	f043 0204 	orr.w	r2, r3, #4
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004e86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e8a:	f003 0308 	and.w	r3, r3, #8
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d011      	beq.n	8004eb6 <HAL_UART_IRQHandler+0x126>
 8004e92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e96:	f003 0320 	and.w	r3, r3, #32
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d105      	bne.n	8004eaa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004e9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ea2:	f003 0301 	and.w	r3, r3, #1
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d005      	beq.n	8004eb6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eae:	f043 0208 	orr.w	r2, r3, #8
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	f000 81ed 	beq.w	800529a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004ec0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ec4:	f003 0320 	and.w	r3, r3, #32
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d008      	beq.n	8004ede <HAL_UART_IRQHandler+0x14e>
 8004ecc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ed0:	f003 0320 	and.w	r3, r3, #32
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d002      	beq.n	8004ede <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f000 faf0 	bl	80054be <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	695b      	ldr	r3, [r3, #20]
 8004ee4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ee8:	2b40      	cmp	r3, #64	@ 0x40
 8004eea:	bf0c      	ite	eq
 8004eec:	2301      	moveq	r3, #1
 8004eee:	2300      	movne	r3, #0
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004efa:	f003 0308 	and.w	r3, r3, #8
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d103      	bne.n	8004f0a <HAL_UART_IRQHandler+0x17a>
 8004f02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d04f      	beq.n	8004faa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f000 f9f8 	bl	8005300 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	695b      	ldr	r3, [r3, #20]
 8004f16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f1a:	2b40      	cmp	r3, #64	@ 0x40
 8004f1c:	d141      	bne.n	8004fa2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	3314      	adds	r3, #20
 8004f24:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f28:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004f2c:	e853 3f00 	ldrex	r3, [r3]
 8004f30:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004f34:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004f38:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f3c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	3314      	adds	r3, #20
 8004f46:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004f4a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004f4e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f52:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004f56:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004f5a:	e841 2300 	strex	r3, r2, [r1]
 8004f5e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004f62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d1d9      	bne.n	8004f1e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d013      	beq.n	8004f9a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f76:	4a7d      	ldr	r2, [pc, #500]	@ (800516c <HAL_UART_IRQHandler+0x3dc>)
 8004f78:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f7fd fde7 	bl	8002b52 <HAL_DMA_Abort_IT>
 8004f84:	4603      	mov	r3, r0
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d016      	beq.n	8004fb8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f90:	687a      	ldr	r2, [r7, #4]
 8004f92:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004f94:	4610      	mov	r0, r2
 8004f96:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f98:	e00e      	b.n	8004fb8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f000 f99a 	bl	80052d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fa0:	e00a      	b.n	8004fb8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f000 f996 	bl	80052d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fa8:	e006      	b.n	8004fb8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 f992 	bl	80052d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8004fb6:	e170      	b.n	800529a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fb8:	bf00      	nop
    return;
 8004fba:	e16e      	b.n	800529a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	f040 814a 	bne.w	800525a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004fc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fca:	f003 0310 	and.w	r3, r3, #16
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	f000 8143 	beq.w	800525a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004fd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fd8:	f003 0310 	and.w	r3, r3, #16
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	f000 813c 	beq.w	800525a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	60bb      	str	r3, [r7, #8]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	60bb      	str	r3, [r7, #8]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	60bb      	str	r3, [r7, #8]
 8004ff6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	695b      	ldr	r3, [r3, #20]
 8004ffe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005002:	2b40      	cmp	r3, #64	@ 0x40
 8005004:	f040 80b4 	bne.w	8005170 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005014:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005018:	2b00      	cmp	r3, #0
 800501a:	f000 8140 	beq.w	800529e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005022:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005026:	429a      	cmp	r2, r3
 8005028:	f080 8139 	bcs.w	800529e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005032:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005038:	69db      	ldr	r3, [r3, #28]
 800503a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800503e:	f000 8088 	beq.w	8005152 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	330c      	adds	r3, #12
 8005048:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800504c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005050:	e853 3f00 	ldrex	r3, [r3]
 8005054:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005058:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800505c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005060:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	330c      	adds	r3, #12
 800506a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800506e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005072:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005076:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800507a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800507e:	e841 2300 	strex	r3, r2, [r1]
 8005082:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005086:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800508a:	2b00      	cmp	r3, #0
 800508c:	d1d9      	bne.n	8005042 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	3314      	adds	r3, #20
 8005094:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005096:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005098:	e853 3f00 	ldrex	r3, [r3]
 800509c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800509e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80050a0:	f023 0301 	bic.w	r3, r3, #1
 80050a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	3314      	adds	r3, #20
 80050ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80050b2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80050b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80050ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80050be:	e841 2300 	strex	r3, r2, [r1]
 80050c2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80050c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d1e1      	bne.n	800508e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	3314      	adds	r3, #20
 80050d0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80050d4:	e853 3f00 	ldrex	r3, [r3]
 80050d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80050da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80050dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80050e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	3314      	adds	r3, #20
 80050ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80050ee:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80050f0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80050f4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80050f6:	e841 2300 	strex	r3, r2, [r1]
 80050fa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80050fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d1e3      	bne.n	80050ca <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2220      	movs	r2, #32
 8005106:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2200      	movs	r2, #0
 800510e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	330c      	adds	r3, #12
 8005116:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005118:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800511a:	e853 3f00 	ldrex	r3, [r3]
 800511e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005120:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005122:	f023 0310 	bic.w	r3, r3, #16
 8005126:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	330c      	adds	r3, #12
 8005130:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005134:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005136:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005138:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800513a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800513c:	e841 2300 	strex	r3, r2, [r1]
 8005140:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005142:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005144:	2b00      	cmp	r3, #0
 8005146:	d1e3      	bne.n	8005110 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800514c:	4618      	mov	r0, r3
 800514e:	f7fd fc90 	bl	8002a72 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800515a:	b29b      	uxth	r3, r3
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	b29b      	uxth	r3, r3
 8005160:	4619      	mov	r1, r3
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f000 f8c0 	bl	80052e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005168:	e099      	b.n	800529e <HAL_UART_IRQHandler+0x50e>
 800516a:	bf00      	nop
 800516c:	080053c7 	.word	0x080053c7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005178:	b29b      	uxth	r3, r3
 800517a:	1ad3      	subs	r3, r2, r3
 800517c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005184:	b29b      	uxth	r3, r3
 8005186:	2b00      	cmp	r3, #0
 8005188:	f000 808b 	beq.w	80052a2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800518c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005190:	2b00      	cmp	r3, #0
 8005192:	f000 8086 	beq.w	80052a2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	330c      	adds	r3, #12
 800519c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800519e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051a0:	e853 3f00 	ldrex	r3, [r3]
 80051a4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80051a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80051ac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	330c      	adds	r3, #12
 80051b6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80051ba:	647a      	str	r2, [r7, #68]	@ 0x44
 80051bc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051be:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80051c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80051c2:	e841 2300 	strex	r3, r2, [r1]
 80051c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80051c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d1e3      	bne.n	8005196 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	3314      	adds	r3, #20
 80051d4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051d8:	e853 3f00 	ldrex	r3, [r3]
 80051dc:	623b      	str	r3, [r7, #32]
   return(result);
 80051de:	6a3b      	ldr	r3, [r7, #32]
 80051e0:	f023 0301 	bic.w	r3, r3, #1
 80051e4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	3314      	adds	r3, #20
 80051ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80051f2:	633a      	str	r2, [r7, #48]	@ 0x30
 80051f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80051f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051fa:	e841 2300 	strex	r3, r2, [r1]
 80051fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005202:	2b00      	cmp	r3, #0
 8005204:	d1e3      	bne.n	80051ce <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2220      	movs	r2, #32
 800520a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	330c      	adds	r3, #12
 800521a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	e853 3f00 	ldrex	r3, [r3]
 8005222:	60fb      	str	r3, [r7, #12]
   return(result);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f023 0310 	bic.w	r3, r3, #16
 800522a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	330c      	adds	r3, #12
 8005234:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005238:	61fa      	str	r2, [r7, #28]
 800523a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800523c:	69b9      	ldr	r1, [r7, #24]
 800523e:	69fa      	ldr	r2, [r7, #28]
 8005240:	e841 2300 	strex	r3, r2, [r1]
 8005244:	617b      	str	r3, [r7, #20]
   return(result);
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d1e3      	bne.n	8005214 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800524c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005250:	4619      	mov	r1, r3
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f000 f848 	bl	80052e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005258:	e023      	b.n	80052a2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800525a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800525e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005262:	2b00      	cmp	r3, #0
 8005264:	d009      	beq.n	800527a <HAL_UART_IRQHandler+0x4ea>
 8005266:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800526a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800526e:	2b00      	cmp	r3, #0
 8005270:	d003      	beq.n	800527a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f000 f8bb 	bl	80053ee <UART_Transmit_IT>
    return;
 8005278:	e014      	b.n	80052a4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800527a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800527e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005282:	2b00      	cmp	r3, #0
 8005284:	d00e      	beq.n	80052a4 <HAL_UART_IRQHandler+0x514>
 8005286:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800528a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800528e:	2b00      	cmp	r3, #0
 8005290:	d008      	beq.n	80052a4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f000 f8fb 	bl	800548e <UART_EndTransmit_IT>
    return;
 8005298:	e004      	b.n	80052a4 <HAL_UART_IRQHandler+0x514>
    return;
 800529a:	bf00      	nop
 800529c:	e002      	b.n	80052a4 <HAL_UART_IRQHandler+0x514>
      return;
 800529e:	bf00      	nop
 80052a0:	e000      	b.n	80052a4 <HAL_UART_IRQHandler+0x514>
      return;
 80052a2:	bf00      	nop
  }
}
 80052a4:	37e8      	adds	r7, #232	@ 0xe8
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	bf00      	nop

080052ac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b083      	sub	sp, #12
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80052b4:	bf00      	nop
 80052b6:	370c      	adds	r7, #12
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr

080052c0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80052c8:	bf00      	nop
 80052ca:	370c      	adds	r7, #12
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80052dc:	bf00      	nop
 80052de:	370c      	adds	r7, #12
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr

080052e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b083      	sub	sp, #12
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	460b      	mov	r3, r1
 80052f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80052f4:	bf00      	nop
 80052f6:	370c      	adds	r7, #12
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr

08005300 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005300:	b480      	push	{r7}
 8005302:	b095      	sub	sp, #84	@ 0x54
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	330c      	adds	r3, #12
 800530e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005310:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005312:	e853 3f00 	ldrex	r3, [r3]
 8005316:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800531a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800531e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	330c      	adds	r3, #12
 8005326:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005328:	643a      	str	r2, [r7, #64]	@ 0x40
 800532a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800532c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800532e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005330:	e841 2300 	strex	r3, r2, [r1]
 8005334:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005338:	2b00      	cmp	r3, #0
 800533a:	d1e5      	bne.n	8005308 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	3314      	adds	r3, #20
 8005342:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005344:	6a3b      	ldr	r3, [r7, #32]
 8005346:	e853 3f00 	ldrex	r3, [r3]
 800534a:	61fb      	str	r3, [r7, #28]
   return(result);
 800534c:	69fb      	ldr	r3, [r7, #28]
 800534e:	f023 0301 	bic.w	r3, r3, #1
 8005352:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	3314      	adds	r3, #20
 800535a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800535c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800535e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005360:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005362:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005364:	e841 2300 	strex	r3, r2, [r1]
 8005368:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800536a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800536c:	2b00      	cmp	r3, #0
 800536e:	d1e5      	bne.n	800533c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005374:	2b01      	cmp	r3, #1
 8005376:	d119      	bne.n	80053ac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	330c      	adds	r3, #12
 800537e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	e853 3f00 	ldrex	r3, [r3]
 8005386:	60bb      	str	r3, [r7, #8]
   return(result);
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	f023 0310 	bic.w	r3, r3, #16
 800538e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	330c      	adds	r3, #12
 8005396:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005398:	61ba      	str	r2, [r7, #24]
 800539a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800539c:	6979      	ldr	r1, [r7, #20]
 800539e:	69ba      	ldr	r2, [r7, #24]
 80053a0:	e841 2300 	strex	r3, r2, [r1]
 80053a4:	613b      	str	r3, [r7, #16]
   return(result);
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d1e5      	bne.n	8005378 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2220      	movs	r2, #32
 80053b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2200      	movs	r2, #0
 80053b8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80053ba:	bf00      	nop
 80053bc:	3754      	adds	r7, #84	@ 0x54
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr

080053c6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80053c6:	b580      	push	{r7, lr}
 80053c8:	b084      	sub	sp, #16
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053d2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2200      	movs	r2, #0
 80053d8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2200      	movs	r2, #0
 80053de:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80053e0:	68f8      	ldr	r0, [r7, #12]
 80053e2:	f7ff ff77 	bl	80052d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053e6:	bf00      	nop
 80053e8:	3710      	adds	r7, #16
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}

080053ee <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80053ee:	b480      	push	{r7}
 80053f0:	b085      	sub	sp, #20
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	2b21      	cmp	r3, #33	@ 0x21
 8005400:	d13e      	bne.n	8005480 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800540a:	d114      	bne.n	8005436 <UART_Transmit_IT+0x48>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	691b      	ldr	r3, [r3, #16]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d110      	bne.n	8005436 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6a1b      	ldr	r3, [r3, #32]
 8005418:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	881b      	ldrh	r3, [r3, #0]
 800541e:	461a      	mov	r2, r3
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005428:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6a1b      	ldr	r3, [r3, #32]
 800542e:	1c9a      	adds	r2, r3, #2
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	621a      	str	r2, [r3, #32]
 8005434:	e008      	b.n	8005448 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6a1b      	ldr	r3, [r3, #32]
 800543a:	1c59      	adds	r1, r3, #1
 800543c:	687a      	ldr	r2, [r7, #4]
 800543e:	6211      	str	r1, [r2, #32]
 8005440:	781a      	ldrb	r2, [r3, #0]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800544c:	b29b      	uxth	r3, r3
 800544e:	3b01      	subs	r3, #1
 8005450:	b29b      	uxth	r3, r3
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	4619      	mov	r1, r3
 8005456:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005458:	2b00      	cmp	r3, #0
 800545a:	d10f      	bne.n	800547c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	68da      	ldr	r2, [r3, #12]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800546a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	68da      	ldr	r2, [r3, #12]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800547a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800547c:	2300      	movs	r3, #0
 800547e:	e000      	b.n	8005482 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005480:	2302      	movs	r3, #2
  }
}
 8005482:	4618      	mov	r0, r3
 8005484:	3714      	adds	r7, #20
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr

0800548e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800548e:	b580      	push	{r7, lr}
 8005490:	b082      	sub	sp, #8
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	68da      	ldr	r2, [r3, #12]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80054a4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2220      	movs	r2, #32
 80054aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f7ff fefc 	bl	80052ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80054b4:	2300      	movs	r3, #0
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3708      	adds	r7, #8
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}

080054be <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80054be:	b580      	push	{r7, lr}
 80054c0:	b08c      	sub	sp, #48	@ 0x30
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	2b22      	cmp	r3, #34	@ 0x22
 80054d0:	f040 80ab 	bne.w	800562a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054dc:	d117      	bne.n	800550e <UART_Receive_IT+0x50>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	691b      	ldr	r3, [r3, #16]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d113      	bne.n	800550e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80054e6:	2300      	movs	r3, #0
 80054e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054ee:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054fc:	b29a      	uxth	r2, r3
 80054fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005500:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005506:	1c9a      	adds	r2, r3, #2
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	629a      	str	r2, [r3, #40]	@ 0x28
 800550c:	e026      	b.n	800555c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005512:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005514:	2300      	movs	r3, #0
 8005516:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005520:	d007      	beq.n	8005532 <UART_Receive_IT+0x74>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d10a      	bne.n	8005540 <UART_Receive_IT+0x82>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	691b      	ldr	r3, [r3, #16]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d106      	bne.n	8005540 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	b2da      	uxtb	r2, r3
 800553a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800553c:	701a      	strb	r2, [r3, #0]
 800553e:	e008      	b.n	8005552 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	b2db      	uxtb	r3, r3
 8005548:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800554c:	b2da      	uxtb	r2, r3
 800554e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005550:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005556:	1c5a      	adds	r2, r3, #1
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005560:	b29b      	uxth	r3, r3
 8005562:	3b01      	subs	r3, #1
 8005564:	b29b      	uxth	r3, r3
 8005566:	687a      	ldr	r2, [r7, #4]
 8005568:	4619      	mov	r1, r3
 800556a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800556c:	2b00      	cmp	r3, #0
 800556e:	d15a      	bne.n	8005626 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	68da      	ldr	r2, [r3, #12]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f022 0220 	bic.w	r2, r2, #32
 800557e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	68da      	ldr	r2, [r3, #12]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800558e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	695a      	ldr	r2, [r3, #20]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f022 0201 	bic.w	r2, r2, #1
 800559e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2220      	movs	r2, #32
 80055a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d135      	bne.n	800561c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	330c      	adds	r3, #12
 80055bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	e853 3f00 	ldrex	r3, [r3]
 80055c4:	613b      	str	r3, [r7, #16]
   return(result);
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	f023 0310 	bic.w	r3, r3, #16
 80055cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	330c      	adds	r3, #12
 80055d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055d6:	623a      	str	r2, [r7, #32]
 80055d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055da:	69f9      	ldr	r1, [r7, #28]
 80055dc:	6a3a      	ldr	r2, [r7, #32]
 80055de:	e841 2300 	strex	r3, r2, [r1]
 80055e2:	61bb      	str	r3, [r7, #24]
   return(result);
 80055e4:	69bb      	ldr	r3, [r7, #24]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d1e5      	bne.n	80055b6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f003 0310 	and.w	r3, r3, #16
 80055f4:	2b10      	cmp	r3, #16
 80055f6:	d10a      	bne.n	800560e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80055f8:	2300      	movs	r3, #0
 80055fa:	60fb      	str	r3, [r7, #12]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	60fb      	str	r3, [r7, #12]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	60fb      	str	r3, [r7, #12]
 800560c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005612:	4619      	mov	r1, r3
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f7ff fe67 	bl	80052e8 <HAL_UARTEx_RxEventCallback>
 800561a:	e002      	b.n	8005622 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f7ff fe4f 	bl	80052c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005622:	2300      	movs	r3, #0
 8005624:	e002      	b.n	800562c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005626:	2300      	movs	r3, #0
 8005628:	e000      	b.n	800562c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800562a:	2302      	movs	r3, #2
  }
}
 800562c:	4618      	mov	r0, r3
 800562e:	3730      	adds	r7, #48	@ 0x30
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}

08005634 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005634:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005638:	b0c0      	sub	sp, #256	@ 0x100
 800563a:	af00      	add	r7, sp, #0
 800563c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	691b      	ldr	r3, [r3, #16]
 8005648:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800564c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005650:	68d9      	ldr	r1, [r3, #12]
 8005652:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	ea40 0301 	orr.w	r3, r0, r1
 800565c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800565e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005662:	689a      	ldr	r2, [r3, #8]
 8005664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005668:	691b      	ldr	r3, [r3, #16]
 800566a:	431a      	orrs	r2, r3
 800566c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005670:	695b      	ldr	r3, [r3, #20]
 8005672:	431a      	orrs	r2, r3
 8005674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005678:	69db      	ldr	r3, [r3, #28]
 800567a:	4313      	orrs	r3, r2
 800567c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	68db      	ldr	r3, [r3, #12]
 8005688:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800568c:	f021 010c 	bic.w	r1, r1, #12
 8005690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800569a:	430b      	orrs	r3, r1
 800569c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800569e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	695b      	ldr	r3, [r3, #20]
 80056a6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80056aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056ae:	6999      	ldr	r1, [r3, #24]
 80056b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	ea40 0301 	orr.w	r3, r0, r1
 80056ba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80056bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	4b8f      	ldr	r3, [pc, #572]	@ (8005900 <UART_SetConfig+0x2cc>)
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d005      	beq.n	80056d4 <UART_SetConfig+0xa0>
 80056c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	4b8d      	ldr	r3, [pc, #564]	@ (8005904 <UART_SetConfig+0x2d0>)
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d104      	bne.n	80056de <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80056d4:	f7fe f9de 	bl	8003a94 <HAL_RCC_GetPCLK2Freq>
 80056d8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80056dc:	e003      	b.n	80056e6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80056de:	f7fe f9c5 	bl	8003a6c <HAL_RCC_GetPCLK1Freq>
 80056e2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056ea:	69db      	ldr	r3, [r3, #28]
 80056ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056f0:	f040 810c 	bne.w	800590c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80056f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056f8:	2200      	movs	r2, #0
 80056fa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80056fe:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005702:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005706:	4622      	mov	r2, r4
 8005708:	462b      	mov	r3, r5
 800570a:	1891      	adds	r1, r2, r2
 800570c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800570e:	415b      	adcs	r3, r3
 8005710:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005712:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005716:	4621      	mov	r1, r4
 8005718:	eb12 0801 	adds.w	r8, r2, r1
 800571c:	4629      	mov	r1, r5
 800571e:	eb43 0901 	adc.w	r9, r3, r1
 8005722:	f04f 0200 	mov.w	r2, #0
 8005726:	f04f 0300 	mov.w	r3, #0
 800572a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800572e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005732:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005736:	4690      	mov	r8, r2
 8005738:	4699      	mov	r9, r3
 800573a:	4623      	mov	r3, r4
 800573c:	eb18 0303 	adds.w	r3, r8, r3
 8005740:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005744:	462b      	mov	r3, r5
 8005746:	eb49 0303 	adc.w	r3, r9, r3
 800574a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800574e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	2200      	movs	r2, #0
 8005756:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800575a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800575e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005762:	460b      	mov	r3, r1
 8005764:	18db      	adds	r3, r3, r3
 8005766:	653b      	str	r3, [r7, #80]	@ 0x50
 8005768:	4613      	mov	r3, r2
 800576a:	eb42 0303 	adc.w	r3, r2, r3
 800576e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005770:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005774:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005778:	f7fa fd26 	bl	80001c8 <__aeabi_uldivmod>
 800577c:	4602      	mov	r2, r0
 800577e:	460b      	mov	r3, r1
 8005780:	4b61      	ldr	r3, [pc, #388]	@ (8005908 <UART_SetConfig+0x2d4>)
 8005782:	fba3 2302 	umull	r2, r3, r3, r2
 8005786:	095b      	lsrs	r3, r3, #5
 8005788:	011c      	lsls	r4, r3, #4
 800578a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800578e:	2200      	movs	r2, #0
 8005790:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005794:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005798:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800579c:	4642      	mov	r2, r8
 800579e:	464b      	mov	r3, r9
 80057a0:	1891      	adds	r1, r2, r2
 80057a2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80057a4:	415b      	adcs	r3, r3
 80057a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80057a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80057ac:	4641      	mov	r1, r8
 80057ae:	eb12 0a01 	adds.w	sl, r2, r1
 80057b2:	4649      	mov	r1, r9
 80057b4:	eb43 0b01 	adc.w	fp, r3, r1
 80057b8:	f04f 0200 	mov.w	r2, #0
 80057bc:	f04f 0300 	mov.w	r3, #0
 80057c0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80057c4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80057c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80057cc:	4692      	mov	sl, r2
 80057ce:	469b      	mov	fp, r3
 80057d0:	4643      	mov	r3, r8
 80057d2:	eb1a 0303 	adds.w	r3, sl, r3
 80057d6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80057da:	464b      	mov	r3, r9
 80057dc:	eb4b 0303 	adc.w	r3, fp, r3
 80057e0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80057e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	2200      	movs	r2, #0
 80057ec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80057f0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80057f4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80057f8:	460b      	mov	r3, r1
 80057fa:	18db      	adds	r3, r3, r3
 80057fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80057fe:	4613      	mov	r3, r2
 8005800:	eb42 0303 	adc.w	r3, r2, r3
 8005804:	647b      	str	r3, [r7, #68]	@ 0x44
 8005806:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800580a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800580e:	f7fa fcdb 	bl	80001c8 <__aeabi_uldivmod>
 8005812:	4602      	mov	r2, r0
 8005814:	460b      	mov	r3, r1
 8005816:	4611      	mov	r1, r2
 8005818:	4b3b      	ldr	r3, [pc, #236]	@ (8005908 <UART_SetConfig+0x2d4>)
 800581a:	fba3 2301 	umull	r2, r3, r3, r1
 800581e:	095b      	lsrs	r3, r3, #5
 8005820:	2264      	movs	r2, #100	@ 0x64
 8005822:	fb02 f303 	mul.w	r3, r2, r3
 8005826:	1acb      	subs	r3, r1, r3
 8005828:	00db      	lsls	r3, r3, #3
 800582a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800582e:	4b36      	ldr	r3, [pc, #216]	@ (8005908 <UART_SetConfig+0x2d4>)
 8005830:	fba3 2302 	umull	r2, r3, r3, r2
 8005834:	095b      	lsrs	r3, r3, #5
 8005836:	005b      	lsls	r3, r3, #1
 8005838:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800583c:	441c      	add	r4, r3
 800583e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005842:	2200      	movs	r2, #0
 8005844:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005848:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800584c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005850:	4642      	mov	r2, r8
 8005852:	464b      	mov	r3, r9
 8005854:	1891      	adds	r1, r2, r2
 8005856:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005858:	415b      	adcs	r3, r3
 800585a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800585c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005860:	4641      	mov	r1, r8
 8005862:	1851      	adds	r1, r2, r1
 8005864:	6339      	str	r1, [r7, #48]	@ 0x30
 8005866:	4649      	mov	r1, r9
 8005868:	414b      	adcs	r3, r1
 800586a:	637b      	str	r3, [r7, #52]	@ 0x34
 800586c:	f04f 0200 	mov.w	r2, #0
 8005870:	f04f 0300 	mov.w	r3, #0
 8005874:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005878:	4659      	mov	r1, fp
 800587a:	00cb      	lsls	r3, r1, #3
 800587c:	4651      	mov	r1, sl
 800587e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005882:	4651      	mov	r1, sl
 8005884:	00ca      	lsls	r2, r1, #3
 8005886:	4610      	mov	r0, r2
 8005888:	4619      	mov	r1, r3
 800588a:	4603      	mov	r3, r0
 800588c:	4642      	mov	r2, r8
 800588e:	189b      	adds	r3, r3, r2
 8005890:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005894:	464b      	mov	r3, r9
 8005896:	460a      	mov	r2, r1
 8005898:	eb42 0303 	adc.w	r3, r2, r3
 800589c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80058a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80058ac:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80058b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80058b4:	460b      	mov	r3, r1
 80058b6:	18db      	adds	r3, r3, r3
 80058b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80058ba:	4613      	mov	r3, r2
 80058bc:	eb42 0303 	adc.w	r3, r2, r3
 80058c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80058c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80058c6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80058ca:	f7fa fc7d 	bl	80001c8 <__aeabi_uldivmod>
 80058ce:	4602      	mov	r2, r0
 80058d0:	460b      	mov	r3, r1
 80058d2:	4b0d      	ldr	r3, [pc, #52]	@ (8005908 <UART_SetConfig+0x2d4>)
 80058d4:	fba3 1302 	umull	r1, r3, r3, r2
 80058d8:	095b      	lsrs	r3, r3, #5
 80058da:	2164      	movs	r1, #100	@ 0x64
 80058dc:	fb01 f303 	mul.w	r3, r1, r3
 80058e0:	1ad3      	subs	r3, r2, r3
 80058e2:	00db      	lsls	r3, r3, #3
 80058e4:	3332      	adds	r3, #50	@ 0x32
 80058e6:	4a08      	ldr	r2, [pc, #32]	@ (8005908 <UART_SetConfig+0x2d4>)
 80058e8:	fba2 2303 	umull	r2, r3, r2, r3
 80058ec:	095b      	lsrs	r3, r3, #5
 80058ee:	f003 0207 	and.w	r2, r3, #7
 80058f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4422      	add	r2, r4
 80058fa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80058fc:	e106      	b.n	8005b0c <UART_SetConfig+0x4d8>
 80058fe:	bf00      	nop
 8005900:	40011000 	.word	0x40011000
 8005904:	40011400 	.word	0x40011400
 8005908:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800590c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005910:	2200      	movs	r2, #0
 8005912:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005916:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800591a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800591e:	4642      	mov	r2, r8
 8005920:	464b      	mov	r3, r9
 8005922:	1891      	adds	r1, r2, r2
 8005924:	6239      	str	r1, [r7, #32]
 8005926:	415b      	adcs	r3, r3
 8005928:	627b      	str	r3, [r7, #36]	@ 0x24
 800592a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800592e:	4641      	mov	r1, r8
 8005930:	1854      	adds	r4, r2, r1
 8005932:	4649      	mov	r1, r9
 8005934:	eb43 0501 	adc.w	r5, r3, r1
 8005938:	f04f 0200 	mov.w	r2, #0
 800593c:	f04f 0300 	mov.w	r3, #0
 8005940:	00eb      	lsls	r3, r5, #3
 8005942:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005946:	00e2      	lsls	r2, r4, #3
 8005948:	4614      	mov	r4, r2
 800594a:	461d      	mov	r5, r3
 800594c:	4643      	mov	r3, r8
 800594e:	18e3      	adds	r3, r4, r3
 8005950:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005954:	464b      	mov	r3, r9
 8005956:	eb45 0303 	adc.w	r3, r5, r3
 800595a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800595e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	2200      	movs	r2, #0
 8005966:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800596a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800596e:	f04f 0200 	mov.w	r2, #0
 8005972:	f04f 0300 	mov.w	r3, #0
 8005976:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800597a:	4629      	mov	r1, r5
 800597c:	008b      	lsls	r3, r1, #2
 800597e:	4621      	mov	r1, r4
 8005980:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005984:	4621      	mov	r1, r4
 8005986:	008a      	lsls	r2, r1, #2
 8005988:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800598c:	f7fa fc1c 	bl	80001c8 <__aeabi_uldivmod>
 8005990:	4602      	mov	r2, r0
 8005992:	460b      	mov	r3, r1
 8005994:	4b60      	ldr	r3, [pc, #384]	@ (8005b18 <UART_SetConfig+0x4e4>)
 8005996:	fba3 2302 	umull	r2, r3, r3, r2
 800599a:	095b      	lsrs	r3, r3, #5
 800599c:	011c      	lsls	r4, r3, #4
 800599e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059a2:	2200      	movs	r2, #0
 80059a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80059a8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80059ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80059b0:	4642      	mov	r2, r8
 80059b2:	464b      	mov	r3, r9
 80059b4:	1891      	adds	r1, r2, r2
 80059b6:	61b9      	str	r1, [r7, #24]
 80059b8:	415b      	adcs	r3, r3
 80059ba:	61fb      	str	r3, [r7, #28]
 80059bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80059c0:	4641      	mov	r1, r8
 80059c2:	1851      	adds	r1, r2, r1
 80059c4:	6139      	str	r1, [r7, #16]
 80059c6:	4649      	mov	r1, r9
 80059c8:	414b      	adcs	r3, r1
 80059ca:	617b      	str	r3, [r7, #20]
 80059cc:	f04f 0200 	mov.w	r2, #0
 80059d0:	f04f 0300 	mov.w	r3, #0
 80059d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80059d8:	4659      	mov	r1, fp
 80059da:	00cb      	lsls	r3, r1, #3
 80059dc:	4651      	mov	r1, sl
 80059de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059e2:	4651      	mov	r1, sl
 80059e4:	00ca      	lsls	r2, r1, #3
 80059e6:	4610      	mov	r0, r2
 80059e8:	4619      	mov	r1, r3
 80059ea:	4603      	mov	r3, r0
 80059ec:	4642      	mov	r2, r8
 80059ee:	189b      	adds	r3, r3, r2
 80059f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80059f4:	464b      	mov	r3, r9
 80059f6:	460a      	mov	r2, r1
 80059f8:	eb42 0303 	adc.w	r3, r2, r3
 80059fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	2200      	movs	r2, #0
 8005a08:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005a0a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005a0c:	f04f 0200 	mov.w	r2, #0
 8005a10:	f04f 0300 	mov.w	r3, #0
 8005a14:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005a18:	4649      	mov	r1, r9
 8005a1a:	008b      	lsls	r3, r1, #2
 8005a1c:	4641      	mov	r1, r8
 8005a1e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a22:	4641      	mov	r1, r8
 8005a24:	008a      	lsls	r2, r1, #2
 8005a26:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005a2a:	f7fa fbcd 	bl	80001c8 <__aeabi_uldivmod>
 8005a2e:	4602      	mov	r2, r0
 8005a30:	460b      	mov	r3, r1
 8005a32:	4611      	mov	r1, r2
 8005a34:	4b38      	ldr	r3, [pc, #224]	@ (8005b18 <UART_SetConfig+0x4e4>)
 8005a36:	fba3 2301 	umull	r2, r3, r3, r1
 8005a3a:	095b      	lsrs	r3, r3, #5
 8005a3c:	2264      	movs	r2, #100	@ 0x64
 8005a3e:	fb02 f303 	mul.w	r3, r2, r3
 8005a42:	1acb      	subs	r3, r1, r3
 8005a44:	011b      	lsls	r3, r3, #4
 8005a46:	3332      	adds	r3, #50	@ 0x32
 8005a48:	4a33      	ldr	r2, [pc, #204]	@ (8005b18 <UART_SetConfig+0x4e4>)
 8005a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a4e:	095b      	lsrs	r3, r3, #5
 8005a50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005a54:	441c      	add	r4, r3
 8005a56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	673b      	str	r3, [r7, #112]	@ 0x70
 8005a5e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005a60:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005a64:	4642      	mov	r2, r8
 8005a66:	464b      	mov	r3, r9
 8005a68:	1891      	adds	r1, r2, r2
 8005a6a:	60b9      	str	r1, [r7, #8]
 8005a6c:	415b      	adcs	r3, r3
 8005a6e:	60fb      	str	r3, [r7, #12]
 8005a70:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a74:	4641      	mov	r1, r8
 8005a76:	1851      	adds	r1, r2, r1
 8005a78:	6039      	str	r1, [r7, #0]
 8005a7a:	4649      	mov	r1, r9
 8005a7c:	414b      	adcs	r3, r1
 8005a7e:	607b      	str	r3, [r7, #4]
 8005a80:	f04f 0200 	mov.w	r2, #0
 8005a84:	f04f 0300 	mov.w	r3, #0
 8005a88:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005a8c:	4659      	mov	r1, fp
 8005a8e:	00cb      	lsls	r3, r1, #3
 8005a90:	4651      	mov	r1, sl
 8005a92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a96:	4651      	mov	r1, sl
 8005a98:	00ca      	lsls	r2, r1, #3
 8005a9a:	4610      	mov	r0, r2
 8005a9c:	4619      	mov	r1, r3
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	4642      	mov	r2, r8
 8005aa2:	189b      	adds	r3, r3, r2
 8005aa4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005aa6:	464b      	mov	r3, r9
 8005aa8:	460a      	mov	r2, r1
 8005aaa:	eb42 0303 	adc.w	r3, r2, r3
 8005aae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	663b      	str	r3, [r7, #96]	@ 0x60
 8005aba:	667a      	str	r2, [r7, #100]	@ 0x64
 8005abc:	f04f 0200 	mov.w	r2, #0
 8005ac0:	f04f 0300 	mov.w	r3, #0
 8005ac4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005ac8:	4649      	mov	r1, r9
 8005aca:	008b      	lsls	r3, r1, #2
 8005acc:	4641      	mov	r1, r8
 8005ace:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ad2:	4641      	mov	r1, r8
 8005ad4:	008a      	lsls	r2, r1, #2
 8005ad6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005ada:	f7fa fb75 	bl	80001c8 <__aeabi_uldivmod>
 8005ade:	4602      	mov	r2, r0
 8005ae0:	460b      	mov	r3, r1
 8005ae2:	4b0d      	ldr	r3, [pc, #52]	@ (8005b18 <UART_SetConfig+0x4e4>)
 8005ae4:	fba3 1302 	umull	r1, r3, r3, r2
 8005ae8:	095b      	lsrs	r3, r3, #5
 8005aea:	2164      	movs	r1, #100	@ 0x64
 8005aec:	fb01 f303 	mul.w	r3, r1, r3
 8005af0:	1ad3      	subs	r3, r2, r3
 8005af2:	011b      	lsls	r3, r3, #4
 8005af4:	3332      	adds	r3, #50	@ 0x32
 8005af6:	4a08      	ldr	r2, [pc, #32]	@ (8005b18 <UART_SetConfig+0x4e4>)
 8005af8:	fba2 2303 	umull	r2, r3, r2, r3
 8005afc:	095b      	lsrs	r3, r3, #5
 8005afe:	f003 020f 	and.w	r2, r3, #15
 8005b02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4422      	add	r2, r4
 8005b0a:	609a      	str	r2, [r3, #8]
}
 8005b0c:	bf00      	nop
 8005b0e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005b12:	46bd      	mov	sp, r7
 8005b14:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b18:	51eb851f 	.word	0x51eb851f

08005b1c <memset>:
 8005b1c:	4402      	add	r2, r0
 8005b1e:	4603      	mov	r3, r0
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d100      	bne.n	8005b26 <memset+0xa>
 8005b24:	4770      	bx	lr
 8005b26:	f803 1b01 	strb.w	r1, [r3], #1
 8005b2a:	e7f9      	b.n	8005b20 <memset+0x4>

08005b2c <__libc_init_array>:
 8005b2c:	b570      	push	{r4, r5, r6, lr}
 8005b2e:	4d0d      	ldr	r5, [pc, #52]	@ (8005b64 <__libc_init_array+0x38>)
 8005b30:	4c0d      	ldr	r4, [pc, #52]	@ (8005b68 <__libc_init_array+0x3c>)
 8005b32:	1b64      	subs	r4, r4, r5
 8005b34:	10a4      	asrs	r4, r4, #2
 8005b36:	2600      	movs	r6, #0
 8005b38:	42a6      	cmp	r6, r4
 8005b3a:	d109      	bne.n	8005b50 <__libc_init_array+0x24>
 8005b3c:	4d0b      	ldr	r5, [pc, #44]	@ (8005b6c <__libc_init_array+0x40>)
 8005b3e:	4c0c      	ldr	r4, [pc, #48]	@ (8005b70 <__libc_init_array+0x44>)
 8005b40:	f000 f818 	bl	8005b74 <_init>
 8005b44:	1b64      	subs	r4, r4, r5
 8005b46:	10a4      	asrs	r4, r4, #2
 8005b48:	2600      	movs	r6, #0
 8005b4a:	42a6      	cmp	r6, r4
 8005b4c:	d105      	bne.n	8005b5a <__libc_init_array+0x2e>
 8005b4e:	bd70      	pop	{r4, r5, r6, pc}
 8005b50:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b54:	4798      	blx	r3
 8005b56:	3601      	adds	r6, #1
 8005b58:	e7ee      	b.n	8005b38 <__libc_init_array+0xc>
 8005b5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b5e:	4798      	blx	r3
 8005b60:	3601      	adds	r6, #1
 8005b62:	e7f2      	b.n	8005b4a <__libc_init_array+0x1e>
 8005b64:	08005bac 	.word	0x08005bac
 8005b68:	08005bac 	.word	0x08005bac
 8005b6c:	08005bac 	.word	0x08005bac
 8005b70:	08005bb0 	.word	0x08005bb0

08005b74 <_init>:
 8005b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b76:	bf00      	nop
 8005b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b7a:	bc08      	pop	{r3}
 8005b7c:	469e      	mov	lr, r3
 8005b7e:	4770      	bx	lr

08005b80 <_fini>:
 8005b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b82:	bf00      	nop
 8005b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b86:	bc08      	pop	{r3}
 8005b88:	469e      	mov	lr, r3
 8005b8a:	4770      	bx	lr
