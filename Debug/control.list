
control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae10  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000285c  0800af98  0800af98  0000bf98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d7f4  0800d7f4  0000f278  2**0
                  CONTENTS
  4 .ARM          00000008  0800d7f4  0800d7f4  0000e7f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d7fc  0800d7fc  0000f278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800d7fc  0800d7fc  0000e7fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d804  0800d804  0000e804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000278  20000000  0800d808  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f278  2**0
                  CONTENTS
 10 .bss          00002d04  20000278  20000278  0000f278  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002f7c  20002f7c  0000f278  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f278  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002b943  00000000  00000000  0000f2a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005954  00000000  00000000  0003abeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001750  00000000  00000000  00040540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000121f  00000000  00000000  00041c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002aaf2  00000000  00000000  00042eaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000268d9  00000000  00000000  0006d9a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e3abd  00000000  00000000  0009427a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000b1  00000000  00000000  00177d37  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006328  00000000  00000000  00177de8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000052  00000000  00000000  0017e110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    00000430  00000000  00000000  0017e162  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 00000010  00000000  00000000  0017e592  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000278 	.word	0x20000278
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800af80 	.word	0x0800af80

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000027c 	.word	0x2000027c
 80001c4:	0800af80 	.word	0x0800af80

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2f>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000acc:	bf24      	itt	cs
 8000ace:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ad6:	d90d      	bls.n	8000af4 <__aeabi_d2f+0x30>
 8000ad8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ae8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aec:	bf08      	it	eq
 8000aee:	f020 0001 	biceq.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000af8:	d121      	bne.n	8000b3e <__aeabi_d2f+0x7a>
 8000afa:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000afe:	bfbc      	itt	lt
 8000b00:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	4770      	bxlt	lr
 8000b06:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0e:	f1c2 0218 	rsb	r2, r2, #24
 8000b12:	f1c2 0c20 	rsb	ip, r2, #32
 8000b16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1e:	bf18      	it	ne
 8000b20:	f040 0001 	orrne.w	r0, r0, #1
 8000b24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b30:	ea40 000c 	orr.w	r0, r0, ip
 8000b34:	fa23 f302 	lsr.w	r3, r3, r2
 8000b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b3c:	e7cc      	b.n	8000ad8 <__aeabi_d2f+0x14>
 8000b3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b42:	d107      	bne.n	8000b54 <__aeabi_d2f+0x90>
 8000b44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b48:	bf1e      	ittt	ne
 8000b4a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b4e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b52:	4770      	bxne	lr
 8000b54:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b58:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b5c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <__aeabi_uldivmod>:
 8000b64:	b953      	cbnz	r3, 8000b7c <__aeabi_uldivmod+0x18>
 8000b66:	b94a      	cbnz	r2, 8000b7c <__aeabi_uldivmod+0x18>
 8000b68:	2900      	cmp	r1, #0
 8000b6a:	bf08      	it	eq
 8000b6c:	2800      	cmpeq	r0, #0
 8000b6e:	bf1c      	itt	ne
 8000b70:	f04f 31ff 	movne.w	r1, #4294967295
 8000b74:	f04f 30ff 	movne.w	r0, #4294967295
 8000b78:	f000 b96a 	b.w	8000e50 <__aeabi_idiv0>
 8000b7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b84:	f000 f806 	bl	8000b94 <__udivmoddi4>
 8000b88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b90:	b004      	add	sp, #16
 8000b92:	4770      	bx	lr

08000b94 <__udivmoddi4>:
 8000b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b98:	9d08      	ldr	r5, [sp, #32]
 8000b9a:	460c      	mov	r4, r1
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d14e      	bne.n	8000c3e <__udivmoddi4+0xaa>
 8000ba0:	4694      	mov	ip, r2
 8000ba2:	458c      	cmp	ip, r1
 8000ba4:	4686      	mov	lr, r0
 8000ba6:	fab2 f282 	clz	r2, r2
 8000baa:	d962      	bls.n	8000c72 <__udivmoddi4+0xde>
 8000bac:	b14a      	cbz	r2, 8000bc2 <__udivmoddi4+0x2e>
 8000bae:	f1c2 0320 	rsb	r3, r2, #32
 8000bb2:	4091      	lsls	r1, r2
 8000bb4:	fa20 f303 	lsr.w	r3, r0, r3
 8000bb8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bbc:	4319      	orrs	r1, r3
 8000bbe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bc6:	fa1f f68c 	uxth.w	r6, ip
 8000bca:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bd2:	fb07 1114 	mls	r1, r7, r4, r1
 8000bd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bda:	fb04 f106 	mul.w	r1, r4, r6
 8000bde:	4299      	cmp	r1, r3
 8000be0:	d90a      	bls.n	8000bf8 <__udivmoddi4+0x64>
 8000be2:	eb1c 0303 	adds.w	r3, ip, r3
 8000be6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000bea:	f080 8112 	bcs.w	8000e12 <__udivmoddi4+0x27e>
 8000bee:	4299      	cmp	r1, r3
 8000bf0:	f240 810f 	bls.w	8000e12 <__udivmoddi4+0x27e>
 8000bf4:	3c02      	subs	r4, #2
 8000bf6:	4463      	add	r3, ip
 8000bf8:	1a59      	subs	r1, r3, r1
 8000bfa:	fa1f f38e 	uxth.w	r3, lr
 8000bfe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c02:	fb07 1110 	mls	r1, r7, r0, r1
 8000c06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c0a:	fb00 f606 	mul.w	r6, r0, r6
 8000c0e:	429e      	cmp	r6, r3
 8000c10:	d90a      	bls.n	8000c28 <__udivmoddi4+0x94>
 8000c12:	eb1c 0303 	adds.w	r3, ip, r3
 8000c16:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c1a:	f080 80fc 	bcs.w	8000e16 <__udivmoddi4+0x282>
 8000c1e:	429e      	cmp	r6, r3
 8000c20:	f240 80f9 	bls.w	8000e16 <__udivmoddi4+0x282>
 8000c24:	4463      	add	r3, ip
 8000c26:	3802      	subs	r0, #2
 8000c28:	1b9b      	subs	r3, r3, r6
 8000c2a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c2e:	2100      	movs	r1, #0
 8000c30:	b11d      	cbz	r5, 8000c3a <__udivmoddi4+0xa6>
 8000c32:	40d3      	lsrs	r3, r2
 8000c34:	2200      	movs	r2, #0
 8000c36:	e9c5 3200 	strd	r3, r2, [r5]
 8000c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3e:	428b      	cmp	r3, r1
 8000c40:	d905      	bls.n	8000c4e <__udivmoddi4+0xba>
 8000c42:	b10d      	cbz	r5, 8000c48 <__udivmoddi4+0xb4>
 8000c44:	e9c5 0100 	strd	r0, r1, [r5]
 8000c48:	2100      	movs	r1, #0
 8000c4a:	4608      	mov	r0, r1
 8000c4c:	e7f5      	b.n	8000c3a <__udivmoddi4+0xa6>
 8000c4e:	fab3 f183 	clz	r1, r3
 8000c52:	2900      	cmp	r1, #0
 8000c54:	d146      	bne.n	8000ce4 <__udivmoddi4+0x150>
 8000c56:	42a3      	cmp	r3, r4
 8000c58:	d302      	bcc.n	8000c60 <__udivmoddi4+0xcc>
 8000c5a:	4290      	cmp	r0, r2
 8000c5c:	f0c0 80f0 	bcc.w	8000e40 <__udivmoddi4+0x2ac>
 8000c60:	1a86      	subs	r6, r0, r2
 8000c62:	eb64 0303 	sbc.w	r3, r4, r3
 8000c66:	2001      	movs	r0, #1
 8000c68:	2d00      	cmp	r5, #0
 8000c6a:	d0e6      	beq.n	8000c3a <__udivmoddi4+0xa6>
 8000c6c:	e9c5 6300 	strd	r6, r3, [r5]
 8000c70:	e7e3      	b.n	8000c3a <__udivmoddi4+0xa6>
 8000c72:	2a00      	cmp	r2, #0
 8000c74:	f040 8090 	bne.w	8000d98 <__udivmoddi4+0x204>
 8000c78:	eba1 040c 	sub.w	r4, r1, ip
 8000c7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c80:	fa1f f78c 	uxth.w	r7, ip
 8000c84:	2101      	movs	r1, #1
 8000c86:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c8a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c8e:	fb08 4416 	mls	r4, r8, r6, r4
 8000c92:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c96:	fb07 f006 	mul.w	r0, r7, r6
 8000c9a:	4298      	cmp	r0, r3
 8000c9c:	d908      	bls.n	8000cb0 <__udivmoddi4+0x11c>
 8000c9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000ca2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000ca6:	d202      	bcs.n	8000cae <__udivmoddi4+0x11a>
 8000ca8:	4298      	cmp	r0, r3
 8000caa:	f200 80cd 	bhi.w	8000e48 <__udivmoddi4+0x2b4>
 8000cae:	4626      	mov	r6, r4
 8000cb0:	1a1c      	subs	r4, r3, r0
 8000cb2:	fa1f f38e 	uxth.w	r3, lr
 8000cb6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cba:	fb08 4410 	mls	r4, r8, r0, r4
 8000cbe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cc2:	fb00 f707 	mul.w	r7, r0, r7
 8000cc6:	429f      	cmp	r7, r3
 8000cc8:	d908      	bls.n	8000cdc <__udivmoddi4+0x148>
 8000cca:	eb1c 0303 	adds.w	r3, ip, r3
 8000cce:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cd2:	d202      	bcs.n	8000cda <__udivmoddi4+0x146>
 8000cd4:	429f      	cmp	r7, r3
 8000cd6:	f200 80b0 	bhi.w	8000e3a <__udivmoddi4+0x2a6>
 8000cda:	4620      	mov	r0, r4
 8000cdc:	1bdb      	subs	r3, r3, r7
 8000cde:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ce2:	e7a5      	b.n	8000c30 <__udivmoddi4+0x9c>
 8000ce4:	f1c1 0620 	rsb	r6, r1, #32
 8000ce8:	408b      	lsls	r3, r1
 8000cea:	fa22 f706 	lsr.w	r7, r2, r6
 8000cee:	431f      	orrs	r7, r3
 8000cf0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000cf4:	fa04 f301 	lsl.w	r3, r4, r1
 8000cf8:	ea43 030c 	orr.w	r3, r3, ip
 8000cfc:	40f4      	lsrs	r4, r6
 8000cfe:	fa00 f801 	lsl.w	r8, r0, r1
 8000d02:	0c38      	lsrs	r0, r7, #16
 8000d04:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d08:	fbb4 fef0 	udiv	lr, r4, r0
 8000d0c:	fa1f fc87 	uxth.w	ip, r7
 8000d10:	fb00 441e 	mls	r4, r0, lr, r4
 8000d14:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d18:	fb0e f90c 	mul.w	r9, lr, ip
 8000d1c:	45a1      	cmp	r9, r4
 8000d1e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d22:	d90a      	bls.n	8000d3a <__udivmoddi4+0x1a6>
 8000d24:	193c      	adds	r4, r7, r4
 8000d26:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d2a:	f080 8084 	bcs.w	8000e36 <__udivmoddi4+0x2a2>
 8000d2e:	45a1      	cmp	r9, r4
 8000d30:	f240 8081 	bls.w	8000e36 <__udivmoddi4+0x2a2>
 8000d34:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d38:	443c      	add	r4, r7
 8000d3a:	eba4 0409 	sub.w	r4, r4, r9
 8000d3e:	fa1f f983 	uxth.w	r9, r3
 8000d42:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d46:	fb00 4413 	mls	r4, r0, r3, r4
 8000d4a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d4e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d52:	45a4      	cmp	ip, r4
 8000d54:	d907      	bls.n	8000d66 <__udivmoddi4+0x1d2>
 8000d56:	193c      	adds	r4, r7, r4
 8000d58:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d5c:	d267      	bcs.n	8000e2e <__udivmoddi4+0x29a>
 8000d5e:	45a4      	cmp	ip, r4
 8000d60:	d965      	bls.n	8000e2e <__udivmoddi4+0x29a>
 8000d62:	3b02      	subs	r3, #2
 8000d64:	443c      	add	r4, r7
 8000d66:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d6a:	fba0 9302 	umull	r9, r3, r0, r2
 8000d6e:	eba4 040c 	sub.w	r4, r4, ip
 8000d72:	429c      	cmp	r4, r3
 8000d74:	46ce      	mov	lr, r9
 8000d76:	469c      	mov	ip, r3
 8000d78:	d351      	bcc.n	8000e1e <__udivmoddi4+0x28a>
 8000d7a:	d04e      	beq.n	8000e1a <__udivmoddi4+0x286>
 8000d7c:	b155      	cbz	r5, 8000d94 <__udivmoddi4+0x200>
 8000d7e:	ebb8 030e 	subs.w	r3, r8, lr
 8000d82:	eb64 040c 	sbc.w	r4, r4, ip
 8000d86:	fa04 f606 	lsl.w	r6, r4, r6
 8000d8a:	40cb      	lsrs	r3, r1
 8000d8c:	431e      	orrs	r6, r3
 8000d8e:	40cc      	lsrs	r4, r1
 8000d90:	e9c5 6400 	strd	r6, r4, [r5]
 8000d94:	2100      	movs	r1, #0
 8000d96:	e750      	b.n	8000c3a <__udivmoddi4+0xa6>
 8000d98:	f1c2 0320 	rsb	r3, r2, #32
 8000d9c:	fa20 f103 	lsr.w	r1, r0, r3
 8000da0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000da4:	fa24 f303 	lsr.w	r3, r4, r3
 8000da8:	4094      	lsls	r4, r2
 8000daa:	430c      	orrs	r4, r1
 8000dac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000db4:	fa1f f78c 	uxth.w	r7, ip
 8000db8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dbc:	fb08 3110 	mls	r1, r8, r0, r3
 8000dc0:	0c23      	lsrs	r3, r4, #16
 8000dc2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc6:	fb00 f107 	mul.w	r1, r0, r7
 8000dca:	4299      	cmp	r1, r3
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0x24c>
 8000dce:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000dd6:	d22c      	bcs.n	8000e32 <__udivmoddi4+0x29e>
 8000dd8:	4299      	cmp	r1, r3
 8000dda:	d92a      	bls.n	8000e32 <__udivmoddi4+0x29e>
 8000ddc:	3802      	subs	r0, #2
 8000dde:	4463      	add	r3, ip
 8000de0:	1a5b      	subs	r3, r3, r1
 8000de2:	b2a4      	uxth	r4, r4
 8000de4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000de8:	fb08 3311 	mls	r3, r8, r1, r3
 8000dec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000df0:	fb01 f307 	mul.w	r3, r1, r7
 8000df4:	42a3      	cmp	r3, r4
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x276>
 8000df8:	eb1c 0404 	adds.w	r4, ip, r4
 8000dfc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e00:	d213      	bcs.n	8000e2a <__udivmoddi4+0x296>
 8000e02:	42a3      	cmp	r3, r4
 8000e04:	d911      	bls.n	8000e2a <__udivmoddi4+0x296>
 8000e06:	3902      	subs	r1, #2
 8000e08:	4464      	add	r4, ip
 8000e0a:	1ae4      	subs	r4, r4, r3
 8000e0c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e10:	e739      	b.n	8000c86 <__udivmoddi4+0xf2>
 8000e12:	4604      	mov	r4, r0
 8000e14:	e6f0      	b.n	8000bf8 <__udivmoddi4+0x64>
 8000e16:	4608      	mov	r0, r1
 8000e18:	e706      	b.n	8000c28 <__udivmoddi4+0x94>
 8000e1a:	45c8      	cmp	r8, r9
 8000e1c:	d2ae      	bcs.n	8000d7c <__udivmoddi4+0x1e8>
 8000e1e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e22:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e26:	3801      	subs	r0, #1
 8000e28:	e7a8      	b.n	8000d7c <__udivmoddi4+0x1e8>
 8000e2a:	4631      	mov	r1, r6
 8000e2c:	e7ed      	b.n	8000e0a <__udivmoddi4+0x276>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	e799      	b.n	8000d66 <__udivmoddi4+0x1d2>
 8000e32:	4630      	mov	r0, r6
 8000e34:	e7d4      	b.n	8000de0 <__udivmoddi4+0x24c>
 8000e36:	46d6      	mov	lr, sl
 8000e38:	e77f      	b.n	8000d3a <__udivmoddi4+0x1a6>
 8000e3a:	4463      	add	r3, ip
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	e74d      	b.n	8000cdc <__udivmoddi4+0x148>
 8000e40:	4606      	mov	r6, r0
 8000e42:	4623      	mov	r3, r4
 8000e44:	4608      	mov	r0, r1
 8000e46:	e70f      	b.n	8000c68 <__udivmoddi4+0xd4>
 8000e48:	3e02      	subs	r6, #2
 8000e4a:	4463      	add	r3, ip
 8000e4c:	e730      	b.n	8000cb0 <__udivmoddi4+0x11c>
 8000e4e:	bf00      	nop

08000e50 <__aeabi_idiv0>:
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop

08000e54 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc3;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e5a:	463b      	mov	r3, r7
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	609a      	str	r2, [r3, #8]
 8000e64:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e66:	4b21      	ldr	r3, [pc, #132]	@ (8000eec <MX_ADC1_Init+0x98>)
 8000e68:	4a21      	ldr	r2, [pc, #132]	@ (8000ef0 <MX_ADC1_Init+0x9c>)
 8000e6a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e6c:	4b1f      	ldr	r3, [pc, #124]	@ (8000eec <MX_ADC1_Init+0x98>)
 8000e6e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000e72:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e74:	4b1d      	ldr	r3, [pc, #116]	@ (8000eec <MX_ADC1_Init+0x98>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000e7a:	4b1c      	ldr	r3, [pc, #112]	@ (8000eec <MX_ADC1_Init+0x98>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e80:	4b1a      	ldr	r3, [pc, #104]	@ (8000eec <MX_ADC1_Init+0x98>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e86:	4b19      	ldr	r3, [pc, #100]	@ (8000eec <MX_ADC1_Init+0x98>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e8e:	4b17      	ldr	r3, [pc, #92]	@ (8000eec <MX_ADC1_Init+0x98>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e94:	4b15      	ldr	r3, [pc, #84]	@ (8000eec <MX_ADC1_Init+0x98>)
 8000e96:	4a17      	ldr	r2, [pc, #92]	@ (8000ef4 <MX_ADC1_Init+0xa0>)
 8000e98:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e9a:	4b14      	ldr	r3, [pc, #80]	@ (8000eec <MX_ADC1_Init+0x98>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000ea0:	4b12      	ldr	r3, [pc, #72]	@ (8000eec <MX_ADC1_Init+0x98>)
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ea6:	4b11      	ldr	r3, [pc, #68]	@ (8000eec <MX_ADC1_Init+0x98>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000eae:	4b0f      	ldr	r3, [pc, #60]	@ (8000eec <MX_ADC1_Init+0x98>)
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000eb4:	480d      	ldr	r0, [pc, #52]	@ (8000eec <MX_ADC1_Init+0x98>)
 8000eb6:	f001 fe93 	bl	8002be0 <HAL_ADC_Init>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000ec0:	f000 fd28 	bl	8001914 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000ec4:	2306      	movs	r3, #6
 8000ec6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ed0:	463b      	mov	r3, r7
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4805      	ldr	r0, [pc, #20]	@ (8000eec <MX_ADC1_Init+0x98>)
 8000ed6:	f002 f989 	bl	80031ec <HAL_ADC_ConfigChannel>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000ee0:	f000 fd18 	bl	8001914 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ee4:	bf00      	nop
 8000ee6:	3710      	adds	r7, #16
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	20000294 	.word	0x20000294
 8000ef0:	40012000 	.word	0x40012000
 8000ef4:	0f000001 	.word	0x0f000001

08000ef8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000efe:	463b      	mov	r3, r7
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	609a      	str	r2, [r3, #8]
 8000f08:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000f0a:	4b21      	ldr	r3, [pc, #132]	@ (8000f90 <MX_ADC2_Init+0x98>)
 8000f0c:	4a21      	ldr	r2, [pc, #132]	@ (8000f94 <MX_ADC2_Init+0x9c>)
 8000f0e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f10:	4b1f      	ldr	r3, [pc, #124]	@ (8000f90 <MX_ADC2_Init+0x98>)
 8000f12:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000f16:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000f18:	4b1d      	ldr	r3, [pc, #116]	@ (8000f90 <MX_ADC2_Init+0x98>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000f1e:	4b1c      	ldr	r3, [pc, #112]	@ (8000f90 <MX_ADC2_Init+0x98>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000f24:	4b1a      	ldr	r3, [pc, #104]	@ (8000f90 <MX_ADC2_Init+0x98>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000f2a:	4b19      	ldr	r3, [pc, #100]	@ (8000f90 <MX_ADC2_Init+0x98>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f32:	4b17      	ldr	r3, [pc, #92]	@ (8000f90 <MX_ADC2_Init+0x98>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f38:	4b15      	ldr	r3, [pc, #84]	@ (8000f90 <MX_ADC2_Init+0x98>)
 8000f3a:	4a17      	ldr	r2, [pc, #92]	@ (8000f98 <MX_ADC2_Init+0xa0>)
 8000f3c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f3e:	4b14      	ldr	r3, [pc, #80]	@ (8000f90 <MX_ADC2_Init+0x98>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000f44:	4b12      	ldr	r3, [pc, #72]	@ (8000f90 <MX_ADC2_Init+0x98>)
 8000f46:	2201      	movs	r2, #1
 8000f48:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000f4a:	4b11      	ldr	r3, [pc, #68]	@ (8000f90 <MX_ADC2_Init+0x98>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f52:	4b0f      	ldr	r3, [pc, #60]	@ (8000f90 <MX_ADC2_Init+0x98>)
 8000f54:	2201      	movs	r2, #1
 8000f56:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000f58:	480d      	ldr	r0, [pc, #52]	@ (8000f90 <MX_ADC2_Init+0x98>)
 8000f5a:	f001 fe41 	bl	8002be0 <HAL_ADC_Init>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8000f64:	f000 fcd6 	bl	8001914 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000f70:	2307      	movs	r3, #7
 8000f72:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000f74:	463b      	mov	r3, r7
 8000f76:	4619      	mov	r1, r3
 8000f78:	4805      	ldr	r0, [pc, #20]	@ (8000f90 <MX_ADC2_Init+0x98>)
 8000f7a:	f002 f937 	bl	80031ec <HAL_ADC_ConfigChannel>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8000f84:	f000 fcc6 	bl	8001914 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000f88:	bf00      	nop
 8000f8a:	3710      	adds	r7, #16
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	200002dc 	.word	0x200002dc
 8000f94:	40012100 	.word	0x40012100
 8000f98:	0f000001 	.word	0x0f000001

08000f9c <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fa2:	463b      	mov	r3, r7
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000fae:	4b22      	ldr	r3, [pc, #136]	@ (8001038 <MX_ADC3_Init+0x9c>)
 8000fb0:	4a22      	ldr	r2, [pc, #136]	@ (800103c <MX_ADC3_Init+0xa0>)
 8000fb2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000fb4:	4b20      	ldr	r3, [pc, #128]	@ (8001038 <MX_ADC3_Init+0x9c>)
 8000fb6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000fba:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000fbc:	4b1e      	ldr	r3, [pc, #120]	@ (8001038 <MX_ADC3_Init+0x9c>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8000fc2:	4b1d      	ldr	r3, [pc, #116]	@ (8001038 <MX_ADC3_Init+0x9c>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000fc8:	4b1b      	ldr	r3, [pc, #108]	@ (8001038 <MX_ADC3_Init+0x9c>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000fce:	4b1a      	ldr	r3, [pc, #104]	@ (8001038 <MX_ADC3_Init+0x9c>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000fd6:	4b18      	ldr	r3, [pc, #96]	@ (8001038 <MX_ADC3_Init+0x9c>)
 8000fd8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000fdc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T4_CC4;
 8000fde:	4b16      	ldr	r3, [pc, #88]	@ (8001038 <MX_ADC3_Init+0x9c>)
 8000fe0:	f04f 6210 	mov.w	r2, #150994944	@ 0x9000000
 8000fe4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fe6:	4b14      	ldr	r3, [pc, #80]	@ (8001038 <MX_ADC3_Init+0x9c>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000fec:	4b12      	ldr	r3, [pc, #72]	@ (8001038 <MX_ADC3_Init+0x9c>)
 8000fee:	2201      	movs	r2, #1
 8000ff0:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000ff2:	4b11      	ldr	r3, [pc, #68]	@ (8001038 <MX_ADC3_Init+0x9c>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ffa:	4b0f      	ldr	r3, [pc, #60]	@ (8001038 <MX_ADC3_Init+0x9c>)
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001000:	480d      	ldr	r0, [pc, #52]	@ (8001038 <MX_ADC3_Init+0x9c>)
 8001002:	f001 fded 	bl	8002be0 <HAL_ADC_Init>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_ADC3_Init+0x74>
  {
    Error_Handler();
 800100c:	f000 fc82 	bl	8001914 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001010:	2303      	movs	r3, #3
 8001012:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001014:	2301      	movs	r3, #1
 8001016:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001018:	2300      	movs	r3, #0
 800101a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800101c:	463b      	mov	r3, r7
 800101e:	4619      	mov	r1, r3
 8001020:	4805      	ldr	r0, [pc, #20]	@ (8001038 <MX_ADC3_Init+0x9c>)
 8001022:	f002 f8e3 	bl	80031ec <HAL_ADC_ConfigChannel>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 800102c:	f000 fc72 	bl	8001914 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001030:	bf00      	nop
 8001032:	3710      	adds	r7, #16
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20000324 	.word	0x20000324
 800103c:	40012200 	.word	0x40012200

08001040 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b08e      	sub	sp, #56	@ 0x38
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001048:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
 8001056:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a6a      	ldr	r2, [pc, #424]	@ (8001208 <HAL_ADC_MspInit+0x1c8>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d142      	bne.n	80010e8 <HAL_ADC_MspInit+0xa8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	623b      	str	r3, [r7, #32]
 8001066:	4b69      	ldr	r3, [pc, #420]	@ (800120c <HAL_ADC_MspInit+0x1cc>)
 8001068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800106a:	4a68      	ldr	r2, [pc, #416]	@ (800120c <HAL_ADC_MspInit+0x1cc>)
 800106c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001070:	6453      	str	r3, [r2, #68]	@ 0x44
 8001072:	4b66      	ldr	r3, [pc, #408]	@ (800120c <HAL_ADC_MspInit+0x1cc>)
 8001074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001076:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800107a:	623b      	str	r3, [r7, #32]
 800107c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	61fb      	str	r3, [r7, #28]
 8001082:	4b62      	ldr	r3, [pc, #392]	@ (800120c <HAL_ADC_MspInit+0x1cc>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001086:	4a61      	ldr	r2, [pc, #388]	@ (800120c <HAL_ADC_MspInit+0x1cc>)
 8001088:	f043 0301 	orr.w	r3, r3, #1
 800108c:	6313      	str	r3, [r2, #48]	@ 0x30
 800108e:	4b5f      	ldr	r3, [pc, #380]	@ (800120c <HAL_ADC_MspInit+0x1cc>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001092:	f003 0301 	and.w	r3, r3, #1
 8001096:	61fb      	str	r3, [r7, #28]
 8001098:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	61bb      	str	r3, [r7, #24]
 800109e:	4b5b      	ldr	r3, [pc, #364]	@ (800120c <HAL_ADC_MspInit+0x1cc>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a2:	4a5a      	ldr	r2, [pc, #360]	@ (800120c <HAL_ADC_MspInit+0x1cc>)
 80010a4:	f043 0302 	orr.w	r3, r3, #2
 80010a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010aa:	4b58      	ldr	r3, [pc, #352]	@ (800120c <HAL_ADC_MspInit+0x1cc>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ae:	f003 0302 	and.w	r3, r3, #2
 80010b2:	61bb      	str	r3, [r7, #24]
 80010b4:	69bb      	ldr	r3, [r7, #24]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010b6:	23c0      	movs	r3, #192	@ 0xc0
 80010b8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010ba:	2303      	movs	r3, #3
 80010bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010be:	2300      	movs	r3, #0
 80010c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010c6:	4619      	mov	r1, r3
 80010c8:	4851      	ldr	r0, [pc, #324]	@ (8001210 <HAL_ADC_MspInit+0x1d0>)
 80010ca:	f003 f93f 	bl	800434c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80010ce:	2303      	movs	r3, #3
 80010d0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010d2:	2303      	movs	r3, #3
 80010d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d6:	2300      	movs	r3, #0
 80010d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010de:	4619      	mov	r1, r3
 80010e0:	484c      	ldr	r0, [pc, #304]	@ (8001214 <HAL_ADC_MspInit+0x1d4>)
 80010e2:	f003 f933 	bl	800434c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80010e6:	e08a      	b.n	80011fe <HAL_ADC_MspInit+0x1be>
  else if(adcHandle->Instance==ADC2)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a4a      	ldr	r2, [pc, #296]	@ (8001218 <HAL_ADC_MspInit+0x1d8>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d128      	bne.n	8001144 <HAL_ADC_MspInit+0x104>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	617b      	str	r3, [r7, #20]
 80010f6:	4b45      	ldr	r3, [pc, #276]	@ (800120c <HAL_ADC_MspInit+0x1cc>)
 80010f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010fa:	4a44      	ldr	r2, [pc, #272]	@ (800120c <HAL_ADC_MspInit+0x1cc>)
 80010fc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001100:	6453      	str	r3, [r2, #68]	@ 0x44
 8001102:	4b42      	ldr	r3, [pc, #264]	@ (800120c <HAL_ADC_MspInit+0x1cc>)
 8001104:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001106:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800110a:	617b      	str	r3, [r7, #20]
 800110c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	613b      	str	r3, [r7, #16]
 8001112:	4b3e      	ldr	r3, [pc, #248]	@ (800120c <HAL_ADC_MspInit+0x1cc>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001116:	4a3d      	ldr	r2, [pc, #244]	@ (800120c <HAL_ADC_MspInit+0x1cc>)
 8001118:	f043 0301 	orr.w	r3, r3, #1
 800111c:	6313      	str	r3, [r2, #48]	@ 0x30
 800111e:	4b3b      	ldr	r3, [pc, #236]	@ (800120c <HAL_ADC_MspInit+0x1cc>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	613b      	str	r3, [r7, #16]
 8001128:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800112a:	2304      	movs	r3, #4
 800112c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800112e:	2303      	movs	r3, #3
 8001130:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001132:	2300      	movs	r3, #0
 8001134:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001136:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800113a:	4619      	mov	r1, r3
 800113c:	4834      	ldr	r0, [pc, #208]	@ (8001210 <HAL_ADC_MspInit+0x1d0>)
 800113e:	f003 f905 	bl	800434c <HAL_GPIO_Init>
}
 8001142:	e05c      	b.n	80011fe <HAL_ADC_MspInit+0x1be>
  else if(adcHandle->Instance==ADC3)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a34      	ldr	r2, [pc, #208]	@ (800121c <HAL_ADC_MspInit+0x1dc>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d157      	bne.n	80011fe <HAL_ADC_MspInit+0x1be>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	60fb      	str	r3, [r7, #12]
 8001152:	4b2e      	ldr	r3, [pc, #184]	@ (800120c <HAL_ADC_MspInit+0x1cc>)
 8001154:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001156:	4a2d      	ldr	r2, [pc, #180]	@ (800120c <HAL_ADC_MspInit+0x1cc>)
 8001158:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800115c:	6453      	str	r3, [r2, #68]	@ 0x44
 800115e:	4b2b      	ldr	r3, [pc, #172]	@ (800120c <HAL_ADC_MspInit+0x1cc>)
 8001160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001162:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	60bb      	str	r3, [r7, #8]
 800116e:	4b27      	ldr	r3, [pc, #156]	@ (800120c <HAL_ADC_MspInit+0x1cc>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001172:	4a26      	ldr	r2, [pc, #152]	@ (800120c <HAL_ADC_MspInit+0x1cc>)
 8001174:	f043 0301 	orr.w	r3, r3, #1
 8001178:	6313      	str	r3, [r2, #48]	@ 0x30
 800117a:	4b24      	ldr	r3, [pc, #144]	@ (800120c <HAL_ADC_MspInit+0x1cc>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117e:	f003 0301 	and.w	r3, r3, #1
 8001182:	60bb      	str	r3, [r7, #8]
 8001184:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001186:	2308      	movs	r3, #8
 8001188:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800118a:	2303      	movs	r3, #3
 800118c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118e:	2300      	movs	r3, #0
 8001190:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001192:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001196:	4619      	mov	r1, r3
 8001198:	481d      	ldr	r0, [pc, #116]	@ (8001210 <HAL_ADC_MspInit+0x1d0>)
 800119a:	f003 f8d7 	bl	800434c <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream0;
 800119e:	4b20      	ldr	r3, [pc, #128]	@ (8001220 <HAL_ADC_MspInit+0x1e0>)
 80011a0:	4a20      	ldr	r2, [pc, #128]	@ (8001224 <HAL_ADC_MspInit+0x1e4>)
 80011a2:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 80011a4:	4b1e      	ldr	r3, [pc, #120]	@ (8001220 <HAL_ADC_MspInit+0x1e0>)
 80011a6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80011aa:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011ac:	4b1c      	ldr	r3, [pc, #112]	@ (8001220 <HAL_ADC_MspInit+0x1e0>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80011b2:	4b1b      	ldr	r3, [pc, #108]	@ (8001220 <HAL_ADC_MspInit+0x1e0>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80011b8:	4b19      	ldr	r3, [pc, #100]	@ (8001220 <HAL_ADC_MspInit+0x1e0>)
 80011ba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80011be:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80011c0:	4b17      	ldr	r3, [pc, #92]	@ (8001220 <HAL_ADC_MspInit+0x1e0>)
 80011c2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80011c6:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80011c8:	4b15      	ldr	r3, [pc, #84]	@ (8001220 <HAL_ADC_MspInit+0x1e0>)
 80011ca:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80011ce:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 80011d0:	4b13      	ldr	r3, [pc, #76]	@ (8001220 <HAL_ADC_MspInit+0x1e0>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80011d6:	4b12      	ldr	r3, [pc, #72]	@ (8001220 <HAL_ADC_MspInit+0x1e0>)
 80011d8:	2200      	movs	r2, #0
 80011da:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011dc:	4b10      	ldr	r3, [pc, #64]	@ (8001220 <HAL_ADC_MspInit+0x1e0>)
 80011de:	2200      	movs	r2, #0
 80011e0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80011e2:	480f      	ldr	r0, [pc, #60]	@ (8001220 <HAL_ADC_MspInit+0x1e0>)
 80011e4:	f002 fcb0 	bl	8003b48 <HAL_DMA_Init>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <HAL_ADC_MspInit+0x1b2>
      Error_Handler();
 80011ee:	f000 fb91 	bl	8001914 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a0a      	ldr	r2, [pc, #40]	@ (8001220 <HAL_ADC_MspInit+0x1e0>)
 80011f6:	639a      	str	r2, [r3, #56]	@ 0x38
 80011f8:	4a09      	ldr	r2, [pc, #36]	@ (8001220 <HAL_ADC_MspInit+0x1e0>)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80011fe:	bf00      	nop
 8001200:	3738      	adds	r7, #56	@ 0x38
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40012000 	.word	0x40012000
 800120c:	40023800 	.word	0x40023800
 8001210:	40020000 	.word	0x40020000
 8001214:	40020400 	.word	0x40020400
 8001218:	40012100 	.word	0x40012100
 800121c:	40012200 	.word	0x40012200
 8001220:	2000036c 	.word	0x2000036c
 8001224:	40026410 	.word	0x40026410

08001228 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800122c:	4b16      	ldr	r3, [pc, #88]	@ (8001288 <MX_CAN1_Init+0x60>)
 800122e:	4a17      	ldr	r2, [pc, #92]	@ (800128c <MX_CAN1_Init+0x64>)
 8001230:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8001232:	4b15      	ldr	r3, [pc, #84]	@ (8001288 <MX_CAN1_Init+0x60>)
 8001234:	2210      	movs	r2, #16
 8001236:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001238:	4b13      	ldr	r3, [pc, #76]	@ (8001288 <MX_CAN1_Init+0x60>)
 800123a:	2200      	movs	r2, #0
 800123c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800123e:	4b12      	ldr	r3, [pc, #72]	@ (8001288 <MX_CAN1_Init+0x60>)
 8001240:	2200      	movs	r2, #0
 8001242:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001244:	4b10      	ldr	r3, [pc, #64]	@ (8001288 <MX_CAN1_Init+0x60>)
 8001246:	2200      	movs	r2, #0
 8001248:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800124a:	4b0f      	ldr	r3, [pc, #60]	@ (8001288 <MX_CAN1_Init+0x60>)
 800124c:	2200      	movs	r2, #0
 800124e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001250:	4b0d      	ldr	r3, [pc, #52]	@ (8001288 <MX_CAN1_Init+0x60>)
 8001252:	2200      	movs	r2, #0
 8001254:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001256:	4b0c      	ldr	r3, [pc, #48]	@ (8001288 <MX_CAN1_Init+0x60>)
 8001258:	2200      	movs	r2, #0
 800125a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800125c:	4b0a      	ldr	r3, [pc, #40]	@ (8001288 <MX_CAN1_Init+0x60>)
 800125e:	2200      	movs	r2, #0
 8001260:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001262:	4b09      	ldr	r3, [pc, #36]	@ (8001288 <MX_CAN1_Init+0x60>)
 8001264:	2200      	movs	r2, #0
 8001266:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001268:	4b07      	ldr	r3, [pc, #28]	@ (8001288 <MX_CAN1_Init+0x60>)
 800126a:	2200      	movs	r2, #0
 800126c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800126e:	4b06      	ldr	r3, [pc, #24]	@ (8001288 <MX_CAN1_Init+0x60>)
 8001270:	2200      	movs	r2, #0
 8001272:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001274:	4804      	ldr	r0, [pc, #16]	@ (8001288 <MX_CAN1_Init+0x60>)
 8001276:	f002 fa59 	bl	800372c <HAL_CAN_Init>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8001280:	f000 fb48 	bl	8001914 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001284:	bf00      	nop
 8001286:	bd80      	pop	{r7, pc}
 8001288:	200003cc 	.word	0x200003cc
 800128c:	40006400 	.word	0x40006400

08001290 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8001294:	4b16      	ldr	r3, [pc, #88]	@ (80012f0 <MX_CAN2_Init+0x60>)
 8001296:	4a17      	ldr	r2, [pc, #92]	@ (80012f4 <MX_CAN2_Init+0x64>)
 8001298:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 800129a:	4b15      	ldr	r3, [pc, #84]	@ (80012f0 <MX_CAN2_Init+0x60>)
 800129c:	2210      	movs	r2, #16
 800129e:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80012a0:	4b13      	ldr	r3, [pc, #76]	@ (80012f0 <MX_CAN2_Init+0x60>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80012a6:	4b12      	ldr	r3, [pc, #72]	@ (80012f0 <MX_CAN2_Init+0x60>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 80012ac:	4b10      	ldr	r3, [pc, #64]	@ (80012f0 <MX_CAN2_Init+0x60>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 80012b2:	4b0f      	ldr	r3, [pc, #60]	@ (80012f0 <MX_CAN2_Init+0x60>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80012b8:	4b0d      	ldr	r3, [pc, #52]	@ (80012f0 <MX_CAN2_Init+0x60>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80012be:	4b0c      	ldr	r3, [pc, #48]	@ (80012f0 <MX_CAN2_Init+0x60>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80012c4:	4b0a      	ldr	r3, [pc, #40]	@ (80012f0 <MX_CAN2_Init+0x60>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80012ca:	4b09      	ldr	r3, [pc, #36]	@ (80012f0 <MX_CAN2_Init+0x60>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80012d0:	4b07      	ldr	r3, [pc, #28]	@ (80012f0 <MX_CAN2_Init+0x60>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80012d6:	4b06      	ldr	r3, [pc, #24]	@ (80012f0 <MX_CAN2_Init+0x60>)
 80012d8:	2200      	movs	r2, #0
 80012da:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80012dc:	4804      	ldr	r0, [pc, #16]	@ (80012f0 <MX_CAN2_Init+0x60>)
 80012de:	f002 fa25 	bl	800372c <HAL_CAN_Init>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 80012e8:	f000 fb14 	bl	8001914 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80012ec:	bf00      	nop
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	200003f4 	.word	0x200003f4
 80012f4:	40006800 	.word	0x40006800

080012f8 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b08c      	sub	sp, #48	@ 0x30
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001300:	f107 031c 	add.w	r3, r7, #28
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	609a      	str	r2, [r3, #8]
 800130c:	60da      	str	r2, [r3, #12]
 800130e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a43      	ldr	r2, [pc, #268]	@ (8001424 <HAL_CAN_MspInit+0x12c>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d136      	bne.n	8001388 <HAL_CAN_MspInit+0x90>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 800131a:	4b43      	ldr	r3, [pc, #268]	@ (8001428 <HAL_CAN_MspInit+0x130>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	3301      	adds	r3, #1
 8001320:	4a41      	ldr	r2, [pc, #260]	@ (8001428 <HAL_CAN_MspInit+0x130>)
 8001322:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001324:	4b40      	ldr	r3, [pc, #256]	@ (8001428 <HAL_CAN_MspInit+0x130>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2b01      	cmp	r3, #1
 800132a:	d10d      	bne.n	8001348 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800132c:	2300      	movs	r3, #0
 800132e:	61bb      	str	r3, [r7, #24]
 8001330:	4b3e      	ldr	r3, [pc, #248]	@ (800142c <HAL_CAN_MspInit+0x134>)
 8001332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001334:	4a3d      	ldr	r2, [pc, #244]	@ (800142c <HAL_CAN_MspInit+0x134>)
 8001336:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800133a:	6413      	str	r3, [r2, #64]	@ 0x40
 800133c:	4b3b      	ldr	r3, [pc, #236]	@ (800142c <HAL_CAN_MspInit+0x134>)
 800133e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001340:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001344:	61bb      	str	r3, [r7, #24]
 8001346:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001348:	2300      	movs	r3, #0
 800134a:	617b      	str	r3, [r7, #20]
 800134c:	4b37      	ldr	r3, [pc, #220]	@ (800142c <HAL_CAN_MspInit+0x134>)
 800134e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001350:	4a36      	ldr	r2, [pc, #216]	@ (800142c <HAL_CAN_MspInit+0x134>)
 8001352:	f043 0301 	orr.w	r3, r3, #1
 8001356:	6313      	str	r3, [r2, #48]	@ 0x30
 8001358:	4b34      	ldr	r3, [pc, #208]	@ (800142c <HAL_CAN_MspInit+0x134>)
 800135a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800135c:	f003 0301 	and.w	r3, r3, #1
 8001360:	617b      	str	r3, [r7, #20]
 8001362:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001364:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001368:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136a:	2302      	movs	r3, #2
 800136c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136e:	2300      	movs	r3, #0
 8001370:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001372:	2303      	movs	r3, #3
 8001374:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001376:	2309      	movs	r3, #9
 8001378:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137a:	f107 031c 	add.w	r3, r7, #28
 800137e:	4619      	mov	r1, r3
 8001380:	482b      	ldr	r0, [pc, #172]	@ (8001430 <HAL_CAN_MspInit+0x138>)
 8001382:	f002 ffe3 	bl	800434c <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8001386:	e048      	b.n	800141a <HAL_CAN_MspInit+0x122>
  else if(canHandle->Instance==CAN2)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a29      	ldr	r2, [pc, #164]	@ (8001434 <HAL_CAN_MspInit+0x13c>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d143      	bne.n	800141a <HAL_CAN_MspInit+0x122>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	613b      	str	r3, [r7, #16]
 8001396:	4b25      	ldr	r3, [pc, #148]	@ (800142c <HAL_CAN_MspInit+0x134>)
 8001398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800139a:	4a24      	ldr	r2, [pc, #144]	@ (800142c <HAL_CAN_MspInit+0x134>)
 800139c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80013a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80013a2:	4b22      	ldr	r3, [pc, #136]	@ (800142c <HAL_CAN_MspInit+0x134>)
 80013a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80013aa:	613b      	str	r3, [r7, #16]
 80013ac:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80013ae:	4b1e      	ldr	r3, [pc, #120]	@ (8001428 <HAL_CAN_MspInit+0x130>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	3301      	adds	r3, #1
 80013b4:	4a1c      	ldr	r2, [pc, #112]	@ (8001428 <HAL_CAN_MspInit+0x130>)
 80013b6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80013b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001428 <HAL_CAN_MspInit+0x130>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d10d      	bne.n	80013dc <HAL_CAN_MspInit+0xe4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80013c0:	2300      	movs	r3, #0
 80013c2:	60fb      	str	r3, [r7, #12]
 80013c4:	4b19      	ldr	r3, [pc, #100]	@ (800142c <HAL_CAN_MspInit+0x134>)
 80013c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013c8:	4a18      	ldr	r2, [pc, #96]	@ (800142c <HAL_CAN_MspInit+0x134>)
 80013ca:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80013ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80013d0:	4b16      	ldr	r3, [pc, #88]	@ (800142c <HAL_CAN_MspInit+0x134>)
 80013d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013d8:	60fb      	str	r3, [r7, #12]
 80013da:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013dc:	2300      	movs	r3, #0
 80013de:	60bb      	str	r3, [r7, #8]
 80013e0:	4b12      	ldr	r3, [pc, #72]	@ (800142c <HAL_CAN_MspInit+0x134>)
 80013e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e4:	4a11      	ldr	r2, [pc, #68]	@ (800142c <HAL_CAN_MspInit+0x134>)
 80013e6:	f043 0302 	orr.w	r3, r3, #2
 80013ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ec:	4b0f      	ldr	r3, [pc, #60]	@ (800142c <HAL_CAN_MspInit+0x134>)
 80013ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f0:	f003 0302 	and.w	r3, r3, #2
 80013f4:	60bb      	str	r3, [r7, #8]
 80013f6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_6;
 80013f8:	f44f 5382 	mov.w	r3, #4160	@ 0x1040
 80013fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fe:	2302      	movs	r3, #2
 8001400:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001402:	2300      	movs	r3, #0
 8001404:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001406:	2303      	movs	r3, #3
 8001408:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800140a:	2309      	movs	r3, #9
 800140c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800140e:	f107 031c 	add.w	r3, r7, #28
 8001412:	4619      	mov	r1, r3
 8001414:	4808      	ldr	r0, [pc, #32]	@ (8001438 <HAL_CAN_MspInit+0x140>)
 8001416:	f002 ff99 	bl	800434c <HAL_GPIO_Init>
}
 800141a:	bf00      	nop
 800141c:	3730      	adds	r7, #48	@ 0x30
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	40006400 	.word	0x40006400
 8001428:	2000041c 	.word	0x2000041c
 800142c:	40023800 	.word	0x40023800
 8001430:	40020000 	.word	0x40020000
 8001434:	40006800 	.word	0x40006800
 8001438:	40020400 	.word	0x40020400

0800143c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	607b      	str	r3, [r7, #4]
 8001446:	4b0c      	ldr	r3, [pc, #48]	@ (8001478 <MX_DMA_Init+0x3c>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144a:	4a0b      	ldr	r2, [pc, #44]	@ (8001478 <MX_DMA_Init+0x3c>)
 800144c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001450:	6313      	str	r3, [r2, #48]	@ 0x30
 8001452:	4b09      	ldr	r3, [pc, #36]	@ (8001478 <MX_DMA_Init+0x3c>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001456:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800145a:	607b      	str	r3, [r7, #4]
 800145c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800145e:	2200      	movs	r2, #0
 8001460:	2100      	movs	r1, #0
 8001462:	2038      	movs	r0, #56	@ 0x38
 8001464:	f002 fb39 	bl	8003ada <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001468:	2038      	movs	r0, #56	@ 0x38
 800146a:	f002 fb52 	bl	8003b12 <HAL_NVIC_EnableIRQ>

}
 800146e:	bf00      	nop
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	40023800 	.word	0x40023800

0800147c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b08c      	sub	sp, #48	@ 0x30
 8001480:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001482:	f107 031c 	add.w	r3, r7, #28
 8001486:	2200      	movs	r2, #0
 8001488:	601a      	str	r2, [r3, #0]
 800148a:	605a      	str	r2, [r3, #4]
 800148c:	609a      	str	r2, [r3, #8]
 800148e:	60da      	str	r2, [r3, #12]
 8001490:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	61bb      	str	r3, [r7, #24]
 8001496:	4b5c      	ldr	r3, [pc, #368]	@ (8001608 <MX_GPIO_Init+0x18c>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149a:	4a5b      	ldr	r2, [pc, #364]	@ (8001608 <MX_GPIO_Init+0x18c>)
 800149c:	f043 0310 	orr.w	r3, r3, #16
 80014a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014a2:	4b59      	ldr	r3, [pc, #356]	@ (8001608 <MX_GPIO_Init+0x18c>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a6:	f003 0310 	and.w	r3, r3, #16
 80014aa:	61bb      	str	r3, [r7, #24]
 80014ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	617b      	str	r3, [r7, #20]
 80014b2:	4b55      	ldr	r3, [pc, #340]	@ (8001608 <MX_GPIO_Init+0x18c>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b6:	4a54      	ldr	r2, [pc, #336]	@ (8001608 <MX_GPIO_Init+0x18c>)
 80014b8:	f043 0304 	orr.w	r3, r3, #4
 80014bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80014be:	4b52      	ldr	r3, [pc, #328]	@ (8001608 <MX_GPIO_Init+0x18c>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c2:	f003 0304 	and.w	r3, r3, #4
 80014c6:	617b      	str	r3, [r7, #20]
 80014c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	613b      	str	r3, [r7, #16]
 80014ce:	4b4e      	ldr	r3, [pc, #312]	@ (8001608 <MX_GPIO_Init+0x18c>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d2:	4a4d      	ldr	r2, [pc, #308]	@ (8001608 <MX_GPIO_Init+0x18c>)
 80014d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014da:	4b4b      	ldr	r3, [pc, #300]	@ (8001608 <MX_GPIO_Init+0x18c>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014e2:	613b      	str	r3, [r7, #16]
 80014e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	60fb      	str	r3, [r7, #12]
 80014ea:	4b47      	ldr	r3, [pc, #284]	@ (8001608 <MX_GPIO_Init+0x18c>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ee:	4a46      	ldr	r2, [pc, #280]	@ (8001608 <MX_GPIO_Init+0x18c>)
 80014f0:	f043 0301 	orr.w	r3, r3, #1
 80014f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014f6:	4b44      	ldr	r3, [pc, #272]	@ (8001608 <MX_GPIO_Init+0x18c>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fa:	f003 0301 	and.w	r3, r3, #1
 80014fe:	60fb      	str	r3, [r7, #12]
 8001500:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	60bb      	str	r3, [r7, #8]
 8001506:	4b40      	ldr	r3, [pc, #256]	@ (8001608 <MX_GPIO_Init+0x18c>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150a:	4a3f      	ldr	r2, [pc, #252]	@ (8001608 <MX_GPIO_Init+0x18c>)
 800150c:	f043 0302 	orr.w	r3, r3, #2
 8001510:	6313      	str	r3, [r2, #48]	@ 0x30
 8001512:	4b3d      	ldr	r3, [pc, #244]	@ (8001608 <MX_GPIO_Init+0x18c>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001516:	f003 0302 	and.w	r3, r3, #2
 800151a:	60bb      	str	r3, [r7, #8]
 800151c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	607b      	str	r3, [r7, #4]
 8001522:	4b39      	ldr	r3, [pc, #228]	@ (8001608 <MX_GPIO_Init+0x18c>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001526:	4a38      	ldr	r2, [pc, #224]	@ (8001608 <MX_GPIO_Init+0x18c>)
 8001528:	f043 0308 	orr.w	r3, r3, #8
 800152c:	6313      	str	r3, [r2, #48]	@ 0x30
 800152e:	4b36      	ldr	r3, [pc, #216]	@ (8001608 <MX_GPIO_Init+0x18c>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001532:	f003 0308 	and.w	r3, r3, #8
 8001536:	607b      	str	r3, [r7, #4]
 8001538:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, BEEP_Pin|CCD_SI_Pin, GPIO_PIN_RESET);
 800153a:	2200      	movs	r2, #0
 800153c:	2105      	movs	r1, #5
 800153e:	4833      	ldr	r0, [pc, #204]	@ (800160c <MX_GPIO_Init+0x190>)
 8001540:	f003 f8a0 	bl	8004684 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001544:	2200      	movs	r2, #0
 8001546:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800154a:	4831      	ldr	r0, [pc, #196]	@ (8001610 <MX_GPIO_Init+0x194>)
 800154c:	f003 f89a 	bl	8004684 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 8001550:	2201      	movs	r2, #1
 8001552:	2102      	movs	r1, #2
 8001554:	482e      	ldr	r0, [pc, #184]	@ (8001610 <MX_GPIO_Init+0x194>)
 8001556:	f003 f895 	bl	8004684 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BEEP_Pin;
 800155a:	2304      	movs	r3, #4
 800155c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800155e:	2301      	movs	r3, #1
 8001560:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001562:	2300      	movs	r3, #0
 8001564:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001566:	2300      	movs	r3, #0
 8001568:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(BEEP_GPIO_Port, &GPIO_InitStruct);
 800156a:	f107 031c 	add.w	r3, r7, #28
 800156e:	4619      	mov	r1, r3
 8001570:	4826      	ldr	r0, [pc, #152]	@ (800160c <MX_GPIO_Init+0x190>)
 8001572:	f002 feeb 	bl	800434c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001576:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800157a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800157c:	2301      	movs	r3, #1
 800157e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001584:	2300      	movs	r3, #0
 8001586:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001588:	f107 031c 	add.w	r3, r7, #28
 800158c:	4619      	mov	r1, r3
 800158e:	4820      	ldr	r0, [pc, #128]	@ (8001610 <MX_GPIO_Init+0x194>)
 8001590:	f002 fedc 	bl	800434c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8001594:	2302      	movs	r3, #2
 8001596:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001598:	2301      	movs	r3, #1
 800159a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800159c:	2301      	movs	r3, #1
 800159e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a0:	2303      	movs	r3, #3
 80015a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 80015a4:	f107 031c 	add.w	r3, r7, #28
 80015a8:	4619      	mov	r1, r3
 80015aa:	4819      	ldr	r0, [pc, #100]	@ (8001610 <MX_GPIO_Init+0x194>)
 80015ac:	f002 fece 	bl	800434c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_Pin;
 80015b0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80015b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015b6:	2300      	movs	r3, #0
 80015b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015ba:	2301      	movs	r3, #1
 80015bc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 80015be:	f107 031c 	add.w	r3, r7, #28
 80015c2:	4619      	mov	r1, r3
 80015c4:	4813      	ldr	r0, [pc, #76]	@ (8001614 <MX_GPIO_Init+0x198>)
 80015c6:	f002 fec1 	bl	800434c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = REMOTE_LOCK_Pin;
 80015ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80015ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015d0:	2300      	movs	r3, #0
 80015d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80015d4:	2302      	movs	r3, #2
 80015d6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(REMOTE_LOCK_GPIO_Port, &GPIO_InitStruct);
 80015d8:	f107 031c 	add.w	r3, r7, #28
 80015dc:	4619      	mov	r1, r3
 80015de:	480c      	ldr	r0, [pc, #48]	@ (8001610 <MX_GPIO_Init+0x194>)
 80015e0:	f002 feb4 	bl	800434c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CCD_SI_Pin;
 80015e4:	2301      	movs	r3, #1
 80015e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e8:	2301      	movs	r3, #1
 80015ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ec:	2300      	movs	r3, #0
 80015ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f0:	2303      	movs	r3, #3
 80015f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CCD_SI_GPIO_Port, &GPIO_InitStruct);
 80015f4:	f107 031c 	add.w	r3, r7, #28
 80015f8:	4619      	mov	r1, r3
 80015fa:	4804      	ldr	r0, [pc, #16]	@ (800160c <MX_GPIO_Init+0x190>)
 80015fc:	f002 fea6 	bl	800434c <HAL_GPIO_Init>

}
 8001600:	bf00      	nop
 8001602:	3730      	adds	r7, #48	@ 0x30
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	40023800 	.word	0x40023800
 800160c:	40021000 	.word	0x40021000
 8001610:	40020800 	.word	0x40020800
 8001614:	40020000 	.word	0x40020000

08001618 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800161c:	4b12      	ldr	r3, [pc, #72]	@ (8001668 <MX_I2C1_Init+0x50>)
 800161e:	4a13      	ldr	r2, [pc, #76]	@ (800166c <MX_I2C1_Init+0x54>)
 8001620:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001622:	4b11      	ldr	r3, [pc, #68]	@ (8001668 <MX_I2C1_Init+0x50>)
 8001624:	4a12      	ldr	r2, [pc, #72]	@ (8001670 <MX_I2C1_Init+0x58>)
 8001626:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001628:	4b0f      	ldr	r3, [pc, #60]	@ (8001668 <MX_I2C1_Init+0x50>)
 800162a:	2200      	movs	r2, #0
 800162c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800162e:	4b0e      	ldr	r3, [pc, #56]	@ (8001668 <MX_I2C1_Init+0x50>)
 8001630:	2200      	movs	r2, #0
 8001632:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001634:	4b0c      	ldr	r3, [pc, #48]	@ (8001668 <MX_I2C1_Init+0x50>)
 8001636:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800163a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800163c:	4b0a      	ldr	r3, [pc, #40]	@ (8001668 <MX_I2C1_Init+0x50>)
 800163e:	2200      	movs	r2, #0
 8001640:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001642:	4b09      	ldr	r3, [pc, #36]	@ (8001668 <MX_I2C1_Init+0x50>)
 8001644:	2200      	movs	r2, #0
 8001646:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001648:	4b07      	ldr	r3, [pc, #28]	@ (8001668 <MX_I2C1_Init+0x50>)
 800164a:	2200      	movs	r2, #0
 800164c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800164e:	4b06      	ldr	r3, [pc, #24]	@ (8001668 <MX_I2C1_Init+0x50>)
 8001650:	2200      	movs	r2, #0
 8001652:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001654:	4804      	ldr	r0, [pc, #16]	@ (8001668 <MX_I2C1_Init+0x50>)
 8001656:	f003 f849 	bl	80046ec <HAL_I2C_Init>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001660:	f000 f958 	bl	8001914 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001664:	bf00      	nop
 8001666:	bd80      	pop	{r7, pc}
 8001668:	20000420 	.word	0x20000420
 800166c:	40005400 	.word	0x40005400
 8001670:	000186a0 	.word	0x000186a0

08001674 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001678:	4b12      	ldr	r3, [pc, #72]	@ (80016c4 <MX_I2C2_Init+0x50>)
 800167a:	4a13      	ldr	r2, [pc, #76]	@ (80016c8 <MX_I2C2_Init+0x54>)
 800167c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800167e:	4b11      	ldr	r3, [pc, #68]	@ (80016c4 <MX_I2C2_Init+0x50>)
 8001680:	4a12      	ldr	r2, [pc, #72]	@ (80016cc <MX_I2C2_Init+0x58>)
 8001682:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001684:	4b0f      	ldr	r3, [pc, #60]	@ (80016c4 <MX_I2C2_Init+0x50>)
 8001686:	2200      	movs	r2, #0
 8001688:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800168a:	4b0e      	ldr	r3, [pc, #56]	@ (80016c4 <MX_I2C2_Init+0x50>)
 800168c:	2200      	movs	r2, #0
 800168e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001690:	4b0c      	ldr	r3, [pc, #48]	@ (80016c4 <MX_I2C2_Init+0x50>)
 8001692:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001696:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001698:	4b0a      	ldr	r3, [pc, #40]	@ (80016c4 <MX_I2C2_Init+0x50>)
 800169a:	2200      	movs	r2, #0
 800169c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800169e:	4b09      	ldr	r3, [pc, #36]	@ (80016c4 <MX_I2C2_Init+0x50>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016a4:	4b07      	ldr	r3, [pc, #28]	@ (80016c4 <MX_I2C2_Init+0x50>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016aa:	4b06      	ldr	r3, [pc, #24]	@ (80016c4 <MX_I2C2_Init+0x50>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80016b0:	4804      	ldr	r0, [pc, #16]	@ (80016c4 <MX_I2C2_Init+0x50>)
 80016b2:	f003 f81b 	bl	80046ec <HAL_I2C_Init>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80016bc:	f000 f92a 	bl	8001914 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80016c0:	bf00      	nop
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	20000474 	.word	0x20000474
 80016c8:	40005800 	.word	0x40005800
 80016cc:	000186a0 	.word	0x000186a0

080016d0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b08c      	sub	sp, #48	@ 0x30
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d8:	f107 031c 	add.w	r3, r7, #28
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	60da      	str	r2, [r3, #12]
 80016e6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a33      	ldr	r2, [pc, #204]	@ (80017bc <HAL_I2C_MspInit+0xec>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d12d      	bne.n	800174e <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	61bb      	str	r3, [r7, #24]
 80016f6:	4b32      	ldr	r3, [pc, #200]	@ (80017c0 <HAL_I2C_MspInit+0xf0>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fa:	4a31      	ldr	r2, [pc, #196]	@ (80017c0 <HAL_I2C_MspInit+0xf0>)
 80016fc:	f043 0302 	orr.w	r3, r3, #2
 8001700:	6313      	str	r3, [r2, #48]	@ 0x30
 8001702:	4b2f      	ldr	r3, [pc, #188]	@ (80017c0 <HAL_I2C_MspInit+0xf0>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001706:	f003 0302 	and.w	r3, r3, #2
 800170a:	61bb      	str	r3, [r7, #24]
 800170c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800170e:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001712:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001714:	2312      	movs	r3, #18
 8001716:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001718:	2300      	movs	r3, #0
 800171a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800171c:	2303      	movs	r3, #3
 800171e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001720:	2304      	movs	r3, #4
 8001722:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001724:	f107 031c 	add.w	r3, r7, #28
 8001728:	4619      	mov	r1, r3
 800172a:	4826      	ldr	r0, [pc, #152]	@ (80017c4 <HAL_I2C_MspInit+0xf4>)
 800172c:	f002 fe0e 	bl	800434c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001730:	2300      	movs	r3, #0
 8001732:	617b      	str	r3, [r7, #20]
 8001734:	4b22      	ldr	r3, [pc, #136]	@ (80017c0 <HAL_I2C_MspInit+0xf0>)
 8001736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001738:	4a21      	ldr	r2, [pc, #132]	@ (80017c0 <HAL_I2C_MspInit+0xf0>)
 800173a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800173e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001740:	4b1f      	ldr	r3, [pc, #124]	@ (80017c0 <HAL_I2C_MspInit+0xf0>)
 8001742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001744:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001748:	617b      	str	r3, [r7, #20]
 800174a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800174c:	e031      	b.n	80017b2 <HAL_I2C_MspInit+0xe2>
  else if(i2cHandle->Instance==I2C2)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a1d      	ldr	r2, [pc, #116]	@ (80017c8 <HAL_I2C_MspInit+0xf8>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d12c      	bne.n	80017b2 <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001758:	2300      	movs	r3, #0
 800175a:	613b      	str	r3, [r7, #16]
 800175c:	4b18      	ldr	r3, [pc, #96]	@ (80017c0 <HAL_I2C_MspInit+0xf0>)
 800175e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001760:	4a17      	ldr	r2, [pc, #92]	@ (80017c0 <HAL_I2C_MspInit+0xf0>)
 8001762:	f043 0302 	orr.w	r3, r3, #2
 8001766:	6313      	str	r3, [r2, #48]	@ 0x30
 8001768:	4b15      	ldr	r3, [pc, #84]	@ (80017c0 <HAL_I2C_MspInit+0xf0>)
 800176a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800176c:	f003 0302 	and.w	r3, r3, #2
 8001770:	613b      	str	r3, [r7, #16]
 8001772:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001774:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001778:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800177a:	2312      	movs	r3, #18
 800177c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177e:	2300      	movs	r3, #0
 8001780:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001782:	2303      	movs	r3, #3
 8001784:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001786:	2304      	movs	r3, #4
 8001788:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800178a:	f107 031c 	add.w	r3, r7, #28
 800178e:	4619      	mov	r1, r3
 8001790:	480c      	ldr	r0, [pc, #48]	@ (80017c4 <HAL_I2C_MspInit+0xf4>)
 8001792:	f002 fddb 	bl	800434c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	60fb      	str	r3, [r7, #12]
 800179a:	4b09      	ldr	r3, [pc, #36]	@ (80017c0 <HAL_I2C_MspInit+0xf0>)
 800179c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800179e:	4a08      	ldr	r2, [pc, #32]	@ (80017c0 <HAL_I2C_MspInit+0xf0>)
 80017a0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80017a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80017a6:	4b06      	ldr	r3, [pc, #24]	@ (80017c0 <HAL_I2C_MspInit+0xf0>)
 80017a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017ae:	60fb      	str	r3, [r7, #12]
 80017b0:	68fb      	ldr	r3, [r7, #12]
}
 80017b2:	bf00      	nop
 80017b4:	3730      	adds	r7, #48	@ 0x30
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	40005400 	.word	0x40005400
 80017c0:	40023800 	.word	0x40023800
 80017c4:	40020400 	.word	0x40020400
 80017c8:	40005800 	.word	0x40005800

080017cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017d0:	f001 f970 	bl	8002ab4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017d4:	f000 f834 	bl	8001840 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017d8:	f7ff fe50 	bl	800147c <MX_GPIO_Init>
  MX_DMA_Init();
 80017dc:	f7ff fe2e 	bl	800143c <MX_DMA_Init>
  MX_ADC1_Init();
 80017e0:	f7ff fb38 	bl	8000e54 <MX_ADC1_Init>
  MX_ADC2_Init();
 80017e4:	f7ff fb88 	bl	8000ef8 <MX_ADC2_Init>
  MX_ADC3_Init();
 80017e8:	f7ff fbd8 	bl	8000f9c <MX_ADC3_Init>
  MX_CAN1_Init();
 80017ec:	f7ff fd1c 	bl	8001228 <MX_CAN1_Init>
  MX_CAN2_Init();
 80017f0:	f7ff fd4e 	bl	8001290 <MX_CAN2_Init>
  MX_I2C1_Init();
 80017f4:	f7ff ff10 	bl	8001618 <MX_I2C1_Init>
  MX_SPI2_Init();
 80017f8:	f000 f892 	bl	8001920 <MX_SPI2_Init>
  MX_TIM1_Init();
 80017fc:	f000 f9de 	bl	8001bbc <MX_TIM1_Init>
  MX_TIM2_Init();
 8001800:	f000 faa0 	bl	8001d44 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001804:	f000 faf2 	bl	8001dec <MX_TIM3_Init>
  MX_TIM4_Init();
 8001808:	f000 fb44 	bl	8001e94 <MX_TIM4_Init>
  MX_TIM5_Init();
 800180c:	f000 fbba 	bl	8001f84 <MX_TIM5_Init>
  MX_TIM8_Init();
 8001810:	f000 fc0c 	bl	800202c <MX_TIM8_Init>
  MX_TIM9_Init();
 8001814:	f000 fcce 	bl	80021b4 <MX_TIM9_Init>
  MX_TIM12_Init();
 8001818:	f000 fd3a 	bl	8002290 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 800181c:	f000 ffe6 	bl	80027ec <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001820:	f001 f80e 	bl	8002840 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001824:	f001 f836 	bl	8002894 <MX_USART3_UART_Init>
  MX_I2C2_Init();
 8001828:	f7ff ff24 	bl	8001674 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
    setup();
 800182c:	f008 fee0 	bl	800a5f0 <setup>
    HAL_Delay(1999);
 8001830:	f240 70cf 	movw	r0, #1999	@ 0x7cf
 8001834:	f001 f9b0 	bl	8002b98 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    loop();
 8001838:	f008 ff0a 	bl	800a650 <loop>
 800183c:	e7fc      	b.n	8001838 <main+0x6c>
	...

08001840 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b094      	sub	sp, #80	@ 0x50
 8001844:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001846:	f107 0320 	add.w	r3, r7, #32
 800184a:	2230      	movs	r2, #48	@ 0x30
 800184c:	2100      	movs	r1, #0
 800184e:	4618      	mov	r0, r3
 8001850:	f009 fb55 	bl	800aefe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001854:	f107 030c 	add.w	r3, r7, #12
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	605a      	str	r2, [r3, #4]
 800185e:	609a      	str	r2, [r3, #8]
 8001860:	60da      	str	r2, [r3, #12]
 8001862:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001864:	2300      	movs	r3, #0
 8001866:	60bb      	str	r3, [r7, #8]
 8001868:	4b28      	ldr	r3, [pc, #160]	@ (800190c <SystemClock_Config+0xcc>)
 800186a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800186c:	4a27      	ldr	r2, [pc, #156]	@ (800190c <SystemClock_Config+0xcc>)
 800186e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001872:	6413      	str	r3, [r2, #64]	@ 0x40
 8001874:	4b25      	ldr	r3, [pc, #148]	@ (800190c <SystemClock_Config+0xcc>)
 8001876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001878:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800187c:	60bb      	str	r3, [r7, #8]
 800187e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001880:	2300      	movs	r3, #0
 8001882:	607b      	str	r3, [r7, #4]
 8001884:	4b22      	ldr	r3, [pc, #136]	@ (8001910 <SystemClock_Config+0xd0>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a21      	ldr	r2, [pc, #132]	@ (8001910 <SystemClock_Config+0xd0>)
 800188a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800188e:	6013      	str	r3, [r2, #0]
 8001890:	4b1f      	ldr	r3, [pc, #124]	@ (8001910 <SystemClock_Config+0xd0>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001898:	607b      	str	r3, [r7, #4]
 800189a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800189c:	2301      	movs	r3, #1
 800189e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80018a4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018a6:	2302      	movs	r3, #2
 80018a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018aa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80018ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80018b0:	2304      	movs	r3, #4
 80018b2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80018b4:	23a8      	movs	r3, #168	@ 0xa8
 80018b6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018b8:	2302      	movs	r3, #2
 80018ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80018bc:	2304      	movs	r3, #4
 80018be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018c0:	f107 0320 	add.w	r3, r7, #32
 80018c4:	4618      	mov	r0, r3
 80018c6:	f003 f855 	bl	8004974 <HAL_RCC_OscConfig>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80018d0:	f000 f820 	bl	8001914 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018d4:	230f      	movs	r3, #15
 80018d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018d8:	2302      	movs	r3, #2
 80018da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018dc:	2300      	movs	r3, #0
 80018de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80018e0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80018e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80018e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80018ec:	f107 030c 	add.w	r3, r7, #12
 80018f0:	2105      	movs	r1, #5
 80018f2:	4618      	mov	r0, r3
 80018f4:	f003 fab6 	bl	8004e64 <HAL_RCC_ClockConfig>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80018fe:	f000 f809 	bl	8001914 <Error_Handler>
  }
}
 8001902:	bf00      	nop
 8001904:	3750      	adds	r7, #80	@ 0x50
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	40023800 	.word	0x40023800
 8001910:	40007000 	.word	0x40007000

08001914 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001918:	b672      	cpsid	i
}
 800191a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800191c:	bf00      	nop
 800191e:	e7fd      	b.n	800191c <Error_Handler+0x8>

08001920 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001924:	4b17      	ldr	r3, [pc, #92]	@ (8001984 <MX_SPI2_Init+0x64>)
 8001926:	4a18      	ldr	r2, [pc, #96]	@ (8001988 <MX_SPI2_Init+0x68>)
 8001928:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800192a:	4b16      	ldr	r3, [pc, #88]	@ (8001984 <MX_SPI2_Init+0x64>)
 800192c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001930:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001932:	4b14      	ldr	r3, [pc, #80]	@ (8001984 <MX_SPI2_Init+0x64>)
 8001934:	2200      	movs	r2, #0
 8001936:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001938:	4b12      	ldr	r3, [pc, #72]	@ (8001984 <MX_SPI2_Init+0x64>)
 800193a:	2200      	movs	r2, #0
 800193c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800193e:	4b11      	ldr	r3, [pc, #68]	@ (8001984 <MX_SPI2_Init+0x64>)
 8001940:	2200      	movs	r2, #0
 8001942:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001944:	4b0f      	ldr	r3, [pc, #60]	@ (8001984 <MX_SPI2_Init+0x64>)
 8001946:	2200      	movs	r2, #0
 8001948:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800194a:	4b0e      	ldr	r3, [pc, #56]	@ (8001984 <MX_SPI2_Init+0x64>)
 800194c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001950:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001952:	4b0c      	ldr	r3, [pc, #48]	@ (8001984 <MX_SPI2_Init+0x64>)
 8001954:	2210      	movs	r2, #16
 8001956:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001958:	4b0a      	ldr	r3, [pc, #40]	@ (8001984 <MX_SPI2_Init+0x64>)
 800195a:	2200      	movs	r2, #0
 800195c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800195e:	4b09      	ldr	r3, [pc, #36]	@ (8001984 <MX_SPI2_Init+0x64>)
 8001960:	2200      	movs	r2, #0
 8001962:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001964:	4b07      	ldr	r3, [pc, #28]	@ (8001984 <MX_SPI2_Init+0x64>)
 8001966:	2200      	movs	r2, #0
 8001968:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800196a:	4b06      	ldr	r3, [pc, #24]	@ (8001984 <MX_SPI2_Init+0x64>)
 800196c:	220a      	movs	r2, #10
 800196e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001970:	4804      	ldr	r0, [pc, #16]	@ (8001984 <MX_SPI2_Init+0x64>)
 8001972:	f003 fc97 	bl	80052a4 <HAL_SPI_Init>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800197c:	f7ff ffca 	bl	8001914 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001980:	bf00      	nop
 8001982:	bd80      	pop	{r7, pc}
 8001984:	200004c8 	.word	0x200004c8
 8001988:	40003800 	.word	0x40003800

0800198c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b08a      	sub	sp, #40	@ 0x28
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001994:	f107 0314 	add.w	r3, r7, #20
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	605a      	str	r2, [r3, #4]
 800199e:	609a      	str	r2, [r3, #8]
 80019a0:	60da      	str	r2, [r3, #12]
 80019a2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a28      	ldr	r2, [pc, #160]	@ (8001a4c <HAL_SPI_MspInit+0xc0>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d14a      	bne.n	8001a44 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80019ae:	2300      	movs	r3, #0
 80019b0:	613b      	str	r3, [r7, #16]
 80019b2:	4b27      	ldr	r3, [pc, #156]	@ (8001a50 <HAL_SPI_MspInit+0xc4>)
 80019b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b6:	4a26      	ldr	r2, [pc, #152]	@ (8001a50 <HAL_SPI_MspInit+0xc4>)
 80019b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80019be:	4b24      	ldr	r3, [pc, #144]	@ (8001a50 <HAL_SPI_MspInit+0xc4>)
 80019c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019c6:	613b      	str	r3, [r7, #16]
 80019c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019ca:	2300      	movs	r3, #0
 80019cc:	60fb      	str	r3, [r7, #12]
 80019ce:	4b20      	ldr	r3, [pc, #128]	@ (8001a50 <HAL_SPI_MspInit+0xc4>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d2:	4a1f      	ldr	r2, [pc, #124]	@ (8001a50 <HAL_SPI_MspInit+0xc4>)
 80019d4:	f043 0304 	orr.w	r3, r3, #4
 80019d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019da:	4b1d      	ldr	r3, [pc, #116]	@ (8001a50 <HAL_SPI_MspInit+0xc4>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019de:	f003 0304 	and.w	r3, r3, #4
 80019e2:	60fb      	str	r3, [r7, #12]
 80019e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019e6:	2300      	movs	r3, #0
 80019e8:	60bb      	str	r3, [r7, #8]
 80019ea:	4b19      	ldr	r3, [pc, #100]	@ (8001a50 <HAL_SPI_MspInit+0xc4>)
 80019ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ee:	4a18      	ldr	r2, [pc, #96]	@ (8001a50 <HAL_SPI_MspInit+0xc4>)
 80019f0:	f043 0302 	orr.w	r3, r3, #2
 80019f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019f6:	4b16      	ldr	r3, [pc, #88]	@ (8001a50 <HAL_SPI_MspInit+0xc4>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	60bb      	str	r3, [r7, #8]
 8001a00:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001a02:	230c      	movs	r3, #12
 8001a04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a06:	2302      	movs	r3, #2
 8001a08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a12:	2305      	movs	r3, #5
 8001a14:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a16:	f107 0314 	add.w	r3, r7, #20
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	480d      	ldr	r0, [pc, #52]	@ (8001a54 <HAL_SPI_MspInit+0xc8>)
 8001a1e:	f002 fc95 	bl	800434c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001a22:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a28:	2302      	movs	r3, #2
 8001a2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a30:	2303      	movs	r3, #3
 8001a32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a34:	2305      	movs	r3, #5
 8001a36:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a38:	f107 0314 	add.w	r3, r7, #20
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4806      	ldr	r0, [pc, #24]	@ (8001a58 <HAL_SPI_MspInit+0xcc>)
 8001a40:	f002 fc84 	bl	800434c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001a44:	bf00      	nop
 8001a46:	3728      	adds	r7, #40	@ 0x28
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	40003800 	.word	0x40003800
 8001a50:	40023800 	.word	0x40023800
 8001a54:	40020800 	.word	0x40020800
 8001a58:	40020400 	.word	0x40020400

08001a5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	607b      	str	r3, [r7, #4]
 8001a66:	4b10      	ldr	r3, [pc, #64]	@ (8001aa8 <HAL_MspInit+0x4c>)
 8001a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a6a:	4a0f      	ldr	r2, [pc, #60]	@ (8001aa8 <HAL_MspInit+0x4c>)
 8001a6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a70:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a72:	4b0d      	ldr	r3, [pc, #52]	@ (8001aa8 <HAL_MspInit+0x4c>)
 8001a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a7a:	607b      	str	r3, [r7, #4]
 8001a7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a7e:	2300      	movs	r3, #0
 8001a80:	603b      	str	r3, [r7, #0]
 8001a82:	4b09      	ldr	r3, [pc, #36]	@ (8001aa8 <HAL_MspInit+0x4c>)
 8001a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a86:	4a08      	ldr	r2, [pc, #32]	@ (8001aa8 <HAL_MspInit+0x4c>)
 8001a88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a8e:	4b06      	ldr	r3, [pc, #24]	@ (8001aa8 <HAL_MspInit+0x4c>)
 8001a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a96:	603b      	str	r3, [r7, #0]
 8001a98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	40023800 	.word	0x40023800

08001aac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ab0:	bf00      	nop
 8001ab2:	e7fd      	b.n	8001ab0 <NMI_Handler+0x4>

08001ab4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ab8:	bf00      	nop
 8001aba:	e7fd      	b.n	8001ab8 <HardFault_Handler+0x4>

08001abc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ac0:	bf00      	nop
 8001ac2:	e7fd      	b.n	8001ac0 <MemManage_Handler+0x4>

08001ac4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ac8:	bf00      	nop
 8001aca:	e7fd      	b.n	8001ac8 <BusFault_Handler+0x4>

08001acc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ad0:	bf00      	nop
 8001ad2:	e7fd      	b.n	8001ad0 <UsageFault_Handler+0x4>

08001ad4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ad8:	bf00      	nop
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr

08001ae2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ae6:	bf00      	nop
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001af4:	bf00      	nop
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr

08001afe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b02:	f001 f829 	bl	8002b58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
    task_handler();
 8001b06:	f008 fe39 	bl	800a77c <task_handler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8001b0a:	bf00      	nop
 8001b0c:	bd80      	pop	{r7, pc}
	...

08001b10 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b14:	4802      	ldr	r0, [pc, #8]	@ (8001b20 <TIM2_IRQHandler+0x10>)
 8001b16:	f004 fc83 	bl	8006420 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  //TIM2_handler();
  /* USER CODE END TIM2_IRQn 1 */
}
 8001b1a:	bf00      	nop
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	2000056c 	.word	0x2000056c

08001b24 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001b28:	4802      	ldr	r0, [pc, #8]	@ (8001b34 <TIM3_IRQHandler+0x10>)
 8001b2a:	f004 fc79 	bl	8006420 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001b2e:	bf00      	nop
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	200005b4 	.word	0x200005b4

08001b38 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
    //HAL_GPIO_TogglePin(CCD_SI_GPIO_Port, CCD_SI_Pin);
    CCD_Handler();
 8001b3c:	f008 fe86 	bl	800a84c <CCD_Handler>
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001b40:	4802      	ldr	r0, [pc, #8]	@ (8001b4c <TIM4_IRQHandler+0x14>)
 8001b42:	f004 fc6d 	bl	8006420 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001b46:	bf00      	nop
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	200005fc 	.word	0x200005fc

08001b50 <USART1_IRQHandler>:
/**
  * @brief This function handles USART1 global interrupt.
  */
uint32_t uart1_cnt = 0;
void USART1_IRQHandler(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
    uart1_cnt++;
 8001b54:	4b04      	ldr	r3, [pc, #16]	@ (8001b68 <USART1_IRQHandler+0x18>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	3301      	adds	r3, #1
 8001b5a:	4a03      	ldr	r2, [pc, #12]	@ (8001b68 <USART1_IRQHandler+0x18>)
 8001b5c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN USART1_IRQn 0 */
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001b5e:	4803      	ldr	r0, [pc, #12]	@ (8001b6c <USART1_IRQHandler+0x1c>)
 8001b60:	f005 fc1a 	bl	8007398 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001b64:	bf00      	nop
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	20000520 	.word	0x20000520
 8001b6c:	20000764 	.word	0x20000764

08001b70 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001b74:	4802      	ldr	r0, [pc, #8]	@ (8001b80 <TIM5_IRQHandler+0x10>)
 8001b76:	f004 fc53 	bl	8006420 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001b7a:	bf00      	nop
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	20000644 	.word	0x20000644

08001b84 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001b88:	4802      	ldr	r0, [pc, #8]	@ (8001b94 <DMA2_Stream0_IRQHandler+0x10>)
 8001b8a:	f002 f975 	bl	8003e78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001b8e:	bf00      	nop
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	2000036c 	.word	0x2000036c

08001b98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b9c:	4b06      	ldr	r3, [pc, #24]	@ (8001bb8 <SystemInit+0x20>)
 8001b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ba2:	4a05      	ldr	r2, [pc, #20]	@ (8001bb8 <SystemInit+0x20>)
 8001ba4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ba8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bac:	bf00      	nop
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	e000ed00 	.word	0xe000ed00

08001bbc <MX_TIM1_Init>:
TIM_HandleTypeDef htim9;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b096      	sub	sp, #88	@ 0x58
 8001bc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bc2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	601a      	str	r2, [r3, #0]
 8001bca:	605a      	str	r2, [r3, #4]
 8001bcc:	609a      	str	r2, [r3, #8]
 8001bce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bd0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bde:	2200      	movs	r2, #0
 8001be0:	601a      	str	r2, [r3, #0]
 8001be2:	605a      	str	r2, [r3, #4]
 8001be4:	609a      	str	r2, [r3, #8]
 8001be6:	60da      	str	r2, [r3, #12]
 8001be8:	611a      	str	r2, [r3, #16]
 8001bea:	615a      	str	r2, [r3, #20]
 8001bec:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001bee:	1d3b      	adds	r3, r7, #4
 8001bf0:	2220      	movs	r2, #32
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f009 f982 	bl	800aefe <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001bfa:	4b50      	ldr	r3, [pc, #320]	@ (8001d3c <MX_TIM1_Init+0x180>)
 8001bfc:	4a50      	ldr	r2, [pc, #320]	@ (8001d40 <MX_TIM1_Init+0x184>)
 8001bfe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001c00:	4b4e      	ldr	r3, [pc, #312]	@ (8001d3c <MX_TIM1_Init+0x180>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c06:	4b4d      	ldr	r3, [pc, #308]	@ (8001d3c <MX_TIM1_Init+0x180>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000 - 1;
 8001c0c:	4b4b      	ldr	r3, [pc, #300]	@ (8001d3c <MX_TIM1_Init+0x180>)
 8001c0e:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001c12:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c14:	4b49      	ldr	r3, [pc, #292]	@ (8001d3c <MX_TIM1_Init+0x180>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c1a:	4b48      	ldr	r3, [pc, #288]	@ (8001d3c <MX_TIM1_Init+0x180>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c20:	4b46      	ldr	r3, [pc, #280]	@ (8001d3c <MX_TIM1_Init+0x180>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001c26:	4845      	ldr	r0, [pc, #276]	@ (8001d3c <MX_TIM1_Init+0x180>)
 8001c28:	f004 f8e4 	bl	8005df4 <HAL_TIM_Base_Init>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001c32:	f7ff fe6f 	bl	8001914 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c36:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c3a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001c3c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001c40:	4619      	mov	r1, r3
 8001c42:	483e      	ldr	r0, [pc, #248]	@ (8001d3c <MX_TIM1_Init+0x180>)
 8001c44:	f004 fdb6 	bl	80067b4 <HAL_TIM_ConfigClockSource>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001c4e:	f7ff fe61 	bl	8001914 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001c52:	483a      	ldr	r0, [pc, #232]	@ (8001d3c <MX_TIM1_Init+0x180>)
 8001c54:	f004 f98e 	bl	8005f74 <HAL_TIM_PWM_Init>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001c5e:	f7ff fe59 	bl	8001914 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c62:	2300      	movs	r3, #0
 8001c64:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c66:	2300      	movs	r3, #0
 8001c68:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c6a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001c6e:	4619      	mov	r1, r3
 8001c70:	4832      	ldr	r0, [pc, #200]	@ (8001d3c <MX_TIM1_Init+0x180>)
 8001c72:	f005 f99f 	bl	8006fb4 <HAL_TIMEx_MasterConfigSynchronization>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001c7c:	f7ff fe4a 	bl	8001914 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c80:	2360      	movs	r3, #96	@ 0x60
 8001c82:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001c84:	2300      	movs	r3, #0
 8001c86:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c90:	2300      	movs	r3, #0
 8001c92:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c94:	2300      	movs	r3, #0
 8001c96:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	4825      	ldr	r0, [pc, #148]	@ (8001d3c <MX_TIM1_Init+0x180>)
 8001ca6:	f004 fcc3 	bl	8006630 <HAL_TIM_PWM_ConfigChannel>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001cb0:	f7ff fe30 	bl	8001914 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001cb4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cb8:	2204      	movs	r2, #4
 8001cba:	4619      	mov	r1, r3
 8001cbc:	481f      	ldr	r0, [pc, #124]	@ (8001d3c <MX_TIM1_Init+0x180>)
 8001cbe:	f004 fcb7 	bl	8006630 <HAL_TIM_PWM_ConfigChannel>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001cc8:	f7ff fe24 	bl	8001914 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ccc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cd0:	2208      	movs	r2, #8
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	4819      	ldr	r0, [pc, #100]	@ (8001d3c <MX_TIM1_Init+0x180>)
 8001cd6:	f004 fcab 	bl	8006630 <HAL_TIM_PWM_ConfigChannel>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001ce0:	f7ff fe18 	bl	8001914 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001ce4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ce8:	220c      	movs	r2, #12
 8001cea:	4619      	mov	r1, r3
 8001cec:	4813      	ldr	r0, [pc, #76]	@ (8001d3c <MX_TIM1_Init+0x180>)
 8001cee:	f004 fc9f 	bl	8006630 <HAL_TIM_PWM_ConfigChannel>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001cf8:	f7ff fe0c 	bl	8001914 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d00:	2300      	movs	r3, #0
 8001d02:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d04:	2300      	movs	r3, #0
 8001d06:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d10:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d14:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d16:	2300      	movs	r3, #0
 8001d18:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001d1a:	1d3b      	adds	r3, r7, #4
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4807      	ldr	r0, [pc, #28]	@ (8001d3c <MX_TIM1_Init+0x180>)
 8001d20:	f005 f9c4 	bl	80070ac <HAL_TIMEx_ConfigBreakDeadTime>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8001d2a:	f7ff fdf3 	bl	8001914 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001d2e:	4803      	ldr	r0, [pc, #12]	@ (8001d3c <MX_TIM1_Init+0x180>)
 8001d30:	f000 fc82 	bl	8002638 <HAL_TIM_MspPostInit>

}
 8001d34:	bf00      	nop
 8001d36:	3758      	adds	r7, #88	@ 0x58
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	20000524 	.word	0x20000524
 8001d40:	40010000 	.word	0x40010000

08001d44 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b08c      	sub	sp, #48	@ 0x30
 8001d48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001d4a:	f107 030c 	add.w	r3, r7, #12
 8001d4e:	2224      	movs	r2, #36	@ 0x24
 8001d50:	2100      	movs	r1, #0
 8001d52:	4618      	mov	r0, r3
 8001d54:	f009 f8d3 	bl	800aefe <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d58:	1d3b      	adds	r3, r7, #4
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	601a      	str	r2, [r3, #0]
 8001d5e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d60:	4b21      	ldr	r3, [pc, #132]	@ (8001de8 <MX_TIM2_Init+0xa4>)
 8001d62:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d66:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001d68:	4b1f      	ldr	r3, [pc, #124]	@ (8001de8 <MX_TIM2_Init+0xa4>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d6e:	4b1e      	ldr	r3, [pc, #120]	@ (8001de8 <MX_TIM2_Init+0xa4>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001d74:	4b1c      	ldr	r3, [pc, #112]	@ (8001de8 <MX_TIM2_Init+0xa4>)
 8001d76:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d7a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d7c:	4b1a      	ldr	r3, [pc, #104]	@ (8001de8 <MX_TIM2_Init+0xa4>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d82:	4b19      	ldr	r3, [pc, #100]	@ (8001de8 <MX_TIM2_Init+0xa4>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d90:	2301      	movs	r3, #1
 8001d92:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d94:	2300      	movs	r3, #0
 8001d96:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001da0:	2301      	movs	r3, #1
 8001da2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001da4:	2300      	movs	r3, #0
 8001da6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001da8:	2300      	movs	r3, #0
 8001daa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001dac:	f107 030c 	add.w	r3, r7, #12
 8001db0:	4619      	mov	r1, r3
 8001db2:	480d      	ldr	r0, [pc, #52]	@ (8001de8 <MX_TIM2_Init+0xa4>)
 8001db4:	f004 fa00 	bl	80061b8 <HAL_TIM_Encoder_Init>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001dbe:	f7ff fda9 	bl	8001914 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001dca:	1d3b      	adds	r3, r7, #4
 8001dcc:	4619      	mov	r1, r3
 8001dce:	4806      	ldr	r0, [pc, #24]	@ (8001de8 <MX_TIM2_Init+0xa4>)
 8001dd0:	f005 f8f0 	bl	8006fb4 <HAL_TIMEx_MasterConfigSynchronization>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001dda:	f7ff fd9b 	bl	8001914 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001dde:	bf00      	nop
 8001de0:	3730      	adds	r7, #48	@ 0x30
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	2000056c 	.word	0x2000056c

08001dec <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b08c      	sub	sp, #48	@ 0x30
 8001df0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001df2:	f107 030c 	add.w	r3, r7, #12
 8001df6:	2224      	movs	r2, #36	@ 0x24
 8001df8:	2100      	movs	r1, #0
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f009 f87f 	bl	800aefe <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e00:	1d3b      	adds	r3, r7, #4
 8001e02:	2200      	movs	r2, #0
 8001e04:	601a      	str	r2, [r3, #0]
 8001e06:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001e08:	4b20      	ldr	r3, [pc, #128]	@ (8001e8c <MX_TIM3_Init+0xa0>)
 8001e0a:	4a21      	ldr	r2, [pc, #132]	@ (8001e90 <MX_TIM3_Init+0xa4>)
 8001e0c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001e0e:	4b1f      	ldr	r3, [pc, #124]	@ (8001e8c <MX_TIM3_Init+0xa0>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e14:	4b1d      	ldr	r3, [pc, #116]	@ (8001e8c <MX_TIM3_Init+0xa0>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001e1a:	4b1c      	ldr	r3, [pc, #112]	@ (8001e8c <MX_TIM3_Init+0xa0>)
 8001e1c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e20:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e22:	4b1a      	ldr	r3, [pc, #104]	@ (8001e8c <MX_TIM3_Init+0xa0>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e28:	4b18      	ldr	r3, [pc, #96]	@ (8001e8c <MX_TIM3_Init+0xa0>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001e32:	2300      	movs	r3, #0
 8001e34:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e36:	2301      	movs	r3, #1
 8001e38:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001e42:	2300      	movs	r3, #0
 8001e44:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e46:	2301      	movs	r3, #1
 8001e48:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001e52:	f107 030c 	add.w	r3, r7, #12
 8001e56:	4619      	mov	r1, r3
 8001e58:	480c      	ldr	r0, [pc, #48]	@ (8001e8c <MX_TIM3_Init+0xa0>)
 8001e5a:	f004 f9ad 	bl	80061b8 <HAL_TIM_Encoder_Init>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d001      	beq.n	8001e68 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001e64:	f7ff fd56 	bl	8001914 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e70:	1d3b      	adds	r3, r7, #4
 8001e72:	4619      	mov	r1, r3
 8001e74:	4805      	ldr	r0, [pc, #20]	@ (8001e8c <MX_TIM3_Init+0xa0>)
 8001e76:	f005 f89d 	bl	8006fb4 <HAL_TIMEx_MasterConfigSynchronization>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d001      	beq.n	8001e84 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001e80:	f7ff fd48 	bl	8001914 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001e84:	bf00      	nop
 8001e86:	3730      	adds	r7, #48	@ 0x30
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	200005b4 	.word	0x200005b4
 8001e90:	40000400 	.word	0x40000400

08001e94 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b08e      	sub	sp, #56	@ 0x38
 8001e98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e9a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	601a      	str	r2, [r3, #0]
 8001ea2:	605a      	str	r2, [r3, #4]
 8001ea4:	609a      	str	r2, [r3, #8]
 8001ea6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ea8:	f107 0320 	add.w	r3, r7, #32
 8001eac:	2200      	movs	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]
 8001eb0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001eb2:	1d3b      	adds	r3, r7, #4
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	605a      	str	r2, [r3, #4]
 8001eba:	609a      	str	r2, [r3, #8]
 8001ebc:	60da      	str	r2, [r3, #12]
 8001ebe:	611a      	str	r2, [r3, #16]
 8001ec0:	615a      	str	r2, [r3, #20]
 8001ec2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001ec4:	4b2d      	ldr	r3, [pc, #180]	@ (8001f7c <MX_TIM4_Init+0xe8>)
 8001ec6:	4a2e      	ldr	r2, [pc, #184]	@ (8001f80 <MX_TIM4_Init+0xec>)
 8001ec8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001eca:	4b2c      	ldr	r3, [pc, #176]	@ (8001f7c <MX_TIM4_Init+0xe8>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ed0:	4b2a      	ldr	r3, [pc, #168]	@ (8001f7c <MX_TIM4_Init+0xe8>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 168*4 - 1;
 8001ed6:	4b29      	ldr	r3, [pc, #164]	@ (8001f7c <MX_TIM4_Init+0xe8>)
 8001ed8:	f240 229f 	movw	r2, #671	@ 0x29f
 8001edc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ede:	4b27      	ldr	r3, [pc, #156]	@ (8001f7c <MX_TIM4_Init+0xe8>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ee4:	4b25      	ldr	r3, [pc, #148]	@ (8001f7c <MX_TIM4_Init+0xe8>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001eea:	4824      	ldr	r0, [pc, #144]	@ (8001f7c <MX_TIM4_Init+0xe8>)
 8001eec:	f003 ff82 	bl	8005df4 <HAL_TIM_Base_Init>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001ef6:	f7ff fd0d 	bl	8001914 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001efa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001efe:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001f00:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f04:	4619      	mov	r1, r3
 8001f06:	481d      	ldr	r0, [pc, #116]	@ (8001f7c <MX_TIM4_Init+0xe8>)
 8001f08:	f004 fc54 	bl	80067b4 <HAL_TIM_ConfigClockSource>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001f12:	f7ff fcff 	bl	8001914 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001f16:	4819      	ldr	r0, [pc, #100]	@ (8001f7c <MX_TIM4_Init+0xe8>)
 8001f18:	f004 f82c 	bl	8005f74 <HAL_TIM_PWM_Init>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001f22:	f7ff fcf7 	bl	8001914 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8001f26:	2370      	movs	r3, #112	@ 0x70
 8001f28:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001f2e:	f107 0320 	add.w	r3, r7, #32
 8001f32:	4619      	mov	r1, r3
 8001f34:	4811      	ldr	r0, [pc, #68]	@ (8001f7c <MX_TIM4_Init+0xe8>)
 8001f36:	f005 f83d 	bl	8006fb4 <HAL_TIMEx_MasterConfigSynchronization>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d001      	beq.n	8001f44 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001f40:	f7ff fce8 	bl	8001914 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f44:	2360      	movs	r3, #96	@ 0x60
 8001f46:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 84*4;
 8001f48:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001f4c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f52:	2300      	movs	r3, #0
 8001f54:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001f56:	1d3b      	adds	r3, r7, #4
 8001f58:	220c      	movs	r2, #12
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	4807      	ldr	r0, [pc, #28]	@ (8001f7c <MX_TIM4_Init+0xe8>)
 8001f5e:	f004 fb67 	bl	8006630 <HAL_TIM_PWM_ConfigChannel>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001f68:	f7ff fcd4 	bl	8001914 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001f6c:	4803      	ldr	r0, [pc, #12]	@ (8001f7c <MX_TIM4_Init+0xe8>)
 8001f6e:	f000 fb63 	bl	8002638 <HAL_TIM_MspPostInit>

}
 8001f72:	bf00      	nop
 8001f74:	3738      	adds	r7, #56	@ 0x38
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	200005fc 	.word	0x200005fc
 8001f80:	40000800 	.word	0x40000800

08001f84 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b08c      	sub	sp, #48	@ 0x30
 8001f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001f8a:	f107 030c 	add.w	r3, r7, #12
 8001f8e:	2224      	movs	r2, #36	@ 0x24
 8001f90:	2100      	movs	r1, #0
 8001f92:	4618      	mov	r0, r3
 8001f94:	f008 ffb3 	bl	800aefe <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f98:	1d3b      	adds	r3, r7, #4
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	601a      	str	r2, [r3, #0]
 8001f9e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001fa0:	4b20      	ldr	r3, [pc, #128]	@ (8002024 <MX_TIM5_Init+0xa0>)
 8001fa2:	4a21      	ldr	r2, [pc, #132]	@ (8002028 <MX_TIM5_Init+0xa4>)
 8001fa4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001fa6:	4b1f      	ldr	r3, [pc, #124]	@ (8002024 <MX_TIM5_Init+0xa0>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fac:	4b1d      	ldr	r3, [pc, #116]	@ (8002024 <MX_TIM5_Init+0xa0>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8001fb2:	4b1c      	ldr	r3, [pc, #112]	@ (8002024 <MX_TIM5_Init+0xa0>)
 8001fb4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001fb8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fba:	4b1a      	ldr	r3, [pc, #104]	@ (8002024 <MX_TIM5_Init+0xa0>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fc0:	4b18      	ldr	r3, [pc, #96]	@ (8002024 <MX_TIM5_Init+0xa0>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001fea:	f107 030c 	add.w	r3, r7, #12
 8001fee:	4619      	mov	r1, r3
 8001ff0:	480c      	ldr	r0, [pc, #48]	@ (8002024 <MX_TIM5_Init+0xa0>)
 8001ff2:	f004 f8e1 	bl	80061b8 <HAL_TIM_Encoder_Init>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001ffc:	f7ff fc8a 	bl	8001914 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002000:	2300      	movs	r3, #0
 8002002:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002004:	2300      	movs	r3, #0
 8002006:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002008:	1d3b      	adds	r3, r7, #4
 800200a:	4619      	mov	r1, r3
 800200c:	4805      	ldr	r0, [pc, #20]	@ (8002024 <MX_TIM5_Init+0xa0>)
 800200e:	f004 ffd1 	bl	8006fb4 <HAL_TIMEx_MasterConfigSynchronization>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8002018:	f7ff fc7c 	bl	8001914 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800201c:	bf00      	nop
 800201e:	3730      	adds	r7, #48	@ 0x30
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	20000644 	.word	0x20000644
 8002028:	40000c00 	.word	0x40000c00

0800202c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b096      	sub	sp, #88	@ 0x58
 8002030:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002032:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002036:	2200      	movs	r2, #0
 8002038:	601a      	str	r2, [r3, #0]
 800203a:	605a      	str	r2, [r3, #4]
 800203c:	609a      	str	r2, [r3, #8]
 800203e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002040:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800204a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800204e:	2200      	movs	r2, #0
 8002050:	601a      	str	r2, [r3, #0]
 8002052:	605a      	str	r2, [r3, #4]
 8002054:	609a      	str	r2, [r3, #8]
 8002056:	60da      	str	r2, [r3, #12]
 8002058:	611a      	str	r2, [r3, #16]
 800205a:	615a      	str	r2, [r3, #20]
 800205c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800205e:	1d3b      	adds	r3, r7, #4
 8002060:	2220      	movs	r2, #32
 8002062:	2100      	movs	r1, #0
 8002064:	4618      	mov	r0, r3
 8002066:	f008 ff4a 	bl	800aefe <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800206a:	4b50      	ldr	r3, [pc, #320]	@ (80021ac <MX_TIM8_Init+0x180>)
 800206c:	4a50      	ldr	r2, [pc, #320]	@ (80021b0 <MX_TIM8_Init+0x184>)
 800206e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002070:	4b4e      	ldr	r3, [pc, #312]	@ (80021ac <MX_TIM8_Init+0x180>)
 8002072:	2200      	movs	r2, #0
 8002074:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002076:	4b4d      	ldr	r3, [pc, #308]	@ (80021ac <MX_TIM8_Init+0x180>)
 8002078:	2200      	movs	r2, #0
 800207a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 10000 - 1;
 800207c:	4b4b      	ldr	r3, [pc, #300]	@ (80021ac <MX_TIM8_Init+0x180>)
 800207e:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002082:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002084:	4b49      	ldr	r3, [pc, #292]	@ (80021ac <MX_TIM8_Init+0x180>)
 8002086:	2200      	movs	r2, #0
 8002088:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800208a:	4b48      	ldr	r3, [pc, #288]	@ (80021ac <MX_TIM8_Init+0x180>)
 800208c:	2200      	movs	r2, #0
 800208e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002090:	4b46      	ldr	r3, [pc, #280]	@ (80021ac <MX_TIM8_Init+0x180>)
 8002092:	2200      	movs	r2, #0
 8002094:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002096:	4845      	ldr	r0, [pc, #276]	@ (80021ac <MX_TIM8_Init+0x180>)
 8002098:	f003 feac 	bl	8005df4 <HAL_TIM_Base_Init>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80020a2:	f7ff fc37 	bl	8001914 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80020ac:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80020b0:	4619      	mov	r1, r3
 80020b2:	483e      	ldr	r0, [pc, #248]	@ (80021ac <MX_TIM8_Init+0x180>)
 80020b4:	f004 fb7e 	bl	80067b4 <HAL_TIM_ConfigClockSource>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80020be:	f7ff fc29 	bl	8001914 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80020c2:	483a      	ldr	r0, [pc, #232]	@ (80021ac <MX_TIM8_Init+0x180>)
 80020c4:	f003 ff56 	bl	8005f74 <HAL_TIM_PWM_Init>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80020ce:	f7ff fc21 	bl	8001914 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020d2:	2300      	movs	r3, #0
 80020d4:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020d6:	2300      	movs	r3, #0
 80020d8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80020da:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80020de:	4619      	mov	r1, r3
 80020e0:	4832      	ldr	r0, [pc, #200]	@ (80021ac <MX_TIM8_Init+0x180>)
 80020e2:	f004 ff67 	bl	8006fb4 <HAL_TIMEx_MasterConfigSynchronization>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d001      	beq.n	80020f0 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80020ec:	f7ff fc12 	bl	8001914 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020f0:	2360      	movs	r3, #96	@ 0x60
 80020f2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80020f4:	2300      	movs	r3, #0
 80020f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020f8:	2300      	movs	r3, #0
 80020fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80020fc:	2300      	movs	r3, #0
 80020fe:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002100:	2300      	movs	r3, #0
 8002102:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002104:	2300      	movs	r3, #0
 8002106:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002108:	2300      	movs	r3, #0
 800210a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800210c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002110:	2200      	movs	r2, #0
 8002112:	4619      	mov	r1, r3
 8002114:	4825      	ldr	r0, [pc, #148]	@ (80021ac <MX_TIM8_Init+0x180>)
 8002116:	f004 fa8b 	bl	8006630 <HAL_TIM_PWM_ConfigChannel>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8002120:	f7ff fbf8 	bl	8001914 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002124:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002128:	2204      	movs	r2, #4
 800212a:	4619      	mov	r1, r3
 800212c:	481f      	ldr	r0, [pc, #124]	@ (80021ac <MX_TIM8_Init+0x180>)
 800212e:	f004 fa7f 	bl	8006630 <HAL_TIM_PWM_ConfigChannel>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d001      	beq.n	800213c <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8002138:	f7ff fbec 	bl	8001914 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800213c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002140:	2208      	movs	r2, #8
 8002142:	4619      	mov	r1, r3
 8002144:	4819      	ldr	r0, [pc, #100]	@ (80021ac <MX_TIM8_Init+0x180>)
 8002146:	f004 fa73 	bl	8006630 <HAL_TIM_PWM_ConfigChannel>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d001      	beq.n	8002154 <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 8002150:	f7ff fbe0 	bl	8001914 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002154:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002158:	220c      	movs	r2, #12
 800215a:	4619      	mov	r1, r3
 800215c:	4813      	ldr	r0, [pc, #76]	@ (80021ac <MX_TIM8_Init+0x180>)
 800215e:	f004 fa67 	bl	8006630 <HAL_TIM_PWM_ConfigChannel>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 8002168:	f7ff fbd4 	bl	8001914 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800216c:	2300      	movs	r3, #0
 800216e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002170:	2300      	movs	r3, #0
 8002172:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002174:	2300      	movs	r3, #0
 8002176:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002178:	2300      	movs	r3, #0
 800217a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800217c:	2300      	movs	r3, #0
 800217e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002180:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002184:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002186:	2300      	movs	r3, #0
 8002188:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800218a:	1d3b      	adds	r3, r7, #4
 800218c:	4619      	mov	r1, r3
 800218e:	4807      	ldr	r0, [pc, #28]	@ (80021ac <MX_TIM8_Init+0x180>)
 8002190:	f004 ff8c 	bl	80070ac <HAL_TIMEx_ConfigBreakDeadTime>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <MX_TIM8_Init+0x172>
  {
    Error_Handler();
 800219a:	f7ff fbbb 	bl	8001914 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800219e:	4803      	ldr	r0, [pc, #12]	@ (80021ac <MX_TIM8_Init+0x180>)
 80021a0:	f000 fa4a 	bl	8002638 <HAL_TIM_MspPostInit>

}
 80021a4:	bf00      	nop
 80021a6:	3758      	adds	r7, #88	@ 0x58
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	2000068c 	.word	0x2000068c
 80021b0:	40010400 	.word	0x40010400

080021b4 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b08c      	sub	sp, #48	@ 0x30
 80021b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021ba:	f107 0320 	add.w	r3, r7, #32
 80021be:	2200      	movs	r2, #0
 80021c0:	601a      	str	r2, [r3, #0]
 80021c2:	605a      	str	r2, [r3, #4]
 80021c4:	609a      	str	r2, [r3, #8]
 80021c6:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021c8:	1d3b      	adds	r3, r7, #4
 80021ca:	2200      	movs	r2, #0
 80021cc:	601a      	str	r2, [r3, #0]
 80021ce:	605a      	str	r2, [r3, #4]
 80021d0:	609a      	str	r2, [r3, #8]
 80021d2:	60da      	str	r2, [r3, #12]
 80021d4:	611a      	str	r2, [r3, #16]
 80021d6:	615a      	str	r2, [r3, #20]
 80021d8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80021da:	4b2b      	ldr	r3, [pc, #172]	@ (8002288 <MX_TIM9_Init+0xd4>)
 80021dc:	4a2b      	ldr	r2, [pc, #172]	@ (800228c <MX_TIM9_Init+0xd8>)
 80021de:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 336 - 1;
 80021e0:	4b29      	ldr	r3, [pc, #164]	@ (8002288 <MX_TIM9_Init+0xd4>)
 80021e2:	f240 124f 	movw	r2, #335	@ 0x14f
 80021e6:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021e8:	4b27      	ldr	r3, [pc, #156]	@ (8002288 <MX_TIM9_Init+0xd4>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 10000 - 1;
 80021ee:	4b26      	ldr	r3, [pc, #152]	@ (8002288 <MX_TIM9_Init+0xd4>)
 80021f0:	f242 720f 	movw	r2, #9999	@ 0x270f
 80021f4:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021f6:	4b24      	ldr	r3, [pc, #144]	@ (8002288 <MX_TIM9_Init+0xd4>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021fc:	4b22      	ldr	r3, [pc, #136]	@ (8002288 <MX_TIM9_Init+0xd4>)
 80021fe:	2200      	movs	r2, #0
 8002200:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8002202:	4821      	ldr	r0, [pc, #132]	@ (8002288 <MX_TIM9_Init+0xd4>)
 8002204:	f003 fdf6 	bl	8005df4 <HAL_TIM_Base_Init>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <MX_TIM9_Init+0x5e>
  {
    Error_Handler();
 800220e:	f7ff fb81 	bl	8001914 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002212:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002216:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8002218:	f107 0320 	add.w	r3, r7, #32
 800221c:	4619      	mov	r1, r3
 800221e:	481a      	ldr	r0, [pc, #104]	@ (8002288 <MX_TIM9_Init+0xd4>)
 8002220:	f004 fac8 	bl	80067b4 <HAL_TIM_ConfigClockSource>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <MX_TIM9_Init+0x7a>
  {
    Error_Handler();
 800222a:	f7ff fb73 	bl	8001914 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 800222e:	4816      	ldr	r0, [pc, #88]	@ (8002288 <MX_TIM9_Init+0xd4>)
 8002230:	f003 fea0 	bl	8005f74 <HAL_TIM_PWM_Init>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 800223a:	f7ff fb6b 	bl	8001914 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800223e:	2360      	movs	r3, #96	@ 0x60
 8002240:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002242:	2300      	movs	r3, #0
 8002244:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002246:	2300      	movs	r3, #0
 8002248:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800224a:	2300      	movs	r3, #0
 800224c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800224e:	1d3b      	adds	r3, r7, #4
 8002250:	2200      	movs	r2, #0
 8002252:	4619      	mov	r1, r3
 8002254:	480c      	ldr	r0, [pc, #48]	@ (8002288 <MX_TIM9_Init+0xd4>)
 8002256:	f004 f9eb 	bl	8006630 <HAL_TIM_PWM_ConfigChannel>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d001      	beq.n	8002264 <MX_TIM9_Init+0xb0>
  {
    Error_Handler();
 8002260:	f7ff fb58 	bl	8001914 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002264:	1d3b      	adds	r3, r7, #4
 8002266:	2204      	movs	r2, #4
 8002268:	4619      	mov	r1, r3
 800226a:	4807      	ldr	r0, [pc, #28]	@ (8002288 <MX_TIM9_Init+0xd4>)
 800226c:	f004 f9e0 	bl	8006630 <HAL_TIM_PWM_ConfigChannel>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <MX_TIM9_Init+0xc6>
  {
    Error_Handler();
 8002276:	f7ff fb4d 	bl	8001914 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 800227a:	4803      	ldr	r0, [pc, #12]	@ (8002288 <MX_TIM9_Init+0xd4>)
 800227c:	f000 f9dc 	bl	8002638 <HAL_TIM_MspPostInit>

}
 8002280:	bf00      	nop
 8002282:	3730      	adds	r7, #48	@ 0x30
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	200006d4 	.word	0x200006d4
 800228c:	40014000 	.word	0x40014000

08002290 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b08c      	sub	sp, #48	@ 0x30
 8002294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002296:	f107 0320 	add.w	r3, r7, #32
 800229a:	2200      	movs	r2, #0
 800229c:	601a      	str	r2, [r3, #0]
 800229e:	605a      	str	r2, [r3, #4]
 80022a0:	609a      	str	r2, [r3, #8]
 80022a2:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022a4:	1d3b      	adds	r3, r7, #4
 80022a6:	2200      	movs	r2, #0
 80022a8:	601a      	str	r2, [r3, #0]
 80022aa:	605a      	str	r2, [r3, #4]
 80022ac:	609a      	str	r2, [r3, #8]
 80022ae:	60da      	str	r2, [r3, #12]
 80022b0:	611a      	str	r2, [r3, #16]
 80022b2:	615a      	str	r2, [r3, #20]
 80022b4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80022b6:	4b2b      	ldr	r3, [pc, #172]	@ (8002364 <MX_TIM12_Init+0xd4>)
 80022b8:	4a2b      	ldr	r2, [pc, #172]	@ (8002368 <MX_TIM12_Init+0xd8>)
 80022ba:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 168 - 1;
 80022bc:	4b29      	ldr	r3, [pc, #164]	@ (8002364 <MX_TIM12_Init+0xd4>)
 80022be:	22a7      	movs	r2, #167	@ 0xa7
 80022c0:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022c2:	4b28      	ldr	r3, [pc, #160]	@ (8002364 <MX_TIM12_Init+0xd4>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 10000 - 1;
 80022c8:	4b26      	ldr	r3, [pc, #152]	@ (8002364 <MX_TIM12_Init+0xd4>)
 80022ca:	f242 720f 	movw	r2, #9999	@ 0x270f
 80022ce:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022d0:	4b24      	ldr	r3, [pc, #144]	@ (8002364 <MX_TIM12_Init+0xd4>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022d6:	4b23      	ldr	r3, [pc, #140]	@ (8002364 <MX_TIM12_Init+0xd4>)
 80022d8:	2200      	movs	r2, #0
 80022da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 80022dc:	4821      	ldr	r0, [pc, #132]	@ (8002364 <MX_TIM12_Init+0xd4>)
 80022de:	f003 fd89 	bl	8005df4 <HAL_TIM_Base_Init>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 80022e8:	f7ff fb14 	bl	8001914 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022f0:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 80022f2:	f107 0320 	add.w	r3, r7, #32
 80022f6:	4619      	mov	r1, r3
 80022f8:	481a      	ldr	r0, [pc, #104]	@ (8002364 <MX_TIM12_Init+0xd4>)
 80022fa:	f004 fa5b 	bl	80067b4 <HAL_TIM_ConfigClockSource>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d001      	beq.n	8002308 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 8002304:	f7ff fb06 	bl	8001914 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8002308:	4816      	ldr	r0, [pc, #88]	@ (8002364 <MX_TIM12_Init+0xd4>)
 800230a:	f003 fe33 	bl	8005f74 <HAL_TIM_PWM_Init>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 8002314:	f7ff fafe 	bl	8001914 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002318:	2360      	movs	r3, #96	@ 0x60
 800231a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800231c:	2300      	movs	r3, #0
 800231e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002320:	2300      	movs	r3, #0
 8002322:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002324:	2300      	movs	r3, #0
 8002326:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002328:	1d3b      	adds	r3, r7, #4
 800232a:	2200      	movs	r2, #0
 800232c:	4619      	mov	r1, r3
 800232e:	480d      	ldr	r0, [pc, #52]	@ (8002364 <MX_TIM12_Init+0xd4>)
 8002330:	f004 f97e 	bl	8006630 <HAL_TIM_PWM_ConfigChannel>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 800233a:	f7ff faeb 	bl	8001914 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800233e:	1d3b      	adds	r3, r7, #4
 8002340:	2204      	movs	r2, #4
 8002342:	4619      	mov	r1, r3
 8002344:	4807      	ldr	r0, [pc, #28]	@ (8002364 <MX_TIM12_Init+0xd4>)
 8002346:	f004 f973 	bl	8006630 <HAL_TIM_PWM_ConfigChannel>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <MX_TIM12_Init+0xc4>
  {
    Error_Handler();
 8002350:	f7ff fae0 	bl	8001914 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8002354:	4803      	ldr	r0, [pc, #12]	@ (8002364 <MX_TIM12_Init+0xd4>)
 8002356:	f000 f96f 	bl	8002638 <HAL_TIM_MspPostInit>

}
 800235a:	bf00      	nop
 800235c:	3730      	adds	r7, #48	@ 0x30
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	2000071c 	.word	0x2000071c
 8002368:	40001800 	.word	0x40001800

0800236c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b088      	sub	sp, #32
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a36      	ldr	r2, [pc, #216]	@ (8002454 <HAL_TIM_Base_MspInit+0xe8>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d10e      	bne.n	800239c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800237e:	2300      	movs	r3, #0
 8002380:	61fb      	str	r3, [r7, #28]
 8002382:	4b35      	ldr	r3, [pc, #212]	@ (8002458 <HAL_TIM_Base_MspInit+0xec>)
 8002384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002386:	4a34      	ldr	r2, [pc, #208]	@ (8002458 <HAL_TIM_Base_MspInit+0xec>)
 8002388:	f043 0301 	orr.w	r3, r3, #1
 800238c:	6453      	str	r3, [r2, #68]	@ 0x44
 800238e:	4b32      	ldr	r3, [pc, #200]	@ (8002458 <HAL_TIM_Base_MspInit+0xec>)
 8002390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	61fb      	str	r3, [r7, #28]
 8002398:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM12_CLK_ENABLE();
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 800239a:	e056      	b.n	800244a <HAL_TIM_Base_MspInit+0xde>
  else if(tim_baseHandle->Instance==TIM4)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a2e      	ldr	r2, [pc, #184]	@ (800245c <HAL_TIM_Base_MspInit+0xf0>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d116      	bne.n	80023d4 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80023a6:	2300      	movs	r3, #0
 80023a8:	61bb      	str	r3, [r7, #24]
 80023aa:	4b2b      	ldr	r3, [pc, #172]	@ (8002458 <HAL_TIM_Base_MspInit+0xec>)
 80023ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ae:	4a2a      	ldr	r2, [pc, #168]	@ (8002458 <HAL_TIM_Base_MspInit+0xec>)
 80023b0:	f043 0304 	orr.w	r3, r3, #4
 80023b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80023b6:	4b28      	ldr	r3, [pc, #160]	@ (8002458 <HAL_TIM_Base_MspInit+0xec>)
 80023b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ba:	f003 0304 	and.w	r3, r3, #4
 80023be:	61bb      	str	r3, [r7, #24]
 80023c0:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80023c2:	2200      	movs	r2, #0
 80023c4:	2100      	movs	r1, #0
 80023c6:	201e      	movs	r0, #30
 80023c8:	f001 fb87 	bl	8003ada <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80023cc:	201e      	movs	r0, #30
 80023ce:	f001 fba0 	bl	8003b12 <HAL_NVIC_EnableIRQ>
}
 80023d2:	e03a      	b.n	800244a <HAL_TIM_Base_MspInit+0xde>
  else if(tim_baseHandle->Instance==TIM8)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a21      	ldr	r2, [pc, #132]	@ (8002460 <HAL_TIM_Base_MspInit+0xf4>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d10e      	bne.n	80023fc <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80023de:	2300      	movs	r3, #0
 80023e0:	617b      	str	r3, [r7, #20]
 80023e2:	4b1d      	ldr	r3, [pc, #116]	@ (8002458 <HAL_TIM_Base_MspInit+0xec>)
 80023e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023e6:	4a1c      	ldr	r2, [pc, #112]	@ (8002458 <HAL_TIM_Base_MspInit+0xec>)
 80023e8:	f043 0302 	orr.w	r3, r3, #2
 80023ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80023ee:	4b1a      	ldr	r3, [pc, #104]	@ (8002458 <HAL_TIM_Base_MspInit+0xec>)
 80023f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	617b      	str	r3, [r7, #20]
 80023f8:	697b      	ldr	r3, [r7, #20]
}
 80023fa:	e026      	b.n	800244a <HAL_TIM_Base_MspInit+0xde>
  else if(tim_baseHandle->Instance==TIM9)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a18      	ldr	r2, [pc, #96]	@ (8002464 <HAL_TIM_Base_MspInit+0xf8>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d10e      	bne.n	8002424 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002406:	2300      	movs	r3, #0
 8002408:	613b      	str	r3, [r7, #16]
 800240a:	4b13      	ldr	r3, [pc, #76]	@ (8002458 <HAL_TIM_Base_MspInit+0xec>)
 800240c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800240e:	4a12      	ldr	r2, [pc, #72]	@ (8002458 <HAL_TIM_Base_MspInit+0xec>)
 8002410:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002414:	6453      	str	r3, [r2, #68]	@ 0x44
 8002416:	4b10      	ldr	r3, [pc, #64]	@ (8002458 <HAL_TIM_Base_MspInit+0xec>)
 8002418:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800241a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800241e:	613b      	str	r3, [r7, #16]
 8002420:	693b      	ldr	r3, [r7, #16]
}
 8002422:	e012      	b.n	800244a <HAL_TIM_Base_MspInit+0xde>
  else if(tim_baseHandle->Instance==TIM12)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a0f      	ldr	r2, [pc, #60]	@ (8002468 <HAL_TIM_Base_MspInit+0xfc>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d10d      	bne.n	800244a <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800242e:	2300      	movs	r3, #0
 8002430:	60fb      	str	r3, [r7, #12]
 8002432:	4b09      	ldr	r3, [pc, #36]	@ (8002458 <HAL_TIM_Base_MspInit+0xec>)
 8002434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002436:	4a08      	ldr	r2, [pc, #32]	@ (8002458 <HAL_TIM_Base_MspInit+0xec>)
 8002438:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800243c:	6413      	str	r3, [r2, #64]	@ 0x40
 800243e:	4b06      	ldr	r3, [pc, #24]	@ (8002458 <HAL_TIM_Base_MspInit+0xec>)
 8002440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002442:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002446:	60fb      	str	r3, [r7, #12]
 8002448:	68fb      	ldr	r3, [r7, #12]
}
 800244a:	bf00      	nop
 800244c:	3720      	adds	r7, #32
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	40010000 	.word	0x40010000
 8002458:	40023800 	.word	0x40023800
 800245c:	40000800 	.word	0x40000800
 8002460:	40010400 	.word	0x40010400
 8002464:	40014000 	.word	0x40014000
 8002468:	40001800 	.word	0x40001800

0800246c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b08e      	sub	sp, #56	@ 0x38
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002474:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002478:	2200      	movs	r2, #0
 800247a:	601a      	str	r2, [r3, #0]
 800247c:	605a      	str	r2, [r3, #4]
 800247e:	609a      	str	r2, [r3, #8]
 8002480:	60da      	str	r2, [r3, #12]
 8002482:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800248c:	d152      	bne.n	8002534 <HAL_TIM_Encoder_MspInit+0xc8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800248e:	2300      	movs	r3, #0
 8002490:	623b      	str	r3, [r7, #32]
 8002492:	4b64      	ldr	r3, [pc, #400]	@ (8002624 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8002494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002496:	4a63      	ldr	r2, [pc, #396]	@ (8002624 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8002498:	f043 0301 	orr.w	r3, r3, #1
 800249c:	6413      	str	r3, [r2, #64]	@ 0x40
 800249e:	4b61      	ldr	r3, [pc, #388]	@ (8002624 <HAL_TIM_Encoder_MspInit+0x1b8>)
 80024a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a2:	f003 0301 	and.w	r3, r3, #1
 80024a6:	623b      	str	r3, [r7, #32]
 80024a8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024aa:	2300      	movs	r3, #0
 80024ac:	61fb      	str	r3, [r7, #28]
 80024ae:	4b5d      	ldr	r3, [pc, #372]	@ (8002624 <HAL_TIM_Encoder_MspInit+0x1b8>)
 80024b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024b2:	4a5c      	ldr	r2, [pc, #368]	@ (8002624 <HAL_TIM_Encoder_MspInit+0x1b8>)
 80024b4:	f043 0301 	orr.w	r3, r3, #1
 80024b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80024ba:	4b5a      	ldr	r3, [pc, #360]	@ (8002624 <HAL_TIM_Encoder_MspInit+0x1b8>)
 80024bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	61fb      	str	r3, [r7, #28]
 80024c4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024c6:	2300      	movs	r3, #0
 80024c8:	61bb      	str	r3, [r7, #24]
 80024ca:	4b56      	ldr	r3, [pc, #344]	@ (8002624 <HAL_TIM_Encoder_MspInit+0x1b8>)
 80024cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ce:	4a55      	ldr	r2, [pc, #340]	@ (8002624 <HAL_TIM_Encoder_MspInit+0x1b8>)
 80024d0:	f043 0302 	orr.w	r3, r3, #2
 80024d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80024d6:	4b53      	ldr	r3, [pc, #332]	@ (8002624 <HAL_TIM_Encoder_MspInit+0x1b8>)
 80024d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024da:	f003 0302 	and.w	r3, r3, #2
 80024de:	61bb      	str	r3, [r7, #24]
 80024e0:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80024e2:	2320      	movs	r3, #32
 80024e4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e6:	2302      	movs	r3, #2
 80024e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024ea:	2301      	movs	r3, #1
 80024ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ee:	2300      	movs	r3, #0
 80024f0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80024f2:	2301      	movs	r3, #1
 80024f4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024fa:	4619      	mov	r1, r3
 80024fc:	484a      	ldr	r0, [pc, #296]	@ (8002628 <HAL_TIM_Encoder_MspInit+0x1bc>)
 80024fe:	f001 ff25 	bl	800434c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002502:	2308      	movs	r3, #8
 8002504:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002506:	2302      	movs	r3, #2
 8002508:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800250a:	2301      	movs	r3, #1
 800250c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800250e:	2300      	movs	r3, #0
 8002510:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002512:	2301      	movs	r3, #1
 8002514:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002516:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800251a:	4619      	mov	r1, r3
 800251c:	4843      	ldr	r0, [pc, #268]	@ (800262c <HAL_TIM_Encoder_MspInit+0x1c0>)
 800251e:	f001 ff15 	bl	800434c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002522:	2200      	movs	r2, #0
 8002524:	2100      	movs	r1, #0
 8002526:	201c      	movs	r0, #28
 8002528:	f001 fad7 	bl	8003ada <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800252c:	201c      	movs	r0, #28
 800252e:	f001 faf0 	bl	8003b12 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8002532:	e072      	b.n	800261a <HAL_TIM_Encoder_MspInit+0x1ae>
  else if(tim_encoderHandle->Instance==TIM3)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a3d      	ldr	r2, [pc, #244]	@ (8002630 <HAL_TIM_Encoder_MspInit+0x1c4>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d134      	bne.n	80025a8 <HAL_TIM_Encoder_MspInit+0x13c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800253e:	2300      	movs	r3, #0
 8002540:	617b      	str	r3, [r7, #20]
 8002542:	4b38      	ldr	r3, [pc, #224]	@ (8002624 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8002544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002546:	4a37      	ldr	r2, [pc, #220]	@ (8002624 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8002548:	f043 0302 	orr.w	r3, r3, #2
 800254c:	6413      	str	r3, [r2, #64]	@ 0x40
 800254e:	4b35      	ldr	r3, [pc, #212]	@ (8002624 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8002550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002552:	f003 0302 	and.w	r3, r3, #2
 8002556:	617b      	str	r3, [r7, #20]
 8002558:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800255a:	2300      	movs	r3, #0
 800255c:	613b      	str	r3, [r7, #16]
 800255e:	4b31      	ldr	r3, [pc, #196]	@ (8002624 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8002560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002562:	4a30      	ldr	r2, [pc, #192]	@ (8002624 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8002564:	f043 0302 	orr.w	r3, r3, #2
 8002568:	6313      	str	r3, [r2, #48]	@ 0x30
 800256a:	4b2e      	ldr	r3, [pc, #184]	@ (8002624 <HAL_TIM_Encoder_MspInit+0x1b8>)
 800256c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800256e:	f003 0302 	and.w	r3, r3, #2
 8002572:	613b      	str	r3, [r7, #16]
 8002574:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002576:	2330      	movs	r3, #48	@ 0x30
 8002578:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800257a:	2302      	movs	r3, #2
 800257c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257e:	2300      	movs	r3, #0
 8002580:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002582:	2300      	movs	r3, #0
 8002584:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002586:	2302      	movs	r3, #2
 8002588:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800258a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800258e:	4619      	mov	r1, r3
 8002590:	4826      	ldr	r0, [pc, #152]	@ (800262c <HAL_TIM_Encoder_MspInit+0x1c0>)
 8002592:	f001 fedb 	bl	800434c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002596:	2200      	movs	r2, #0
 8002598:	2100      	movs	r1, #0
 800259a:	201d      	movs	r0, #29
 800259c:	f001 fa9d 	bl	8003ada <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80025a0:	201d      	movs	r0, #29
 80025a2:	f001 fab6 	bl	8003b12 <HAL_NVIC_EnableIRQ>
}
 80025a6:	e038      	b.n	800261a <HAL_TIM_Encoder_MspInit+0x1ae>
  else if(tim_encoderHandle->Instance==TIM5)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a21      	ldr	r2, [pc, #132]	@ (8002634 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d133      	bne.n	800261a <HAL_TIM_Encoder_MspInit+0x1ae>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80025b2:	2300      	movs	r3, #0
 80025b4:	60fb      	str	r3, [r7, #12]
 80025b6:	4b1b      	ldr	r3, [pc, #108]	@ (8002624 <HAL_TIM_Encoder_MspInit+0x1b8>)
 80025b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ba:	4a1a      	ldr	r2, [pc, #104]	@ (8002624 <HAL_TIM_Encoder_MspInit+0x1b8>)
 80025bc:	f043 0308 	orr.w	r3, r3, #8
 80025c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80025c2:	4b18      	ldr	r3, [pc, #96]	@ (8002624 <HAL_TIM_Encoder_MspInit+0x1b8>)
 80025c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025c6:	f003 0308 	and.w	r3, r3, #8
 80025ca:	60fb      	str	r3, [r7, #12]
 80025cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025ce:	2300      	movs	r3, #0
 80025d0:	60bb      	str	r3, [r7, #8]
 80025d2:	4b14      	ldr	r3, [pc, #80]	@ (8002624 <HAL_TIM_Encoder_MspInit+0x1b8>)
 80025d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d6:	4a13      	ldr	r2, [pc, #76]	@ (8002624 <HAL_TIM_Encoder_MspInit+0x1b8>)
 80025d8:	f043 0301 	orr.w	r3, r3, #1
 80025dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80025de:	4b11      	ldr	r3, [pc, #68]	@ (8002624 <HAL_TIM_Encoder_MspInit+0x1b8>)
 80025e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025e2:	f003 0301 	and.w	r3, r3, #1
 80025e6:	60bb      	str	r3, [r7, #8]
 80025e8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80025ea:	2303      	movs	r3, #3
 80025ec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ee:	2302      	movs	r3, #2
 80025f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025f2:	2301      	movs	r3, #1
 80025f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025f6:	2300      	movs	r3, #0
 80025f8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80025fa:	2302      	movs	r3, #2
 80025fc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002602:	4619      	mov	r1, r3
 8002604:	4808      	ldr	r0, [pc, #32]	@ (8002628 <HAL_TIM_Encoder_MspInit+0x1bc>)
 8002606:	f001 fea1 	bl	800434c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800260a:	2200      	movs	r2, #0
 800260c:	2100      	movs	r1, #0
 800260e:	2032      	movs	r0, #50	@ 0x32
 8002610:	f001 fa63 	bl	8003ada <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002614:	2032      	movs	r0, #50	@ 0x32
 8002616:	f001 fa7c 	bl	8003b12 <HAL_NVIC_EnableIRQ>
}
 800261a:	bf00      	nop
 800261c:	3738      	adds	r7, #56	@ 0x38
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	40023800 	.word	0x40023800
 8002628:	40020000 	.word	0x40020000
 800262c:	40020400 	.word	0x40020400
 8002630:	40000400 	.word	0x40000400
 8002634:	40000c00 	.word	0x40000c00

08002638 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b08c      	sub	sp, #48	@ 0x30
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002640:	f107 031c 	add.w	r3, r7, #28
 8002644:	2200      	movs	r2, #0
 8002646:	601a      	str	r2, [r3, #0]
 8002648:	605a      	str	r2, [r3, #4]
 800264a:	609a      	str	r2, [r3, #8]
 800264c:	60da      	str	r2, [r3, #12]
 800264e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a5c      	ldr	r2, [pc, #368]	@ (80027c8 <HAL_TIM_MspPostInit+0x190>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d11f      	bne.n	800269a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800265a:	2300      	movs	r3, #0
 800265c:	61bb      	str	r3, [r7, #24]
 800265e:	4b5b      	ldr	r3, [pc, #364]	@ (80027cc <HAL_TIM_MspPostInit+0x194>)
 8002660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002662:	4a5a      	ldr	r2, [pc, #360]	@ (80027cc <HAL_TIM_MspPostInit+0x194>)
 8002664:	f043 0310 	orr.w	r3, r3, #16
 8002668:	6313      	str	r3, [r2, #48]	@ 0x30
 800266a:	4b58      	ldr	r3, [pc, #352]	@ (80027cc <HAL_TIM_MspPostInit+0x194>)
 800266c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800266e:	f003 0310 	and.w	r3, r3, #16
 8002672:	61bb      	str	r3, [r7, #24]
 8002674:	69bb      	ldr	r3, [r7, #24]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8002676:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 800267a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800267c:	2302      	movs	r3, #2
 800267e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002680:	2300      	movs	r3, #0
 8002682:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002684:	2300      	movs	r3, #0
 8002686:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002688:	2301      	movs	r3, #1
 800268a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800268c:	f107 031c 	add.w	r3, r7, #28
 8002690:	4619      	mov	r1, r3
 8002692:	484f      	ldr	r0, [pc, #316]	@ (80027d0 <HAL_TIM_MspPostInit+0x198>)
 8002694:	f001 fe5a 	bl	800434c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8002698:	e091      	b.n	80027be <HAL_TIM_MspPostInit+0x186>
  else if(timHandle->Instance==TIM4)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a4d      	ldr	r2, [pc, #308]	@ (80027d4 <HAL_TIM_MspPostInit+0x19c>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d11f      	bne.n	80026e4 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026a4:	2300      	movs	r3, #0
 80026a6:	617b      	str	r3, [r7, #20]
 80026a8:	4b48      	ldr	r3, [pc, #288]	@ (80027cc <HAL_TIM_MspPostInit+0x194>)
 80026aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ac:	4a47      	ldr	r2, [pc, #284]	@ (80027cc <HAL_TIM_MspPostInit+0x194>)
 80026ae:	f043 0302 	orr.w	r3, r3, #2
 80026b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80026b4:	4b45      	ldr	r3, [pc, #276]	@ (80027cc <HAL_TIM_MspPostInit+0x194>)
 80026b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026b8:	f003 0302 	and.w	r3, r3, #2
 80026bc:	617b      	str	r3, [r7, #20]
 80026be:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80026c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80026c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c6:	2302      	movs	r3, #2
 80026c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ca:	2300      	movs	r3, #0
 80026cc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ce:	2300      	movs	r3, #0
 80026d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80026d2:	2302      	movs	r3, #2
 80026d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026d6:	f107 031c 	add.w	r3, r7, #28
 80026da:	4619      	mov	r1, r3
 80026dc:	483e      	ldr	r0, [pc, #248]	@ (80027d8 <HAL_TIM_MspPostInit+0x1a0>)
 80026de:	f001 fe35 	bl	800434c <HAL_GPIO_Init>
}
 80026e2:	e06c      	b.n	80027be <HAL_TIM_MspPostInit+0x186>
  else if(timHandle->Instance==TIM8)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a3c      	ldr	r2, [pc, #240]	@ (80027dc <HAL_TIM_MspPostInit+0x1a4>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d11f      	bne.n	800272e <HAL_TIM_MspPostInit+0xf6>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026ee:	2300      	movs	r3, #0
 80026f0:	613b      	str	r3, [r7, #16]
 80026f2:	4b36      	ldr	r3, [pc, #216]	@ (80027cc <HAL_TIM_MspPostInit+0x194>)
 80026f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f6:	4a35      	ldr	r2, [pc, #212]	@ (80027cc <HAL_TIM_MspPostInit+0x194>)
 80026f8:	f043 0304 	orr.w	r3, r3, #4
 80026fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80026fe:	4b33      	ldr	r3, [pc, #204]	@ (80027cc <HAL_TIM_MspPostInit+0x194>)
 8002700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002702:	f003 0304 	and.w	r3, r3, #4
 8002706:	613b      	str	r3, [r7, #16]
 8002708:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800270a:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 800270e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002710:	2302      	movs	r3, #2
 8002712:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002714:	2300      	movs	r3, #0
 8002716:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002718:	2300      	movs	r3, #0
 800271a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800271c:	2303      	movs	r3, #3
 800271e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002720:	f107 031c 	add.w	r3, r7, #28
 8002724:	4619      	mov	r1, r3
 8002726:	482e      	ldr	r0, [pc, #184]	@ (80027e0 <HAL_TIM_MspPostInit+0x1a8>)
 8002728:	f001 fe10 	bl	800434c <HAL_GPIO_Init>
}
 800272c:	e047      	b.n	80027be <HAL_TIM_MspPostInit+0x186>
  else if(timHandle->Instance==TIM9)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a2c      	ldr	r2, [pc, #176]	@ (80027e4 <HAL_TIM_MspPostInit+0x1ac>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d11e      	bne.n	8002776 <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002738:	2300      	movs	r3, #0
 800273a:	60fb      	str	r3, [r7, #12]
 800273c:	4b23      	ldr	r3, [pc, #140]	@ (80027cc <HAL_TIM_MspPostInit+0x194>)
 800273e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002740:	4a22      	ldr	r2, [pc, #136]	@ (80027cc <HAL_TIM_MspPostInit+0x194>)
 8002742:	f043 0310 	orr.w	r3, r3, #16
 8002746:	6313      	str	r3, [r2, #48]	@ 0x30
 8002748:	4b20      	ldr	r3, [pc, #128]	@ (80027cc <HAL_TIM_MspPostInit+0x194>)
 800274a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800274c:	f003 0310 	and.w	r3, r3, #16
 8002750:	60fb      	str	r3, [r7, #12]
 8002752:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002754:	2360      	movs	r3, #96	@ 0x60
 8002756:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002758:	2302      	movs	r3, #2
 800275a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275c:	2300      	movs	r3, #0
 800275e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002760:	2300      	movs	r3, #0
 8002762:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8002764:	2303      	movs	r3, #3
 8002766:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002768:	f107 031c 	add.w	r3, r7, #28
 800276c:	4619      	mov	r1, r3
 800276e:	4818      	ldr	r0, [pc, #96]	@ (80027d0 <HAL_TIM_MspPostInit+0x198>)
 8002770:	f001 fdec 	bl	800434c <HAL_GPIO_Init>
}
 8002774:	e023      	b.n	80027be <HAL_TIM_MspPostInit+0x186>
  else if(timHandle->Instance==TIM12)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a1b      	ldr	r2, [pc, #108]	@ (80027e8 <HAL_TIM_MspPostInit+0x1b0>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d11e      	bne.n	80027be <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002780:	2300      	movs	r3, #0
 8002782:	60bb      	str	r3, [r7, #8]
 8002784:	4b11      	ldr	r3, [pc, #68]	@ (80027cc <HAL_TIM_MspPostInit+0x194>)
 8002786:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002788:	4a10      	ldr	r2, [pc, #64]	@ (80027cc <HAL_TIM_MspPostInit+0x194>)
 800278a:	f043 0302 	orr.w	r3, r3, #2
 800278e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002790:	4b0e      	ldr	r3, [pc, #56]	@ (80027cc <HAL_TIM_MspPostInit+0x194>)
 8002792:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002794:	f003 0302 	and.w	r3, r3, #2
 8002798:	60bb      	str	r3, [r7, #8]
 800279a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800279c:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80027a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a2:	2302      	movs	r3, #2
 80027a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a6:	2300      	movs	r3, #0
 80027a8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027aa:	2300      	movs	r3, #0
 80027ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80027ae:	2309      	movs	r3, #9
 80027b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027b2:	f107 031c 	add.w	r3, r7, #28
 80027b6:	4619      	mov	r1, r3
 80027b8:	4807      	ldr	r0, [pc, #28]	@ (80027d8 <HAL_TIM_MspPostInit+0x1a0>)
 80027ba:	f001 fdc7 	bl	800434c <HAL_GPIO_Init>
}
 80027be:	bf00      	nop
 80027c0:	3730      	adds	r7, #48	@ 0x30
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	40010000 	.word	0x40010000
 80027cc:	40023800 	.word	0x40023800
 80027d0:	40021000 	.word	0x40021000
 80027d4:	40000800 	.word	0x40000800
 80027d8:	40020400 	.word	0x40020400
 80027dc:	40010400 	.word	0x40010400
 80027e0:	40020800 	.word	0x40020800
 80027e4:	40014000 	.word	0x40014000
 80027e8:	40001800 	.word	0x40001800

080027ec <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80027f0:	4b11      	ldr	r3, [pc, #68]	@ (8002838 <MX_USART1_UART_Init+0x4c>)
 80027f2:	4a12      	ldr	r2, [pc, #72]	@ (800283c <MX_USART1_UART_Init+0x50>)
 80027f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80027f6:	4b10      	ldr	r3, [pc, #64]	@ (8002838 <MX_USART1_UART_Init+0x4c>)
 80027f8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80027fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80027fe:	4b0e      	ldr	r3, [pc, #56]	@ (8002838 <MX_USART1_UART_Init+0x4c>)
 8002800:	2200      	movs	r2, #0
 8002802:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002804:	4b0c      	ldr	r3, [pc, #48]	@ (8002838 <MX_USART1_UART_Init+0x4c>)
 8002806:	2200      	movs	r2, #0
 8002808:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800280a:	4b0b      	ldr	r3, [pc, #44]	@ (8002838 <MX_USART1_UART_Init+0x4c>)
 800280c:	2200      	movs	r2, #0
 800280e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002810:	4b09      	ldr	r3, [pc, #36]	@ (8002838 <MX_USART1_UART_Init+0x4c>)
 8002812:	220c      	movs	r2, #12
 8002814:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002816:	4b08      	ldr	r3, [pc, #32]	@ (8002838 <MX_USART1_UART_Init+0x4c>)
 8002818:	2200      	movs	r2, #0
 800281a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800281c:	4b06      	ldr	r3, [pc, #24]	@ (8002838 <MX_USART1_UART_Init+0x4c>)
 800281e:	2200      	movs	r2, #0
 8002820:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002822:	4805      	ldr	r0, [pc, #20]	@ (8002838 <MX_USART1_UART_Init+0x4c>)
 8002824:	f004 fca8 	bl	8007178 <HAL_UART_Init>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d001      	beq.n	8002832 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800282e:	f7ff f871 	bl	8001914 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002832:	bf00      	nop
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	20000764 	.word	0x20000764
 800283c:	40011000 	.word	0x40011000

08002840 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002844:	4b11      	ldr	r3, [pc, #68]	@ (800288c <MX_USART2_UART_Init+0x4c>)
 8002846:	4a12      	ldr	r2, [pc, #72]	@ (8002890 <MX_USART2_UART_Init+0x50>)
 8002848:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800284a:	4b10      	ldr	r3, [pc, #64]	@ (800288c <MX_USART2_UART_Init+0x4c>)
 800284c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002850:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002852:	4b0e      	ldr	r3, [pc, #56]	@ (800288c <MX_USART2_UART_Init+0x4c>)
 8002854:	2200      	movs	r2, #0
 8002856:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002858:	4b0c      	ldr	r3, [pc, #48]	@ (800288c <MX_USART2_UART_Init+0x4c>)
 800285a:	2200      	movs	r2, #0
 800285c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800285e:	4b0b      	ldr	r3, [pc, #44]	@ (800288c <MX_USART2_UART_Init+0x4c>)
 8002860:	2200      	movs	r2, #0
 8002862:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002864:	4b09      	ldr	r3, [pc, #36]	@ (800288c <MX_USART2_UART_Init+0x4c>)
 8002866:	220c      	movs	r2, #12
 8002868:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800286a:	4b08      	ldr	r3, [pc, #32]	@ (800288c <MX_USART2_UART_Init+0x4c>)
 800286c:	2200      	movs	r2, #0
 800286e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002870:	4b06      	ldr	r3, [pc, #24]	@ (800288c <MX_USART2_UART_Init+0x4c>)
 8002872:	2200      	movs	r2, #0
 8002874:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002876:	4805      	ldr	r0, [pc, #20]	@ (800288c <MX_USART2_UART_Init+0x4c>)
 8002878:	f004 fc7e 	bl	8007178 <HAL_UART_Init>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d001      	beq.n	8002886 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002882:	f7ff f847 	bl	8001914 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002886:	bf00      	nop
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	200007a8 	.word	0x200007a8
 8002890:	40004400 	.word	0x40004400

08002894 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002898:	4b11      	ldr	r3, [pc, #68]	@ (80028e0 <MX_USART3_UART_Init+0x4c>)
 800289a:	4a12      	ldr	r2, [pc, #72]	@ (80028e4 <MX_USART3_UART_Init+0x50>)
 800289c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800289e:	4b10      	ldr	r3, [pc, #64]	@ (80028e0 <MX_USART3_UART_Init+0x4c>)
 80028a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80028a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80028a6:	4b0e      	ldr	r3, [pc, #56]	@ (80028e0 <MX_USART3_UART_Init+0x4c>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80028ac:	4b0c      	ldr	r3, [pc, #48]	@ (80028e0 <MX_USART3_UART_Init+0x4c>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80028b2:	4b0b      	ldr	r3, [pc, #44]	@ (80028e0 <MX_USART3_UART_Init+0x4c>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80028b8:	4b09      	ldr	r3, [pc, #36]	@ (80028e0 <MX_USART3_UART_Init+0x4c>)
 80028ba:	220c      	movs	r2, #12
 80028bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028be:	4b08      	ldr	r3, [pc, #32]	@ (80028e0 <MX_USART3_UART_Init+0x4c>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80028c4:	4b06      	ldr	r3, [pc, #24]	@ (80028e0 <MX_USART3_UART_Init+0x4c>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80028ca:	4805      	ldr	r0, [pc, #20]	@ (80028e0 <MX_USART3_UART_Init+0x4c>)
 80028cc:	f004 fc54 	bl	8007178 <HAL_UART_Init>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d001      	beq.n	80028da <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80028d6:	f7ff f81d 	bl	8001914 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80028da:	bf00      	nop
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	200007ec 	.word	0x200007ec
 80028e4:	40004800 	.word	0x40004800

080028e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b08e      	sub	sp, #56	@ 0x38
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028f4:	2200      	movs	r2, #0
 80028f6:	601a      	str	r2, [r3, #0]
 80028f8:	605a      	str	r2, [r3, #4]
 80028fa:	609a      	str	r2, [r3, #8]
 80028fc:	60da      	str	r2, [r3, #12]
 80028fe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a50      	ldr	r2, [pc, #320]	@ (8002a48 <HAL_UART_MspInit+0x160>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d135      	bne.n	8002976 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800290a:	2300      	movs	r3, #0
 800290c:	623b      	str	r3, [r7, #32]
 800290e:	4b4f      	ldr	r3, [pc, #316]	@ (8002a4c <HAL_UART_MspInit+0x164>)
 8002910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002912:	4a4e      	ldr	r2, [pc, #312]	@ (8002a4c <HAL_UART_MspInit+0x164>)
 8002914:	f043 0310 	orr.w	r3, r3, #16
 8002918:	6453      	str	r3, [r2, #68]	@ 0x44
 800291a:	4b4c      	ldr	r3, [pc, #304]	@ (8002a4c <HAL_UART_MspInit+0x164>)
 800291c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800291e:	f003 0310 	and.w	r3, r3, #16
 8002922:	623b      	str	r3, [r7, #32]
 8002924:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002926:	2300      	movs	r3, #0
 8002928:	61fb      	str	r3, [r7, #28]
 800292a:	4b48      	ldr	r3, [pc, #288]	@ (8002a4c <HAL_UART_MspInit+0x164>)
 800292c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800292e:	4a47      	ldr	r2, [pc, #284]	@ (8002a4c <HAL_UART_MspInit+0x164>)
 8002930:	f043 0301 	orr.w	r3, r3, #1
 8002934:	6313      	str	r3, [r2, #48]	@ 0x30
 8002936:	4b45      	ldr	r3, [pc, #276]	@ (8002a4c <HAL_UART_MspInit+0x164>)
 8002938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800293a:	f003 0301 	and.w	r3, r3, #1
 800293e:	61fb      	str	r3, [r7, #28]
 8002940:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002942:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002946:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002948:	2302      	movs	r3, #2
 800294a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800294c:	2300      	movs	r3, #0
 800294e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002950:	2303      	movs	r3, #3
 8002952:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002954:	2307      	movs	r3, #7
 8002956:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002958:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800295c:	4619      	mov	r1, r3
 800295e:	483c      	ldr	r0, [pc, #240]	@ (8002a50 <HAL_UART_MspInit+0x168>)
 8002960:	f001 fcf4 	bl	800434c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002964:	2200      	movs	r2, #0
 8002966:	2100      	movs	r1, #0
 8002968:	2025      	movs	r0, #37	@ 0x25
 800296a:	f001 f8b6 	bl	8003ada <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800296e:	2025      	movs	r0, #37	@ 0x25
 8002970:	f001 f8cf 	bl	8003b12 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002974:	e063      	b.n	8002a3e <HAL_UART_MspInit+0x156>
  else if(uartHandle->Instance==USART2)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a36      	ldr	r2, [pc, #216]	@ (8002a54 <HAL_UART_MspInit+0x16c>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d12c      	bne.n	80029da <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002980:	2300      	movs	r3, #0
 8002982:	61bb      	str	r3, [r7, #24]
 8002984:	4b31      	ldr	r3, [pc, #196]	@ (8002a4c <HAL_UART_MspInit+0x164>)
 8002986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002988:	4a30      	ldr	r2, [pc, #192]	@ (8002a4c <HAL_UART_MspInit+0x164>)
 800298a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800298e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002990:	4b2e      	ldr	r3, [pc, #184]	@ (8002a4c <HAL_UART_MspInit+0x164>)
 8002992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002994:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002998:	61bb      	str	r3, [r7, #24]
 800299a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800299c:	2300      	movs	r3, #0
 800299e:	617b      	str	r3, [r7, #20]
 80029a0:	4b2a      	ldr	r3, [pc, #168]	@ (8002a4c <HAL_UART_MspInit+0x164>)
 80029a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029a4:	4a29      	ldr	r2, [pc, #164]	@ (8002a4c <HAL_UART_MspInit+0x164>)
 80029a6:	f043 0308 	orr.w	r3, r3, #8
 80029aa:	6313      	str	r3, [r2, #48]	@ 0x30
 80029ac:	4b27      	ldr	r3, [pc, #156]	@ (8002a4c <HAL_UART_MspInit+0x164>)
 80029ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029b0:	f003 0308 	and.w	r3, r3, #8
 80029b4:	617b      	str	r3, [r7, #20]
 80029b6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80029b8:	2360      	movs	r3, #96	@ 0x60
 80029ba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029bc:	2302      	movs	r3, #2
 80029be:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c0:	2300      	movs	r3, #0
 80029c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029c4:	2303      	movs	r3, #3
 80029c6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80029c8:	2307      	movs	r3, #7
 80029ca:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029d0:	4619      	mov	r1, r3
 80029d2:	4821      	ldr	r0, [pc, #132]	@ (8002a58 <HAL_UART_MspInit+0x170>)
 80029d4:	f001 fcba 	bl	800434c <HAL_GPIO_Init>
}
 80029d8:	e031      	b.n	8002a3e <HAL_UART_MspInit+0x156>
  else if(uartHandle->Instance==USART3)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a1f      	ldr	r2, [pc, #124]	@ (8002a5c <HAL_UART_MspInit+0x174>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d12c      	bne.n	8002a3e <HAL_UART_MspInit+0x156>
    __HAL_RCC_USART3_CLK_ENABLE();
 80029e4:	2300      	movs	r3, #0
 80029e6:	613b      	str	r3, [r7, #16]
 80029e8:	4b18      	ldr	r3, [pc, #96]	@ (8002a4c <HAL_UART_MspInit+0x164>)
 80029ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ec:	4a17      	ldr	r2, [pc, #92]	@ (8002a4c <HAL_UART_MspInit+0x164>)
 80029ee:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80029f4:	4b15      	ldr	r3, [pc, #84]	@ (8002a4c <HAL_UART_MspInit+0x164>)
 80029f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029fc:	613b      	str	r3, [r7, #16]
 80029fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a00:	2300      	movs	r3, #0
 8002a02:	60fb      	str	r3, [r7, #12]
 8002a04:	4b11      	ldr	r3, [pc, #68]	@ (8002a4c <HAL_UART_MspInit+0x164>)
 8002a06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a08:	4a10      	ldr	r2, [pc, #64]	@ (8002a4c <HAL_UART_MspInit+0x164>)
 8002a0a:	f043 0308 	orr.w	r3, r3, #8
 8002a0e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a10:	4b0e      	ldr	r3, [pc, #56]	@ (8002a4c <HAL_UART_MspInit+0x164>)
 8002a12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a14:	f003 0308 	and.w	r3, r3, #8
 8002a18:	60fb      	str	r3, [r7, #12]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002a1c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002a20:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a22:	2302      	movs	r3, #2
 8002a24:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a26:	2300      	movs	r3, #0
 8002a28:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002a2e:	2307      	movs	r3, #7
 8002a30:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a36:	4619      	mov	r1, r3
 8002a38:	4807      	ldr	r0, [pc, #28]	@ (8002a58 <HAL_UART_MspInit+0x170>)
 8002a3a:	f001 fc87 	bl	800434c <HAL_GPIO_Init>
}
 8002a3e:	bf00      	nop
 8002a40:	3738      	adds	r7, #56	@ 0x38
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	40011000 	.word	0x40011000
 8002a4c:	40023800 	.word	0x40023800
 8002a50:	40020000 	.word	0x40020000
 8002a54:	40004400 	.word	0x40004400
 8002a58:	40020c00 	.word	0x40020c00
 8002a5c:	40004800 	.word	0x40004800

08002a60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002a60:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002a98 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a64:	480d      	ldr	r0, [pc, #52]	@ (8002a9c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002a66:	490e      	ldr	r1, [pc, #56]	@ (8002aa0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002a68:	4a0e      	ldr	r2, [pc, #56]	@ (8002aa4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a6c:	e002      	b.n	8002a74 <LoopCopyDataInit>

08002a6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a72:	3304      	adds	r3, #4

08002a74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a78:	d3f9      	bcc.n	8002a6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a7a:	4a0b      	ldr	r2, [pc, #44]	@ (8002aa8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002a7c:	4c0b      	ldr	r4, [pc, #44]	@ (8002aac <LoopFillZerobss+0x26>)
  movs r3, #0
 8002a7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a80:	e001      	b.n	8002a86 <LoopFillZerobss>

08002a82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a84:	3204      	adds	r2, #4

08002a86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a88:	d3fb      	bcc.n	8002a82 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002a8a:	f7ff f885 	bl	8001b98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a8e:	f008 fa45 	bl	800af1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a92:	f7fe fe9b 	bl	80017cc <main>
  bx  lr    
 8002a96:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002a98:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002a9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002aa0:	20000278 	.word	0x20000278
  ldr r2, =_sidata
 8002aa4:	0800d808 	.word	0x0800d808
  ldr r2, =_sbss
 8002aa8:	20000278 	.word	0x20000278
  ldr r4, =_ebss
 8002aac:	20002f7c 	.word	0x20002f7c

08002ab0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ab0:	e7fe      	b.n	8002ab0 <ADC_IRQHandler>
	...

08002ab4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ab8:	4b0e      	ldr	r3, [pc, #56]	@ (8002af4 <HAL_Init+0x40>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a0d      	ldr	r2, [pc, #52]	@ (8002af4 <HAL_Init+0x40>)
 8002abe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ac2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ac4:	4b0b      	ldr	r3, [pc, #44]	@ (8002af4 <HAL_Init+0x40>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a0a      	ldr	r2, [pc, #40]	@ (8002af4 <HAL_Init+0x40>)
 8002aca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002ace:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ad0:	4b08      	ldr	r3, [pc, #32]	@ (8002af4 <HAL_Init+0x40>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a07      	ldr	r2, [pc, #28]	@ (8002af4 <HAL_Init+0x40>)
 8002ad6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ada:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002adc:	2003      	movs	r0, #3
 8002ade:	f000 fff1 	bl	8003ac4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ae2:	200f      	movs	r0, #15
 8002ae4:	f000 f808 	bl	8002af8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ae8:	f7fe ffb8 	bl	8001a5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	40023c00 	.word	0x40023c00

08002af8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b00:	4b12      	ldr	r3, [pc, #72]	@ (8002b4c <HAL_InitTick+0x54>)
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	4b12      	ldr	r3, [pc, #72]	@ (8002b50 <HAL_InitTick+0x58>)
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	4619      	mov	r1, r3
 8002b0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b12:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b16:	4618      	mov	r0, r3
 8002b18:	f001 f809 	bl	8003b2e <HAL_SYSTICK_Config>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d001      	beq.n	8002b26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e00e      	b.n	8002b44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2b0f      	cmp	r3, #15
 8002b2a:	d80a      	bhi.n	8002b42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	6879      	ldr	r1, [r7, #4]
 8002b30:	f04f 30ff 	mov.w	r0, #4294967295
 8002b34:	f000 ffd1 	bl	8003ada <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b38:	4a06      	ldr	r2, [pc, #24]	@ (8002b54 <HAL_InitTick+0x5c>)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	e000      	b.n	8002b44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3708      	adds	r7, #8
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	20000000 	.word	0x20000000
 8002b50:	20000008 	.word	0x20000008
 8002b54:	20000004 	.word	0x20000004

08002b58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b5c:	4b06      	ldr	r3, [pc, #24]	@ (8002b78 <HAL_IncTick+0x20>)
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	461a      	mov	r2, r3
 8002b62:	4b06      	ldr	r3, [pc, #24]	@ (8002b7c <HAL_IncTick+0x24>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4413      	add	r3, r2
 8002b68:	4a04      	ldr	r2, [pc, #16]	@ (8002b7c <HAL_IncTick+0x24>)
 8002b6a:	6013      	str	r3, [r2, #0]
}
 8002b6c:	bf00      	nop
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop
 8002b78:	20000008 	.word	0x20000008
 8002b7c:	20000830 	.word	0x20000830

08002b80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b80:	b480      	push	{r7}
 8002b82:	af00      	add	r7, sp, #0
  return uwTick;
 8002b84:	4b03      	ldr	r3, [pc, #12]	@ (8002b94 <HAL_GetTick+0x14>)
 8002b86:	681b      	ldr	r3, [r3, #0]
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	20000830 	.word	0x20000830

08002b98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ba0:	f7ff ffee 	bl	8002b80 <HAL_GetTick>
 8002ba4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bb0:	d005      	beq.n	8002bbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bb2:	4b0a      	ldr	r3, [pc, #40]	@ (8002bdc <HAL_Delay+0x44>)
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	4413      	add	r3, r2
 8002bbc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002bbe:	bf00      	nop
 8002bc0:	f7ff ffde 	bl	8002b80 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	68fa      	ldr	r2, [r7, #12]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d8f7      	bhi.n	8002bc0 <HAL_Delay+0x28>
  {
  }
}
 8002bd0:	bf00      	nop
 8002bd2:	bf00      	nop
 8002bd4:	3710      	adds	r7, #16
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	20000008 	.word	0x20000008

08002be0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002be8:	2300      	movs	r3, #0
 8002bea:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d101      	bne.n	8002bf6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e033      	b.n	8002c5e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d109      	bne.n	8002c12 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f7fe fa1e 	bl	8001040 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c16:	f003 0310 	and.w	r3, r3, #16
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d118      	bne.n	8002c50 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c22:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002c26:	f023 0302 	bic.w	r3, r3, #2
 8002c2a:	f043 0202 	orr.w	r2, r3, #2
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f000 fbfc 	bl	8003430 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c42:	f023 0303 	bic.w	r3, r3, #3
 8002c46:	f043 0201 	orr.w	r2, r3, #1
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	641a      	str	r2, [r3, #64]	@ 0x40
 8002c4e:	e001      	b.n	8002c54 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3710      	adds	r7, #16
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
	...

08002c68 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b085      	sub	sp, #20
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002c70:	2300      	movs	r3, #0
 8002c72:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d101      	bne.n	8002c82 <HAL_ADC_Start+0x1a>
 8002c7e:	2302      	movs	r3, #2
 8002c80:	e0b2      	b.n	8002de8 <HAL_ADC_Start+0x180>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2201      	movs	r2, #1
 8002c86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	f003 0301 	and.w	r3, r3, #1
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d018      	beq.n	8002cca <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	689a      	ldr	r2, [r3, #8]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f042 0201 	orr.w	r2, r2, #1
 8002ca6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002ca8:	4b52      	ldr	r3, [pc, #328]	@ (8002df4 <HAL_ADC_Start+0x18c>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a52      	ldr	r2, [pc, #328]	@ (8002df8 <HAL_ADC_Start+0x190>)
 8002cae:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb2:	0c9a      	lsrs	r2, r3, #18
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	005b      	lsls	r3, r3, #1
 8002cb8:	4413      	add	r3, r2
 8002cba:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002cbc:	e002      	b.n	8002cc4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	3b01      	subs	r3, #1
 8002cc2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d1f9      	bne.n	8002cbe <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	f003 0301 	and.w	r3, r3, #1
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d17a      	bne.n	8002dce <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cdc:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002ce0:	f023 0301 	bic.w	r3, r3, #1
 8002ce4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d007      	beq.n	8002d0a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cfe:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002d02:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d0e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d16:	d106      	bne.n	8002d26 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d1c:	f023 0206 	bic.w	r2, r3, #6
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	645a      	str	r2, [r3, #68]	@ 0x44
 8002d24:	e002      	b.n	8002d2c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	645a      	str	r2, [r3, #68]	@ 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d34:	4b31      	ldr	r3, [pc, #196]	@ (8002dfc <HAL_ADC_Start+0x194>)
 8002d36:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002d40:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f003 031f 	and.w	r3, r3, #31
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d12a      	bne.n	8002da4 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a2b      	ldr	r2, [pc, #172]	@ (8002e00 <HAL_ADC_Start+0x198>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d015      	beq.n	8002d84 <HAL_ADC_Start+0x11c>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a29      	ldr	r2, [pc, #164]	@ (8002e04 <HAL_ADC_Start+0x19c>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d105      	bne.n	8002d6e <HAL_ADC_Start+0x106>
 8002d62:	4b26      	ldr	r3, [pc, #152]	@ (8002dfc <HAL_ADC_Start+0x194>)
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f003 031f 	and.w	r3, r3, #31
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d00a      	beq.n	8002d84 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a25      	ldr	r2, [pc, #148]	@ (8002e08 <HAL_ADC_Start+0x1a0>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d136      	bne.n	8002de6 <HAL_ADC_Start+0x17e>
 8002d78:	4b20      	ldr	r3, [pc, #128]	@ (8002dfc <HAL_ADC_Start+0x194>)
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f003 0310 	and.w	r3, r3, #16
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d130      	bne.n	8002de6 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d129      	bne.n	8002de6 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	689a      	ldr	r2, [r3, #8]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002da0:	609a      	str	r2, [r3, #8]
 8002da2:	e020      	b.n	8002de6 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a15      	ldr	r2, [pc, #84]	@ (8002e00 <HAL_ADC_Start+0x198>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d11b      	bne.n	8002de6 <HAL_ADC_Start+0x17e>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d114      	bne.n	8002de6 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	689a      	ldr	r2, [r3, #8]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002dca:	609a      	str	r2, [r3, #8]
 8002dcc:	e00b      	b.n	8002de6 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd2:	f043 0210 	orr.w	r2, r3, #16
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dde:	f043 0201 	orr.w	r2, r3, #1
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002de6:	2300      	movs	r3, #0
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3714      	adds	r7, #20
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr
 8002df4:	20000000 	.word	0x20000000
 8002df8:	431bde83 	.word	0x431bde83
 8002dfc:	40012300 	.word	0x40012300
 8002e00:	40012000 	.word	0x40012000
 8002e04:	40012100 	.word	0x40012100
 8002e08:	40012200 	.word	0x40012200

08002e0c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d101      	bne.n	8002e22 <HAL_ADC_Stop+0x16>
 8002e1e:	2302      	movs	r3, #2
 8002e20:	e021      	b.n	8002e66 <HAL_ADC_Stop+0x5a>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2201      	movs	r2, #1
 8002e26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	689a      	ldr	r2, [r3, #8]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f022 0201 	bic.w	r2, r2, #1
 8002e38:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f003 0301 	and.w	r3, r3, #1
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d109      	bne.n	8002e5c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e4c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002e50:	f023 0301 	bic.w	r3, r3, #1
 8002e54:	f043 0201 	orr.w	r2, r3, #1
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002e64:	2300      	movs	r3, #0
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	370c      	adds	r7, #12
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr

08002e72 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002e72:	b580      	push	{r7, lr}
 8002e74:	b084      	sub	sp, #16
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
 8002e7a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e8e:	d113      	bne.n	8002eb8 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002e9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e9e:	d10b      	bne.n	8002eb8 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ea4:	f043 0220 	orr.w	r2, r3, #32
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e063      	b.n	8002f80 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002eb8:	f7ff fe62 	bl	8002b80 <HAL_GetTick>
 8002ebc:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002ebe:	e021      	b.n	8002f04 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ec6:	d01d      	beq.n	8002f04 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d007      	beq.n	8002ede <HAL_ADC_PollForConversion+0x6c>
 8002ece:	f7ff fe57 	bl	8002b80 <HAL_GetTick>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	683a      	ldr	r2, [r7, #0]
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d212      	bcs.n	8002f04 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0302 	and.w	r3, r3, #2
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d00b      	beq.n	8002f04 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ef0:	f043 0204 	orr.w	r2, r3, #4
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	e03d      	b.n	8002f80 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0302 	and.w	r3, r3, #2
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d1d6      	bne.n	8002ec0 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f06f 0212 	mvn.w	r2, #18
 8002f1a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f20:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d123      	bne.n	8002f7e <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d11f      	bne.n	8002f7e <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f44:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d006      	beq.n	8002f5a <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d111      	bne.n	8002f7e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f5e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f6a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d105      	bne.n	8002f7e <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f76:	f043 0201 	orr.w	r2, r3, #1
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002f7e:	2300      	movs	r3, #0
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3710      	adds	r7, #16
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b086      	sub	sp, #24
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	60f8      	str	r0, [r7, #12]
 8002f90:	60b9      	str	r1, [r7, #8]
 8002f92:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002f94:	2300      	movs	r3, #0
 8002f96:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d101      	bne.n	8002fa6 <HAL_ADC_Start_DMA+0x1e>
 8002fa2:	2302      	movs	r3, #2
 8002fa4:	e0e9      	b.n	800317a <HAL_ADC_Start_DMA+0x1f2>
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2201      	movs	r2, #1
 8002faa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	f003 0301 	and.w	r3, r3, #1
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d018      	beq.n	8002fee <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	689a      	ldr	r2, [r3, #8]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f042 0201 	orr.w	r2, r2, #1
 8002fca:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002fcc:	4b6d      	ldr	r3, [pc, #436]	@ (8003184 <HAL_ADC_Start_DMA+0x1fc>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a6d      	ldr	r2, [pc, #436]	@ (8003188 <HAL_ADC_Start_DMA+0x200>)
 8002fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd6:	0c9a      	lsrs	r2, r3, #18
 8002fd8:	4613      	mov	r3, r2
 8002fda:	005b      	lsls	r3, r3, #1
 8002fdc:	4413      	add	r3, r2
 8002fde:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002fe0:	e002      	b.n	8002fe8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	3b01      	subs	r3, #1
 8002fe6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d1f9      	bne.n	8002fe2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ff8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ffc:	d107      	bne.n	800300e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	689a      	ldr	r2, [r3, #8]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800300c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	f003 0301 	and.w	r3, r3, #1
 8003018:	2b01      	cmp	r3, #1
 800301a:	f040 80a1 	bne.w	8003160 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003022:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003026:	f023 0301 	bic.w	r3, r3, #1
 800302a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800303c:	2b00      	cmp	r3, #0
 800303e:	d007      	beq.n	8003050 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003044:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003048:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003054:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003058:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800305c:	d106      	bne.n	800306c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003062:	f023 0206 	bic.w	r2, r3, #6
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	645a      	str	r2, [r3, #68]	@ 0x44
 800306a:	e002      	b.n	8003072 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2200      	movs	r2, #0
 8003070:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800307a:	4b44      	ldr	r3, [pc, #272]	@ (800318c <HAL_ADC_Start_DMA+0x204>)
 800307c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003082:	4a43      	ldr	r2, [pc, #268]	@ (8003190 <HAL_ADC_Start_DMA+0x208>)
 8003084:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800308a:	4a42      	ldr	r2, [pc, #264]	@ (8003194 <HAL_ADC_Start_DMA+0x20c>)
 800308c:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003092:	4a41      	ldr	r2, [pc, #260]	@ (8003198 <HAL_ADC_Start_DMA+0x210>)
 8003094:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800309e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	685a      	ldr	r2, [r3, #4]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80030ae:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	689a      	ldr	r2, [r3, #8]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80030be:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	334c      	adds	r3, #76	@ 0x4c
 80030ca:	4619      	mov	r1, r3
 80030cc:	68ba      	ldr	r2, [r7, #8]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f000 fde8 	bl	8003ca4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f003 031f 	and.w	r3, r3, #31
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d12a      	bne.n	8003136 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a2d      	ldr	r2, [pc, #180]	@ (800319c <HAL_ADC_Start_DMA+0x214>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d015      	beq.n	8003116 <HAL_ADC_Start_DMA+0x18e>
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a2c      	ldr	r2, [pc, #176]	@ (80031a0 <HAL_ADC_Start_DMA+0x218>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d105      	bne.n	8003100 <HAL_ADC_Start_DMA+0x178>
 80030f4:	4b25      	ldr	r3, [pc, #148]	@ (800318c <HAL_ADC_Start_DMA+0x204>)
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f003 031f 	and.w	r3, r3, #31
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d00a      	beq.n	8003116 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a27      	ldr	r2, [pc, #156]	@ (80031a4 <HAL_ADC_Start_DMA+0x21c>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d136      	bne.n	8003178 <HAL_ADC_Start_DMA+0x1f0>
 800310a:	4b20      	ldr	r3, [pc, #128]	@ (800318c <HAL_ADC_Start_DMA+0x204>)
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f003 0310 	and.w	r3, r3, #16
 8003112:	2b00      	cmp	r3, #0
 8003114:	d130      	bne.n	8003178 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003120:	2b00      	cmp	r3, #0
 8003122:	d129      	bne.n	8003178 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	689a      	ldr	r2, [r3, #8]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003132:	609a      	str	r2, [r3, #8]
 8003134:	e020      	b.n	8003178 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a18      	ldr	r2, [pc, #96]	@ (800319c <HAL_ADC_Start_DMA+0x214>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d11b      	bne.n	8003178 <HAL_ADC_Start_DMA+0x1f0>
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d114      	bne.n	8003178 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	689a      	ldr	r2, [r3, #8]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800315c:	609a      	str	r2, [r3, #8]
 800315e:	e00b      	b.n	8003178 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003164:	f043 0210 	orr.w	r2, r3, #16
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003170:	f043 0201 	orr.w	r2, r3, #1
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3718      	adds	r7, #24
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	20000000 	.word	0x20000000
 8003188:	431bde83 	.word	0x431bde83
 800318c:	40012300 	.word	0x40012300
 8003190:	08003629 	.word	0x08003629
 8003194:	080036e3 	.word	0x080036e3
 8003198:	080036ff 	.word	0x080036ff
 800319c:	40012000 	.word	0x40012000
 80031a0:	40012100 	.word	0x40012100
 80031a4:	40012200 	.word	0x40012200

080031a8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	370c      	adds	r7, #12
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr

080031c2 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80031c2:	b480      	push	{r7}
 80031c4:	b083      	sub	sp, #12
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80031ca:	bf00      	nop
 80031cc:	370c      	adds	r7, #12
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr

080031d6 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80031d6:	b480      	push	{r7}
 80031d8:	b083      	sub	sp, #12
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80031de:	bf00      	nop
 80031e0:	370c      	adds	r7, #12
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr
	...

080031ec <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b085      	sub	sp, #20
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80031f6:	2300      	movs	r3, #0
 80031f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003200:	2b01      	cmp	r3, #1
 8003202:	d101      	bne.n	8003208 <HAL_ADC_ConfigChannel+0x1c>
 8003204:	2302      	movs	r3, #2
 8003206:	e105      	b.n	8003414 <HAL_ADC_ConfigChannel+0x228>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2b09      	cmp	r3, #9
 8003216:	d925      	bls.n	8003264 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	68d9      	ldr	r1, [r3, #12]
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	b29b      	uxth	r3, r3
 8003224:	461a      	mov	r2, r3
 8003226:	4613      	mov	r3, r2
 8003228:	005b      	lsls	r3, r3, #1
 800322a:	4413      	add	r3, r2
 800322c:	3b1e      	subs	r3, #30
 800322e:	2207      	movs	r2, #7
 8003230:	fa02 f303 	lsl.w	r3, r2, r3
 8003234:	43da      	mvns	r2, r3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	400a      	ands	r2, r1
 800323c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	68d9      	ldr	r1, [r3, #12]
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	689a      	ldr	r2, [r3, #8]
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	b29b      	uxth	r3, r3
 800324e:	4618      	mov	r0, r3
 8003250:	4603      	mov	r3, r0
 8003252:	005b      	lsls	r3, r3, #1
 8003254:	4403      	add	r3, r0
 8003256:	3b1e      	subs	r3, #30
 8003258:	409a      	lsls	r2, r3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	430a      	orrs	r2, r1
 8003260:	60da      	str	r2, [r3, #12]
 8003262:	e022      	b.n	80032aa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	6919      	ldr	r1, [r3, #16]
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	b29b      	uxth	r3, r3
 8003270:	461a      	mov	r2, r3
 8003272:	4613      	mov	r3, r2
 8003274:	005b      	lsls	r3, r3, #1
 8003276:	4413      	add	r3, r2
 8003278:	2207      	movs	r2, #7
 800327a:	fa02 f303 	lsl.w	r3, r2, r3
 800327e:	43da      	mvns	r2, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	400a      	ands	r2, r1
 8003286:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	6919      	ldr	r1, [r3, #16]
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	689a      	ldr	r2, [r3, #8]
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	b29b      	uxth	r3, r3
 8003298:	4618      	mov	r0, r3
 800329a:	4603      	mov	r3, r0
 800329c:	005b      	lsls	r3, r3, #1
 800329e:	4403      	add	r3, r0
 80032a0:	409a      	lsls	r2, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	430a      	orrs	r2, r1
 80032a8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	2b06      	cmp	r3, #6
 80032b0:	d824      	bhi.n	80032fc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	685a      	ldr	r2, [r3, #4]
 80032bc:	4613      	mov	r3, r2
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	4413      	add	r3, r2
 80032c2:	3b05      	subs	r3, #5
 80032c4:	221f      	movs	r2, #31
 80032c6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ca:	43da      	mvns	r2, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	400a      	ands	r2, r1
 80032d2:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	b29b      	uxth	r3, r3
 80032e0:	4618      	mov	r0, r3
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	685a      	ldr	r2, [r3, #4]
 80032e6:	4613      	mov	r3, r2
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	4413      	add	r3, r2
 80032ec:	3b05      	subs	r3, #5
 80032ee:	fa00 f203 	lsl.w	r2, r0, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	430a      	orrs	r2, r1
 80032f8:	635a      	str	r2, [r3, #52]	@ 0x34
 80032fa:	e04c      	b.n	8003396 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	2b0c      	cmp	r3, #12
 8003302:	d824      	bhi.n	800334e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	685a      	ldr	r2, [r3, #4]
 800330e:	4613      	mov	r3, r2
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	4413      	add	r3, r2
 8003314:	3b23      	subs	r3, #35	@ 0x23
 8003316:	221f      	movs	r2, #31
 8003318:	fa02 f303 	lsl.w	r3, r2, r3
 800331c:	43da      	mvns	r2, r3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	400a      	ands	r2, r1
 8003324:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	b29b      	uxth	r3, r3
 8003332:	4618      	mov	r0, r3
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	685a      	ldr	r2, [r3, #4]
 8003338:	4613      	mov	r3, r2
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	4413      	add	r3, r2
 800333e:	3b23      	subs	r3, #35	@ 0x23
 8003340:	fa00 f203 	lsl.w	r2, r0, r3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	430a      	orrs	r2, r1
 800334a:	631a      	str	r2, [r3, #48]	@ 0x30
 800334c:	e023      	b.n	8003396 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	685a      	ldr	r2, [r3, #4]
 8003358:	4613      	mov	r3, r2
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	4413      	add	r3, r2
 800335e:	3b41      	subs	r3, #65	@ 0x41
 8003360:	221f      	movs	r2, #31
 8003362:	fa02 f303 	lsl.w	r3, r2, r3
 8003366:	43da      	mvns	r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	400a      	ands	r2, r1
 800336e:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	b29b      	uxth	r3, r3
 800337c:	4618      	mov	r0, r3
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	685a      	ldr	r2, [r3, #4]
 8003382:	4613      	mov	r3, r2
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	4413      	add	r3, r2
 8003388:	3b41      	subs	r3, #65	@ 0x41
 800338a:	fa00 f203 	lsl.w	r2, r0, r3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	430a      	orrs	r2, r1
 8003394:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003396:	4b22      	ldr	r3, [pc, #136]	@ (8003420 <HAL_ADC_ConfigChannel+0x234>)
 8003398:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a21      	ldr	r2, [pc, #132]	@ (8003424 <HAL_ADC_ConfigChannel+0x238>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d109      	bne.n	80033b8 <HAL_ADC_ConfigChannel+0x1cc>
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2b12      	cmp	r3, #18
 80033aa:	d105      	bne.n	80033b8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a19      	ldr	r2, [pc, #100]	@ (8003424 <HAL_ADC_ConfigChannel+0x238>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d123      	bne.n	800340a <HAL_ADC_ConfigChannel+0x21e>
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2b10      	cmp	r3, #16
 80033c8:	d003      	beq.n	80033d2 <HAL_ADC_ConfigChannel+0x1e6>
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2b11      	cmp	r3, #17
 80033d0:	d11b      	bne.n	800340a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	2b10      	cmp	r3, #16
 80033e4:	d111      	bne.n	800340a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80033e6:	4b10      	ldr	r3, [pc, #64]	@ (8003428 <HAL_ADC_ConfigChannel+0x23c>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a10      	ldr	r2, [pc, #64]	@ (800342c <HAL_ADC_ConfigChannel+0x240>)
 80033ec:	fba2 2303 	umull	r2, r3, r2, r3
 80033f0:	0c9a      	lsrs	r2, r3, #18
 80033f2:	4613      	mov	r3, r2
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	4413      	add	r3, r2
 80033f8:	005b      	lsls	r3, r3, #1
 80033fa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80033fc:	e002      	b.n	8003404 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	3b01      	subs	r3, #1
 8003402:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d1f9      	bne.n	80033fe <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003412:	2300      	movs	r3, #0
}
 8003414:	4618      	mov	r0, r3
 8003416:	3714      	adds	r7, #20
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr
 8003420:	40012300 	.word	0x40012300
 8003424:	40012000 	.word	0x40012000
 8003428:	20000000 	.word	0x20000000
 800342c:	431bde83 	.word	0x431bde83

08003430 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003430:	b480      	push	{r7}
 8003432:	b085      	sub	sp, #20
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003438:	4b79      	ldr	r3, [pc, #484]	@ (8003620 <ADC_Init+0x1f0>)
 800343a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	685a      	ldr	r2, [r3, #4]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	431a      	orrs	r2, r3
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	685a      	ldr	r2, [r3, #4]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003464:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	6859      	ldr	r1, [r3, #4]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	691b      	ldr	r3, [r3, #16]
 8003470:	021a      	lsls	r2, r3, #8
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	430a      	orrs	r2, r1
 8003478:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	685a      	ldr	r2, [r3, #4]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003488:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	6859      	ldr	r1, [r3, #4]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	689a      	ldr	r2, [r3, #8]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	430a      	orrs	r2, r1
 800349a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	689a      	ldr	r2, [r3, #8]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80034aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	6899      	ldr	r1, [r3, #8]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	68da      	ldr	r2, [r3, #12]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	430a      	orrs	r2, r1
 80034bc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034c2:	4a58      	ldr	r2, [pc, #352]	@ (8003624 <ADC_Init+0x1f4>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d022      	beq.n	800350e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	689a      	ldr	r2, [r3, #8]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80034d6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	6899      	ldr	r1, [r3, #8]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	430a      	orrs	r2, r1
 80034e8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	689a      	ldr	r2, [r3, #8]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80034f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	6899      	ldr	r1, [r3, #8]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	430a      	orrs	r2, r1
 800350a:	609a      	str	r2, [r3, #8]
 800350c:	e00f      	b.n	800352e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	689a      	ldr	r2, [r3, #8]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800351c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	689a      	ldr	r2, [r3, #8]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800352c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	689a      	ldr	r2, [r3, #8]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f022 0202 	bic.w	r2, r2, #2
 800353c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	6899      	ldr	r1, [r3, #8]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	7e1b      	ldrb	r3, [r3, #24]
 8003548:	005a      	lsls	r2, r3, #1
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	430a      	orrs	r2, r1
 8003550:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d01b      	beq.n	8003594 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	685a      	ldr	r2, [r3, #4]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800356a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	685a      	ldr	r2, [r3, #4]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800357a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	6859      	ldr	r1, [r3, #4]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003586:	3b01      	subs	r3, #1
 8003588:	035a      	lsls	r2, r3, #13
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	430a      	orrs	r2, r1
 8003590:	605a      	str	r2, [r3, #4]
 8003592:	e007      	b.n	80035a4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	685a      	ldr	r2, [r3, #4]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80035a2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80035b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	69db      	ldr	r3, [r3, #28]
 80035be:	3b01      	subs	r3, #1
 80035c0:	051a      	lsls	r2, r3, #20
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	430a      	orrs	r2, r1
 80035c8:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	689a      	ldr	r2, [r3, #8]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80035d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	6899      	ldr	r1, [r3, #8]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80035e6:	025a      	lsls	r2, r3, #9
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	430a      	orrs	r2, r1
 80035ee:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	689a      	ldr	r2, [r3, #8]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	6899      	ldr	r1, [r3, #8]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	695b      	ldr	r3, [r3, #20]
 800360a:	029a      	lsls	r2, r3, #10
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	430a      	orrs	r2, r1
 8003612:	609a      	str	r2, [r3, #8]
}
 8003614:	bf00      	nop
 8003616:	3714      	adds	r7, #20
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr
 8003620:	40012300 	.word	0x40012300
 8003624:	0f000001 	.word	0x0f000001

08003628 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003634:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800363a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800363e:	2b00      	cmp	r3, #0
 8003640:	d13c      	bne.n	80036bc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003646:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003658:	2b00      	cmp	r3, #0
 800365a:	d12b      	bne.n	80036b4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003660:	2b00      	cmp	r3, #0
 8003662:	d127      	bne.n	80036b4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800366a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800366e:	2b00      	cmp	r3, #0
 8003670:	d006      	beq.n	8003680 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800367c:	2b00      	cmp	r3, #0
 800367e:	d119      	bne.n	80036b4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	685a      	ldr	r2, [r3, #4]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f022 0220 	bic.w	r2, r2, #32
 800368e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003694:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d105      	bne.n	80036b4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ac:	f043 0201 	orr.w	r2, r3, #1
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80036b4:	68f8      	ldr	r0, [r7, #12]
 80036b6:	f007 f93b 	bl	800a930 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80036ba:	e00e      	b.n	80036da <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c0:	f003 0310 	and.w	r3, r3, #16
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d003      	beq.n	80036d0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80036c8:	68f8      	ldr	r0, [r7, #12]
 80036ca:	f7ff fd84 	bl	80031d6 <HAL_ADC_ErrorCallback>
}
 80036ce:	e004      	b.n	80036da <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	4798      	blx	r3
}
 80036da:	bf00      	nop
 80036dc:	3710      	adds	r7, #16
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}

080036e2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80036e2:	b580      	push	{r7, lr}
 80036e4:	b084      	sub	sp, #16
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036ee:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80036f0:	68f8      	ldr	r0, [r7, #12]
 80036f2:	f7ff fd66 	bl	80031c2 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80036f6:	bf00      	nop
 80036f8:	3710      	adds	r7, #16
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}

080036fe <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80036fe:	b580      	push	{r7, lr}
 8003700:	b084      	sub	sp, #16
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800370a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2240      	movs	r2, #64	@ 0x40
 8003710:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003716:	f043 0204 	orr.w	r2, r3, #4
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	645a      	str	r2, [r3, #68]	@ 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800371e:	68f8      	ldr	r0, [r7, #12]
 8003720:	f7ff fd59 	bl	80031d6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003724:	bf00      	nop
 8003726:	3710      	adds	r7, #16
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}

0800372c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d101      	bne.n	800373e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e0ed      	b.n	800391a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003744:	b2db      	uxtb	r3, r3
 8003746:	2b00      	cmp	r3, #0
 8003748:	d102      	bne.n	8003750 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f7fd fdd4 	bl	80012f8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f042 0201 	orr.w	r2, r2, #1
 800375e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003760:	f7ff fa0e 	bl	8002b80 <HAL_GetTick>
 8003764:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003766:	e012      	b.n	800378e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003768:	f7ff fa0a 	bl	8002b80 <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	2b0a      	cmp	r3, #10
 8003774:	d90b      	bls.n	800378e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800377a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2205      	movs	r2, #5
 8003786:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e0c5      	b.n	800391a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f003 0301 	and.w	r3, r3, #1
 8003798:	2b00      	cmp	r3, #0
 800379a:	d0e5      	beq.n	8003768 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f022 0202 	bic.w	r2, r2, #2
 80037aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80037ac:	f7ff f9e8 	bl	8002b80 <HAL_GetTick>
 80037b0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80037b2:	e012      	b.n	80037da <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80037b4:	f7ff f9e4 	bl	8002b80 <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	2b0a      	cmp	r3, #10
 80037c0:	d90b      	bls.n	80037da <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2205      	movs	r2, #5
 80037d2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e09f      	b.n	800391a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f003 0302 	and.w	r3, r3, #2
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d1e5      	bne.n	80037b4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	7e1b      	ldrb	r3, [r3, #24]
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d108      	bne.n	8003802 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80037fe:	601a      	str	r2, [r3, #0]
 8003800:	e007      	b.n	8003812 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003810:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	7e5b      	ldrb	r3, [r3, #25]
 8003816:	2b01      	cmp	r3, #1
 8003818:	d108      	bne.n	800382c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003828:	601a      	str	r2, [r3, #0]
 800382a:	e007      	b.n	800383c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800383a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	7e9b      	ldrb	r3, [r3, #26]
 8003840:	2b01      	cmp	r3, #1
 8003842:	d108      	bne.n	8003856 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f042 0220 	orr.w	r2, r2, #32
 8003852:	601a      	str	r2, [r3, #0]
 8003854:	e007      	b.n	8003866 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f022 0220 	bic.w	r2, r2, #32
 8003864:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	7edb      	ldrb	r3, [r3, #27]
 800386a:	2b01      	cmp	r3, #1
 800386c:	d108      	bne.n	8003880 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f022 0210 	bic.w	r2, r2, #16
 800387c:	601a      	str	r2, [r3, #0]
 800387e:	e007      	b.n	8003890 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f042 0210 	orr.w	r2, r2, #16
 800388e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	7f1b      	ldrb	r3, [r3, #28]
 8003894:	2b01      	cmp	r3, #1
 8003896:	d108      	bne.n	80038aa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f042 0208 	orr.w	r2, r2, #8
 80038a6:	601a      	str	r2, [r3, #0]
 80038a8:	e007      	b.n	80038ba <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f022 0208 	bic.w	r2, r2, #8
 80038b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	7f5b      	ldrb	r3, [r3, #29]
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d108      	bne.n	80038d4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f042 0204 	orr.w	r2, r2, #4
 80038d0:	601a      	str	r2, [r3, #0]
 80038d2:	e007      	b.n	80038e4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f022 0204 	bic.w	r2, r2, #4
 80038e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	689a      	ldr	r2, [r3, #8]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	431a      	orrs	r2, r3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	431a      	orrs	r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	695b      	ldr	r3, [r3, #20]
 80038f8:	ea42 0103 	orr.w	r1, r2, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	1e5a      	subs	r2, r3, #1
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	430a      	orrs	r2, r1
 8003908:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003918:	2300      	movs	r3, #0
}
 800391a:	4618      	mov	r0, r3
 800391c:	3710      	adds	r7, #16
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
	...

08003924 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003924:	b480      	push	{r7}
 8003926:	b085      	sub	sp, #20
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f003 0307 	and.w	r3, r3, #7
 8003932:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003934:	4b0c      	ldr	r3, [pc, #48]	@ (8003968 <__NVIC_SetPriorityGrouping+0x44>)
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800393a:	68ba      	ldr	r2, [r7, #8]
 800393c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003940:	4013      	ands	r3, r2
 8003942:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800394c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003950:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003954:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003956:	4a04      	ldr	r2, [pc, #16]	@ (8003968 <__NVIC_SetPriorityGrouping+0x44>)
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	60d3      	str	r3, [r2, #12]
}
 800395c:	bf00      	nop
 800395e:	3714      	adds	r7, #20
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr
 8003968:	e000ed00 	.word	0xe000ed00

0800396c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800396c:	b480      	push	{r7}
 800396e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003970:	4b04      	ldr	r3, [pc, #16]	@ (8003984 <__NVIC_GetPriorityGrouping+0x18>)
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	0a1b      	lsrs	r3, r3, #8
 8003976:	f003 0307 	and.w	r3, r3, #7
}
 800397a:	4618      	mov	r0, r3
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr
 8003984:	e000ed00 	.word	0xe000ed00

08003988 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	4603      	mov	r3, r0
 8003990:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003996:	2b00      	cmp	r3, #0
 8003998:	db0b      	blt.n	80039b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800399a:	79fb      	ldrb	r3, [r7, #7]
 800399c:	f003 021f 	and.w	r2, r3, #31
 80039a0:	4907      	ldr	r1, [pc, #28]	@ (80039c0 <__NVIC_EnableIRQ+0x38>)
 80039a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039a6:	095b      	lsrs	r3, r3, #5
 80039a8:	2001      	movs	r0, #1
 80039aa:	fa00 f202 	lsl.w	r2, r0, r2
 80039ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80039b2:	bf00      	nop
 80039b4:	370c      	adds	r7, #12
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr
 80039be:	bf00      	nop
 80039c0:	e000e100 	.word	0xe000e100

080039c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	4603      	mov	r3, r0
 80039cc:	6039      	str	r1, [r7, #0]
 80039ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	db0a      	blt.n	80039ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	b2da      	uxtb	r2, r3
 80039dc:	490c      	ldr	r1, [pc, #48]	@ (8003a10 <__NVIC_SetPriority+0x4c>)
 80039de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039e2:	0112      	lsls	r2, r2, #4
 80039e4:	b2d2      	uxtb	r2, r2
 80039e6:	440b      	add	r3, r1
 80039e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039ec:	e00a      	b.n	8003a04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	b2da      	uxtb	r2, r3
 80039f2:	4908      	ldr	r1, [pc, #32]	@ (8003a14 <__NVIC_SetPriority+0x50>)
 80039f4:	79fb      	ldrb	r3, [r7, #7]
 80039f6:	f003 030f 	and.w	r3, r3, #15
 80039fa:	3b04      	subs	r3, #4
 80039fc:	0112      	lsls	r2, r2, #4
 80039fe:	b2d2      	uxtb	r2, r2
 8003a00:	440b      	add	r3, r1
 8003a02:	761a      	strb	r2, [r3, #24]
}
 8003a04:	bf00      	nop
 8003a06:	370c      	adds	r7, #12
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr
 8003a10:	e000e100 	.word	0xe000e100
 8003a14:	e000ed00 	.word	0xe000ed00

08003a18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b089      	sub	sp, #36	@ 0x24
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f003 0307 	and.w	r3, r3, #7
 8003a2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	f1c3 0307 	rsb	r3, r3, #7
 8003a32:	2b04      	cmp	r3, #4
 8003a34:	bf28      	it	cs
 8003a36:	2304      	movcs	r3, #4
 8003a38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	3304      	adds	r3, #4
 8003a3e:	2b06      	cmp	r3, #6
 8003a40:	d902      	bls.n	8003a48 <NVIC_EncodePriority+0x30>
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	3b03      	subs	r3, #3
 8003a46:	e000      	b.n	8003a4a <NVIC_EncodePriority+0x32>
 8003a48:	2300      	movs	r3, #0
 8003a4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a4c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	fa02 f303 	lsl.w	r3, r2, r3
 8003a56:	43da      	mvns	r2, r3
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	401a      	ands	r2, r3
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a60:	f04f 31ff 	mov.w	r1, #4294967295
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	fa01 f303 	lsl.w	r3, r1, r3
 8003a6a:	43d9      	mvns	r1, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a70:	4313      	orrs	r3, r2
         );
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3724      	adds	r7, #36	@ 0x24
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr
	...

08003a80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b082      	sub	sp, #8
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a90:	d301      	bcc.n	8003a96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a92:	2301      	movs	r3, #1
 8003a94:	e00f      	b.n	8003ab6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a96:	4a0a      	ldr	r2, [pc, #40]	@ (8003ac0 <SysTick_Config+0x40>)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	3b01      	subs	r3, #1
 8003a9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a9e:	210f      	movs	r1, #15
 8003aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8003aa4:	f7ff ff8e 	bl	80039c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003aa8:	4b05      	ldr	r3, [pc, #20]	@ (8003ac0 <SysTick_Config+0x40>)
 8003aaa:	2200      	movs	r2, #0
 8003aac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003aae:	4b04      	ldr	r3, [pc, #16]	@ (8003ac0 <SysTick_Config+0x40>)
 8003ab0:	2207      	movs	r2, #7
 8003ab2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ab4:	2300      	movs	r3, #0
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3708      	adds	r7, #8
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	e000e010 	.word	0xe000e010

08003ac4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b082      	sub	sp, #8
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f7ff ff29 	bl	8003924 <__NVIC_SetPriorityGrouping>
}
 8003ad2:	bf00      	nop
 8003ad4:	3708      	adds	r7, #8
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}

08003ada <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003ada:	b580      	push	{r7, lr}
 8003adc:	b086      	sub	sp, #24
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	60b9      	str	r1, [r7, #8]
 8003ae4:	607a      	str	r2, [r7, #4]
 8003ae6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003aec:	f7ff ff3e 	bl	800396c <__NVIC_GetPriorityGrouping>
 8003af0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	68b9      	ldr	r1, [r7, #8]
 8003af6:	6978      	ldr	r0, [r7, #20]
 8003af8:	f7ff ff8e 	bl	8003a18 <NVIC_EncodePriority>
 8003afc:	4602      	mov	r2, r0
 8003afe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b02:	4611      	mov	r1, r2
 8003b04:	4618      	mov	r0, r3
 8003b06:	f7ff ff5d 	bl	80039c4 <__NVIC_SetPriority>
}
 8003b0a:	bf00      	nop
 8003b0c:	3718      	adds	r7, #24
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}

08003b12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b12:	b580      	push	{r7, lr}
 8003b14:	b082      	sub	sp, #8
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	4603      	mov	r3, r0
 8003b1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b20:	4618      	mov	r0, r3
 8003b22:	f7ff ff31 	bl	8003988 <__NVIC_EnableIRQ>
}
 8003b26:	bf00      	nop
 8003b28:	3708      	adds	r7, #8
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}

08003b2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b2e:	b580      	push	{r7, lr}
 8003b30:	b082      	sub	sp, #8
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f7ff ffa2 	bl	8003a80 <SysTick_Config>
 8003b3c:	4603      	mov	r3, r0
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3708      	adds	r7, #8
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
	...

08003b48 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b086      	sub	sp, #24
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003b50:	2300      	movs	r3, #0
 8003b52:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003b54:	f7ff f814 	bl	8002b80 <HAL_GetTick>
 8003b58:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d101      	bne.n	8003b64 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e099      	b.n	8003c98 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2202      	movs	r2, #2
 8003b68:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f022 0201 	bic.w	r2, r2, #1
 8003b82:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b84:	e00f      	b.n	8003ba6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b86:	f7fe fffb 	bl	8002b80 <HAL_GetTick>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	2b05      	cmp	r3, #5
 8003b92:	d908      	bls.n	8003ba6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2220      	movs	r2, #32
 8003b98:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2203      	movs	r2, #3
 8003b9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e078      	b.n	8003c98 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0301 	and.w	r3, r3, #1
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d1e8      	bne.n	8003b86 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003bbc:	697a      	ldr	r2, [r7, #20]
 8003bbe:	4b38      	ldr	r3, [pc, #224]	@ (8003ca0 <HAL_DMA_Init+0x158>)
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	685a      	ldr	r2, [r3, #4]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003bd2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	691b      	ldr	r3, [r3, #16]
 8003bd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bde:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	699b      	ldr	r3, [r3, #24]
 8003be4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a1b      	ldr	r3, [r3, #32]
 8003bf0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003bf2:	697a      	ldr	r2, [r7, #20]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bfc:	2b04      	cmp	r3, #4
 8003bfe:	d107      	bne.n	8003c10 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	697a      	ldr	r2, [r7, #20]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	697a      	ldr	r2, [r7, #20]
 8003c16:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	695b      	ldr	r3, [r3, #20]
 8003c1e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	f023 0307 	bic.w	r3, r3, #7
 8003c26:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c2c:	697a      	ldr	r2, [r7, #20]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c36:	2b04      	cmp	r3, #4
 8003c38:	d117      	bne.n	8003c6a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c3e:	697a      	ldr	r2, [r7, #20]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d00e      	beq.n	8003c6a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f000 fb01 	bl	8004254 <DMA_CheckFifoParam>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d008      	beq.n	8003c6a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2240      	movs	r2, #64	@ 0x40
 8003c5c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2201      	movs	r2, #1
 8003c62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003c66:	2301      	movs	r3, #1
 8003c68:	e016      	b.n	8003c98 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	697a      	ldr	r2, [r7, #20]
 8003c70:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f000 fab8 	bl	80041e8 <DMA_CalcBaseAndBitshift>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c80:	223f      	movs	r2, #63	@ 0x3f
 8003c82:	409a      	lsls	r2, r3
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2201      	movs	r2, #1
 8003c92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003c96:	2300      	movs	r3, #0
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3718      	adds	r7, #24
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	f010803f 	.word	0xf010803f

08003ca4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b086      	sub	sp, #24
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	60b9      	str	r1, [r7, #8]
 8003cae:	607a      	str	r2, [r7, #4]
 8003cb0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cba:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d101      	bne.n	8003cca <HAL_DMA_Start_IT+0x26>
 8003cc6:	2302      	movs	r3, #2
 8003cc8:	e040      	b.n	8003d4c <HAL_DMA_Start_IT+0xa8>
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2201      	movs	r2, #1
 8003cce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d12f      	bne.n	8003d3e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2202      	movs	r2, #2
 8003ce2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	68b9      	ldr	r1, [r7, #8]
 8003cf2:	68f8      	ldr	r0, [r7, #12]
 8003cf4:	f000 fa4a 	bl	800418c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cfc:	223f      	movs	r2, #63	@ 0x3f
 8003cfe:	409a      	lsls	r2, r3
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f042 0216 	orr.w	r2, r2, #22
 8003d12:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d007      	beq.n	8003d2c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f042 0208 	orr.w	r2, r2, #8
 8003d2a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f042 0201 	orr.w	r2, r2, #1
 8003d3a:	601a      	str	r2, [r3, #0]
 8003d3c:	e005      	b.n	8003d4a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2200      	movs	r2, #0
 8003d42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003d46:	2302      	movs	r3, #2
 8003d48:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003d4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3718      	adds	r7, #24
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d60:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003d62:	f7fe ff0d 	bl	8002b80 <HAL_GetTick>
 8003d66:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	2b02      	cmp	r3, #2
 8003d72:	d008      	beq.n	8003d86 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2280      	movs	r2, #128	@ 0x80
 8003d78:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e052      	b.n	8003e2c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f022 0216 	bic.w	r2, r2, #22
 8003d94:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	695a      	ldr	r2, [r3, #20]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003da4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d103      	bne.n	8003db6 <HAL_DMA_Abort+0x62>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d007      	beq.n	8003dc6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f022 0208 	bic.w	r2, r2, #8
 8003dc4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f022 0201 	bic.w	r2, r2, #1
 8003dd4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003dd6:	e013      	b.n	8003e00 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003dd8:	f7fe fed2 	bl	8002b80 <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	2b05      	cmp	r3, #5
 8003de4:	d90c      	bls.n	8003e00 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2220      	movs	r2, #32
 8003dea:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2203      	movs	r2, #3
 8003df0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003dfc:	2303      	movs	r3, #3
 8003dfe:	e015      	b.n	8003e2c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0301 	and.w	r3, r3, #1
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d1e4      	bne.n	8003dd8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e12:	223f      	movs	r2, #63	@ 0x3f
 8003e14:	409a      	lsls	r2, r3
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003e2a:	2300      	movs	r3, #0
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3710      	adds	r7, #16
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	2b02      	cmp	r3, #2
 8003e46:	d004      	beq.n	8003e52 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2280      	movs	r2, #128	@ 0x80
 8003e4c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e00c      	b.n	8003e6c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2205      	movs	r2, #5
 8003e56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f022 0201 	bic.w	r2, r2, #1
 8003e68:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003e6a:	2300      	movs	r3, #0
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	370c      	adds	r7, #12
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b086      	sub	sp, #24
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003e80:	2300      	movs	r3, #0
 8003e82:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003e84:	4b8e      	ldr	r3, [pc, #568]	@ (80040c0 <HAL_DMA_IRQHandler+0x248>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a8e      	ldr	r2, [pc, #568]	@ (80040c4 <HAL_DMA_IRQHandler+0x24c>)
 8003e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e8e:	0a9b      	lsrs	r3, r3, #10
 8003e90:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e96:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ea2:	2208      	movs	r2, #8
 8003ea4:	409a      	lsls	r2, r3
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d01a      	beq.n	8003ee4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0304 	and.w	r3, r3, #4
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d013      	beq.n	8003ee4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f022 0204 	bic.w	r2, r2, #4
 8003eca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ed0:	2208      	movs	r2, #8
 8003ed2:	409a      	lsls	r2, r3
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003edc:	f043 0201 	orr.w	r2, r3, #1
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ee8:	2201      	movs	r2, #1
 8003eea:	409a      	lsls	r2, r3
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	4013      	ands	r3, r2
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d012      	beq.n	8003f1a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	695b      	ldr	r3, [r3, #20]
 8003efa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00b      	beq.n	8003f1a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f06:	2201      	movs	r2, #1
 8003f08:	409a      	lsls	r2, r3
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f12:	f043 0202 	orr.w	r2, r3, #2
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f1e:	2204      	movs	r2, #4
 8003f20:	409a      	lsls	r2, r3
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	4013      	ands	r3, r2
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d012      	beq.n	8003f50 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0302 	and.w	r3, r3, #2
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d00b      	beq.n	8003f50 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f3c:	2204      	movs	r2, #4
 8003f3e:	409a      	lsls	r2, r3
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f48:	f043 0204 	orr.w	r2, r3, #4
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f54:	2210      	movs	r2, #16
 8003f56:	409a      	lsls	r2, r3
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d043      	beq.n	8003fe8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0308 	and.w	r3, r3, #8
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d03c      	beq.n	8003fe8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f72:	2210      	movs	r2, #16
 8003f74:	409a      	lsls	r2, r3
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d018      	beq.n	8003fba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d108      	bne.n	8003fa8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d024      	beq.n	8003fe8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	4798      	blx	r3
 8003fa6:	e01f      	b.n	8003fe8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d01b      	beq.n	8003fe8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	4798      	blx	r3
 8003fb8:	e016      	b.n	8003fe8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d107      	bne.n	8003fd8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f022 0208 	bic.w	r2, r2, #8
 8003fd6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d003      	beq.n	8003fe8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fec:	2220      	movs	r2, #32
 8003fee:	409a      	lsls	r2, r3
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	f000 808f 	beq.w	8004118 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0310 	and.w	r3, r3, #16
 8004004:	2b00      	cmp	r3, #0
 8004006:	f000 8087 	beq.w	8004118 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800400e:	2220      	movs	r2, #32
 8004010:	409a      	lsls	r2, r3
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800401c:	b2db      	uxtb	r3, r3
 800401e:	2b05      	cmp	r3, #5
 8004020:	d136      	bne.n	8004090 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f022 0216 	bic.w	r2, r2, #22
 8004030:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	695a      	ldr	r2, [r3, #20]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004040:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004046:	2b00      	cmp	r3, #0
 8004048:	d103      	bne.n	8004052 <HAL_DMA_IRQHandler+0x1da>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800404e:	2b00      	cmp	r3, #0
 8004050:	d007      	beq.n	8004062 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f022 0208 	bic.w	r2, r2, #8
 8004060:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004066:	223f      	movs	r2, #63	@ 0x3f
 8004068:	409a      	lsls	r2, r3
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2201      	movs	r2, #1
 8004072:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004082:	2b00      	cmp	r3, #0
 8004084:	d07e      	beq.n	8004184 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	4798      	blx	r3
        }
        return;
 800408e:	e079      	b.n	8004184 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d01d      	beq.n	80040da <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d10d      	bne.n	80040c8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d031      	beq.n	8004118 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	4798      	blx	r3
 80040bc:	e02c      	b.n	8004118 <HAL_DMA_IRQHandler+0x2a0>
 80040be:	bf00      	nop
 80040c0:	20000000 	.word	0x20000000
 80040c4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d023      	beq.n	8004118 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	4798      	blx	r3
 80040d8:	e01e      	b.n	8004118 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d10f      	bne.n	8004108 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f022 0210 	bic.w	r2, r2, #16
 80040f6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800410c:	2b00      	cmp	r3, #0
 800410e:	d003      	beq.n	8004118 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800411c:	2b00      	cmp	r3, #0
 800411e:	d032      	beq.n	8004186 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004124:	f003 0301 	and.w	r3, r3, #1
 8004128:	2b00      	cmp	r3, #0
 800412a:	d022      	beq.n	8004172 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2205      	movs	r2, #5
 8004130:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f022 0201 	bic.w	r2, r2, #1
 8004142:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	3301      	adds	r3, #1
 8004148:	60bb      	str	r3, [r7, #8]
 800414a:	697a      	ldr	r2, [r7, #20]
 800414c:	429a      	cmp	r2, r3
 800414e:	d307      	bcc.n	8004160 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0301 	and.w	r3, r3, #1
 800415a:	2b00      	cmp	r3, #0
 800415c:	d1f2      	bne.n	8004144 <HAL_DMA_IRQHandler+0x2cc>
 800415e:	e000      	b.n	8004162 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004160:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2201      	movs	r2, #1
 8004166:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2200      	movs	r2, #0
 800416e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004176:	2b00      	cmp	r3, #0
 8004178:	d005      	beq.n	8004186 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	4798      	blx	r3
 8004182:	e000      	b.n	8004186 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004184:	bf00      	nop
    }
  }
}
 8004186:	3718      	adds	r7, #24
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}

0800418c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800418c:	b480      	push	{r7}
 800418e:	b085      	sub	sp, #20
 8004190:	af00      	add	r7, sp, #0
 8004192:	60f8      	str	r0, [r7, #12]
 8004194:	60b9      	str	r1, [r7, #8]
 8004196:	607a      	str	r2, [r7, #4]
 8004198:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80041a8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	683a      	ldr	r2, [r7, #0]
 80041b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	2b40      	cmp	r3, #64	@ 0x40
 80041b8:	d108      	bne.n	80041cc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	68ba      	ldr	r2, [r7, #8]
 80041c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80041ca:	e007      	b.n	80041dc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68ba      	ldr	r2, [r7, #8]
 80041d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	60da      	str	r2, [r3, #12]
}
 80041dc:	bf00      	nop
 80041de:	3714      	adds	r7, #20
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr

080041e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b085      	sub	sp, #20
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	3b10      	subs	r3, #16
 80041f8:	4a14      	ldr	r2, [pc, #80]	@ (800424c <DMA_CalcBaseAndBitshift+0x64>)
 80041fa:	fba2 2303 	umull	r2, r3, r2, r3
 80041fe:	091b      	lsrs	r3, r3, #4
 8004200:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004202:	4a13      	ldr	r2, [pc, #76]	@ (8004250 <DMA_CalcBaseAndBitshift+0x68>)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	4413      	add	r3, r2
 8004208:	781b      	ldrb	r3, [r3, #0]
 800420a:	461a      	mov	r2, r3
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2b03      	cmp	r3, #3
 8004214:	d909      	bls.n	800422a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800421e:	f023 0303 	bic.w	r3, r3, #3
 8004222:	1d1a      	adds	r2, r3, #4
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	659a      	str	r2, [r3, #88]	@ 0x58
 8004228:	e007      	b.n	800423a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004232:	f023 0303 	bic.w	r3, r3, #3
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800423e:	4618      	mov	r0, r3
 8004240:	3714      	adds	r7, #20
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr
 800424a:	bf00      	nop
 800424c:	aaaaaaab 	.word	0xaaaaaaab
 8004250:	0800afb0 	.word	0x0800afb0

08004254 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004254:	b480      	push	{r7}
 8004256:	b085      	sub	sp, #20
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800425c:	2300      	movs	r3, #0
 800425e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004264:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	699b      	ldr	r3, [r3, #24]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d11f      	bne.n	80042ae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	2b03      	cmp	r3, #3
 8004272:	d856      	bhi.n	8004322 <DMA_CheckFifoParam+0xce>
 8004274:	a201      	add	r2, pc, #4	@ (adr r2, 800427c <DMA_CheckFifoParam+0x28>)
 8004276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800427a:	bf00      	nop
 800427c:	0800428d 	.word	0x0800428d
 8004280:	0800429f 	.word	0x0800429f
 8004284:	0800428d 	.word	0x0800428d
 8004288:	08004323 	.word	0x08004323
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004290:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004294:	2b00      	cmp	r3, #0
 8004296:	d046      	beq.n	8004326 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800429c:	e043      	b.n	8004326 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042a2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80042a6:	d140      	bne.n	800432a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042ac:	e03d      	b.n	800432a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	699b      	ldr	r3, [r3, #24]
 80042b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042b6:	d121      	bne.n	80042fc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	2b03      	cmp	r3, #3
 80042bc:	d837      	bhi.n	800432e <DMA_CheckFifoParam+0xda>
 80042be:	a201      	add	r2, pc, #4	@ (adr r2, 80042c4 <DMA_CheckFifoParam+0x70>)
 80042c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042c4:	080042d5 	.word	0x080042d5
 80042c8:	080042db 	.word	0x080042db
 80042cc:	080042d5 	.word	0x080042d5
 80042d0:	080042ed 	.word	0x080042ed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	73fb      	strb	r3, [r7, #15]
      break;
 80042d8:	e030      	b.n	800433c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042de:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d025      	beq.n	8004332 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042ea:	e022      	b.n	8004332 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042f0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80042f4:	d11f      	bne.n	8004336 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80042fa:	e01c      	b.n	8004336 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	2b02      	cmp	r3, #2
 8004300:	d903      	bls.n	800430a <DMA_CheckFifoParam+0xb6>
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	2b03      	cmp	r3, #3
 8004306:	d003      	beq.n	8004310 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004308:	e018      	b.n	800433c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	73fb      	strb	r3, [r7, #15]
      break;
 800430e:	e015      	b.n	800433c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004314:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004318:	2b00      	cmp	r3, #0
 800431a:	d00e      	beq.n	800433a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	73fb      	strb	r3, [r7, #15]
      break;
 8004320:	e00b      	b.n	800433a <DMA_CheckFifoParam+0xe6>
      break;
 8004322:	bf00      	nop
 8004324:	e00a      	b.n	800433c <DMA_CheckFifoParam+0xe8>
      break;
 8004326:	bf00      	nop
 8004328:	e008      	b.n	800433c <DMA_CheckFifoParam+0xe8>
      break;
 800432a:	bf00      	nop
 800432c:	e006      	b.n	800433c <DMA_CheckFifoParam+0xe8>
      break;
 800432e:	bf00      	nop
 8004330:	e004      	b.n	800433c <DMA_CheckFifoParam+0xe8>
      break;
 8004332:	bf00      	nop
 8004334:	e002      	b.n	800433c <DMA_CheckFifoParam+0xe8>
      break;   
 8004336:	bf00      	nop
 8004338:	e000      	b.n	800433c <DMA_CheckFifoParam+0xe8>
      break;
 800433a:	bf00      	nop
    }
  } 
  
  return status; 
 800433c:	7bfb      	ldrb	r3, [r7, #15]
}
 800433e:	4618      	mov	r0, r3
 8004340:	3714      	adds	r7, #20
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr
 800434a:	bf00      	nop

0800434c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800434c:	b480      	push	{r7}
 800434e:	b089      	sub	sp, #36	@ 0x24
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004356:	2300      	movs	r3, #0
 8004358:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800435a:	2300      	movs	r3, #0
 800435c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800435e:	2300      	movs	r3, #0
 8004360:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004362:	2300      	movs	r3, #0
 8004364:	61fb      	str	r3, [r7, #28]
 8004366:	e16b      	b.n	8004640 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004368:	2201      	movs	r2, #1
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	fa02 f303 	lsl.w	r3, r2, r3
 8004370:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	697a      	ldr	r2, [r7, #20]
 8004378:	4013      	ands	r3, r2
 800437a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800437c:	693a      	ldr	r2, [r7, #16]
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	429a      	cmp	r2, r3
 8004382:	f040 815a 	bne.w	800463a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	f003 0303 	and.w	r3, r3, #3
 800438e:	2b01      	cmp	r3, #1
 8004390:	d005      	beq.n	800439e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800439a:	2b02      	cmp	r3, #2
 800439c:	d130      	bne.n	8004400 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	005b      	lsls	r3, r3, #1
 80043a8:	2203      	movs	r2, #3
 80043aa:	fa02 f303 	lsl.w	r3, r2, r3
 80043ae:	43db      	mvns	r3, r3
 80043b0:	69ba      	ldr	r2, [r7, #24]
 80043b2:	4013      	ands	r3, r2
 80043b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	68da      	ldr	r2, [r3, #12]
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	005b      	lsls	r3, r3, #1
 80043be:	fa02 f303 	lsl.w	r3, r2, r3
 80043c2:	69ba      	ldr	r2, [r7, #24]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	69ba      	ldr	r2, [r7, #24]
 80043cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80043d4:	2201      	movs	r2, #1
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	fa02 f303 	lsl.w	r3, r2, r3
 80043dc:	43db      	mvns	r3, r3
 80043de:	69ba      	ldr	r2, [r7, #24]
 80043e0:	4013      	ands	r3, r2
 80043e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	091b      	lsrs	r3, r3, #4
 80043ea:	f003 0201 	and.w	r2, r3, #1
 80043ee:	69fb      	ldr	r3, [r7, #28]
 80043f0:	fa02 f303 	lsl.w	r3, r2, r3
 80043f4:	69ba      	ldr	r2, [r7, #24]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	69ba      	ldr	r2, [r7, #24]
 80043fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	f003 0303 	and.w	r3, r3, #3
 8004408:	2b03      	cmp	r3, #3
 800440a:	d017      	beq.n	800443c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	005b      	lsls	r3, r3, #1
 8004416:	2203      	movs	r2, #3
 8004418:	fa02 f303 	lsl.w	r3, r2, r3
 800441c:	43db      	mvns	r3, r3
 800441e:	69ba      	ldr	r2, [r7, #24]
 8004420:	4013      	ands	r3, r2
 8004422:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	689a      	ldr	r2, [r3, #8]
 8004428:	69fb      	ldr	r3, [r7, #28]
 800442a:	005b      	lsls	r3, r3, #1
 800442c:	fa02 f303 	lsl.w	r3, r2, r3
 8004430:	69ba      	ldr	r2, [r7, #24]
 8004432:	4313      	orrs	r3, r2
 8004434:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	69ba      	ldr	r2, [r7, #24]
 800443a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	f003 0303 	and.w	r3, r3, #3
 8004444:	2b02      	cmp	r3, #2
 8004446:	d123      	bne.n	8004490 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	08da      	lsrs	r2, r3, #3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	3208      	adds	r2, #8
 8004450:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004454:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	f003 0307 	and.w	r3, r3, #7
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	220f      	movs	r2, #15
 8004460:	fa02 f303 	lsl.w	r3, r2, r3
 8004464:	43db      	mvns	r3, r3
 8004466:	69ba      	ldr	r2, [r7, #24]
 8004468:	4013      	ands	r3, r2
 800446a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	691a      	ldr	r2, [r3, #16]
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	f003 0307 	and.w	r3, r3, #7
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	fa02 f303 	lsl.w	r3, r2, r3
 800447c:	69ba      	ldr	r2, [r7, #24]
 800447e:	4313      	orrs	r3, r2
 8004480:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	08da      	lsrs	r2, r3, #3
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	3208      	adds	r2, #8
 800448a:	69b9      	ldr	r1, [r7, #24]
 800448c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004496:	69fb      	ldr	r3, [r7, #28]
 8004498:	005b      	lsls	r3, r3, #1
 800449a:	2203      	movs	r2, #3
 800449c:	fa02 f303 	lsl.w	r3, r2, r3
 80044a0:	43db      	mvns	r3, r3
 80044a2:	69ba      	ldr	r2, [r7, #24]
 80044a4:	4013      	ands	r3, r2
 80044a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	f003 0203 	and.w	r2, r3, #3
 80044b0:	69fb      	ldr	r3, [r7, #28]
 80044b2:	005b      	lsls	r3, r3, #1
 80044b4:	fa02 f303 	lsl.w	r3, r2, r3
 80044b8:	69ba      	ldr	r2, [r7, #24]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	69ba      	ldr	r2, [r7, #24]
 80044c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	f000 80b4 	beq.w	800463a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044d2:	2300      	movs	r3, #0
 80044d4:	60fb      	str	r3, [r7, #12]
 80044d6:	4b60      	ldr	r3, [pc, #384]	@ (8004658 <HAL_GPIO_Init+0x30c>)
 80044d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044da:	4a5f      	ldr	r2, [pc, #380]	@ (8004658 <HAL_GPIO_Init+0x30c>)
 80044dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80044e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80044e2:	4b5d      	ldr	r3, [pc, #372]	@ (8004658 <HAL_GPIO_Init+0x30c>)
 80044e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80044ea:	60fb      	str	r3, [r7, #12]
 80044ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80044ee:	4a5b      	ldr	r2, [pc, #364]	@ (800465c <HAL_GPIO_Init+0x310>)
 80044f0:	69fb      	ldr	r3, [r7, #28]
 80044f2:	089b      	lsrs	r3, r3, #2
 80044f4:	3302      	adds	r3, #2
 80044f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	f003 0303 	and.w	r3, r3, #3
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	220f      	movs	r2, #15
 8004506:	fa02 f303 	lsl.w	r3, r2, r3
 800450a:	43db      	mvns	r3, r3
 800450c:	69ba      	ldr	r2, [r7, #24]
 800450e:	4013      	ands	r3, r2
 8004510:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a52      	ldr	r2, [pc, #328]	@ (8004660 <HAL_GPIO_Init+0x314>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d02b      	beq.n	8004572 <HAL_GPIO_Init+0x226>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4a51      	ldr	r2, [pc, #324]	@ (8004664 <HAL_GPIO_Init+0x318>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d025      	beq.n	800456e <HAL_GPIO_Init+0x222>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a50      	ldr	r2, [pc, #320]	@ (8004668 <HAL_GPIO_Init+0x31c>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d01f      	beq.n	800456a <HAL_GPIO_Init+0x21e>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a4f      	ldr	r2, [pc, #316]	@ (800466c <HAL_GPIO_Init+0x320>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d019      	beq.n	8004566 <HAL_GPIO_Init+0x21a>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a4e      	ldr	r2, [pc, #312]	@ (8004670 <HAL_GPIO_Init+0x324>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d013      	beq.n	8004562 <HAL_GPIO_Init+0x216>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a4d      	ldr	r2, [pc, #308]	@ (8004674 <HAL_GPIO_Init+0x328>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d00d      	beq.n	800455e <HAL_GPIO_Init+0x212>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a4c      	ldr	r2, [pc, #304]	@ (8004678 <HAL_GPIO_Init+0x32c>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d007      	beq.n	800455a <HAL_GPIO_Init+0x20e>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a4b      	ldr	r2, [pc, #300]	@ (800467c <HAL_GPIO_Init+0x330>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d101      	bne.n	8004556 <HAL_GPIO_Init+0x20a>
 8004552:	2307      	movs	r3, #7
 8004554:	e00e      	b.n	8004574 <HAL_GPIO_Init+0x228>
 8004556:	2308      	movs	r3, #8
 8004558:	e00c      	b.n	8004574 <HAL_GPIO_Init+0x228>
 800455a:	2306      	movs	r3, #6
 800455c:	e00a      	b.n	8004574 <HAL_GPIO_Init+0x228>
 800455e:	2305      	movs	r3, #5
 8004560:	e008      	b.n	8004574 <HAL_GPIO_Init+0x228>
 8004562:	2304      	movs	r3, #4
 8004564:	e006      	b.n	8004574 <HAL_GPIO_Init+0x228>
 8004566:	2303      	movs	r3, #3
 8004568:	e004      	b.n	8004574 <HAL_GPIO_Init+0x228>
 800456a:	2302      	movs	r3, #2
 800456c:	e002      	b.n	8004574 <HAL_GPIO_Init+0x228>
 800456e:	2301      	movs	r3, #1
 8004570:	e000      	b.n	8004574 <HAL_GPIO_Init+0x228>
 8004572:	2300      	movs	r3, #0
 8004574:	69fa      	ldr	r2, [r7, #28]
 8004576:	f002 0203 	and.w	r2, r2, #3
 800457a:	0092      	lsls	r2, r2, #2
 800457c:	4093      	lsls	r3, r2
 800457e:	69ba      	ldr	r2, [r7, #24]
 8004580:	4313      	orrs	r3, r2
 8004582:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004584:	4935      	ldr	r1, [pc, #212]	@ (800465c <HAL_GPIO_Init+0x310>)
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	089b      	lsrs	r3, r3, #2
 800458a:	3302      	adds	r3, #2
 800458c:	69ba      	ldr	r2, [r7, #24]
 800458e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004592:	4b3b      	ldr	r3, [pc, #236]	@ (8004680 <HAL_GPIO_Init+0x334>)
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	43db      	mvns	r3, r3
 800459c:	69ba      	ldr	r2, [r7, #24]
 800459e:	4013      	ands	r3, r2
 80045a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d003      	beq.n	80045b6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80045ae:	69ba      	ldr	r2, [r7, #24]
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	4313      	orrs	r3, r2
 80045b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80045b6:	4a32      	ldr	r2, [pc, #200]	@ (8004680 <HAL_GPIO_Init+0x334>)
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80045bc:	4b30      	ldr	r3, [pc, #192]	@ (8004680 <HAL_GPIO_Init+0x334>)
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	43db      	mvns	r3, r3
 80045c6:	69ba      	ldr	r2, [r7, #24]
 80045c8:	4013      	ands	r3, r2
 80045ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d003      	beq.n	80045e0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80045d8:	69ba      	ldr	r2, [r7, #24]
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	4313      	orrs	r3, r2
 80045de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80045e0:	4a27      	ldr	r2, [pc, #156]	@ (8004680 <HAL_GPIO_Init+0x334>)
 80045e2:	69bb      	ldr	r3, [r7, #24]
 80045e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80045e6:	4b26      	ldr	r3, [pc, #152]	@ (8004680 <HAL_GPIO_Init+0x334>)
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	43db      	mvns	r3, r3
 80045f0:	69ba      	ldr	r2, [r7, #24]
 80045f2:	4013      	ands	r3, r2
 80045f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d003      	beq.n	800460a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004602:	69ba      	ldr	r2, [r7, #24]
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	4313      	orrs	r3, r2
 8004608:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800460a:	4a1d      	ldr	r2, [pc, #116]	@ (8004680 <HAL_GPIO_Init+0x334>)
 800460c:	69bb      	ldr	r3, [r7, #24]
 800460e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004610:	4b1b      	ldr	r3, [pc, #108]	@ (8004680 <HAL_GPIO_Init+0x334>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	43db      	mvns	r3, r3
 800461a:	69ba      	ldr	r2, [r7, #24]
 800461c:	4013      	ands	r3, r2
 800461e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004628:	2b00      	cmp	r3, #0
 800462a:	d003      	beq.n	8004634 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800462c:	69ba      	ldr	r2, [r7, #24]
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	4313      	orrs	r3, r2
 8004632:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004634:	4a12      	ldr	r2, [pc, #72]	@ (8004680 <HAL_GPIO_Init+0x334>)
 8004636:	69bb      	ldr	r3, [r7, #24]
 8004638:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	3301      	adds	r3, #1
 800463e:	61fb      	str	r3, [r7, #28]
 8004640:	69fb      	ldr	r3, [r7, #28]
 8004642:	2b0f      	cmp	r3, #15
 8004644:	f67f ae90 	bls.w	8004368 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004648:	bf00      	nop
 800464a:	bf00      	nop
 800464c:	3724      	adds	r7, #36	@ 0x24
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr
 8004656:	bf00      	nop
 8004658:	40023800 	.word	0x40023800
 800465c:	40013800 	.word	0x40013800
 8004660:	40020000 	.word	0x40020000
 8004664:	40020400 	.word	0x40020400
 8004668:	40020800 	.word	0x40020800
 800466c:	40020c00 	.word	0x40020c00
 8004670:	40021000 	.word	0x40021000
 8004674:	40021400 	.word	0x40021400
 8004678:	40021800 	.word	0x40021800
 800467c:	40021c00 	.word	0x40021c00
 8004680:	40013c00 	.word	0x40013c00

08004684 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	460b      	mov	r3, r1
 800468e:	807b      	strh	r3, [r7, #2]
 8004690:	4613      	mov	r3, r2
 8004692:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004694:	787b      	ldrb	r3, [r7, #1]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d003      	beq.n	80046a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800469a:	887a      	ldrh	r2, [r7, #2]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80046a0:	e003      	b.n	80046aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80046a2:	887b      	ldrh	r3, [r7, #2]
 80046a4:	041a      	lsls	r2, r3, #16
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	619a      	str	r2, [r3, #24]
}
 80046aa:	bf00      	nop
 80046ac:	370c      	adds	r7, #12
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr

080046b6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80046b6:	b480      	push	{r7}
 80046b8:	b085      	sub	sp, #20
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
 80046be:	460b      	mov	r3, r1
 80046c0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	695b      	ldr	r3, [r3, #20]
 80046c6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80046c8:	887a      	ldrh	r2, [r7, #2]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	4013      	ands	r3, r2
 80046ce:	041a      	lsls	r2, r3, #16
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	43d9      	mvns	r1, r3
 80046d4:	887b      	ldrh	r3, [r7, #2]
 80046d6:	400b      	ands	r3, r1
 80046d8:	431a      	orrs	r2, r3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	619a      	str	r2, [r3, #24]
}
 80046de:	bf00      	nop
 80046e0:	3714      	adds	r7, #20
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr
	...

080046ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d101      	bne.n	80046fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e12b      	b.n	8004956 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004704:	b2db      	uxtb	r3, r3
 8004706:	2b00      	cmp	r3, #0
 8004708:	d106      	bne.n	8004718 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f7fc ffdc 	bl	80016d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2224      	movs	r2, #36	@ 0x24
 800471c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f022 0201 	bic.w	r2, r2, #1
 800472e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800473e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800474e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004750:	f000 fd80 	bl	8005254 <HAL_RCC_GetPCLK1Freq>
 8004754:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	4a81      	ldr	r2, [pc, #516]	@ (8004960 <HAL_I2C_Init+0x274>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d807      	bhi.n	8004770 <HAL_I2C_Init+0x84>
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	4a80      	ldr	r2, [pc, #512]	@ (8004964 <HAL_I2C_Init+0x278>)
 8004764:	4293      	cmp	r3, r2
 8004766:	bf94      	ite	ls
 8004768:	2301      	movls	r3, #1
 800476a:	2300      	movhi	r3, #0
 800476c:	b2db      	uxtb	r3, r3
 800476e:	e006      	b.n	800477e <HAL_I2C_Init+0x92>
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	4a7d      	ldr	r2, [pc, #500]	@ (8004968 <HAL_I2C_Init+0x27c>)
 8004774:	4293      	cmp	r3, r2
 8004776:	bf94      	ite	ls
 8004778:	2301      	movls	r3, #1
 800477a:	2300      	movhi	r3, #0
 800477c:	b2db      	uxtb	r3, r3
 800477e:	2b00      	cmp	r3, #0
 8004780:	d001      	beq.n	8004786 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	e0e7      	b.n	8004956 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	4a78      	ldr	r2, [pc, #480]	@ (800496c <HAL_I2C_Init+0x280>)
 800478a:	fba2 2303 	umull	r2, r3, r2, r3
 800478e:	0c9b      	lsrs	r3, r3, #18
 8004790:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	68ba      	ldr	r2, [r7, #8]
 80047a2:	430a      	orrs	r2, r1
 80047a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	6a1b      	ldr	r3, [r3, #32]
 80047ac:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	4a6a      	ldr	r2, [pc, #424]	@ (8004960 <HAL_I2C_Init+0x274>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d802      	bhi.n	80047c0 <HAL_I2C_Init+0xd4>
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	3301      	adds	r3, #1
 80047be:	e009      	b.n	80047d4 <HAL_I2C_Init+0xe8>
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80047c6:	fb02 f303 	mul.w	r3, r2, r3
 80047ca:	4a69      	ldr	r2, [pc, #420]	@ (8004970 <HAL_I2C_Init+0x284>)
 80047cc:	fba2 2303 	umull	r2, r3, r2, r3
 80047d0:	099b      	lsrs	r3, r3, #6
 80047d2:	3301      	adds	r3, #1
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	6812      	ldr	r2, [r2, #0]
 80047d8:	430b      	orrs	r3, r1
 80047da:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	69db      	ldr	r3, [r3, #28]
 80047e2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80047e6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	495c      	ldr	r1, [pc, #368]	@ (8004960 <HAL_I2C_Init+0x274>)
 80047f0:	428b      	cmp	r3, r1
 80047f2:	d819      	bhi.n	8004828 <HAL_I2C_Init+0x13c>
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	1e59      	subs	r1, r3, #1
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	005b      	lsls	r3, r3, #1
 80047fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8004802:	1c59      	adds	r1, r3, #1
 8004804:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004808:	400b      	ands	r3, r1
 800480a:	2b00      	cmp	r3, #0
 800480c:	d00a      	beq.n	8004824 <HAL_I2C_Init+0x138>
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	1e59      	subs	r1, r3, #1
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	005b      	lsls	r3, r3, #1
 8004818:	fbb1 f3f3 	udiv	r3, r1, r3
 800481c:	3301      	adds	r3, #1
 800481e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004822:	e051      	b.n	80048c8 <HAL_I2C_Init+0x1dc>
 8004824:	2304      	movs	r3, #4
 8004826:	e04f      	b.n	80048c8 <HAL_I2C_Init+0x1dc>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d111      	bne.n	8004854 <HAL_I2C_Init+0x168>
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	1e58      	subs	r0, r3, #1
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6859      	ldr	r1, [r3, #4]
 8004838:	460b      	mov	r3, r1
 800483a:	005b      	lsls	r3, r3, #1
 800483c:	440b      	add	r3, r1
 800483e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004842:	3301      	adds	r3, #1
 8004844:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004848:	2b00      	cmp	r3, #0
 800484a:	bf0c      	ite	eq
 800484c:	2301      	moveq	r3, #1
 800484e:	2300      	movne	r3, #0
 8004850:	b2db      	uxtb	r3, r3
 8004852:	e012      	b.n	800487a <HAL_I2C_Init+0x18e>
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	1e58      	subs	r0, r3, #1
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6859      	ldr	r1, [r3, #4]
 800485c:	460b      	mov	r3, r1
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	440b      	add	r3, r1
 8004862:	0099      	lsls	r1, r3, #2
 8004864:	440b      	add	r3, r1
 8004866:	fbb0 f3f3 	udiv	r3, r0, r3
 800486a:	3301      	adds	r3, #1
 800486c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004870:	2b00      	cmp	r3, #0
 8004872:	bf0c      	ite	eq
 8004874:	2301      	moveq	r3, #1
 8004876:	2300      	movne	r3, #0
 8004878:	b2db      	uxtb	r3, r3
 800487a:	2b00      	cmp	r3, #0
 800487c:	d001      	beq.n	8004882 <HAL_I2C_Init+0x196>
 800487e:	2301      	movs	r3, #1
 8004880:	e022      	b.n	80048c8 <HAL_I2C_Init+0x1dc>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d10e      	bne.n	80048a8 <HAL_I2C_Init+0x1bc>
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	1e58      	subs	r0, r3, #1
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6859      	ldr	r1, [r3, #4]
 8004892:	460b      	mov	r3, r1
 8004894:	005b      	lsls	r3, r3, #1
 8004896:	440b      	add	r3, r1
 8004898:	fbb0 f3f3 	udiv	r3, r0, r3
 800489c:	3301      	adds	r3, #1
 800489e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80048a6:	e00f      	b.n	80048c8 <HAL_I2C_Init+0x1dc>
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	1e58      	subs	r0, r3, #1
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6859      	ldr	r1, [r3, #4]
 80048b0:	460b      	mov	r3, r1
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	440b      	add	r3, r1
 80048b6:	0099      	lsls	r1, r3, #2
 80048b8:	440b      	add	r3, r1
 80048ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80048be:	3301      	adds	r3, #1
 80048c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048c4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80048c8:	6879      	ldr	r1, [r7, #4]
 80048ca:	6809      	ldr	r1, [r1, #0]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	69da      	ldr	r2, [r3, #28]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a1b      	ldr	r3, [r3, #32]
 80048e2:	431a      	orrs	r2, r3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	430a      	orrs	r2, r1
 80048ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80048f6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	6911      	ldr	r1, [r2, #16]
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	68d2      	ldr	r2, [r2, #12]
 8004902:	4311      	orrs	r1, r2
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	6812      	ldr	r2, [r2, #0]
 8004908:	430b      	orrs	r3, r1
 800490a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	695a      	ldr	r2, [r3, #20]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	699b      	ldr	r3, [r3, #24]
 800491e:	431a      	orrs	r2, r3
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	430a      	orrs	r2, r1
 8004926:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f042 0201 	orr.w	r2, r2, #1
 8004936:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2200      	movs	r2, #0
 800493c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2220      	movs	r2, #32
 8004942:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2200      	movs	r2, #0
 8004950:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004954:	2300      	movs	r3, #0
}
 8004956:	4618      	mov	r0, r3
 8004958:	3710      	adds	r7, #16
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
 800495e:	bf00      	nop
 8004960:	000186a0 	.word	0x000186a0
 8004964:	001e847f 	.word	0x001e847f
 8004968:	003d08ff 	.word	0x003d08ff
 800496c:	431bde83 	.word	0x431bde83
 8004970:	10624dd3 	.word	0x10624dd3

08004974 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b086      	sub	sp, #24
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d101      	bne.n	8004986 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e267      	b.n	8004e56 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 0301 	and.w	r3, r3, #1
 800498e:	2b00      	cmp	r3, #0
 8004990:	d075      	beq.n	8004a7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004992:	4b88      	ldr	r3, [pc, #544]	@ (8004bb4 <HAL_RCC_OscConfig+0x240>)
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	f003 030c 	and.w	r3, r3, #12
 800499a:	2b04      	cmp	r3, #4
 800499c:	d00c      	beq.n	80049b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800499e:	4b85      	ldr	r3, [pc, #532]	@ (8004bb4 <HAL_RCC_OscConfig+0x240>)
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80049a6:	2b08      	cmp	r3, #8
 80049a8:	d112      	bne.n	80049d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049aa:	4b82      	ldr	r3, [pc, #520]	@ (8004bb4 <HAL_RCC_OscConfig+0x240>)
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80049b6:	d10b      	bne.n	80049d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049b8:	4b7e      	ldr	r3, [pc, #504]	@ (8004bb4 <HAL_RCC_OscConfig+0x240>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d05b      	beq.n	8004a7c <HAL_RCC_OscConfig+0x108>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d157      	bne.n	8004a7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e242      	b.n	8004e56 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049d8:	d106      	bne.n	80049e8 <HAL_RCC_OscConfig+0x74>
 80049da:	4b76      	ldr	r3, [pc, #472]	@ (8004bb4 <HAL_RCC_OscConfig+0x240>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a75      	ldr	r2, [pc, #468]	@ (8004bb4 <HAL_RCC_OscConfig+0x240>)
 80049e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049e4:	6013      	str	r3, [r2, #0]
 80049e6:	e01d      	b.n	8004a24 <HAL_RCC_OscConfig+0xb0>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80049f0:	d10c      	bne.n	8004a0c <HAL_RCC_OscConfig+0x98>
 80049f2:	4b70      	ldr	r3, [pc, #448]	@ (8004bb4 <HAL_RCC_OscConfig+0x240>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a6f      	ldr	r2, [pc, #444]	@ (8004bb4 <HAL_RCC_OscConfig+0x240>)
 80049f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80049fc:	6013      	str	r3, [r2, #0]
 80049fe:	4b6d      	ldr	r3, [pc, #436]	@ (8004bb4 <HAL_RCC_OscConfig+0x240>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a6c      	ldr	r2, [pc, #432]	@ (8004bb4 <HAL_RCC_OscConfig+0x240>)
 8004a04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a08:	6013      	str	r3, [r2, #0]
 8004a0a:	e00b      	b.n	8004a24 <HAL_RCC_OscConfig+0xb0>
 8004a0c:	4b69      	ldr	r3, [pc, #420]	@ (8004bb4 <HAL_RCC_OscConfig+0x240>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a68      	ldr	r2, [pc, #416]	@ (8004bb4 <HAL_RCC_OscConfig+0x240>)
 8004a12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a16:	6013      	str	r3, [r2, #0]
 8004a18:	4b66      	ldr	r3, [pc, #408]	@ (8004bb4 <HAL_RCC_OscConfig+0x240>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a65      	ldr	r2, [pc, #404]	@ (8004bb4 <HAL_RCC_OscConfig+0x240>)
 8004a1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d013      	beq.n	8004a54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a2c:	f7fe f8a8 	bl	8002b80 <HAL_GetTick>
 8004a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a32:	e008      	b.n	8004a46 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a34:	f7fe f8a4 	bl	8002b80 <HAL_GetTick>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	2b64      	cmp	r3, #100	@ 0x64
 8004a40:	d901      	bls.n	8004a46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	e207      	b.n	8004e56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a46:	4b5b      	ldr	r3, [pc, #364]	@ (8004bb4 <HAL_RCC_OscConfig+0x240>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d0f0      	beq.n	8004a34 <HAL_RCC_OscConfig+0xc0>
 8004a52:	e014      	b.n	8004a7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a54:	f7fe f894 	bl	8002b80 <HAL_GetTick>
 8004a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a5a:	e008      	b.n	8004a6e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a5c:	f7fe f890 	bl	8002b80 <HAL_GetTick>
 8004a60:	4602      	mov	r2, r0
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	2b64      	cmp	r3, #100	@ 0x64
 8004a68:	d901      	bls.n	8004a6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e1f3      	b.n	8004e56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a6e:	4b51      	ldr	r3, [pc, #324]	@ (8004bb4 <HAL_RCC_OscConfig+0x240>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d1f0      	bne.n	8004a5c <HAL_RCC_OscConfig+0xe8>
 8004a7a:	e000      	b.n	8004a7e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 0302 	and.w	r3, r3, #2
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d063      	beq.n	8004b52 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a8a:	4b4a      	ldr	r3, [pc, #296]	@ (8004bb4 <HAL_RCC_OscConfig+0x240>)
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	f003 030c 	and.w	r3, r3, #12
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d00b      	beq.n	8004aae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a96:	4b47      	ldr	r3, [pc, #284]	@ (8004bb4 <HAL_RCC_OscConfig+0x240>)
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a9e:	2b08      	cmp	r3, #8
 8004aa0:	d11c      	bne.n	8004adc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004aa2:	4b44      	ldr	r3, [pc, #272]	@ (8004bb4 <HAL_RCC_OscConfig+0x240>)
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d116      	bne.n	8004adc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004aae:	4b41      	ldr	r3, [pc, #260]	@ (8004bb4 <HAL_RCC_OscConfig+0x240>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 0302 	and.w	r3, r3, #2
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d005      	beq.n	8004ac6 <HAL_RCC_OscConfig+0x152>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d001      	beq.n	8004ac6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e1c7      	b.n	8004e56 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ac6:	4b3b      	ldr	r3, [pc, #236]	@ (8004bb4 <HAL_RCC_OscConfig+0x240>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	00db      	lsls	r3, r3, #3
 8004ad4:	4937      	ldr	r1, [pc, #220]	@ (8004bb4 <HAL_RCC_OscConfig+0x240>)
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ada:	e03a      	b.n	8004b52 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d020      	beq.n	8004b26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ae4:	4b34      	ldr	r3, [pc, #208]	@ (8004bb8 <HAL_RCC_OscConfig+0x244>)
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aea:	f7fe f849 	bl	8002b80 <HAL_GetTick>
 8004aee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004af0:	e008      	b.n	8004b04 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004af2:	f7fe f845 	bl	8002b80 <HAL_GetTick>
 8004af6:	4602      	mov	r2, r0
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	2b02      	cmp	r3, #2
 8004afe:	d901      	bls.n	8004b04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004b00:	2303      	movs	r3, #3
 8004b02:	e1a8      	b.n	8004e56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b04:	4b2b      	ldr	r3, [pc, #172]	@ (8004bb4 <HAL_RCC_OscConfig+0x240>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f003 0302 	and.w	r3, r3, #2
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d0f0      	beq.n	8004af2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b10:	4b28      	ldr	r3, [pc, #160]	@ (8004bb4 <HAL_RCC_OscConfig+0x240>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	691b      	ldr	r3, [r3, #16]
 8004b1c:	00db      	lsls	r3, r3, #3
 8004b1e:	4925      	ldr	r1, [pc, #148]	@ (8004bb4 <HAL_RCC_OscConfig+0x240>)
 8004b20:	4313      	orrs	r3, r2
 8004b22:	600b      	str	r3, [r1, #0]
 8004b24:	e015      	b.n	8004b52 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b26:	4b24      	ldr	r3, [pc, #144]	@ (8004bb8 <HAL_RCC_OscConfig+0x244>)
 8004b28:	2200      	movs	r2, #0
 8004b2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b2c:	f7fe f828 	bl	8002b80 <HAL_GetTick>
 8004b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b32:	e008      	b.n	8004b46 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b34:	f7fe f824 	bl	8002b80 <HAL_GetTick>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	2b02      	cmp	r3, #2
 8004b40:	d901      	bls.n	8004b46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004b42:	2303      	movs	r3, #3
 8004b44:	e187      	b.n	8004e56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b46:	4b1b      	ldr	r3, [pc, #108]	@ (8004bb4 <HAL_RCC_OscConfig+0x240>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 0302 	and.w	r3, r3, #2
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d1f0      	bne.n	8004b34 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 0308 	and.w	r3, r3, #8
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d036      	beq.n	8004bcc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	695b      	ldr	r3, [r3, #20]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d016      	beq.n	8004b94 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b66:	4b15      	ldr	r3, [pc, #84]	@ (8004bbc <HAL_RCC_OscConfig+0x248>)
 8004b68:	2201      	movs	r2, #1
 8004b6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b6c:	f7fe f808 	bl	8002b80 <HAL_GetTick>
 8004b70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b72:	e008      	b.n	8004b86 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b74:	f7fe f804 	bl	8002b80 <HAL_GetTick>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	1ad3      	subs	r3, r2, r3
 8004b7e:	2b02      	cmp	r3, #2
 8004b80:	d901      	bls.n	8004b86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004b82:	2303      	movs	r3, #3
 8004b84:	e167      	b.n	8004e56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b86:	4b0b      	ldr	r3, [pc, #44]	@ (8004bb4 <HAL_RCC_OscConfig+0x240>)
 8004b88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b8a:	f003 0302 	and.w	r3, r3, #2
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d0f0      	beq.n	8004b74 <HAL_RCC_OscConfig+0x200>
 8004b92:	e01b      	b.n	8004bcc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b94:	4b09      	ldr	r3, [pc, #36]	@ (8004bbc <HAL_RCC_OscConfig+0x248>)
 8004b96:	2200      	movs	r2, #0
 8004b98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b9a:	f7fd fff1 	bl	8002b80 <HAL_GetTick>
 8004b9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ba0:	e00e      	b.n	8004bc0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ba2:	f7fd ffed 	bl	8002b80 <HAL_GetTick>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	1ad3      	subs	r3, r2, r3
 8004bac:	2b02      	cmp	r3, #2
 8004bae:	d907      	bls.n	8004bc0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004bb0:	2303      	movs	r3, #3
 8004bb2:	e150      	b.n	8004e56 <HAL_RCC_OscConfig+0x4e2>
 8004bb4:	40023800 	.word	0x40023800
 8004bb8:	42470000 	.word	0x42470000
 8004bbc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bc0:	4b88      	ldr	r3, [pc, #544]	@ (8004de4 <HAL_RCC_OscConfig+0x470>)
 8004bc2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bc4:	f003 0302 	and.w	r3, r3, #2
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d1ea      	bne.n	8004ba2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 0304 	and.w	r3, r3, #4
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	f000 8097 	beq.w	8004d08 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bde:	4b81      	ldr	r3, [pc, #516]	@ (8004de4 <HAL_RCC_OscConfig+0x470>)
 8004be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004be2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d10f      	bne.n	8004c0a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bea:	2300      	movs	r3, #0
 8004bec:	60bb      	str	r3, [r7, #8]
 8004bee:	4b7d      	ldr	r3, [pc, #500]	@ (8004de4 <HAL_RCC_OscConfig+0x470>)
 8004bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bf2:	4a7c      	ldr	r2, [pc, #496]	@ (8004de4 <HAL_RCC_OscConfig+0x470>)
 8004bf4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004bf8:	6413      	str	r3, [r2, #64]	@ 0x40
 8004bfa:	4b7a      	ldr	r3, [pc, #488]	@ (8004de4 <HAL_RCC_OscConfig+0x470>)
 8004bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c02:	60bb      	str	r3, [r7, #8]
 8004c04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c06:	2301      	movs	r3, #1
 8004c08:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c0a:	4b77      	ldr	r3, [pc, #476]	@ (8004de8 <HAL_RCC_OscConfig+0x474>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d118      	bne.n	8004c48 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c16:	4b74      	ldr	r3, [pc, #464]	@ (8004de8 <HAL_RCC_OscConfig+0x474>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a73      	ldr	r2, [pc, #460]	@ (8004de8 <HAL_RCC_OscConfig+0x474>)
 8004c1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c22:	f7fd ffad 	bl	8002b80 <HAL_GetTick>
 8004c26:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c28:	e008      	b.n	8004c3c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c2a:	f7fd ffa9 	bl	8002b80 <HAL_GetTick>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	1ad3      	subs	r3, r2, r3
 8004c34:	2b02      	cmp	r3, #2
 8004c36:	d901      	bls.n	8004c3c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004c38:	2303      	movs	r3, #3
 8004c3a:	e10c      	b.n	8004e56 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c3c:	4b6a      	ldr	r3, [pc, #424]	@ (8004de8 <HAL_RCC_OscConfig+0x474>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d0f0      	beq.n	8004c2a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d106      	bne.n	8004c5e <HAL_RCC_OscConfig+0x2ea>
 8004c50:	4b64      	ldr	r3, [pc, #400]	@ (8004de4 <HAL_RCC_OscConfig+0x470>)
 8004c52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c54:	4a63      	ldr	r2, [pc, #396]	@ (8004de4 <HAL_RCC_OscConfig+0x470>)
 8004c56:	f043 0301 	orr.w	r3, r3, #1
 8004c5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c5c:	e01c      	b.n	8004c98 <HAL_RCC_OscConfig+0x324>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	2b05      	cmp	r3, #5
 8004c64:	d10c      	bne.n	8004c80 <HAL_RCC_OscConfig+0x30c>
 8004c66:	4b5f      	ldr	r3, [pc, #380]	@ (8004de4 <HAL_RCC_OscConfig+0x470>)
 8004c68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c6a:	4a5e      	ldr	r2, [pc, #376]	@ (8004de4 <HAL_RCC_OscConfig+0x470>)
 8004c6c:	f043 0304 	orr.w	r3, r3, #4
 8004c70:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c72:	4b5c      	ldr	r3, [pc, #368]	@ (8004de4 <HAL_RCC_OscConfig+0x470>)
 8004c74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c76:	4a5b      	ldr	r2, [pc, #364]	@ (8004de4 <HAL_RCC_OscConfig+0x470>)
 8004c78:	f043 0301 	orr.w	r3, r3, #1
 8004c7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c7e:	e00b      	b.n	8004c98 <HAL_RCC_OscConfig+0x324>
 8004c80:	4b58      	ldr	r3, [pc, #352]	@ (8004de4 <HAL_RCC_OscConfig+0x470>)
 8004c82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c84:	4a57      	ldr	r2, [pc, #348]	@ (8004de4 <HAL_RCC_OscConfig+0x470>)
 8004c86:	f023 0301 	bic.w	r3, r3, #1
 8004c8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c8c:	4b55      	ldr	r3, [pc, #340]	@ (8004de4 <HAL_RCC_OscConfig+0x470>)
 8004c8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c90:	4a54      	ldr	r2, [pc, #336]	@ (8004de4 <HAL_RCC_OscConfig+0x470>)
 8004c92:	f023 0304 	bic.w	r3, r3, #4
 8004c96:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d015      	beq.n	8004ccc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ca0:	f7fd ff6e 	bl	8002b80 <HAL_GetTick>
 8004ca4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ca6:	e00a      	b.n	8004cbe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ca8:	f7fd ff6a 	bl	8002b80 <HAL_GetTick>
 8004cac:	4602      	mov	r2, r0
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d901      	bls.n	8004cbe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e0cb      	b.n	8004e56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cbe:	4b49      	ldr	r3, [pc, #292]	@ (8004de4 <HAL_RCC_OscConfig+0x470>)
 8004cc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cc2:	f003 0302 	and.w	r3, r3, #2
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d0ee      	beq.n	8004ca8 <HAL_RCC_OscConfig+0x334>
 8004cca:	e014      	b.n	8004cf6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ccc:	f7fd ff58 	bl	8002b80 <HAL_GetTick>
 8004cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cd2:	e00a      	b.n	8004cea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cd4:	f7fd ff54 	bl	8002b80 <HAL_GetTick>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	1ad3      	subs	r3, r2, r3
 8004cde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d901      	bls.n	8004cea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004ce6:	2303      	movs	r3, #3
 8004ce8:	e0b5      	b.n	8004e56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cea:	4b3e      	ldr	r3, [pc, #248]	@ (8004de4 <HAL_RCC_OscConfig+0x470>)
 8004cec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cee:	f003 0302 	and.w	r3, r3, #2
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d1ee      	bne.n	8004cd4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004cf6:	7dfb      	ldrb	r3, [r7, #23]
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d105      	bne.n	8004d08 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cfc:	4b39      	ldr	r3, [pc, #228]	@ (8004de4 <HAL_RCC_OscConfig+0x470>)
 8004cfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d00:	4a38      	ldr	r2, [pc, #224]	@ (8004de4 <HAL_RCC_OscConfig+0x470>)
 8004d02:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d06:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	699b      	ldr	r3, [r3, #24]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	f000 80a1 	beq.w	8004e54 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d12:	4b34      	ldr	r3, [pc, #208]	@ (8004de4 <HAL_RCC_OscConfig+0x470>)
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	f003 030c 	and.w	r3, r3, #12
 8004d1a:	2b08      	cmp	r3, #8
 8004d1c:	d05c      	beq.n	8004dd8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	699b      	ldr	r3, [r3, #24]
 8004d22:	2b02      	cmp	r3, #2
 8004d24:	d141      	bne.n	8004daa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d26:	4b31      	ldr	r3, [pc, #196]	@ (8004dec <HAL_RCC_OscConfig+0x478>)
 8004d28:	2200      	movs	r2, #0
 8004d2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d2c:	f7fd ff28 	bl	8002b80 <HAL_GetTick>
 8004d30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d32:	e008      	b.n	8004d46 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d34:	f7fd ff24 	bl	8002b80 <HAL_GetTick>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	1ad3      	subs	r3, r2, r3
 8004d3e:	2b02      	cmp	r3, #2
 8004d40:	d901      	bls.n	8004d46 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004d42:	2303      	movs	r3, #3
 8004d44:	e087      	b.n	8004e56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d46:	4b27      	ldr	r3, [pc, #156]	@ (8004de4 <HAL_RCC_OscConfig+0x470>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d1f0      	bne.n	8004d34 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	69da      	ldr	r2, [r3, #28]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6a1b      	ldr	r3, [r3, #32]
 8004d5a:	431a      	orrs	r2, r3
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d60:	019b      	lsls	r3, r3, #6
 8004d62:	431a      	orrs	r2, r3
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d68:	085b      	lsrs	r3, r3, #1
 8004d6a:	3b01      	subs	r3, #1
 8004d6c:	041b      	lsls	r3, r3, #16
 8004d6e:	431a      	orrs	r2, r3
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d74:	061b      	lsls	r3, r3, #24
 8004d76:	491b      	ldr	r1, [pc, #108]	@ (8004de4 <HAL_RCC_OscConfig+0x470>)
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d7c:	4b1b      	ldr	r3, [pc, #108]	@ (8004dec <HAL_RCC_OscConfig+0x478>)
 8004d7e:	2201      	movs	r2, #1
 8004d80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d82:	f7fd fefd 	bl	8002b80 <HAL_GetTick>
 8004d86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d88:	e008      	b.n	8004d9c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d8a:	f7fd fef9 	bl	8002b80 <HAL_GetTick>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	1ad3      	subs	r3, r2, r3
 8004d94:	2b02      	cmp	r3, #2
 8004d96:	d901      	bls.n	8004d9c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004d98:	2303      	movs	r3, #3
 8004d9a:	e05c      	b.n	8004e56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d9c:	4b11      	ldr	r3, [pc, #68]	@ (8004de4 <HAL_RCC_OscConfig+0x470>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d0f0      	beq.n	8004d8a <HAL_RCC_OscConfig+0x416>
 8004da8:	e054      	b.n	8004e54 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004daa:	4b10      	ldr	r3, [pc, #64]	@ (8004dec <HAL_RCC_OscConfig+0x478>)
 8004dac:	2200      	movs	r2, #0
 8004dae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004db0:	f7fd fee6 	bl	8002b80 <HAL_GetTick>
 8004db4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004db6:	e008      	b.n	8004dca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004db8:	f7fd fee2 	bl	8002b80 <HAL_GetTick>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	1ad3      	subs	r3, r2, r3
 8004dc2:	2b02      	cmp	r3, #2
 8004dc4:	d901      	bls.n	8004dca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	e045      	b.n	8004e56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dca:	4b06      	ldr	r3, [pc, #24]	@ (8004de4 <HAL_RCC_OscConfig+0x470>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d1f0      	bne.n	8004db8 <HAL_RCC_OscConfig+0x444>
 8004dd6:	e03d      	b.n	8004e54 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	699b      	ldr	r3, [r3, #24]
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d107      	bne.n	8004df0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	e038      	b.n	8004e56 <HAL_RCC_OscConfig+0x4e2>
 8004de4:	40023800 	.word	0x40023800
 8004de8:	40007000 	.word	0x40007000
 8004dec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004df0:	4b1b      	ldr	r3, [pc, #108]	@ (8004e60 <HAL_RCC_OscConfig+0x4ec>)
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d028      	beq.n	8004e50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d121      	bne.n	8004e50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d11a      	bne.n	8004e50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e1a:	68fa      	ldr	r2, [r7, #12]
 8004e1c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004e20:	4013      	ands	r3, r2
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004e26:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d111      	bne.n	8004e50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e36:	085b      	lsrs	r3, r3, #1
 8004e38:	3b01      	subs	r3, #1
 8004e3a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d107      	bne.n	8004e50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e4a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d001      	beq.n	8004e54 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	e000      	b.n	8004e56 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004e54:	2300      	movs	r3, #0
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3718      	adds	r7, #24
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
 8004e5e:	bf00      	nop
 8004e60:	40023800 	.word	0x40023800

08004e64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b084      	sub	sp, #16
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d101      	bne.n	8004e78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	e0cc      	b.n	8005012 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e78:	4b68      	ldr	r3, [pc, #416]	@ (800501c <HAL_RCC_ClockConfig+0x1b8>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 0307 	and.w	r3, r3, #7
 8004e80:	683a      	ldr	r2, [r7, #0]
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d90c      	bls.n	8004ea0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e86:	4b65      	ldr	r3, [pc, #404]	@ (800501c <HAL_RCC_ClockConfig+0x1b8>)
 8004e88:	683a      	ldr	r2, [r7, #0]
 8004e8a:	b2d2      	uxtb	r2, r2
 8004e8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e8e:	4b63      	ldr	r3, [pc, #396]	@ (800501c <HAL_RCC_ClockConfig+0x1b8>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 0307 	and.w	r3, r3, #7
 8004e96:	683a      	ldr	r2, [r7, #0]
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d001      	beq.n	8004ea0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e0b8      	b.n	8005012 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 0302 	and.w	r3, r3, #2
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d020      	beq.n	8004eee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 0304 	and.w	r3, r3, #4
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d005      	beq.n	8004ec4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004eb8:	4b59      	ldr	r3, [pc, #356]	@ (8005020 <HAL_RCC_ClockConfig+0x1bc>)
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	4a58      	ldr	r2, [pc, #352]	@ (8005020 <HAL_RCC_ClockConfig+0x1bc>)
 8004ebe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004ec2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 0308 	and.w	r3, r3, #8
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d005      	beq.n	8004edc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ed0:	4b53      	ldr	r3, [pc, #332]	@ (8005020 <HAL_RCC_ClockConfig+0x1bc>)
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	4a52      	ldr	r2, [pc, #328]	@ (8005020 <HAL_RCC_ClockConfig+0x1bc>)
 8004ed6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004eda:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004edc:	4b50      	ldr	r3, [pc, #320]	@ (8005020 <HAL_RCC_ClockConfig+0x1bc>)
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	494d      	ldr	r1, [pc, #308]	@ (8005020 <HAL_RCC_ClockConfig+0x1bc>)
 8004eea:	4313      	orrs	r3, r2
 8004eec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 0301 	and.w	r3, r3, #1
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d044      	beq.n	8004f84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d107      	bne.n	8004f12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f02:	4b47      	ldr	r3, [pc, #284]	@ (8005020 <HAL_RCC_ClockConfig+0x1bc>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d119      	bne.n	8004f42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e07f      	b.n	8005012 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	2b02      	cmp	r3, #2
 8004f18:	d003      	beq.n	8004f22 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f1e:	2b03      	cmp	r3, #3
 8004f20:	d107      	bne.n	8004f32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f22:	4b3f      	ldr	r3, [pc, #252]	@ (8005020 <HAL_RCC_ClockConfig+0x1bc>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d109      	bne.n	8004f42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e06f      	b.n	8005012 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f32:	4b3b      	ldr	r3, [pc, #236]	@ (8005020 <HAL_RCC_ClockConfig+0x1bc>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 0302 	and.w	r3, r3, #2
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d101      	bne.n	8004f42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e067      	b.n	8005012 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f42:	4b37      	ldr	r3, [pc, #220]	@ (8005020 <HAL_RCC_ClockConfig+0x1bc>)
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	f023 0203 	bic.w	r2, r3, #3
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	4934      	ldr	r1, [pc, #208]	@ (8005020 <HAL_RCC_ClockConfig+0x1bc>)
 8004f50:	4313      	orrs	r3, r2
 8004f52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f54:	f7fd fe14 	bl	8002b80 <HAL_GetTick>
 8004f58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f5a:	e00a      	b.n	8004f72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f5c:	f7fd fe10 	bl	8002b80 <HAL_GetTick>
 8004f60:	4602      	mov	r2, r0
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	1ad3      	subs	r3, r2, r3
 8004f66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d901      	bls.n	8004f72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f6e:	2303      	movs	r3, #3
 8004f70:	e04f      	b.n	8005012 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f72:	4b2b      	ldr	r3, [pc, #172]	@ (8005020 <HAL_RCC_ClockConfig+0x1bc>)
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	f003 020c 	and.w	r2, r3, #12
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	009b      	lsls	r3, r3, #2
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d1eb      	bne.n	8004f5c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f84:	4b25      	ldr	r3, [pc, #148]	@ (800501c <HAL_RCC_ClockConfig+0x1b8>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 0307 	and.w	r3, r3, #7
 8004f8c:	683a      	ldr	r2, [r7, #0]
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d20c      	bcs.n	8004fac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f92:	4b22      	ldr	r3, [pc, #136]	@ (800501c <HAL_RCC_ClockConfig+0x1b8>)
 8004f94:	683a      	ldr	r2, [r7, #0]
 8004f96:	b2d2      	uxtb	r2, r2
 8004f98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f9a:	4b20      	ldr	r3, [pc, #128]	@ (800501c <HAL_RCC_ClockConfig+0x1b8>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 0307 	and.w	r3, r3, #7
 8004fa2:	683a      	ldr	r2, [r7, #0]
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d001      	beq.n	8004fac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e032      	b.n	8005012 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 0304 	and.w	r3, r3, #4
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d008      	beq.n	8004fca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004fb8:	4b19      	ldr	r3, [pc, #100]	@ (8005020 <HAL_RCC_ClockConfig+0x1bc>)
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	4916      	ldr	r1, [pc, #88]	@ (8005020 <HAL_RCC_ClockConfig+0x1bc>)
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 0308 	and.w	r3, r3, #8
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d009      	beq.n	8004fea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004fd6:	4b12      	ldr	r3, [pc, #72]	@ (8005020 <HAL_RCC_ClockConfig+0x1bc>)
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	691b      	ldr	r3, [r3, #16]
 8004fe2:	00db      	lsls	r3, r3, #3
 8004fe4:	490e      	ldr	r1, [pc, #56]	@ (8005020 <HAL_RCC_ClockConfig+0x1bc>)
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004fea:	f000 f821 	bl	8005030 <HAL_RCC_GetSysClockFreq>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	4b0b      	ldr	r3, [pc, #44]	@ (8005020 <HAL_RCC_ClockConfig+0x1bc>)
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	091b      	lsrs	r3, r3, #4
 8004ff6:	f003 030f 	and.w	r3, r3, #15
 8004ffa:	490a      	ldr	r1, [pc, #40]	@ (8005024 <HAL_RCC_ClockConfig+0x1c0>)
 8004ffc:	5ccb      	ldrb	r3, [r1, r3]
 8004ffe:	fa22 f303 	lsr.w	r3, r2, r3
 8005002:	4a09      	ldr	r2, [pc, #36]	@ (8005028 <HAL_RCC_ClockConfig+0x1c4>)
 8005004:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005006:	4b09      	ldr	r3, [pc, #36]	@ (800502c <HAL_RCC_ClockConfig+0x1c8>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4618      	mov	r0, r3
 800500c:	f7fd fd74 	bl	8002af8 <HAL_InitTick>

  return HAL_OK;
 8005010:	2300      	movs	r3, #0
}
 8005012:	4618      	mov	r0, r3
 8005014:	3710      	adds	r7, #16
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}
 800501a:	bf00      	nop
 800501c:	40023c00 	.word	0x40023c00
 8005020:	40023800 	.word	0x40023800
 8005024:	0800af98 	.word	0x0800af98
 8005028:	20000000 	.word	0x20000000
 800502c:	20000004 	.word	0x20000004

08005030 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005030:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005034:	b094      	sub	sp, #80	@ 0x50
 8005036:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005038:	2300      	movs	r3, #0
 800503a:	647b      	str	r3, [r7, #68]	@ 0x44
 800503c:	2300      	movs	r3, #0
 800503e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005040:	2300      	movs	r3, #0
 8005042:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005044:	2300      	movs	r3, #0
 8005046:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005048:	4b79      	ldr	r3, [pc, #484]	@ (8005230 <HAL_RCC_GetSysClockFreq+0x200>)
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	f003 030c 	and.w	r3, r3, #12
 8005050:	2b08      	cmp	r3, #8
 8005052:	d00d      	beq.n	8005070 <HAL_RCC_GetSysClockFreq+0x40>
 8005054:	2b08      	cmp	r3, #8
 8005056:	f200 80e1 	bhi.w	800521c <HAL_RCC_GetSysClockFreq+0x1ec>
 800505a:	2b00      	cmp	r3, #0
 800505c:	d002      	beq.n	8005064 <HAL_RCC_GetSysClockFreq+0x34>
 800505e:	2b04      	cmp	r3, #4
 8005060:	d003      	beq.n	800506a <HAL_RCC_GetSysClockFreq+0x3a>
 8005062:	e0db      	b.n	800521c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005064:	4b73      	ldr	r3, [pc, #460]	@ (8005234 <HAL_RCC_GetSysClockFreq+0x204>)
 8005066:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8005068:	e0db      	b.n	8005222 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800506a:	4b73      	ldr	r3, [pc, #460]	@ (8005238 <HAL_RCC_GetSysClockFreq+0x208>)
 800506c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800506e:	e0d8      	b.n	8005222 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005070:	4b6f      	ldr	r3, [pc, #444]	@ (8005230 <HAL_RCC_GetSysClockFreq+0x200>)
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005078:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800507a:	4b6d      	ldr	r3, [pc, #436]	@ (8005230 <HAL_RCC_GetSysClockFreq+0x200>)
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005082:	2b00      	cmp	r3, #0
 8005084:	d063      	beq.n	800514e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005086:	4b6a      	ldr	r3, [pc, #424]	@ (8005230 <HAL_RCC_GetSysClockFreq+0x200>)
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	099b      	lsrs	r3, r3, #6
 800508c:	2200      	movs	r2, #0
 800508e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005090:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005092:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005094:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005098:	633b      	str	r3, [r7, #48]	@ 0x30
 800509a:	2300      	movs	r3, #0
 800509c:	637b      	str	r3, [r7, #52]	@ 0x34
 800509e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80050a2:	4622      	mov	r2, r4
 80050a4:	462b      	mov	r3, r5
 80050a6:	f04f 0000 	mov.w	r0, #0
 80050aa:	f04f 0100 	mov.w	r1, #0
 80050ae:	0159      	lsls	r1, r3, #5
 80050b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80050b4:	0150      	lsls	r0, r2, #5
 80050b6:	4602      	mov	r2, r0
 80050b8:	460b      	mov	r3, r1
 80050ba:	4621      	mov	r1, r4
 80050bc:	1a51      	subs	r1, r2, r1
 80050be:	6139      	str	r1, [r7, #16]
 80050c0:	4629      	mov	r1, r5
 80050c2:	eb63 0301 	sbc.w	r3, r3, r1
 80050c6:	617b      	str	r3, [r7, #20]
 80050c8:	f04f 0200 	mov.w	r2, #0
 80050cc:	f04f 0300 	mov.w	r3, #0
 80050d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80050d4:	4659      	mov	r1, fp
 80050d6:	018b      	lsls	r3, r1, #6
 80050d8:	4651      	mov	r1, sl
 80050da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80050de:	4651      	mov	r1, sl
 80050e0:	018a      	lsls	r2, r1, #6
 80050e2:	4651      	mov	r1, sl
 80050e4:	ebb2 0801 	subs.w	r8, r2, r1
 80050e8:	4659      	mov	r1, fp
 80050ea:	eb63 0901 	sbc.w	r9, r3, r1
 80050ee:	f04f 0200 	mov.w	r2, #0
 80050f2:	f04f 0300 	mov.w	r3, #0
 80050f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80050fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80050fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005102:	4690      	mov	r8, r2
 8005104:	4699      	mov	r9, r3
 8005106:	4623      	mov	r3, r4
 8005108:	eb18 0303 	adds.w	r3, r8, r3
 800510c:	60bb      	str	r3, [r7, #8]
 800510e:	462b      	mov	r3, r5
 8005110:	eb49 0303 	adc.w	r3, r9, r3
 8005114:	60fb      	str	r3, [r7, #12]
 8005116:	f04f 0200 	mov.w	r2, #0
 800511a:	f04f 0300 	mov.w	r3, #0
 800511e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005122:	4629      	mov	r1, r5
 8005124:	024b      	lsls	r3, r1, #9
 8005126:	4621      	mov	r1, r4
 8005128:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800512c:	4621      	mov	r1, r4
 800512e:	024a      	lsls	r2, r1, #9
 8005130:	4610      	mov	r0, r2
 8005132:	4619      	mov	r1, r3
 8005134:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005136:	2200      	movs	r2, #0
 8005138:	62bb      	str	r3, [r7, #40]	@ 0x28
 800513a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800513c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005140:	f7fb fd10 	bl	8000b64 <__aeabi_uldivmod>
 8005144:	4602      	mov	r2, r0
 8005146:	460b      	mov	r3, r1
 8005148:	4613      	mov	r3, r2
 800514a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800514c:	e058      	b.n	8005200 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800514e:	4b38      	ldr	r3, [pc, #224]	@ (8005230 <HAL_RCC_GetSysClockFreq+0x200>)
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	099b      	lsrs	r3, r3, #6
 8005154:	2200      	movs	r2, #0
 8005156:	4618      	mov	r0, r3
 8005158:	4611      	mov	r1, r2
 800515a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800515e:	623b      	str	r3, [r7, #32]
 8005160:	2300      	movs	r3, #0
 8005162:	627b      	str	r3, [r7, #36]	@ 0x24
 8005164:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005168:	4642      	mov	r2, r8
 800516a:	464b      	mov	r3, r9
 800516c:	f04f 0000 	mov.w	r0, #0
 8005170:	f04f 0100 	mov.w	r1, #0
 8005174:	0159      	lsls	r1, r3, #5
 8005176:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800517a:	0150      	lsls	r0, r2, #5
 800517c:	4602      	mov	r2, r0
 800517e:	460b      	mov	r3, r1
 8005180:	4641      	mov	r1, r8
 8005182:	ebb2 0a01 	subs.w	sl, r2, r1
 8005186:	4649      	mov	r1, r9
 8005188:	eb63 0b01 	sbc.w	fp, r3, r1
 800518c:	f04f 0200 	mov.w	r2, #0
 8005190:	f04f 0300 	mov.w	r3, #0
 8005194:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005198:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800519c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80051a0:	ebb2 040a 	subs.w	r4, r2, sl
 80051a4:	eb63 050b 	sbc.w	r5, r3, fp
 80051a8:	f04f 0200 	mov.w	r2, #0
 80051ac:	f04f 0300 	mov.w	r3, #0
 80051b0:	00eb      	lsls	r3, r5, #3
 80051b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80051b6:	00e2      	lsls	r2, r4, #3
 80051b8:	4614      	mov	r4, r2
 80051ba:	461d      	mov	r5, r3
 80051bc:	4643      	mov	r3, r8
 80051be:	18e3      	adds	r3, r4, r3
 80051c0:	603b      	str	r3, [r7, #0]
 80051c2:	464b      	mov	r3, r9
 80051c4:	eb45 0303 	adc.w	r3, r5, r3
 80051c8:	607b      	str	r3, [r7, #4]
 80051ca:	f04f 0200 	mov.w	r2, #0
 80051ce:	f04f 0300 	mov.w	r3, #0
 80051d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80051d6:	4629      	mov	r1, r5
 80051d8:	028b      	lsls	r3, r1, #10
 80051da:	4621      	mov	r1, r4
 80051dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80051e0:	4621      	mov	r1, r4
 80051e2:	028a      	lsls	r2, r1, #10
 80051e4:	4610      	mov	r0, r2
 80051e6:	4619      	mov	r1, r3
 80051e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051ea:	2200      	movs	r2, #0
 80051ec:	61bb      	str	r3, [r7, #24]
 80051ee:	61fa      	str	r2, [r7, #28]
 80051f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80051f4:	f7fb fcb6 	bl	8000b64 <__aeabi_uldivmod>
 80051f8:	4602      	mov	r2, r0
 80051fa:	460b      	mov	r3, r1
 80051fc:	4613      	mov	r3, r2
 80051fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005200:	4b0b      	ldr	r3, [pc, #44]	@ (8005230 <HAL_RCC_GetSysClockFreq+0x200>)
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	0c1b      	lsrs	r3, r3, #16
 8005206:	f003 0303 	and.w	r3, r3, #3
 800520a:	3301      	adds	r3, #1
 800520c:	005b      	lsls	r3, r3, #1
 800520e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8005210:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005212:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005214:	fbb2 f3f3 	udiv	r3, r2, r3
 8005218:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800521a:	e002      	b.n	8005222 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800521c:	4b05      	ldr	r3, [pc, #20]	@ (8005234 <HAL_RCC_GetSysClockFreq+0x204>)
 800521e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005220:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005222:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005224:	4618      	mov	r0, r3
 8005226:	3750      	adds	r7, #80	@ 0x50
 8005228:	46bd      	mov	sp, r7
 800522a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800522e:	bf00      	nop
 8005230:	40023800 	.word	0x40023800
 8005234:	00f42400 	.word	0x00f42400
 8005238:	007a1200 	.word	0x007a1200

0800523c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800523c:	b480      	push	{r7}
 800523e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005240:	4b03      	ldr	r3, [pc, #12]	@ (8005250 <HAL_RCC_GetHCLKFreq+0x14>)
 8005242:	681b      	ldr	r3, [r3, #0]
}
 8005244:	4618      	mov	r0, r3
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr
 800524e:	bf00      	nop
 8005250:	20000000 	.word	0x20000000

08005254 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005258:	f7ff fff0 	bl	800523c <HAL_RCC_GetHCLKFreq>
 800525c:	4602      	mov	r2, r0
 800525e:	4b05      	ldr	r3, [pc, #20]	@ (8005274 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	0a9b      	lsrs	r3, r3, #10
 8005264:	f003 0307 	and.w	r3, r3, #7
 8005268:	4903      	ldr	r1, [pc, #12]	@ (8005278 <HAL_RCC_GetPCLK1Freq+0x24>)
 800526a:	5ccb      	ldrb	r3, [r1, r3]
 800526c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005270:	4618      	mov	r0, r3
 8005272:	bd80      	pop	{r7, pc}
 8005274:	40023800 	.word	0x40023800
 8005278:	0800afa8 	.word	0x0800afa8

0800527c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005280:	f7ff ffdc 	bl	800523c <HAL_RCC_GetHCLKFreq>
 8005284:	4602      	mov	r2, r0
 8005286:	4b05      	ldr	r3, [pc, #20]	@ (800529c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	0b5b      	lsrs	r3, r3, #13
 800528c:	f003 0307 	and.w	r3, r3, #7
 8005290:	4903      	ldr	r1, [pc, #12]	@ (80052a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005292:	5ccb      	ldrb	r3, [r1, r3]
 8005294:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005298:	4618      	mov	r0, r3
 800529a:	bd80      	pop	{r7, pc}
 800529c:	40023800 	.word	0x40023800
 80052a0:	0800afa8 	.word	0x0800afa8

080052a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b082      	sub	sp, #8
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d101      	bne.n	80052b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e07b      	b.n	80053ae <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d108      	bne.n	80052d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80052c6:	d009      	beq.n	80052dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2200      	movs	r2, #0
 80052cc:	61da      	str	r2, [r3, #28]
 80052ce:	e005      	b.n	80052dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2200      	movs	r2, #0
 80052d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80052e8:	b2db      	uxtb	r3, r3
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d106      	bne.n	80052fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f7fc fb48 	bl	800198c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2202      	movs	r2, #2
 8005300:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005312:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005324:	431a      	orrs	r2, r3
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800532e:	431a      	orrs	r2, r3
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	691b      	ldr	r3, [r3, #16]
 8005334:	f003 0302 	and.w	r3, r3, #2
 8005338:	431a      	orrs	r2, r3
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	695b      	ldr	r3, [r3, #20]
 800533e:	f003 0301 	and.w	r3, r3, #1
 8005342:	431a      	orrs	r2, r3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	699b      	ldr	r3, [r3, #24]
 8005348:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800534c:	431a      	orrs	r2, r3
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	69db      	ldr	r3, [r3, #28]
 8005352:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005356:	431a      	orrs	r2, r3
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6a1b      	ldr	r3, [r3, #32]
 800535c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005360:	ea42 0103 	orr.w	r1, r2, r3
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005368:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	430a      	orrs	r2, r1
 8005372:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	699b      	ldr	r3, [r3, #24]
 8005378:	0c1b      	lsrs	r3, r3, #16
 800537a:	f003 0104 	and.w	r1, r3, #4
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005382:	f003 0210 	and.w	r2, r3, #16
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	430a      	orrs	r2, r1
 800538c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	69da      	ldr	r2, [r3, #28]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800539c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2200      	movs	r2, #0
 80053a2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80053ac:	2300      	movs	r3, #0
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3708      	adds	r7, #8
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}

080053b6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053b6:	b580      	push	{r7, lr}
 80053b8:	b088      	sub	sp, #32
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	60f8      	str	r0, [r7, #12]
 80053be:	60b9      	str	r1, [r7, #8]
 80053c0:	603b      	str	r3, [r7, #0]
 80053c2:	4613      	mov	r3, r2
 80053c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80053c6:	2300      	movs	r3, #0
 80053c8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d101      	bne.n	80053d8 <HAL_SPI_Transmit+0x22>
 80053d4:	2302      	movs	r3, #2
 80053d6:	e126      	b.n	8005626 <HAL_SPI_Transmit+0x270>
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80053e0:	f7fd fbce 	bl	8002b80 <HAL_GetTick>
 80053e4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80053e6:	88fb      	ldrh	r3, [r7, #6]
 80053e8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	d002      	beq.n	80053fc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80053f6:	2302      	movs	r3, #2
 80053f8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80053fa:	e10b      	b.n	8005614 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d002      	beq.n	8005408 <HAL_SPI_Transmit+0x52>
 8005402:	88fb      	ldrh	r3, [r7, #6]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d102      	bne.n	800540e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800540c:	e102      	b.n	8005614 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2203      	movs	r2, #3
 8005412:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2200      	movs	r2, #0
 800541a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	68ba      	ldr	r2, [r7, #8]
 8005420:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	88fa      	ldrh	r2, [r7, #6]
 8005426:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	88fa      	ldrh	r2, [r7, #6]
 800542c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2200      	movs	r2, #0
 8005432:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2200      	movs	r2, #0
 8005438:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2200      	movs	r2, #0
 800543e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2200      	movs	r2, #0
 8005444:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2200      	movs	r2, #0
 800544a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005454:	d10f      	bne.n	8005476 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005464:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005474:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005480:	2b40      	cmp	r3, #64	@ 0x40
 8005482:	d007      	beq.n	8005494 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005492:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	68db      	ldr	r3, [r3, #12]
 8005498:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800549c:	d14b      	bne.n	8005536 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d002      	beq.n	80054ac <HAL_SPI_Transmit+0xf6>
 80054a6:	8afb      	ldrh	r3, [r7, #22]
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d13e      	bne.n	800552a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054b0:	881a      	ldrh	r2, [r3, #0]
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054bc:	1c9a      	adds	r2, r3, #2
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	3b01      	subs	r3, #1
 80054ca:	b29a      	uxth	r2, r3
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80054d0:	e02b      	b.n	800552a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	f003 0302 	and.w	r3, r3, #2
 80054dc:	2b02      	cmp	r3, #2
 80054de:	d112      	bne.n	8005506 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054e4:	881a      	ldrh	r2, [r3, #0]
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054f0:	1c9a      	adds	r2, r3, #2
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	3b01      	subs	r3, #1
 80054fe:	b29a      	uxth	r2, r3
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005504:	e011      	b.n	800552a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005506:	f7fd fb3b 	bl	8002b80 <HAL_GetTick>
 800550a:	4602      	mov	r2, r0
 800550c:	69bb      	ldr	r3, [r7, #24]
 800550e:	1ad3      	subs	r3, r2, r3
 8005510:	683a      	ldr	r2, [r7, #0]
 8005512:	429a      	cmp	r2, r3
 8005514:	d803      	bhi.n	800551e <HAL_SPI_Transmit+0x168>
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800551c:	d102      	bne.n	8005524 <HAL_SPI_Transmit+0x16e>
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d102      	bne.n	800552a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005524:	2303      	movs	r3, #3
 8005526:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005528:	e074      	b.n	8005614 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800552e:	b29b      	uxth	r3, r3
 8005530:	2b00      	cmp	r3, #0
 8005532:	d1ce      	bne.n	80054d2 <HAL_SPI_Transmit+0x11c>
 8005534:	e04c      	b.n	80055d0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d002      	beq.n	8005544 <HAL_SPI_Transmit+0x18e>
 800553e:	8afb      	ldrh	r3, [r7, #22]
 8005540:	2b01      	cmp	r3, #1
 8005542:	d140      	bne.n	80055c6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	330c      	adds	r3, #12
 800554e:	7812      	ldrb	r2, [r2, #0]
 8005550:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005556:	1c5a      	adds	r2, r3, #1
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005560:	b29b      	uxth	r3, r3
 8005562:	3b01      	subs	r3, #1
 8005564:	b29a      	uxth	r2, r3
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800556a:	e02c      	b.n	80055c6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	f003 0302 	and.w	r3, r3, #2
 8005576:	2b02      	cmp	r3, #2
 8005578:	d113      	bne.n	80055a2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	330c      	adds	r3, #12
 8005584:	7812      	ldrb	r2, [r2, #0]
 8005586:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800558c:	1c5a      	adds	r2, r3, #1
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005596:	b29b      	uxth	r3, r3
 8005598:	3b01      	subs	r3, #1
 800559a:	b29a      	uxth	r2, r3
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	86da      	strh	r2, [r3, #54]	@ 0x36
 80055a0:	e011      	b.n	80055c6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80055a2:	f7fd faed 	bl	8002b80 <HAL_GetTick>
 80055a6:	4602      	mov	r2, r0
 80055a8:	69bb      	ldr	r3, [r7, #24]
 80055aa:	1ad3      	subs	r3, r2, r3
 80055ac:	683a      	ldr	r2, [r7, #0]
 80055ae:	429a      	cmp	r2, r3
 80055b0:	d803      	bhi.n	80055ba <HAL_SPI_Transmit+0x204>
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055b8:	d102      	bne.n	80055c0 <HAL_SPI_Transmit+0x20a>
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d102      	bne.n	80055c6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80055c0:	2303      	movs	r3, #3
 80055c2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80055c4:	e026      	b.n	8005614 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d1cd      	bne.n	800556c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80055d0:	69ba      	ldr	r2, [r7, #24]
 80055d2:	6839      	ldr	r1, [r7, #0]
 80055d4:	68f8      	ldr	r0, [r7, #12]
 80055d6:	f000 fbcb 	bl	8005d70 <SPI_EndRxTxTransaction>
 80055da:	4603      	mov	r3, r0
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d002      	beq.n	80055e6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2220      	movs	r2, #32
 80055e4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d10a      	bne.n	8005604 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80055ee:	2300      	movs	r3, #0
 80055f0:	613b      	str	r3, [r7, #16]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	613b      	str	r3, [r7, #16]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	613b      	str	r3, [r7, #16]
 8005602:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005608:	2b00      	cmp	r3, #0
 800560a:	d002      	beq.n	8005612 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	77fb      	strb	r3, [r7, #31]
 8005610:	e000      	b.n	8005614 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005612:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2200      	movs	r2, #0
 8005620:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8005624:	7ffb      	ldrb	r3, [r7, #31]
}
 8005626:	4618      	mov	r0, r3
 8005628:	3720      	adds	r7, #32
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}

0800562e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800562e:	b580      	push	{r7, lr}
 8005630:	b088      	sub	sp, #32
 8005632:	af02      	add	r7, sp, #8
 8005634:	60f8      	str	r0, [r7, #12]
 8005636:	60b9      	str	r1, [r7, #8]
 8005638:	603b      	str	r3, [r7, #0]
 800563a:	4613      	mov	r3, r2
 800563c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800563e:	2300      	movs	r3, #0
 8005640:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800564a:	d112      	bne.n	8005672 <HAL_SPI_Receive+0x44>
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d10e      	bne.n	8005672 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2204      	movs	r2, #4
 8005658:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800565c:	88fa      	ldrh	r2, [r7, #6]
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	9300      	str	r3, [sp, #0]
 8005662:	4613      	mov	r3, r2
 8005664:	68ba      	ldr	r2, [r7, #8]
 8005666:	68b9      	ldr	r1, [r7, #8]
 8005668:	68f8      	ldr	r0, [r7, #12]
 800566a:	f000 f8f1 	bl	8005850 <HAL_SPI_TransmitReceive>
 800566e:	4603      	mov	r3, r0
 8005670:	e0ea      	b.n	8005848 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005678:	2b01      	cmp	r3, #1
 800567a:	d101      	bne.n	8005680 <HAL_SPI_Receive+0x52>
 800567c:	2302      	movs	r3, #2
 800567e:	e0e3      	b.n	8005848 <HAL_SPI_Receive+0x21a>
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2201      	movs	r2, #1
 8005684:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005688:	f7fd fa7a 	bl	8002b80 <HAL_GetTick>
 800568c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005694:	b2db      	uxtb	r3, r3
 8005696:	2b01      	cmp	r3, #1
 8005698:	d002      	beq.n	80056a0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800569a:	2302      	movs	r3, #2
 800569c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800569e:	e0ca      	b.n	8005836 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d002      	beq.n	80056ac <HAL_SPI_Receive+0x7e>
 80056a6:	88fb      	ldrh	r3, [r7, #6]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d102      	bne.n	80056b2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	75fb      	strb	r3, [r7, #23]
    goto error;
 80056b0:	e0c1      	b.n	8005836 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2204      	movs	r2, #4
 80056b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2200      	movs	r2, #0
 80056be:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	68ba      	ldr	r2, [r7, #8]
 80056c4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	88fa      	ldrh	r2, [r7, #6]
 80056ca:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	88fa      	ldrh	r2, [r7, #6]
 80056d0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2200      	movs	r2, #0
 80056d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2200      	movs	r2, #0
 80056dc:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2200      	movs	r2, #0
 80056e2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2200      	movs	r2, #0
 80056e8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2200      	movs	r2, #0
 80056ee:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056f8:	d10f      	bne.n	800571a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005708:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005718:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005724:	2b40      	cmp	r3, #64	@ 0x40
 8005726:	d007      	beq.n	8005738 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005736:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d162      	bne.n	8005806 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005740:	e02e      	b.n	80057a0 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	f003 0301 	and.w	r3, r3, #1
 800574c:	2b01      	cmp	r3, #1
 800574e:	d115      	bne.n	800577c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f103 020c 	add.w	r2, r3, #12
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800575c:	7812      	ldrb	r2, [r2, #0]
 800575e:	b2d2      	uxtb	r2, r2
 8005760:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005766:	1c5a      	adds	r2, r3, #1
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005770:	b29b      	uxth	r3, r3
 8005772:	3b01      	subs	r3, #1
 8005774:	b29a      	uxth	r2, r3
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800577a:	e011      	b.n	80057a0 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800577c:	f7fd fa00 	bl	8002b80 <HAL_GetTick>
 8005780:	4602      	mov	r2, r0
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	1ad3      	subs	r3, r2, r3
 8005786:	683a      	ldr	r2, [r7, #0]
 8005788:	429a      	cmp	r2, r3
 800578a:	d803      	bhi.n	8005794 <HAL_SPI_Receive+0x166>
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005792:	d102      	bne.n	800579a <HAL_SPI_Receive+0x16c>
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d102      	bne.n	80057a0 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800579a:	2303      	movs	r3, #3
 800579c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800579e:	e04a      	b.n	8005836 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d1cb      	bne.n	8005742 <HAL_SPI_Receive+0x114>
 80057aa:	e031      	b.n	8005810 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	f003 0301 	and.w	r3, r3, #1
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d113      	bne.n	80057e2 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	68da      	ldr	r2, [r3, #12]
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057c4:	b292      	uxth	r2, r2
 80057c6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057cc:	1c9a      	adds	r2, r3, #2
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	3b01      	subs	r3, #1
 80057da:	b29a      	uxth	r2, r3
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80057e0:	e011      	b.n	8005806 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057e2:	f7fd f9cd 	bl	8002b80 <HAL_GetTick>
 80057e6:	4602      	mov	r2, r0
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	1ad3      	subs	r3, r2, r3
 80057ec:	683a      	ldr	r2, [r7, #0]
 80057ee:	429a      	cmp	r2, r3
 80057f0:	d803      	bhi.n	80057fa <HAL_SPI_Receive+0x1cc>
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057f8:	d102      	bne.n	8005800 <HAL_SPI_Receive+0x1d2>
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d102      	bne.n	8005806 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005800:	2303      	movs	r3, #3
 8005802:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005804:	e017      	b.n	8005836 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800580a:	b29b      	uxth	r3, r3
 800580c:	2b00      	cmp	r3, #0
 800580e:	d1cd      	bne.n	80057ac <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005810:	693a      	ldr	r2, [r7, #16]
 8005812:	6839      	ldr	r1, [r7, #0]
 8005814:	68f8      	ldr	r0, [r7, #12]
 8005816:	f000 fa45 	bl	8005ca4 <SPI_EndRxTransaction>
 800581a:	4603      	mov	r3, r0
 800581c:	2b00      	cmp	r3, #0
 800581e:	d002      	beq.n	8005826 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2220      	movs	r2, #32
 8005824:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800582a:	2b00      	cmp	r3, #0
 800582c:	d002      	beq.n	8005834 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	75fb      	strb	r3, [r7, #23]
 8005832:	e000      	b.n	8005836 <HAL_SPI_Receive+0x208>
  }

error :
 8005834:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2201      	movs	r2, #1
 800583a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2200      	movs	r2, #0
 8005842:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8005846:	7dfb      	ldrb	r3, [r7, #23]
}
 8005848:	4618      	mov	r0, r3
 800584a:	3718      	adds	r7, #24
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}

08005850 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b08c      	sub	sp, #48	@ 0x30
 8005854:	af00      	add	r7, sp, #0
 8005856:	60f8      	str	r0, [r7, #12]
 8005858:	60b9      	str	r1, [r7, #8]
 800585a:	607a      	str	r2, [r7, #4]
 800585c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800585e:	2301      	movs	r3, #1
 8005860:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005862:	2300      	movs	r3, #0
 8005864:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800586e:	2b01      	cmp	r3, #1
 8005870:	d101      	bne.n	8005876 <HAL_SPI_TransmitReceive+0x26>
 8005872:	2302      	movs	r3, #2
 8005874:	e18a      	b.n	8005b8c <HAL_SPI_TransmitReceive+0x33c>
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2201      	movs	r2, #1
 800587a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800587e:	f7fd f97f 	bl	8002b80 <HAL_GetTick>
 8005882:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800588a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005894:	887b      	ldrh	r3, [r7, #2]
 8005896:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005898:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800589c:	2b01      	cmp	r3, #1
 800589e:	d00f      	beq.n	80058c0 <HAL_SPI_TransmitReceive+0x70>
 80058a0:	69fb      	ldr	r3, [r7, #28]
 80058a2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80058a6:	d107      	bne.n	80058b8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d103      	bne.n	80058b8 <HAL_SPI_TransmitReceive+0x68>
 80058b0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80058b4:	2b04      	cmp	r3, #4
 80058b6:	d003      	beq.n	80058c0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80058b8:	2302      	movs	r3, #2
 80058ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80058be:	e15b      	b.n	8005b78 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d005      	beq.n	80058d2 <HAL_SPI_TransmitReceive+0x82>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d002      	beq.n	80058d2 <HAL_SPI_TransmitReceive+0x82>
 80058cc:	887b      	ldrh	r3, [r7, #2]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d103      	bne.n	80058da <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80058d8:	e14e      	b.n	8005b78 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	2b04      	cmp	r3, #4
 80058e4:	d003      	beq.n	80058ee <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2205      	movs	r2, #5
 80058ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2200      	movs	r2, #0
 80058f2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	687a      	ldr	r2, [r7, #4]
 80058f8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	887a      	ldrh	r2, [r7, #2]
 80058fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	887a      	ldrh	r2, [r7, #2]
 8005904:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	68ba      	ldr	r2, [r7, #8]
 800590a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	887a      	ldrh	r2, [r7, #2]
 8005910:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	887a      	ldrh	r2, [r7, #2]
 8005916:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2200      	movs	r2, #0
 800591c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2200      	movs	r2, #0
 8005922:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800592e:	2b40      	cmp	r3, #64	@ 0x40
 8005930:	d007      	beq.n	8005942 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005940:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800594a:	d178      	bne.n	8005a3e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d002      	beq.n	800595a <HAL_SPI_TransmitReceive+0x10a>
 8005954:	8b7b      	ldrh	r3, [r7, #26]
 8005956:	2b01      	cmp	r3, #1
 8005958:	d166      	bne.n	8005a28 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800595e:	881a      	ldrh	r2, [r3, #0]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800596a:	1c9a      	adds	r2, r3, #2
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005974:	b29b      	uxth	r3, r3
 8005976:	3b01      	subs	r3, #1
 8005978:	b29a      	uxth	r2, r3
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800597e:	e053      	b.n	8005a28 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	f003 0302 	and.w	r3, r3, #2
 800598a:	2b02      	cmp	r3, #2
 800598c:	d11b      	bne.n	80059c6 <HAL_SPI_TransmitReceive+0x176>
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005992:	b29b      	uxth	r3, r3
 8005994:	2b00      	cmp	r3, #0
 8005996:	d016      	beq.n	80059c6 <HAL_SPI_TransmitReceive+0x176>
 8005998:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800599a:	2b01      	cmp	r3, #1
 800599c:	d113      	bne.n	80059c6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059a2:	881a      	ldrh	r2, [r3, #0]
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059ae:	1c9a      	adds	r2, r3, #2
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	3b01      	subs	r3, #1
 80059bc:	b29a      	uxth	r2, r3
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80059c2:	2300      	movs	r3, #0
 80059c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	f003 0301 	and.w	r3, r3, #1
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d119      	bne.n	8005a08 <HAL_SPI_TransmitReceive+0x1b8>
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059d8:	b29b      	uxth	r3, r3
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d014      	beq.n	8005a08 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	68da      	ldr	r2, [r3, #12]
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059e8:	b292      	uxth	r2, r2
 80059ea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059f0:	1c9a      	adds	r2, r3, #2
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	3b01      	subs	r3, #1
 80059fe:	b29a      	uxth	r2, r3
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005a04:	2301      	movs	r3, #1
 8005a06:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005a08:	f7fd f8ba 	bl	8002b80 <HAL_GetTick>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a10:	1ad3      	subs	r3, r2, r3
 8005a12:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d807      	bhi.n	8005a28 <HAL_SPI_TransmitReceive+0x1d8>
 8005a18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a1e:	d003      	beq.n	8005a28 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005a20:	2303      	movs	r3, #3
 8005a22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8005a26:	e0a7      	b.n	8005b78 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d1a6      	bne.n	8005980 <HAL_SPI_TransmitReceive+0x130>
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d1a1      	bne.n	8005980 <HAL_SPI_TransmitReceive+0x130>
 8005a3c:	e07c      	b.n	8005b38 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d002      	beq.n	8005a4c <HAL_SPI_TransmitReceive+0x1fc>
 8005a46:	8b7b      	ldrh	r3, [r7, #26]
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	d16b      	bne.n	8005b24 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	330c      	adds	r3, #12
 8005a56:	7812      	ldrb	r2, [r2, #0]
 8005a58:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a5e:	1c5a      	adds	r2, r3, #1
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	3b01      	subs	r3, #1
 8005a6c:	b29a      	uxth	r2, r3
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a72:	e057      	b.n	8005b24 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	f003 0302 	and.w	r3, r3, #2
 8005a7e:	2b02      	cmp	r3, #2
 8005a80:	d11c      	bne.n	8005abc <HAL_SPI_TransmitReceive+0x26c>
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d017      	beq.n	8005abc <HAL_SPI_TransmitReceive+0x26c>
 8005a8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d114      	bne.n	8005abc <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	330c      	adds	r3, #12
 8005a9c:	7812      	ldrb	r2, [r2, #0]
 8005a9e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aa4:	1c5a      	adds	r2, r3, #1
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	3b01      	subs	r3, #1
 8005ab2:	b29a      	uxth	r2, r3
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	f003 0301 	and.w	r3, r3, #1
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d119      	bne.n	8005afe <HAL_SPI_TransmitReceive+0x2ae>
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d014      	beq.n	8005afe <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	68da      	ldr	r2, [r3, #12]
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ade:	b2d2      	uxtb	r2, r2
 8005ae0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ae6:	1c5a      	adds	r2, r3, #1
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	3b01      	subs	r3, #1
 8005af4:	b29a      	uxth	r2, r3
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005afa:	2301      	movs	r3, #1
 8005afc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005afe:	f7fd f83f 	bl	8002b80 <HAL_GetTick>
 8005b02:	4602      	mov	r2, r0
 8005b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b06:	1ad3      	subs	r3, r2, r3
 8005b08:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d803      	bhi.n	8005b16 <HAL_SPI_TransmitReceive+0x2c6>
 8005b0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b14:	d102      	bne.n	8005b1c <HAL_SPI_TransmitReceive+0x2cc>
 8005b16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d103      	bne.n	8005b24 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005b1c:	2303      	movs	r3, #3
 8005b1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8005b22:	e029      	b.n	8005b78 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d1a2      	bne.n	8005a74 <HAL_SPI_TransmitReceive+0x224>
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d19d      	bne.n	8005a74 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b3a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005b3c:	68f8      	ldr	r0, [r7, #12]
 8005b3e:	f000 f917 	bl	8005d70 <SPI_EndRxTxTransaction>
 8005b42:	4603      	mov	r3, r0
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d006      	beq.n	8005b56 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2220      	movs	r2, #32
 8005b52:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8005b54:	e010      	b.n	8005b78 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d10b      	bne.n	8005b76 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b5e:	2300      	movs	r3, #0
 8005b60:	617b      	str	r3, [r7, #20]
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	68db      	ldr	r3, [r3, #12]
 8005b68:	617b      	str	r3, [r7, #20]
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	617b      	str	r3, [r7, #20]
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	e000      	b.n	8005b78 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005b76:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2200      	movs	r2, #0
 8005b84:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8005b88:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3730      	adds	r7, #48	@ 0x30
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}

08005b94 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b088      	sub	sp, #32
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	60f8      	str	r0, [r7, #12]
 8005b9c:	60b9      	str	r1, [r7, #8]
 8005b9e:	603b      	str	r3, [r7, #0]
 8005ba0:	4613      	mov	r3, r2
 8005ba2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005ba4:	f7fc ffec 	bl	8002b80 <HAL_GetTick>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bac:	1a9b      	subs	r3, r3, r2
 8005bae:	683a      	ldr	r2, [r7, #0]
 8005bb0:	4413      	add	r3, r2
 8005bb2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005bb4:	f7fc ffe4 	bl	8002b80 <HAL_GetTick>
 8005bb8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005bba:	4b39      	ldr	r3, [pc, #228]	@ (8005ca0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	015b      	lsls	r3, r3, #5
 8005bc0:	0d1b      	lsrs	r3, r3, #20
 8005bc2:	69fa      	ldr	r2, [r7, #28]
 8005bc4:	fb02 f303 	mul.w	r3, r2, r3
 8005bc8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005bca:	e054      	b.n	8005c76 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bd2:	d050      	beq.n	8005c76 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005bd4:	f7fc ffd4 	bl	8002b80 <HAL_GetTick>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	69bb      	ldr	r3, [r7, #24]
 8005bdc:	1ad3      	subs	r3, r2, r3
 8005bde:	69fa      	ldr	r2, [r7, #28]
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d902      	bls.n	8005bea <SPI_WaitFlagStateUntilTimeout+0x56>
 8005be4:	69fb      	ldr	r3, [r7, #28]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d13d      	bne.n	8005c66 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	685a      	ldr	r2, [r3, #4]
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005bf8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c02:	d111      	bne.n	8005c28 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c0c:	d004      	beq.n	8005c18 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c16:	d107      	bne.n	8005c28 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c26:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c30:	d10f      	bne.n	8005c52 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005c40:	601a      	str	r2, [r3, #0]
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005c50:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2201      	movs	r2, #1
 8005c56:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005c62:	2303      	movs	r3, #3
 8005c64:	e017      	b.n	8005c96 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d101      	bne.n	8005c70 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	3b01      	subs	r3, #1
 8005c74:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	689a      	ldr	r2, [r3, #8]
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	4013      	ands	r3, r2
 8005c80:	68ba      	ldr	r2, [r7, #8]
 8005c82:	429a      	cmp	r2, r3
 8005c84:	bf0c      	ite	eq
 8005c86:	2301      	moveq	r3, #1
 8005c88:	2300      	movne	r3, #0
 8005c8a:	b2db      	uxtb	r3, r3
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	79fb      	ldrb	r3, [r7, #7]
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d19b      	bne.n	8005bcc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005c94:	2300      	movs	r3, #0
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3720      	adds	r7, #32
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}
 8005c9e:	bf00      	nop
 8005ca0:	20000000 	.word	0x20000000

08005ca4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b086      	sub	sp, #24
 8005ca8:	af02      	add	r7, sp, #8
 8005caa:	60f8      	str	r0, [r7, #12]
 8005cac:	60b9      	str	r1, [r7, #8]
 8005cae:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005cb8:	d111      	bne.n	8005cde <SPI_EndRxTransaction+0x3a>
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005cc2:	d004      	beq.n	8005cce <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ccc:	d107      	bne.n	8005cde <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005cdc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005ce6:	d12a      	bne.n	8005d3e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005cf0:	d012      	beq.n	8005d18 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	9300      	str	r3, [sp, #0]
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	2180      	movs	r1, #128	@ 0x80
 8005cfc:	68f8      	ldr	r0, [r7, #12]
 8005cfe:	f7ff ff49 	bl	8005b94 <SPI_WaitFlagStateUntilTimeout>
 8005d02:	4603      	mov	r3, r0
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d02d      	beq.n	8005d64 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d0c:	f043 0220 	orr.w	r2, r3, #32
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005d14:	2303      	movs	r3, #3
 8005d16:	e026      	b.n	8005d66 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	9300      	str	r3, [sp, #0]
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	2101      	movs	r1, #1
 8005d22:	68f8      	ldr	r0, [r7, #12]
 8005d24:	f7ff ff36 	bl	8005b94 <SPI_WaitFlagStateUntilTimeout>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d01a      	beq.n	8005d64 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d32:	f043 0220 	orr.w	r2, r3, #32
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005d3a:	2303      	movs	r3, #3
 8005d3c:	e013      	b.n	8005d66 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	9300      	str	r3, [sp, #0]
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	2200      	movs	r2, #0
 8005d46:	2101      	movs	r1, #1
 8005d48:	68f8      	ldr	r0, [r7, #12]
 8005d4a:	f7ff ff23 	bl	8005b94 <SPI_WaitFlagStateUntilTimeout>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d007      	beq.n	8005d64 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d58:	f043 0220 	orr.w	r2, r3, #32
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005d60:	2303      	movs	r3, #3
 8005d62:	e000      	b.n	8005d66 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005d64:	2300      	movs	r3, #0
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3710      	adds	r7, #16
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}
	...

08005d70 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b088      	sub	sp, #32
 8005d74:	af02      	add	r7, sp, #8
 8005d76:	60f8      	str	r0, [r7, #12]
 8005d78:	60b9      	str	r1, [r7, #8]
 8005d7a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005d7c:	4b1b      	ldr	r3, [pc, #108]	@ (8005dec <SPI_EndRxTxTransaction+0x7c>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a1b      	ldr	r2, [pc, #108]	@ (8005df0 <SPI_EndRxTxTransaction+0x80>)
 8005d82:	fba2 2303 	umull	r2, r3, r2, r3
 8005d86:	0d5b      	lsrs	r3, r3, #21
 8005d88:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005d8c:	fb02 f303 	mul.w	r3, r2, r3
 8005d90:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005d9a:	d112      	bne.n	8005dc2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	9300      	str	r3, [sp, #0]
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	2200      	movs	r2, #0
 8005da4:	2180      	movs	r1, #128	@ 0x80
 8005da6:	68f8      	ldr	r0, [r7, #12]
 8005da8:	f7ff fef4 	bl	8005b94 <SPI_WaitFlagStateUntilTimeout>
 8005dac:	4603      	mov	r3, r0
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d016      	beq.n	8005de0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005db6:	f043 0220 	orr.w	r2, r3, #32
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005dbe:	2303      	movs	r3, #3
 8005dc0:	e00f      	b.n	8005de2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d00a      	beq.n	8005dde <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	3b01      	subs	r3, #1
 8005dcc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005dd8:	2b80      	cmp	r3, #128	@ 0x80
 8005dda:	d0f2      	beq.n	8005dc2 <SPI_EndRxTxTransaction+0x52>
 8005ddc:	e000      	b.n	8005de0 <SPI_EndRxTxTransaction+0x70>
        break;
 8005dde:	bf00      	nop
  }

  return HAL_OK;
 8005de0:	2300      	movs	r3, #0
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3718      	adds	r7, #24
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}
 8005dea:	bf00      	nop
 8005dec:	20000000 	.word	0x20000000
 8005df0:	165e9f81 	.word	0x165e9f81

08005df4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b082      	sub	sp, #8
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d101      	bne.n	8005e06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	e041      	b.n	8005e8a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e0c:	b2db      	uxtb	r3, r3
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d106      	bne.n	8005e20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2200      	movs	r2, #0
 8005e16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f7fc faa6 	bl	800236c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2202      	movs	r2, #2
 8005e24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	3304      	adds	r3, #4
 8005e30:	4619      	mov	r1, r3
 8005e32:	4610      	mov	r0, r2
 8005e34:	f000 fdae 	bl	8006994 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2201      	movs	r2, #1
 8005e44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2201      	movs	r2, #1
 8005e54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2201      	movs	r2, #1
 8005e64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2201      	movs	r2, #1
 8005e74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2201      	movs	r2, #1
 8005e84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005e88:	2300      	movs	r3, #0
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3708      	adds	r7, #8
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}
	...

08005e94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b085      	sub	sp, #20
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	d001      	beq.n	8005eac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	e04e      	b.n	8005f4a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2202      	movs	r2, #2
 8005eb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	68da      	ldr	r2, [r3, #12]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f042 0201 	orr.w	r2, r2, #1
 8005ec2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a23      	ldr	r2, [pc, #140]	@ (8005f58 <HAL_TIM_Base_Start_IT+0xc4>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d022      	beq.n	8005f14 <HAL_TIM_Base_Start_IT+0x80>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ed6:	d01d      	beq.n	8005f14 <HAL_TIM_Base_Start_IT+0x80>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a1f      	ldr	r2, [pc, #124]	@ (8005f5c <HAL_TIM_Base_Start_IT+0xc8>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d018      	beq.n	8005f14 <HAL_TIM_Base_Start_IT+0x80>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a1e      	ldr	r2, [pc, #120]	@ (8005f60 <HAL_TIM_Base_Start_IT+0xcc>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d013      	beq.n	8005f14 <HAL_TIM_Base_Start_IT+0x80>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a1c      	ldr	r2, [pc, #112]	@ (8005f64 <HAL_TIM_Base_Start_IT+0xd0>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d00e      	beq.n	8005f14 <HAL_TIM_Base_Start_IT+0x80>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a1b      	ldr	r2, [pc, #108]	@ (8005f68 <HAL_TIM_Base_Start_IT+0xd4>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d009      	beq.n	8005f14 <HAL_TIM_Base_Start_IT+0x80>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a19      	ldr	r2, [pc, #100]	@ (8005f6c <HAL_TIM_Base_Start_IT+0xd8>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d004      	beq.n	8005f14 <HAL_TIM_Base_Start_IT+0x80>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a18      	ldr	r2, [pc, #96]	@ (8005f70 <HAL_TIM_Base_Start_IT+0xdc>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d111      	bne.n	8005f38 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	f003 0307 	and.w	r3, r3, #7
 8005f1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2b06      	cmp	r3, #6
 8005f24:	d010      	beq.n	8005f48 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f042 0201 	orr.w	r2, r2, #1
 8005f34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f36:	e007      	b.n	8005f48 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f042 0201 	orr.w	r2, r2, #1
 8005f46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f48:	2300      	movs	r3, #0
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3714      	adds	r7, #20
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr
 8005f56:	bf00      	nop
 8005f58:	40010000 	.word	0x40010000
 8005f5c:	40000400 	.word	0x40000400
 8005f60:	40000800 	.word	0x40000800
 8005f64:	40000c00 	.word	0x40000c00
 8005f68:	40010400 	.word	0x40010400
 8005f6c:	40014000 	.word	0x40014000
 8005f70:	40001800 	.word	0x40001800

08005f74 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b082      	sub	sp, #8
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d101      	bne.n	8005f86 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005f82:	2301      	movs	r3, #1
 8005f84:	e041      	b.n	800600a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f8c:	b2db      	uxtb	r3, r3
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d106      	bne.n	8005fa0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2200      	movs	r2, #0
 8005f96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f000 f839 	bl	8006012 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2202      	movs	r2, #2
 8005fa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	3304      	adds	r3, #4
 8005fb0:	4619      	mov	r1, r3
 8005fb2:	4610      	mov	r0, r2
 8005fb4:	f000 fcee 	bl	8006994 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2201      	movs	r2, #1
 8005fec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2201      	movs	r2, #1
 8006004:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006008:	2300      	movs	r3, #0
}
 800600a:	4618      	mov	r0, r3
 800600c:	3708      	adds	r7, #8
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}

08006012 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006012:	b480      	push	{r7}
 8006014:	b083      	sub	sp, #12
 8006016:	af00      	add	r7, sp, #0
 8006018:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800601a:	bf00      	nop
 800601c:	370c      	adds	r7, #12
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr
	...

08006028 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b084      	sub	sp, #16
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d109      	bne.n	800604c <HAL_TIM_PWM_Start+0x24>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800603e:	b2db      	uxtb	r3, r3
 8006040:	2b01      	cmp	r3, #1
 8006042:	bf14      	ite	ne
 8006044:	2301      	movne	r3, #1
 8006046:	2300      	moveq	r3, #0
 8006048:	b2db      	uxtb	r3, r3
 800604a:	e022      	b.n	8006092 <HAL_TIM_PWM_Start+0x6a>
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	2b04      	cmp	r3, #4
 8006050:	d109      	bne.n	8006066 <HAL_TIM_PWM_Start+0x3e>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006058:	b2db      	uxtb	r3, r3
 800605a:	2b01      	cmp	r3, #1
 800605c:	bf14      	ite	ne
 800605e:	2301      	movne	r3, #1
 8006060:	2300      	moveq	r3, #0
 8006062:	b2db      	uxtb	r3, r3
 8006064:	e015      	b.n	8006092 <HAL_TIM_PWM_Start+0x6a>
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	2b08      	cmp	r3, #8
 800606a:	d109      	bne.n	8006080 <HAL_TIM_PWM_Start+0x58>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006072:	b2db      	uxtb	r3, r3
 8006074:	2b01      	cmp	r3, #1
 8006076:	bf14      	ite	ne
 8006078:	2301      	movne	r3, #1
 800607a:	2300      	moveq	r3, #0
 800607c:	b2db      	uxtb	r3, r3
 800607e:	e008      	b.n	8006092 <HAL_TIM_PWM_Start+0x6a>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006086:	b2db      	uxtb	r3, r3
 8006088:	2b01      	cmp	r3, #1
 800608a:	bf14      	ite	ne
 800608c:	2301      	movne	r3, #1
 800608e:	2300      	moveq	r3, #0
 8006090:	b2db      	uxtb	r3, r3
 8006092:	2b00      	cmp	r3, #0
 8006094:	d001      	beq.n	800609a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006096:	2301      	movs	r3, #1
 8006098:	e07c      	b.n	8006194 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d104      	bne.n	80060aa <HAL_TIM_PWM_Start+0x82>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2202      	movs	r2, #2
 80060a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80060a8:	e013      	b.n	80060d2 <HAL_TIM_PWM_Start+0xaa>
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	2b04      	cmp	r3, #4
 80060ae:	d104      	bne.n	80060ba <HAL_TIM_PWM_Start+0x92>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2202      	movs	r2, #2
 80060b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80060b8:	e00b      	b.n	80060d2 <HAL_TIM_PWM_Start+0xaa>
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	2b08      	cmp	r3, #8
 80060be:	d104      	bne.n	80060ca <HAL_TIM_PWM_Start+0xa2>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2202      	movs	r2, #2
 80060c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80060c8:	e003      	b.n	80060d2 <HAL_TIM_PWM_Start+0xaa>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2202      	movs	r2, #2
 80060ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	2201      	movs	r2, #1
 80060d8:	6839      	ldr	r1, [r7, #0]
 80060da:	4618      	mov	r0, r3
 80060dc:	f000 ff44 	bl	8006f68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a2d      	ldr	r2, [pc, #180]	@ (800619c <HAL_TIM_PWM_Start+0x174>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d004      	beq.n	80060f4 <HAL_TIM_PWM_Start+0xcc>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a2c      	ldr	r2, [pc, #176]	@ (80061a0 <HAL_TIM_PWM_Start+0x178>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d101      	bne.n	80060f8 <HAL_TIM_PWM_Start+0xd0>
 80060f4:	2301      	movs	r3, #1
 80060f6:	e000      	b.n	80060fa <HAL_TIM_PWM_Start+0xd2>
 80060f8:	2300      	movs	r3, #0
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d007      	beq.n	800610e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800610c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a22      	ldr	r2, [pc, #136]	@ (800619c <HAL_TIM_PWM_Start+0x174>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d022      	beq.n	800615e <HAL_TIM_PWM_Start+0x136>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006120:	d01d      	beq.n	800615e <HAL_TIM_PWM_Start+0x136>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a1f      	ldr	r2, [pc, #124]	@ (80061a4 <HAL_TIM_PWM_Start+0x17c>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d018      	beq.n	800615e <HAL_TIM_PWM_Start+0x136>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a1d      	ldr	r2, [pc, #116]	@ (80061a8 <HAL_TIM_PWM_Start+0x180>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d013      	beq.n	800615e <HAL_TIM_PWM_Start+0x136>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a1c      	ldr	r2, [pc, #112]	@ (80061ac <HAL_TIM_PWM_Start+0x184>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d00e      	beq.n	800615e <HAL_TIM_PWM_Start+0x136>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a16      	ldr	r2, [pc, #88]	@ (80061a0 <HAL_TIM_PWM_Start+0x178>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d009      	beq.n	800615e <HAL_TIM_PWM_Start+0x136>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a18      	ldr	r2, [pc, #96]	@ (80061b0 <HAL_TIM_PWM_Start+0x188>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d004      	beq.n	800615e <HAL_TIM_PWM_Start+0x136>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a16      	ldr	r2, [pc, #88]	@ (80061b4 <HAL_TIM_PWM_Start+0x18c>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d111      	bne.n	8006182 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	f003 0307 	and.w	r3, r3, #7
 8006168:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2b06      	cmp	r3, #6
 800616e:	d010      	beq.n	8006192 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f042 0201 	orr.w	r2, r2, #1
 800617e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006180:	e007      	b.n	8006192 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	681a      	ldr	r2, [r3, #0]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f042 0201 	orr.w	r2, r2, #1
 8006190:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006192:	2300      	movs	r3, #0
}
 8006194:	4618      	mov	r0, r3
 8006196:	3710      	adds	r7, #16
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}
 800619c:	40010000 	.word	0x40010000
 80061a0:	40010400 	.word	0x40010400
 80061a4:	40000400 	.word	0x40000400
 80061a8:	40000800 	.word	0x40000800
 80061ac:	40000c00 	.word	0x40000c00
 80061b0:	40014000 	.word	0x40014000
 80061b4:	40001800 	.word	0x40001800

080061b8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b086      	sub	sp, #24
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d101      	bne.n	80061cc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	e097      	b.n	80062fc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80061d2:	b2db      	uxtb	r3, r3
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d106      	bne.n	80061e6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2200      	movs	r2, #0
 80061dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f7fc f943 	bl	800246c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2202      	movs	r2, #2
 80061ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	687a      	ldr	r2, [r7, #4]
 80061f6:	6812      	ldr	r2, [r2, #0]
 80061f8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80061fc:	f023 0307 	bic.w	r3, r3, #7
 8006200:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	3304      	adds	r3, #4
 800620a:	4619      	mov	r1, r3
 800620c:	4610      	mov	r0, r2
 800620e:	f000 fbc1 	bl	8006994 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	689b      	ldr	r3, [r3, #8]
 8006218:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	699b      	ldr	r3, [r3, #24]
 8006220:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	6a1b      	ldr	r3, [r3, #32]
 8006228:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	697a      	ldr	r2, [r7, #20]
 8006230:	4313      	orrs	r3, r2
 8006232:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800623a:	f023 0303 	bic.w	r3, r3, #3
 800623e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	689a      	ldr	r2, [r3, #8]
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	699b      	ldr	r3, [r3, #24]
 8006248:	021b      	lsls	r3, r3, #8
 800624a:	4313      	orrs	r3, r2
 800624c:	693a      	ldr	r2, [r7, #16]
 800624e:	4313      	orrs	r3, r2
 8006250:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006258:	f023 030c 	bic.w	r3, r3, #12
 800625c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006264:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006268:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	68da      	ldr	r2, [r3, #12]
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	69db      	ldr	r3, [r3, #28]
 8006272:	021b      	lsls	r3, r3, #8
 8006274:	4313      	orrs	r3, r2
 8006276:	693a      	ldr	r2, [r7, #16]
 8006278:	4313      	orrs	r3, r2
 800627a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	691b      	ldr	r3, [r3, #16]
 8006280:	011a      	lsls	r2, r3, #4
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	6a1b      	ldr	r3, [r3, #32]
 8006286:	031b      	lsls	r3, r3, #12
 8006288:	4313      	orrs	r3, r2
 800628a:	693a      	ldr	r2, [r7, #16]
 800628c:	4313      	orrs	r3, r2
 800628e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006296:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800629e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	685a      	ldr	r2, [r3, #4]
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	695b      	ldr	r3, [r3, #20]
 80062a8:	011b      	lsls	r3, r3, #4
 80062aa:	4313      	orrs	r3, r2
 80062ac:	68fa      	ldr	r2, [r7, #12]
 80062ae:	4313      	orrs	r3, r2
 80062b0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	697a      	ldr	r2, [r7, #20]
 80062b8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	693a      	ldr	r2, [r7, #16]
 80062c0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	68fa      	ldr	r2, [r7, #12]
 80062c8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2201      	movs	r2, #1
 80062ce:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2201      	movs	r2, #1
 80062d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2201      	movs	r2, #1
 80062de:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2201      	movs	r2, #1
 80062e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2201      	movs	r2, #1
 80062ee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2201      	movs	r2, #1
 80062f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80062fa:	2300      	movs	r3, #0
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3718      	adds	r7, #24
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}

08006304 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b084      	sub	sp, #16
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006314:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800631c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006324:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800632c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d110      	bne.n	8006356 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006334:	7bfb      	ldrb	r3, [r7, #15]
 8006336:	2b01      	cmp	r3, #1
 8006338:	d102      	bne.n	8006340 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800633a:	7b7b      	ldrb	r3, [r7, #13]
 800633c:	2b01      	cmp	r3, #1
 800633e:	d001      	beq.n	8006344 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006340:	2301      	movs	r3, #1
 8006342:	e069      	b.n	8006418 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2202      	movs	r2, #2
 8006348:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2202      	movs	r2, #2
 8006350:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006354:	e031      	b.n	80063ba <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	2b04      	cmp	r3, #4
 800635a:	d110      	bne.n	800637e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800635c:	7bbb      	ldrb	r3, [r7, #14]
 800635e:	2b01      	cmp	r3, #1
 8006360:	d102      	bne.n	8006368 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006362:	7b3b      	ldrb	r3, [r7, #12]
 8006364:	2b01      	cmp	r3, #1
 8006366:	d001      	beq.n	800636c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006368:	2301      	movs	r3, #1
 800636a:	e055      	b.n	8006418 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2202      	movs	r2, #2
 8006370:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2202      	movs	r2, #2
 8006378:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800637c:	e01d      	b.n	80063ba <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800637e:	7bfb      	ldrb	r3, [r7, #15]
 8006380:	2b01      	cmp	r3, #1
 8006382:	d108      	bne.n	8006396 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006384:	7bbb      	ldrb	r3, [r7, #14]
 8006386:	2b01      	cmp	r3, #1
 8006388:	d105      	bne.n	8006396 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800638a:	7b7b      	ldrb	r3, [r7, #13]
 800638c:	2b01      	cmp	r3, #1
 800638e:	d102      	bne.n	8006396 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006390:	7b3b      	ldrb	r3, [r7, #12]
 8006392:	2b01      	cmp	r3, #1
 8006394:	d001      	beq.n	800639a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	e03e      	b.n	8006418 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2202      	movs	r2, #2
 800639e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2202      	movs	r2, #2
 80063a6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2202      	movs	r2, #2
 80063ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2202      	movs	r2, #2
 80063b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d003      	beq.n	80063c8 <HAL_TIM_Encoder_Start+0xc4>
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	2b04      	cmp	r3, #4
 80063c4:	d008      	beq.n	80063d8 <HAL_TIM_Encoder_Start+0xd4>
 80063c6:	e00f      	b.n	80063e8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	2201      	movs	r2, #1
 80063ce:	2100      	movs	r1, #0
 80063d0:	4618      	mov	r0, r3
 80063d2:	f000 fdc9 	bl	8006f68 <TIM_CCxChannelCmd>
      break;
 80063d6:	e016      	b.n	8006406 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	2201      	movs	r2, #1
 80063de:	2104      	movs	r1, #4
 80063e0:	4618      	mov	r0, r3
 80063e2:	f000 fdc1 	bl	8006f68 <TIM_CCxChannelCmd>
      break;
 80063e6:	e00e      	b.n	8006406 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	2201      	movs	r2, #1
 80063ee:	2100      	movs	r1, #0
 80063f0:	4618      	mov	r0, r3
 80063f2:	f000 fdb9 	bl	8006f68 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	2201      	movs	r2, #1
 80063fc:	2104      	movs	r1, #4
 80063fe:	4618      	mov	r0, r3
 8006400:	f000 fdb2 	bl	8006f68 <TIM_CCxChannelCmd>
      break;
 8006404:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	681a      	ldr	r2, [r3, #0]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f042 0201 	orr.w	r2, r2, #1
 8006414:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006416:	2300      	movs	r3, #0
}
 8006418:	4618      	mov	r0, r3
 800641a:	3710      	adds	r7, #16
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}

08006420 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b082      	sub	sp, #8
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	691b      	ldr	r3, [r3, #16]
 800642e:	f003 0302 	and.w	r3, r3, #2
 8006432:	2b02      	cmp	r3, #2
 8006434:	d122      	bne.n	800647c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	68db      	ldr	r3, [r3, #12]
 800643c:	f003 0302 	and.w	r3, r3, #2
 8006440:	2b02      	cmp	r3, #2
 8006442:	d11b      	bne.n	800647c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f06f 0202 	mvn.w	r2, #2
 800644c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2201      	movs	r2, #1
 8006452:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	699b      	ldr	r3, [r3, #24]
 800645a:	f003 0303 	and.w	r3, r3, #3
 800645e:	2b00      	cmp	r3, #0
 8006460:	d003      	beq.n	800646a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f000 fa77 	bl	8006956 <HAL_TIM_IC_CaptureCallback>
 8006468:	e005      	b.n	8006476 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f000 fa69 	bl	8006942 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f000 fa7a 	bl	800696a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2200      	movs	r2, #0
 800647a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	691b      	ldr	r3, [r3, #16]
 8006482:	f003 0304 	and.w	r3, r3, #4
 8006486:	2b04      	cmp	r3, #4
 8006488:	d122      	bne.n	80064d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	68db      	ldr	r3, [r3, #12]
 8006490:	f003 0304 	and.w	r3, r3, #4
 8006494:	2b04      	cmp	r3, #4
 8006496:	d11b      	bne.n	80064d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f06f 0204 	mvn.w	r2, #4
 80064a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2202      	movs	r2, #2
 80064a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	699b      	ldr	r3, [r3, #24]
 80064ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d003      	beq.n	80064be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f000 fa4d 	bl	8006956 <HAL_TIM_IC_CaptureCallback>
 80064bc:	e005      	b.n	80064ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f000 fa3f 	bl	8006942 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f000 fa50 	bl	800696a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2200      	movs	r2, #0
 80064ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	691b      	ldr	r3, [r3, #16]
 80064d6:	f003 0308 	and.w	r3, r3, #8
 80064da:	2b08      	cmp	r3, #8
 80064dc:	d122      	bne.n	8006524 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	68db      	ldr	r3, [r3, #12]
 80064e4:	f003 0308 	and.w	r3, r3, #8
 80064e8:	2b08      	cmp	r3, #8
 80064ea:	d11b      	bne.n	8006524 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f06f 0208 	mvn.w	r2, #8
 80064f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2204      	movs	r2, #4
 80064fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	69db      	ldr	r3, [r3, #28]
 8006502:	f003 0303 	and.w	r3, r3, #3
 8006506:	2b00      	cmp	r3, #0
 8006508:	d003      	beq.n	8006512 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f000 fa23 	bl	8006956 <HAL_TIM_IC_CaptureCallback>
 8006510:	e005      	b.n	800651e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f000 fa15 	bl	8006942 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f000 fa26 	bl	800696a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2200      	movs	r2, #0
 8006522:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	691b      	ldr	r3, [r3, #16]
 800652a:	f003 0310 	and.w	r3, r3, #16
 800652e:	2b10      	cmp	r3, #16
 8006530:	d122      	bne.n	8006578 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	68db      	ldr	r3, [r3, #12]
 8006538:	f003 0310 	and.w	r3, r3, #16
 800653c:	2b10      	cmp	r3, #16
 800653e:	d11b      	bne.n	8006578 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f06f 0210 	mvn.w	r2, #16
 8006548:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2208      	movs	r2, #8
 800654e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	69db      	ldr	r3, [r3, #28]
 8006556:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800655a:	2b00      	cmp	r3, #0
 800655c:	d003      	beq.n	8006566 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f000 f9f9 	bl	8006956 <HAL_TIM_IC_CaptureCallback>
 8006564:	e005      	b.n	8006572 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f000 f9eb 	bl	8006942 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f000 f9fc 	bl	800696a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2200      	movs	r2, #0
 8006576:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	691b      	ldr	r3, [r3, #16]
 800657e:	f003 0301 	and.w	r3, r3, #1
 8006582:	2b01      	cmp	r3, #1
 8006584:	d10e      	bne.n	80065a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	68db      	ldr	r3, [r3, #12]
 800658c:	f003 0301 	and.w	r3, r3, #1
 8006590:	2b01      	cmp	r3, #1
 8006592:	d107      	bne.n	80065a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f06f 0201 	mvn.w	r2, #1
 800659c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f004 f934 	bl	800a80c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	691b      	ldr	r3, [r3, #16]
 80065aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065ae:	2b80      	cmp	r3, #128	@ 0x80
 80065b0:	d10e      	bne.n	80065d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	68db      	ldr	r3, [r3, #12]
 80065b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065bc:	2b80      	cmp	r3, #128	@ 0x80
 80065be:	d107      	bne.n	80065d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80065c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f000 fdca 	bl	8007164 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	691b      	ldr	r3, [r3, #16]
 80065d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065da:	2b40      	cmp	r3, #64	@ 0x40
 80065dc:	d10e      	bne.n	80065fc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	68db      	ldr	r3, [r3, #12]
 80065e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065e8:	2b40      	cmp	r3, #64	@ 0x40
 80065ea:	d107      	bne.n	80065fc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80065f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f000 f9c1 	bl	800697e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	691b      	ldr	r3, [r3, #16]
 8006602:	f003 0320 	and.w	r3, r3, #32
 8006606:	2b20      	cmp	r3, #32
 8006608:	d10e      	bne.n	8006628 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	68db      	ldr	r3, [r3, #12]
 8006610:	f003 0320 	and.w	r3, r3, #32
 8006614:	2b20      	cmp	r3, #32
 8006616:	d107      	bne.n	8006628 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f06f 0220 	mvn.w	r2, #32
 8006620:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f000 fd94 	bl	8007150 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006628:	bf00      	nop
 800662a:	3708      	adds	r7, #8
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}

08006630 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b086      	sub	sp, #24
 8006634:	af00      	add	r7, sp, #0
 8006636:	60f8      	str	r0, [r7, #12]
 8006638:	60b9      	str	r1, [r7, #8]
 800663a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800663c:	2300      	movs	r3, #0
 800663e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006646:	2b01      	cmp	r3, #1
 8006648:	d101      	bne.n	800664e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800664a:	2302      	movs	r3, #2
 800664c:	e0ae      	b.n	80067ac <HAL_TIM_PWM_ConfigChannel+0x17c>
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2201      	movs	r2, #1
 8006652:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2b0c      	cmp	r3, #12
 800665a:	f200 809f 	bhi.w	800679c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800665e:	a201      	add	r2, pc, #4	@ (adr r2, 8006664 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006664:	08006699 	.word	0x08006699
 8006668:	0800679d 	.word	0x0800679d
 800666c:	0800679d 	.word	0x0800679d
 8006670:	0800679d 	.word	0x0800679d
 8006674:	080066d9 	.word	0x080066d9
 8006678:	0800679d 	.word	0x0800679d
 800667c:	0800679d 	.word	0x0800679d
 8006680:	0800679d 	.word	0x0800679d
 8006684:	0800671b 	.word	0x0800671b
 8006688:	0800679d 	.word	0x0800679d
 800668c:	0800679d 	.word	0x0800679d
 8006690:	0800679d 	.word	0x0800679d
 8006694:	0800675b 	.word	0x0800675b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	68b9      	ldr	r1, [r7, #8]
 800669e:	4618      	mov	r0, r3
 80066a0:	f000 fa18 	bl	8006ad4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	699a      	ldr	r2, [r3, #24]
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f042 0208 	orr.w	r2, r2, #8
 80066b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	699a      	ldr	r2, [r3, #24]
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f022 0204 	bic.w	r2, r2, #4
 80066c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	6999      	ldr	r1, [r3, #24]
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	691a      	ldr	r2, [r3, #16]
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	430a      	orrs	r2, r1
 80066d4:	619a      	str	r2, [r3, #24]
      break;
 80066d6:	e064      	b.n	80067a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	68b9      	ldr	r1, [r7, #8]
 80066de:	4618      	mov	r0, r3
 80066e0:	f000 fa68 	bl	8006bb4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	699a      	ldr	r2, [r3, #24]
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80066f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	699a      	ldr	r2, [r3, #24]
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006702:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	6999      	ldr	r1, [r3, #24]
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	691b      	ldr	r3, [r3, #16]
 800670e:	021a      	lsls	r2, r3, #8
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	430a      	orrs	r2, r1
 8006716:	619a      	str	r2, [r3, #24]
      break;
 8006718:	e043      	b.n	80067a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	68b9      	ldr	r1, [r7, #8]
 8006720:	4618      	mov	r0, r3
 8006722:	f000 fabd 	bl	8006ca0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	69da      	ldr	r2, [r3, #28]
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f042 0208 	orr.w	r2, r2, #8
 8006734:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	69da      	ldr	r2, [r3, #28]
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f022 0204 	bic.w	r2, r2, #4
 8006744:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	69d9      	ldr	r1, [r3, #28]
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	691a      	ldr	r2, [r3, #16]
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	430a      	orrs	r2, r1
 8006756:	61da      	str	r2, [r3, #28]
      break;
 8006758:	e023      	b.n	80067a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	68b9      	ldr	r1, [r7, #8]
 8006760:	4618      	mov	r0, r3
 8006762:	f000 fb11 	bl	8006d88 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	69da      	ldr	r2, [r3, #28]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006774:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	69da      	ldr	r2, [r3, #28]
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006784:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	69d9      	ldr	r1, [r3, #28]
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	691b      	ldr	r3, [r3, #16]
 8006790:	021a      	lsls	r2, r3, #8
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	430a      	orrs	r2, r1
 8006798:	61da      	str	r2, [r3, #28]
      break;
 800679a:	e002      	b.n	80067a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800679c:	2301      	movs	r3, #1
 800679e:	75fb      	strb	r3, [r7, #23]
      break;
 80067a0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2200      	movs	r2, #0
 80067a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80067aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3718      	adds	r7, #24
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}

080067b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b084      	sub	sp, #16
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80067be:	2300      	movs	r3, #0
 80067c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80067c8:	2b01      	cmp	r3, #1
 80067ca:	d101      	bne.n	80067d0 <HAL_TIM_ConfigClockSource+0x1c>
 80067cc:	2302      	movs	r3, #2
 80067ce:	e0b4      	b.n	800693a <HAL_TIM_ConfigClockSource+0x186>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2201      	movs	r2, #1
 80067d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2202      	movs	r2, #2
 80067dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	689b      	ldr	r3, [r3, #8]
 80067e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80067ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80067f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	68ba      	ldr	r2, [r7, #8]
 80067fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006808:	d03e      	beq.n	8006888 <HAL_TIM_ConfigClockSource+0xd4>
 800680a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800680e:	f200 8087 	bhi.w	8006920 <HAL_TIM_ConfigClockSource+0x16c>
 8006812:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006816:	f000 8086 	beq.w	8006926 <HAL_TIM_ConfigClockSource+0x172>
 800681a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800681e:	d87f      	bhi.n	8006920 <HAL_TIM_ConfigClockSource+0x16c>
 8006820:	2b70      	cmp	r3, #112	@ 0x70
 8006822:	d01a      	beq.n	800685a <HAL_TIM_ConfigClockSource+0xa6>
 8006824:	2b70      	cmp	r3, #112	@ 0x70
 8006826:	d87b      	bhi.n	8006920 <HAL_TIM_ConfigClockSource+0x16c>
 8006828:	2b60      	cmp	r3, #96	@ 0x60
 800682a:	d050      	beq.n	80068ce <HAL_TIM_ConfigClockSource+0x11a>
 800682c:	2b60      	cmp	r3, #96	@ 0x60
 800682e:	d877      	bhi.n	8006920 <HAL_TIM_ConfigClockSource+0x16c>
 8006830:	2b50      	cmp	r3, #80	@ 0x50
 8006832:	d03c      	beq.n	80068ae <HAL_TIM_ConfigClockSource+0xfa>
 8006834:	2b50      	cmp	r3, #80	@ 0x50
 8006836:	d873      	bhi.n	8006920 <HAL_TIM_ConfigClockSource+0x16c>
 8006838:	2b40      	cmp	r3, #64	@ 0x40
 800683a:	d058      	beq.n	80068ee <HAL_TIM_ConfigClockSource+0x13a>
 800683c:	2b40      	cmp	r3, #64	@ 0x40
 800683e:	d86f      	bhi.n	8006920 <HAL_TIM_ConfigClockSource+0x16c>
 8006840:	2b30      	cmp	r3, #48	@ 0x30
 8006842:	d064      	beq.n	800690e <HAL_TIM_ConfigClockSource+0x15a>
 8006844:	2b30      	cmp	r3, #48	@ 0x30
 8006846:	d86b      	bhi.n	8006920 <HAL_TIM_ConfigClockSource+0x16c>
 8006848:	2b20      	cmp	r3, #32
 800684a:	d060      	beq.n	800690e <HAL_TIM_ConfigClockSource+0x15a>
 800684c:	2b20      	cmp	r3, #32
 800684e:	d867      	bhi.n	8006920 <HAL_TIM_ConfigClockSource+0x16c>
 8006850:	2b00      	cmp	r3, #0
 8006852:	d05c      	beq.n	800690e <HAL_TIM_ConfigClockSource+0x15a>
 8006854:	2b10      	cmp	r3, #16
 8006856:	d05a      	beq.n	800690e <HAL_TIM_ConfigClockSource+0x15a>
 8006858:	e062      	b.n	8006920 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6818      	ldr	r0, [r3, #0]
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	6899      	ldr	r1, [r3, #8]
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	685a      	ldr	r2, [r3, #4]
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	68db      	ldr	r3, [r3, #12]
 800686a:	f000 fb5d 	bl	8006f28 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	689b      	ldr	r3, [r3, #8]
 8006874:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800687c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	68ba      	ldr	r2, [r7, #8]
 8006884:	609a      	str	r2, [r3, #8]
      break;
 8006886:	e04f      	b.n	8006928 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6818      	ldr	r0, [r3, #0]
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	6899      	ldr	r1, [r3, #8]
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	685a      	ldr	r2, [r3, #4]
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	68db      	ldr	r3, [r3, #12]
 8006898:	f000 fb46 	bl	8006f28 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	689a      	ldr	r2, [r3, #8]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80068aa:	609a      	str	r2, [r3, #8]
      break;
 80068ac:	e03c      	b.n	8006928 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6818      	ldr	r0, [r3, #0]
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	6859      	ldr	r1, [r3, #4]
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	68db      	ldr	r3, [r3, #12]
 80068ba:	461a      	mov	r2, r3
 80068bc:	f000 faba 	bl	8006e34 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	2150      	movs	r1, #80	@ 0x50
 80068c6:	4618      	mov	r0, r3
 80068c8:	f000 fb13 	bl	8006ef2 <TIM_ITRx_SetConfig>
      break;
 80068cc:	e02c      	b.n	8006928 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6818      	ldr	r0, [r3, #0]
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	6859      	ldr	r1, [r3, #4]
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	68db      	ldr	r3, [r3, #12]
 80068da:	461a      	mov	r2, r3
 80068dc:	f000 fad9 	bl	8006e92 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	2160      	movs	r1, #96	@ 0x60
 80068e6:	4618      	mov	r0, r3
 80068e8:	f000 fb03 	bl	8006ef2 <TIM_ITRx_SetConfig>
      break;
 80068ec:	e01c      	b.n	8006928 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6818      	ldr	r0, [r3, #0]
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	6859      	ldr	r1, [r3, #4]
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	68db      	ldr	r3, [r3, #12]
 80068fa:	461a      	mov	r2, r3
 80068fc:	f000 fa9a 	bl	8006e34 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	2140      	movs	r1, #64	@ 0x40
 8006906:	4618      	mov	r0, r3
 8006908:	f000 faf3 	bl	8006ef2 <TIM_ITRx_SetConfig>
      break;
 800690c:	e00c      	b.n	8006928 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681a      	ldr	r2, [r3, #0]
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4619      	mov	r1, r3
 8006918:	4610      	mov	r0, r2
 800691a:	f000 faea 	bl	8006ef2 <TIM_ITRx_SetConfig>
      break;
 800691e:	e003      	b.n	8006928 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006920:	2301      	movs	r3, #1
 8006922:	73fb      	strb	r3, [r7, #15]
      break;
 8006924:	e000      	b.n	8006928 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006926:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2201      	movs	r2, #1
 800692c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2200      	movs	r2, #0
 8006934:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006938:	7bfb      	ldrb	r3, [r7, #15]
}
 800693a:	4618      	mov	r0, r3
 800693c:	3710      	adds	r7, #16
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}

08006942 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006942:	b480      	push	{r7}
 8006944:	b083      	sub	sp, #12
 8006946:	af00      	add	r7, sp, #0
 8006948:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800694a:	bf00      	nop
 800694c:	370c      	adds	r7, #12
 800694e:	46bd      	mov	sp, r7
 8006950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006954:	4770      	bx	lr

08006956 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006956:	b480      	push	{r7}
 8006958:	b083      	sub	sp, #12
 800695a:	af00      	add	r7, sp, #0
 800695c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800695e:	bf00      	nop
 8006960:	370c      	adds	r7, #12
 8006962:	46bd      	mov	sp, r7
 8006964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006968:	4770      	bx	lr

0800696a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800696a:	b480      	push	{r7}
 800696c:	b083      	sub	sp, #12
 800696e:	af00      	add	r7, sp, #0
 8006970:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006972:	bf00      	nop
 8006974:	370c      	adds	r7, #12
 8006976:	46bd      	mov	sp, r7
 8006978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697c:	4770      	bx	lr

0800697e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800697e:	b480      	push	{r7}
 8006980:	b083      	sub	sp, #12
 8006982:	af00      	add	r7, sp, #0
 8006984:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006986:	bf00      	nop
 8006988:	370c      	adds	r7, #12
 800698a:	46bd      	mov	sp, r7
 800698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006990:	4770      	bx	lr
	...

08006994 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006994:	b480      	push	{r7}
 8006996:	b085      	sub	sp, #20
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
 800699c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	4a40      	ldr	r2, [pc, #256]	@ (8006aa8 <TIM_Base_SetConfig+0x114>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d013      	beq.n	80069d4 <TIM_Base_SetConfig+0x40>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069b2:	d00f      	beq.n	80069d4 <TIM_Base_SetConfig+0x40>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	4a3d      	ldr	r2, [pc, #244]	@ (8006aac <TIM_Base_SetConfig+0x118>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d00b      	beq.n	80069d4 <TIM_Base_SetConfig+0x40>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	4a3c      	ldr	r2, [pc, #240]	@ (8006ab0 <TIM_Base_SetConfig+0x11c>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d007      	beq.n	80069d4 <TIM_Base_SetConfig+0x40>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	4a3b      	ldr	r2, [pc, #236]	@ (8006ab4 <TIM_Base_SetConfig+0x120>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d003      	beq.n	80069d4 <TIM_Base_SetConfig+0x40>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	4a3a      	ldr	r2, [pc, #232]	@ (8006ab8 <TIM_Base_SetConfig+0x124>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d108      	bne.n	80069e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	68fa      	ldr	r2, [r7, #12]
 80069e2:	4313      	orrs	r3, r2
 80069e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	4a2f      	ldr	r2, [pc, #188]	@ (8006aa8 <TIM_Base_SetConfig+0x114>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d02b      	beq.n	8006a46 <TIM_Base_SetConfig+0xb2>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069f4:	d027      	beq.n	8006a46 <TIM_Base_SetConfig+0xb2>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	4a2c      	ldr	r2, [pc, #176]	@ (8006aac <TIM_Base_SetConfig+0x118>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d023      	beq.n	8006a46 <TIM_Base_SetConfig+0xb2>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	4a2b      	ldr	r2, [pc, #172]	@ (8006ab0 <TIM_Base_SetConfig+0x11c>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d01f      	beq.n	8006a46 <TIM_Base_SetConfig+0xb2>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	4a2a      	ldr	r2, [pc, #168]	@ (8006ab4 <TIM_Base_SetConfig+0x120>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d01b      	beq.n	8006a46 <TIM_Base_SetConfig+0xb2>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	4a29      	ldr	r2, [pc, #164]	@ (8006ab8 <TIM_Base_SetConfig+0x124>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d017      	beq.n	8006a46 <TIM_Base_SetConfig+0xb2>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	4a28      	ldr	r2, [pc, #160]	@ (8006abc <TIM_Base_SetConfig+0x128>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d013      	beq.n	8006a46 <TIM_Base_SetConfig+0xb2>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	4a27      	ldr	r2, [pc, #156]	@ (8006ac0 <TIM_Base_SetConfig+0x12c>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d00f      	beq.n	8006a46 <TIM_Base_SetConfig+0xb2>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	4a26      	ldr	r2, [pc, #152]	@ (8006ac4 <TIM_Base_SetConfig+0x130>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d00b      	beq.n	8006a46 <TIM_Base_SetConfig+0xb2>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	4a25      	ldr	r2, [pc, #148]	@ (8006ac8 <TIM_Base_SetConfig+0x134>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d007      	beq.n	8006a46 <TIM_Base_SetConfig+0xb2>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	4a24      	ldr	r2, [pc, #144]	@ (8006acc <TIM_Base_SetConfig+0x138>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d003      	beq.n	8006a46 <TIM_Base_SetConfig+0xb2>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	4a23      	ldr	r2, [pc, #140]	@ (8006ad0 <TIM_Base_SetConfig+0x13c>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d108      	bne.n	8006a58 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	68db      	ldr	r3, [r3, #12]
 8006a52:	68fa      	ldr	r2, [r7, #12]
 8006a54:	4313      	orrs	r3, r2
 8006a56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	695b      	ldr	r3, [r3, #20]
 8006a62:	4313      	orrs	r3, r2
 8006a64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	68fa      	ldr	r2, [r7, #12]
 8006a6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	689a      	ldr	r2, [r3, #8]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	681a      	ldr	r2, [r3, #0]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	4a0a      	ldr	r2, [pc, #40]	@ (8006aa8 <TIM_Base_SetConfig+0x114>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d003      	beq.n	8006a8c <TIM_Base_SetConfig+0xf8>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	4a0c      	ldr	r2, [pc, #48]	@ (8006ab8 <TIM_Base_SetConfig+0x124>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d103      	bne.n	8006a94 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	691a      	ldr	r2, [r3, #16]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2201      	movs	r2, #1
 8006a98:	615a      	str	r2, [r3, #20]
}
 8006a9a:	bf00      	nop
 8006a9c:	3714      	adds	r7, #20
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa4:	4770      	bx	lr
 8006aa6:	bf00      	nop
 8006aa8:	40010000 	.word	0x40010000
 8006aac:	40000400 	.word	0x40000400
 8006ab0:	40000800 	.word	0x40000800
 8006ab4:	40000c00 	.word	0x40000c00
 8006ab8:	40010400 	.word	0x40010400
 8006abc:	40014000 	.word	0x40014000
 8006ac0:	40014400 	.word	0x40014400
 8006ac4:	40014800 	.word	0x40014800
 8006ac8:	40001800 	.word	0x40001800
 8006acc:	40001c00 	.word	0x40001c00
 8006ad0:	40002000 	.word	0x40002000

08006ad4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b087      	sub	sp, #28
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
 8006adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6a1b      	ldr	r3, [r3, #32]
 8006ae2:	f023 0201 	bic.w	r2, r3, #1
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6a1b      	ldr	r3, [r3, #32]
 8006aee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	699b      	ldr	r3, [r3, #24]
 8006afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f023 0303 	bic.w	r3, r3, #3
 8006b0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	68fa      	ldr	r2, [r7, #12]
 8006b12:	4313      	orrs	r3, r2
 8006b14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	f023 0302 	bic.w	r3, r3, #2
 8006b1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	689b      	ldr	r3, [r3, #8]
 8006b22:	697a      	ldr	r2, [r7, #20]
 8006b24:	4313      	orrs	r3, r2
 8006b26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	4a20      	ldr	r2, [pc, #128]	@ (8006bac <TIM_OC1_SetConfig+0xd8>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d003      	beq.n	8006b38 <TIM_OC1_SetConfig+0x64>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	4a1f      	ldr	r2, [pc, #124]	@ (8006bb0 <TIM_OC1_SetConfig+0xdc>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d10c      	bne.n	8006b52 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	f023 0308 	bic.w	r3, r3, #8
 8006b3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	68db      	ldr	r3, [r3, #12]
 8006b44:	697a      	ldr	r2, [r7, #20]
 8006b46:	4313      	orrs	r3, r2
 8006b48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	f023 0304 	bic.w	r3, r3, #4
 8006b50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	4a15      	ldr	r2, [pc, #84]	@ (8006bac <TIM_OC1_SetConfig+0xd8>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d003      	beq.n	8006b62 <TIM_OC1_SetConfig+0x8e>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	4a14      	ldr	r2, [pc, #80]	@ (8006bb0 <TIM_OC1_SetConfig+0xdc>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d111      	bne.n	8006b86 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006b70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	695b      	ldr	r3, [r3, #20]
 8006b76:	693a      	ldr	r2, [r7, #16]
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	699b      	ldr	r3, [r3, #24]
 8006b80:	693a      	ldr	r2, [r7, #16]
 8006b82:	4313      	orrs	r3, r2
 8006b84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	693a      	ldr	r2, [r7, #16]
 8006b8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	68fa      	ldr	r2, [r7, #12]
 8006b90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	685a      	ldr	r2, [r3, #4]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	697a      	ldr	r2, [r7, #20]
 8006b9e:	621a      	str	r2, [r3, #32]
}
 8006ba0:	bf00      	nop
 8006ba2:	371c      	adds	r7, #28
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006baa:	4770      	bx	lr
 8006bac:	40010000 	.word	0x40010000
 8006bb0:	40010400 	.word	0x40010400

08006bb4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b087      	sub	sp, #28
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
 8006bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6a1b      	ldr	r3, [r3, #32]
 8006bc2:	f023 0210 	bic.w	r2, r3, #16
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6a1b      	ldr	r3, [r3, #32]
 8006bce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	699b      	ldr	r3, [r3, #24]
 8006bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006be2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006bea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	021b      	lsls	r3, r3, #8
 8006bf2:	68fa      	ldr	r2, [r7, #12]
 8006bf4:	4313      	orrs	r3, r2
 8006bf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	f023 0320 	bic.w	r3, r3, #32
 8006bfe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	689b      	ldr	r3, [r3, #8]
 8006c04:	011b      	lsls	r3, r3, #4
 8006c06:	697a      	ldr	r2, [r7, #20]
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	4a22      	ldr	r2, [pc, #136]	@ (8006c98 <TIM_OC2_SetConfig+0xe4>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d003      	beq.n	8006c1c <TIM_OC2_SetConfig+0x68>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	4a21      	ldr	r2, [pc, #132]	@ (8006c9c <TIM_OC2_SetConfig+0xe8>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d10d      	bne.n	8006c38 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	68db      	ldr	r3, [r3, #12]
 8006c28:	011b      	lsls	r3, r3, #4
 8006c2a:	697a      	ldr	r2, [r7, #20]
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c36:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	4a17      	ldr	r2, [pc, #92]	@ (8006c98 <TIM_OC2_SetConfig+0xe4>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d003      	beq.n	8006c48 <TIM_OC2_SetConfig+0x94>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	4a16      	ldr	r2, [pc, #88]	@ (8006c9c <TIM_OC2_SetConfig+0xe8>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d113      	bne.n	8006c70 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006c4e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006c56:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	695b      	ldr	r3, [r3, #20]
 8006c5c:	009b      	lsls	r3, r3, #2
 8006c5e:	693a      	ldr	r2, [r7, #16]
 8006c60:	4313      	orrs	r3, r2
 8006c62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	699b      	ldr	r3, [r3, #24]
 8006c68:	009b      	lsls	r3, r3, #2
 8006c6a:	693a      	ldr	r2, [r7, #16]
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	693a      	ldr	r2, [r7, #16]
 8006c74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	68fa      	ldr	r2, [r7, #12]
 8006c7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	685a      	ldr	r2, [r3, #4]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	697a      	ldr	r2, [r7, #20]
 8006c88:	621a      	str	r2, [r3, #32]
}
 8006c8a:	bf00      	nop
 8006c8c:	371c      	adds	r7, #28
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c94:	4770      	bx	lr
 8006c96:	bf00      	nop
 8006c98:	40010000 	.word	0x40010000
 8006c9c:	40010400 	.word	0x40010400

08006ca0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b087      	sub	sp, #28
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
 8006ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6a1b      	ldr	r3, [r3, #32]
 8006cae:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6a1b      	ldr	r3, [r3, #32]
 8006cba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	69db      	ldr	r3, [r3, #28]
 8006cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f023 0303 	bic.w	r3, r3, #3
 8006cd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	68fa      	ldr	r2, [r7, #12]
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006ce8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	689b      	ldr	r3, [r3, #8]
 8006cee:	021b      	lsls	r3, r3, #8
 8006cf0:	697a      	ldr	r2, [r7, #20]
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	4a21      	ldr	r2, [pc, #132]	@ (8006d80 <TIM_OC3_SetConfig+0xe0>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d003      	beq.n	8006d06 <TIM_OC3_SetConfig+0x66>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	4a20      	ldr	r2, [pc, #128]	@ (8006d84 <TIM_OC3_SetConfig+0xe4>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d10d      	bne.n	8006d22 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006d0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	68db      	ldr	r3, [r3, #12]
 8006d12:	021b      	lsls	r3, r3, #8
 8006d14:	697a      	ldr	r2, [r7, #20]
 8006d16:	4313      	orrs	r3, r2
 8006d18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006d20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	4a16      	ldr	r2, [pc, #88]	@ (8006d80 <TIM_OC3_SetConfig+0xe0>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d003      	beq.n	8006d32 <TIM_OC3_SetConfig+0x92>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	4a15      	ldr	r2, [pc, #84]	@ (8006d84 <TIM_OC3_SetConfig+0xe4>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d113      	bne.n	8006d5a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006d38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006d40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	695b      	ldr	r3, [r3, #20]
 8006d46:	011b      	lsls	r3, r3, #4
 8006d48:	693a      	ldr	r2, [r7, #16]
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	699b      	ldr	r3, [r3, #24]
 8006d52:	011b      	lsls	r3, r3, #4
 8006d54:	693a      	ldr	r2, [r7, #16]
 8006d56:	4313      	orrs	r3, r2
 8006d58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	693a      	ldr	r2, [r7, #16]
 8006d5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	68fa      	ldr	r2, [r7, #12]
 8006d64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	685a      	ldr	r2, [r3, #4]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	697a      	ldr	r2, [r7, #20]
 8006d72:	621a      	str	r2, [r3, #32]
}
 8006d74:	bf00      	nop
 8006d76:	371c      	adds	r7, #28
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7e:	4770      	bx	lr
 8006d80:	40010000 	.word	0x40010000
 8006d84:	40010400 	.word	0x40010400

08006d88 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b087      	sub	sp, #28
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
 8006d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6a1b      	ldr	r3, [r3, #32]
 8006d96:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6a1b      	ldr	r3, [r3, #32]
 8006da2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	69db      	ldr	r3, [r3, #28]
 8006dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006db6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006dbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	021b      	lsls	r3, r3, #8
 8006dc6:	68fa      	ldr	r2, [r7, #12]
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006dd2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	689b      	ldr	r3, [r3, #8]
 8006dd8:	031b      	lsls	r3, r3, #12
 8006dda:	693a      	ldr	r2, [r7, #16]
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	4a12      	ldr	r2, [pc, #72]	@ (8006e2c <TIM_OC4_SetConfig+0xa4>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d003      	beq.n	8006df0 <TIM_OC4_SetConfig+0x68>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	4a11      	ldr	r2, [pc, #68]	@ (8006e30 <TIM_OC4_SetConfig+0xa8>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d109      	bne.n	8006e04 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006df6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	695b      	ldr	r3, [r3, #20]
 8006dfc:	019b      	lsls	r3, r3, #6
 8006dfe:	697a      	ldr	r2, [r7, #20]
 8006e00:	4313      	orrs	r3, r2
 8006e02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	697a      	ldr	r2, [r7, #20]
 8006e08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	68fa      	ldr	r2, [r7, #12]
 8006e0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	685a      	ldr	r2, [r3, #4]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	693a      	ldr	r2, [r7, #16]
 8006e1c:	621a      	str	r2, [r3, #32]
}
 8006e1e:	bf00      	nop
 8006e20:	371c      	adds	r7, #28
 8006e22:	46bd      	mov	sp, r7
 8006e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e28:	4770      	bx	lr
 8006e2a:	bf00      	nop
 8006e2c:	40010000 	.word	0x40010000
 8006e30:	40010400 	.word	0x40010400

08006e34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b087      	sub	sp, #28
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	60f8      	str	r0, [r7, #12]
 8006e3c:	60b9      	str	r1, [r7, #8]
 8006e3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	6a1b      	ldr	r3, [r3, #32]
 8006e44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	6a1b      	ldr	r3, [r3, #32]
 8006e4a:	f023 0201 	bic.w	r2, r3, #1
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	699b      	ldr	r3, [r3, #24]
 8006e56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006e5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	011b      	lsls	r3, r3, #4
 8006e64:	693a      	ldr	r2, [r7, #16]
 8006e66:	4313      	orrs	r3, r2
 8006e68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	f023 030a 	bic.w	r3, r3, #10
 8006e70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006e72:	697a      	ldr	r2, [r7, #20]
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	4313      	orrs	r3, r2
 8006e78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	693a      	ldr	r2, [r7, #16]
 8006e7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	697a      	ldr	r2, [r7, #20]
 8006e84:	621a      	str	r2, [r3, #32]
}
 8006e86:	bf00      	nop
 8006e88:	371c      	adds	r7, #28
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e90:	4770      	bx	lr

08006e92 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e92:	b480      	push	{r7}
 8006e94:	b087      	sub	sp, #28
 8006e96:	af00      	add	r7, sp, #0
 8006e98:	60f8      	str	r0, [r7, #12]
 8006e9a:	60b9      	str	r1, [r7, #8]
 8006e9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	6a1b      	ldr	r3, [r3, #32]
 8006ea2:	f023 0210 	bic.w	r2, r3, #16
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	699b      	ldr	r3, [r3, #24]
 8006eae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	6a1b      	ldr	r3, [r3, #32]
 8006eb4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006ebc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	031b      	lsls	r3, r3, #12
 8006ec2:	697a      	ldr	r2, [r7, #20]
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006ece:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	011b      	lsls	r3, r3, #4
 8006ed4:	693a      	ldr	r2, [r7, #16]
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	697a      	ldr	r2, [r7, #20]
 8006ede:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	693a      	ldr	r2, [r7, #16]
 8006ee4:	621a      	str	r2, [r3, #32]
}
 8006ee6:	bf00      	nop
 8006ee8:	371c      	adds	r7, #28
 8006eea:	46bd      	mov	sp, r7
 8006eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef0:	4770      	bx	lr

08006ef2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006ef2:	b480      	push	{r7}
 8006ef4:	b085      	sub	sp, #20
 8006ef6:	af00      	add	r7, sp, #0
 8006ef8:	6078      	str	r0, [r7, #4]
 8006efa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	689b      	ldr	r3, [r3, #8]
 8006f00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006f0a:	683a      	ldr	r2, [r7, #0]
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	f043 0307 	orr.w	r3, r3, #7
 8006f14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	68fa      	ldr	r2, [r7, #12]
 8006f1a:	609a      	str	r2, [r3, #8]
}
 8006f1c:	bf00      	nop
 8006f1e:	3714      	adds	r7, #20
 8006f20:	46bd      	mov	sp, r7
 8006f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f26:	4770      	bx	lr

08006f28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b087      	sub	sp, #28
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	60f8      	str	r0, [r7, #12]
 8006f30:	60b9      	str	r1, [r7, #8]
 8006f32:	607a      	str	r2, [r7, #4]
 8006f34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006f42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	021a      	lsls	r2, r3, #8
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	431a      	orrs	r2, r3
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	697a      	ldr	r2, [r7, #20]
 8006f52:	4313      	orrs	r3, r2
 8006f54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	697a      	ldr	r2, [r7, #20]
 8006f5a:	609a      	str	r2, [r3, #8]
}
 8006f5c:	bf00      	nop
 8006f5e:	371c      	adds	r7, #28
 8006f60:	46bd      	mov	sp, r7
 8006f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f66:	4770      	bx	lr

08006f68 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b087      	sub	sp, #28
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	60f8      	str	r0, [r7, #12]
 8006f70:	60b9      	str	r1, [r7, #8]
 8006f72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	f003 031f 	and.w	r3, r3, #31
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f80:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	6a1a      	ldr	r2, [r3, #32]
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	43db      	mvns	r3, r3
 8006f8a:	401a      	ands	r2, r3
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	6a1a      	ldr	r2, [r3, #32]
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	f003 031f 	and.w	r3, r3, #31
 8006f9a:	6879      	ldr	r1, [r7, #4]
 8006f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8006fa0:	431a      	orrs	r2, r3
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	621a      	str	r2, [r3, #32]
}
 8006fa6:	bf00      	nop
 8006fa8:	371c      	adds	r7, #28
 8006faa:	46bd      	mov	sp, r7
 8006fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb0:	4770      	bx	lr
	...

08006fb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b085      	sub	sp, #20
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
 8006fbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006fc4:	2b01      	cmp	r3, #1
 8006fc6:	d101      	bne.n	8006fcc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006fc8:	2302      	movs	r3, #2
 8006fca:	e05a      	b.n	8007082 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2201      	movs	r2, #1
 8006fd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2202      	movs	r2, #2
 8006fd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	689b      	ldr	r3, [r3, #8]
 8006fea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ff2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	68fa      	ldr	r2, [r7, #12]
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	68fa      	ldr	r2, [r7, #12]
 8007004:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a21      	ldr	r2, [pc, #132]	@ (8007090 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d022      	beq.n	8007056 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007018:	d01d      	beq.n	8007056 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4a1d      	ldr	r2, [pc, #116]	@ (8007094 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d018      	beq.n	8007056 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a1b      	ldr	r2, [pc, #108]	@ (8007098 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d013      	beq.n	8007056 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a1a      	ldr	r2, [pc, #104]	@ (800709c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d00e      	beq.n	8007056 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a18      	ldr	r2, [pc, #96]	@ (80070a0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d009      	beq.n	8007056 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a17      	ldr	r2, [pc, #92]	@ (80070a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d004      	beq.n	8007056 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a15      	ldr	r2, [pc, #84]	@ (80070a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d10c      	bne.n	8007070 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800705c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	68ba      	ldr	r2, [r7, #8]
 8007064:	4313      	orrs	r3, r2
 8007066:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	68ba      	ldr	r2, [r7, #8]
 800706e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2201      	movs	r2, #1
 8007074:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2200      	movs	r2, #0
 800707c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007080:	2300      	movs	r3, #0
}
 8007082:	4618      	mov	r0, r3
 8007084:	3714      	adds	r7, #20
 8007086:	46bd      	mov	sp, r7
 8007088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708c:	4770      	bx	lr
 800708e:	bf00      	nop
 8007090:	40010000 	.word	0x40010000
 8007094:	40000400 	.word	0x40000400
 8007098:	40000800 	.word	0x40000800
 800709c:	40000c00 	.word	0x40000c00
 80070a0:	40010400 	.word	0x40010400
 80070a4:	40014000 	.word	0x40014000
 80070a8:	40001800 	.word	0x40001800

080070ac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b085      	sub	sp, #20
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80070b6:	2300      	movs	r3, #0
 80070b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80070c0:	2b01      	cmp	r3, #1
 80070c2:	d101      	bne.n	80070c8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80070c4:	2302      	movs	r3, #2
 80070c6:	e03d      	b.n	8007144 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2201      	movs	r2, #1
 80070cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	68db      	ldr	r3, [r3, #12]
 80070da:	4313      	orrs	r3, r2
 80070dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	4313      	orrs	r3, r2
 80070ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	4313      	orrs	r3, r2
 80070f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4313      	orrs	r3, r2
 8007106:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	691b      	ldr	r3, [r3, #16]
 8007112:	4313      	orrs	r3, r2
 8007114:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	695b      	ldr	r3, [r3, #20]
 8007120:	4313      	orrs	r3, r2
 8007122:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	69db      	ldr	r3, [r3, #28]
 800712e:	4313      	orrs	r3, r2
 8007130:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	68fa      	ldr	r2, [r7, #12]
 8007138:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2200      	movs	r2, #0
 800713e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007142:	2300      	movs	r3, #0
}
 8007144:	4618      	mov	r0, r3
 8007146:	3714      	adds	r7, #20
 8007148:	46bd      	mov	sp, r7
 800714a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714e:	4770      	bx	lr

08007150 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007150:	b480      	push	{r7}
 8007152:	b083      	sub	sp, #12
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007158:	bf00      	nop
 800715a:	370c      	adds	r7, #12
 800715c:	46bd      	mov	sp, r7
 800715e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007162:	4770      	bx	lr

08007164 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007164:	b480      	push	{r7}
 8007166:	b083      	sub	sp, #12
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800716c:	bf00      	nop
 800716e:	370c      	adds	r7, #12
 8007170:	46bd      	mov	sp, r7
 8007172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007176:	4770      	bx	lr

08007178 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b082      	sub	sp, #8
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d101      	bne.n	800718a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007186:	2301      	movs	r3, #1
 8007188:	e03f      	b.n	800720a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007190:	b2db      	uxtb	r3, r3
 8007192:	2b00      	cmp	r3, #0
 8007194:	d106      	bne.n	80071a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2200      	movs	r2, #0
 800719a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f7fb fba2 	bl	80028e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2224      	movs	r2, #36	@ 0x24
 80071a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	68da      	ldr	r2, [r3, #12]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80071ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f000 fddf 	bl	8007d80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	691a      	ldr	r2, [r3, #16]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80071d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	695a      	ldr	r2, [r3, #20]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80071e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	68da      	ldr	r2, [r3, #12]
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80071f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2200      	movs	r2, #0
 80071f6:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2220      	movs	r2, #32
 80071fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2220      	movs	r2, #32
 8007204:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8007208:	2300      	movs	r3, #0
}
 800720a:	4618      	mov	r0, r3
 800720c:	3708      	adds	r7, #8
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}

08007212 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007212:	b580      	push	{r7, lr}
 8007214:	b08a      	sub	sp, #40	@ 0x28
 8007216:	af02      	add	r7, sp, #8
 8007218:	60f8      	str	r0, [r7, #12]
 800721a:	60b9      	str	r1, [r7, #8]
 800721c:	603b      	str	r3, [r7, #0]
 800721e:	4613      	mov	r3, r2
 8007220:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007222:	2300      	movs	r3, #0
 8007224:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800722c:	b2db      	uxtb	r3, r3
 800722e:	2b20      	cmp	r3, #32
 8007230:	d17c      	bne.n	800732c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d002      	beq.n	800723e <HAL_UART_Transmit+0x2c>
 8007238:	88fb      	ldrh	r3, [r7, #6]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d101      	bne.n	8007242 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800723e:	2301      	movs	r3, #1
 8007240:	e075      	b.n	800732e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007248:	2b01      	cmp	r3, #1
 800724a:	d101      	bne.n	8007250 <HAL_UART_Transmit+0x3e>
 800724c:	2302      	movs	r3, #2
 800724e:	e06e      	b.n	800732e <HAL_UART_Transmit+0x11c>
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2201      	movs	r2, #1
 8007254:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2200      	movs	r2, #0
 800725c:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	2221      	movs	r2, #33	@ 0x21
 8007262:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007266:	f7fb fc8b 	bl	8002b80 <HAL_GetTick>
 800726a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	88fa      	ldrh	r2, [r7, #6]
 8007270:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	88fa      	ldrh	r2, [r7, #6]
 8007276:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007280:	d108      	bne.n	8007294 <HAL_UART_Transmit+0x82>
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	691b      	ldr	r3, [r3, #16]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d104      	bne.n	8007294 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800728a:	2300      	movs	r3, #0
 800728c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	61bb      	str	r3, [r7, #24]
 8007292:	e003      	b.n	800729c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007298:	2300      	movs	r3, #0
 800729a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	2200      	movs	r2, #0
 80072a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 80072a4:	e02a      	b.n	80072fc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	9300      	str	r3, [sp, #0]
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	2200      	movs	r2, #0
 80072ae:	2180      	movs	r1, #128	@ 0x80
 80072b0:	68f8      	ldr	r0, [r7, #12]
 80072b2:	f000 fb1f 	bl	80078f4 <UART_WaitOnFlagUntilTimeout>
 80072b6:	4603      	mov	r3, r0
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d001      	beq.n	80072c0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80072bc:	2303      	movs	r3, #3
 80072be:	e036      	b.n	800732e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80072c0:	69fb      	ldr	r3, [r7, #28]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d10b      	bne.n	80072de <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80072c6:	69bb      	ldr	r3, [r7, #24]
 80072c8:	881b      	ldrh	r3, [r3, #0]
 80072ca:	461a      	mov	r2, r3
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80072d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80072d6:	69bb      	ldr	r3, [r7, #24]
 80072d8:	3302      	adds	r3, #2
 80072da:	61bb      	str	r3, [r7, #24]
 80072dc:	e007      	b.n	80072ee <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80072de:	69fb      	ldr	r3, [r7, #28]
 80072e0:	781a      	ldrb	r2, [r3, #0]
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80072e8:	69fb      	ldr	r3, [r7, #28]
 80072ea:	3301      	adds	r3, #1
 80072ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80072f2:	b29b      	uxth	r3, r3
 80072f4:	3b01      	subs	r3, #1
 80072f6:	b29a      	uxth	r2, r3
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007300:	b29b      	uxth	r3, r3
 8007302:	2b00      	cmp	r3, #0
 8007304:	d1cf      	bne.n	80072a6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	9300      	str	r3, [sp, #0]
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	2200      	movs	r2, #0
 800730e:	2140      	movs	r1, #64	@ 0x40
 8007310:	68f8      	ldr	r0, [r7, #12]
 8007312:	f000 faef 	bl	80078f4 <UART_WaitOnFlagUntilTimeout>
 8007316:	4603      	mov	r3, r0
 8007318:	2b00      	cmp	r3, #0
 800731a:	d001      	beq.n	8007320 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800731c:	2303      	movs	r3, #3
 800731e:	e006      	b.n	800732e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2220      	movs	r2, #32
 8007324:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8007328:	2300      	movs	r3, #0
 800732a:	e000      	b.n	800732e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800732c:	2302      	movs	r3, #2
  }
}
 800732e:	4618      	mov	r0, r3
 8007330:	3720      	adds	r7, #32
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}

08007336 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007336:	b580      	push	{r7, lr}
 8007338:	b084      	sub	sp, #16
 800733a:	af00      	add	r7, sp, #0
 800733c:	60f8      	str	r0, [r7, #12]
 800733e:	60b9      	str	r1, [r7, #8]
 8007340:	4613      	mov	r3, r2
 8007342:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800734a:	b2db      	uxtb	r3, r3
 800734c:	2b20      	cmp	r3, #32
 800734e:	d11d      	bne.n	800738c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d002      	beq.n	800735c <HAL_UART_Receive_IT+0x26>
 8007356:	88fb      	ldrh	r3, [r7, #6]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d101      	bne.n	8007360 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800735c:	2301      	movs	r3, #1
 800735e:	e016      	b.n	800738e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007366:	2b01      	cmp	r3, #1
 8007368:	d101      	bne.n	800736e <HAL_UART_Receive_IT+0x38>
 800736a:	2302      	movs	r3, #2
 800736c:	e00f      	b.n	800738e <HAL_UART_Receive_IT+0x58>
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2201      	movs	r2, #1
 8007372:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	2200      	movs	r2, #0
 800737a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800737c:	88fb      	ldrh	r3, [r7, #6]
 800737e:	461a      	mov	r2, r3
 8007380:	68b9      	ldr	r1, [r7, #8]
 8007382:	68f8      	ldr	r0, [r7, #12]
 8007384:	f000 fb24 	bl	80079d0 <UART_Start_Receive_IT>
 8007388:	4603      	mov	r3, r0
 800738a:	e000      	b.n	800738e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800738c:	2302      	movs	r3, #2
  }
}
 800738e:	4618      	mov	r0, r3
 8007390:	3710      	adds	r7, #16
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}
	...

08007398 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b0ba      	sub	sp, #232	@ 0xe8
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	68db      	ldr	r3, [r3, #12]
 80073b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	695b      	ldr	r3, [r3, #20]
 80073ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80073be:	2300      	movs	r3, #0
 80073c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80073c4:	2300      	movs	r3, #0
 80073c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80073ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073ce:	f003 030f 	and.w	r3, r3, #15
 80073d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80073d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d10f      	bne.n	80073fe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80073de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073e2:	f003 0320 	and.w	r3, r3, #32
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d009      	beq.n	80073fe <HAL_UART_IRQHandler+0x66>
 80073ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80073ee:	f003 0320 	and.w	r3, r3, #32
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d003      	beq.n	80073fe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f000 fc07 	bl	8007c0a <UART_Receive_IT>
      return;
 80073fc:	e256      	b.n	80078ac <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80073fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007402:	2b00      	cmp	r3, #0
 8007404:	f000 80de 	beq.w	80075c4 <HAL_UART_IRQHandler+0x22c>
 8007408:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800740c:	f003 0301 	and.w	r3, r3, #1
 8007410:	2b00      	cmp	r3, #0
 8007412:	d106      	bne.n	8007422 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007414:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007418:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800741c:	2b00      	cmp	r3, #0
 800741e:	f000 80d1 	beq.w	80075c4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007422:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007426:	f003 0301 	and.w	r3, r3, #1
 800742a:	2b00      	cmp	r3, #0
 800742c:	d00b      	beq.n	8007446 <HAL_UART_IRQHandler+0xae>
 800742e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007432:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007436:	2b00      	cmp	r3, #0
 8007438:	d005      	beq.n	8007446 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800743e:	f043 0201 	orr.w	r2, r3, #1
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007446:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800744a:	f003 0304 	and.w	r3, r3, #4
 800744e:	2b00      	cmp	r3, #0
 8007450:	d00b      	beq.n	800746a <HAL_UART_IRQHandler+0xd2>
 8007452:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007456:	f003 0301 	and.w	r3, r3, #1
 800745a:	2b00      	cmp	r3, #0
 800745c:	d005      	beq.n	800746a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007462:	f043 0202 	orr.w	r2, r3, #2
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800746a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800746e:	f003 0302 	and.w	r3, r3, #2
 8007472:	2b00      	cmp	r3, #0
 8007474:	d00b      	beq.n	800748e <HAL_UART_IRQHandler+0xf6>
 8007476:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800747a:	f003 0301 	and.w	r3, r3, #1
 800747e:	2b00      	cmp	r3, #0
 8007480:	d005      	beq.n	800748e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007486:	f043 0204 	orr.w	r2, r3, #4
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800748e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007492:	f003 0308 	and.w	r3, r3, #8
 8007496:	2b00      	cmp	r3, #0
 8007498:	d011      	beq.n	80074be <HAL_UART_IRQHandler+0x126>
 800749a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800749e:	f003 0320 	and.w	r3, r3, #32
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d105      	bne.n	80074b2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80074a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80074aa:	f003 0301 	and.w	r3, r3, #1
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d005      	beq.n	80074be <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074b6:	f043 0208 	orr.w	r2, r3, #8
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	f000 81ed 	beq.w	80078a2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80074c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074cc:	f003 0320 	and.w	r3, r3, #32
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d008      	beq.n	80074e6 <HAL_UART_IRQHandler+0x14e>
 80074d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074d8:	f003 0320 	and.w	r3, r3, #32
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d002      	beq.n	80074e6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f000 fb92 	bl	8007c0a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	695b      	ldr	r3, [r3, #20]
 80074ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074f0:	2b40      	cmp	r3, #64	@ 0x40
 80074f2:	bf0c      	ite	eq
 80074f4:	2301      	moveq	r3, #1
 80074f6:	2300      	movne	r3, #0
 80074f8:	b2db      	uxtb	r3, r3
 80074fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007502:	f003 0308 	and.w	r3, r3, #8
 8007506:	2b00      	cmp	r3, #0
 8007508:	d103      	bne.n	8007512 <HAL_UART_IRQHandler+0x17a>
 800750a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800750e:	2b00      	cmp	r3, #0
 8007510:	d04f      	beq.n	80075b2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f000 fa9a 	bl	8007a4c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	695b      	ldr	r3, [r3, #20]
 800751e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007522:	2b40      	cmp	r3, #64	@ 0x40
 8007524:	d141      	bne.n	80075aa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	3314      	adds	r3, #20
 800752c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007530:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007534:	e853 3f00 	ldrex	r3, [r3]
 8007538:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800753c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007540:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007544:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	3314      	adds	r3, #20
 800754e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007552:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007556:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800755a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800755e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007562:	e841 2300 	strex	r3, r2, [r1]
 8007566:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800756a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800756e:	2b00      	cmp	r3, #0
 8007570:	d1d9      	bne.n	8007526 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007576:	2b00      	cmp	r3, #0
 8007578:	d013      	beq.n	80075a2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800757e:	4a7d      	ldr	r2, [pc, #500]	@ (8007774 <HAL_UART_IRQHandler+0x3dc>)
 8007580:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007586:	4618      	mov	r0, r3
 8007588:	f7fc fc54 	bl	8003e34 <HAL_DMA_Abort_IT>
 800758c:	4603      	mov	r3, r0
 800758e:	2b00      	cmp	r3, #0
 8007590:	d016      	beq.n	80075c0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007596:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007598:	687a      	ldr	r2, [r7, #4]
 800759a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800759c:	4610      	mov	r0, r2
 800759e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075a0:	e00e      	b.n	80075c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f000 f990 	bl	80078c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075a8:	e00a      	b.n	80075c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f000 f98c 	bl	80078c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075b0:	e006      	b.n	80075c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f000 f988 	bl	80078c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2200      	movs	r2, #0
 80075bc:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 80075be:	e170      	b.n	80078a2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075c0:	bf00      	nop
    return;
 80075c2:	e16e      	b.n	80078a2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075c8:	2b01      	cmp	r3, #1
 80075ca:	f040 814a 	bne.w	8007862 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80075ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075d2:	f003 0310 	and.w	r3, r3, #16
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	f000 8143 	beq.w	8007862 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80075dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075e0:	f003 0310 	and.w	r3, r3, #16
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	f000 813c 	beq.w	8007862 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80075ea:	2300      	movs	r3, #0
 80075ec:	60bb      	str	r3, [r7, #8]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	60bb      	str	r3, [r7, #8]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	685b      	ldr	r3, [r3, #4]
 80075fc:	60bb      	str	r3, [r7, #8]
 80075fe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	695b      	ldr	r3, [r3, #20]
 8007606:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800760a:	2b40      	cmp	r3, #64	@ 0x40
 800760c:	f040 80b4 	bne.w	8007778 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	685b      	ldr	r3, [r3, #4]
 8007618:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800761c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007620:	2b00      	cmp	r3, #0
 8007622:	f000 8140 	beq.w	80078a6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800762a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800762e:	429a      	cmp	r2, r3
 8007630:	f080 8139 	bcs.w	80078a6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800763a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007640:	69db      	ldr	r3, [r3, #28]
 8007642:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007646:	f000 8088 	beq.w	800775a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	330c      	adds	r3, #12
 8007650:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007654:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007658:	e853 3f00 	ldrex	r3, [r3]
 800765c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007660:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007664:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007668:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	330c      	adds	r3, #12
 8007672:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007676:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800767a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800767e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007682:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007686:	e841 2300 	strex	r3, r2, [r1]
 800768a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800768e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007692:	2b00      	cmp	r3, #0
 8007694:	d1d9      	bne.n	800764a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	3314      	adds	r3, #20
 800769c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800769e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80076a0:	e853 3f00 	ldrex	r3, [r3]
 80076a4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80076a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80076a8:	f023 0301 	bic.w	r3, r3, #1
 80076ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	3314      	adds	r3, #20
 80076b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80076ba:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80076be:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80076c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80076c6:	e841 2300 	strex	r3, r2, [r1]
 80076ca:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80076cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d1e1      	bne.n	8007696 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	3314      	adds	r3, #20
 80076d8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80076dc:	e853 3f00 	ldrex	r3, [r3]
 80076e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80076e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80076e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80076e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	3314      	adds	r3, #20
 80076f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80076f6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80076f8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076fa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80076fc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80076fe:	e841 2300 	strex	r3, r2, [r1]
 8007702:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007704:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007706:	2b00      	cmp	r3, #0
 8007708:	d1e3      	bne.n	80076d2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2220      	movs	r2, #32
 800770e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2200      	movs	r2, #0
 8007716:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	330c      	adds	r3, #12
 800771e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007720:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007722:	e853 3f00 	ldrex	r3, [r3]
 8007726:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007728:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800772a:	f023 0310 	bic.w	r3, r3, #16
 800772e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	330c      	adds	r3, #12
 8007738:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800773c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800773e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007740:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007742:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007744:	e841 2300 	strex	r3, r2, [r1]
 8007748:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800774a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800774c:	2b00      	cmp	r3, #0
 800774e:	d1e3      	bne.n	8007718 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007754:	4618      	mov	r0, r3
 8007756:	f7fc fafd 	bl	8003d54 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007762:	b29b      	uxth	r3, r3
 8007764:	1ad3      	subs	r3, r2, r3
 8007766:	b29b      	uxth	r3, r3
 8007768:	4619      	mov	r1, r3
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f000 f8b6 	bl	80078dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007770:	e099      	b.n	80078a6 <HAL_UART_IRQHandler+0x50e>
 8007772:	bf00      	nop
 8007774:	08007b13 	.word	0x08007b13
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007780:	b29b      	uxth	r3, r3
 8007782:	1ad3      	subs	r3, r2, r3
 8007784:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800778c:	b29b      	uxth	r3, r3
 800778e:	2b00      	cmp	r3, #0
 8007790:	f000 808b 	beq.w	80078aa <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007794:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007798:	2b00      	cmp	r3, #0
 800779a:	f000 8086 	beq.w	80078aa <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	330c      	adds	r3, #12
 80077a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077a8:	e853 3f00 	ldrex	r3, [r3]
 80077ac:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80077ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80077b4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	330c      	adds	r3, #12
 80077be:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80077c2:	647a      	str	r2, [r7, #68]	@ 0x44
 80077c4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077c6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80077c8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80077ca:	e841 2300 	strex	r3, r2, [r1]
 80077ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80077d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d1e3      	bne.n	800779e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	3314      	adds	r3, #20
 80077dc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077e0:	e853 3f00 	ldrex	r3, [r3]
 80077e4:	623b      	str	r3, [r7, #32]
   return(result);
 80077e6:	6a3b      	ldr	r3, [r7, #32]
 80077e8:	f023 0301 	bic.w	r3, r3, #1
 80077ec:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	3314      	adds	r3, #20
 80077f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80077fa:	633a      	str	r2, [r7, #48]	@ 0x30
 80077fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007800:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007802:	e841 2300 	strex	r3, r2, [r1]
 8007806:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800780a:	2b00      	cmp	r3, #0
 800780c:	d1e3      	bne.n	80077d6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2220      	movs	r2, #32
 8007812:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2200      	movs	r2, #0
 800781a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	330c      	adds	r3, #12
 8007822:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	e853 3f00 	ldrex	r3, [r3]
 800782a:	60fb      	str	r3, [r7, #12]
   return(result);
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	f023 0310 	bic.w	r3, r3, #16
 8007832:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	330c      	adds	r3, #12
 800783c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007840:	61fa      	str	r2, [r7, #28]
 8007842:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007844:	69b9      	ldr	r1, [r7, #24]
 8007846:	69fa      	ldr	r2, [r7, #28]
 8007848:	e841 2300 	strex	r3, r2, [r1]
 800784c:	617b      	str	r3, [r7, #20]
   return(result);
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d1e3      	bne.n	800781c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007854:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007858:	4619      	mov	r1, r3
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f000 f83e 	bl	80078dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007860:	e023      	b.n	80078aa <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007862:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007866:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800786a:	2b00      	cmp	r3, #0
 800786c:	d009      	beq.n	8007882 <HAL_UART_IRQHandler+0x4ea>
 800786e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007872:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007876:	2b00      	cmp	r3, #0
 8007878:	d003      	beq.n	8007882 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f000 f95d 	bl	8007b3a <UART_Transmit_IT>
    return;
 8007880:	e014      	b.n	80078ac <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007882:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007886:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800788a:	2b00      	cmp	r3, #0
 800788c:	d00e      	beq.n	80078ac <HAL_UART_IRQHandler+0x514>
 800788e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007892:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007896:	2b00      	cmp	r3, #0
 8007898:	d008      	beq.n	80078ac <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f000 f99d 	bl	8007bda <UART_EndTransmit_IT>
    return;
 80078a0:	e004      	b.n	80078ac <HAL_UART_IRQHandler+0x514>
    return;
 80078a2:	bf00      	nop
 80078a4:	e002      	b.n	80078ac <HAL_UART_IRQHandler+0x514>
      return;
 80078a6:	bf00      	nop
 80078a8:	e000      	b.n	80078ac <HAL_UART_IRQHandler+0x514>
      return;
 80078aa:	bf00      	nop
  }
}
 80078ac:	37e8      	adds	r7, #232	@ 0xe8
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}
 80078b2:	bf00      	nop

080078b4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80078b4:	b480      	push	{r7}
 80078b6:	b083      	sub	sp, #12
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80078bc:	bf00      	nop
 80078be:	370c      	adds	r7, #12
 80078c0:	46bd      	mov	sp, r7
 80078c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c6:	4770      	bx	lr

080078c8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80078c8:	b480      	push	{r7}
 80078ca:	b083      	sub	sp, #12
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80078d0:	bf00      	nop
 80078d2:	370c      	adds	r7, #12
 80078d4:	46bd      	mov	sp, r7
 80078d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078da:	4770      	bx	lr

080078dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80078dc:	b480      	push	{r7}
 80078de:	b083      	sub	sp, #12
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
 80078e4:	460b      	mov	r3, r1
 80078e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80078e8:	bf00      	nop
 80078ea:	370c      	adds	r7, #12
 80078ec:	46bd      	mov	sp, r7
 80078ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f2:	4770      	bx	lr

080078f4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b090      	sub	sp, #64	@ 0x40
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	60f8      	str	r0, [r7, #12]
 80078fc:	60b9      	str	r1, [r7, #8]
 80078fe:	603b      	str	r3, [r7, #0]
 8007900:	4613      	mov	r3, r2
 8007902:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007904:	e050      	b.n	80079a8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007906:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800790c:	d04c      	beq.n	80079a8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800790e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007910:	2b00      	cmp	r3, #0
 8007912:	d007      	beq.n	8007924 <UART_WaitOnFlagUntilTimeout+0x30>
 8007914:	f7fb f934 	bl	8002b80 <HAL_GetTick>
 8007918:	4602      	mov	r2, r0
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	1ad3      	subs	r3, r2, r3
 800791e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007920:	429a      	cmp	r2, r3
 8007922:	d241      	bcs.n	80079a8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	330c      	adds	r3, #12
 800792a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800792c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800792e:	e853 3f00 	ldrex	r3, [r3]
 8007932:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007936:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800793a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	330c      	adds	r3, #12
 8007942:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007944:	637a      	str	r2, [r7, #52]	@ 0x34
 8007946:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007948:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800794a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800794c:	e841 2300 	strex	r3, r2, [r1]
 8007950:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007952:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007954:	2b00      	cmp	r3, #0
 8007956:	d1e5      	bne.n	8007924 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	3314      	adds	r3, #20
 800795e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	e853 3f00 	ldrex	r3, [r3]
 8007966:	613b      	str	r3, [r7, #16]
   return(result);
 8007968:	693b      	ldr	r3, [r7, #16]
 800796a:	f023 0301 	bic.w	r3, r3, #1
 800796e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	3314      	adds	r3, #20
 8007976:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007978:	623a      	str	r2, [r7, #32]
 800797a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800797c:	69f9      	ldr	r1, [r7, #28]
 800797e:	6a3a      	ldr	r2, [r7, #32]
 8007980:	e841 2300 	strex	r3, r2, [r1]
 8007984:	61bb      	str	r3, [r7, #24]
   return(result);
 8007986:	69bb      	ldr	r3, [r7, #24]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d1e5      	bne.n	8007958 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	2220      	movs	r2, #32
 8007990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	2220      	movs	r2, #32
 8007998:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	2200      	movs	r2, #0
 80079a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 80079a4:	2303      	movs	r3, #3
 80079a6:	e00f      	b.n	80079c8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	681a      	ldr	r2, [r3, #0]
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	4013      	ands	r3, r2
 80079b2:	68ba      	ldr	r2, [r7, #8]
 80079b4:	429a      	cmp	r2, r3
 80079b6:	bf0c      	ite	eq
 80079b8:	2301      	moveq	r3, #1
 80079ba:	2300      	movne	r3, #0
 80079bc:	b2db      	uxtb	r3, r3
 80079be:	461a      	mov	r2, r3
 80079c0:	79fb      	ldrb	r3, [r7, #7]
 80079c2:	429a      	cmp	r2, r3
 80079c4:	d09f      	beq.n	8007906 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80079c6:	2300      	movs	r3, #0
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	3740      	adds	r7, #64	@ 0x40
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}

080079d0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80079d0:	b480      	push	{r7}
 80079d2:	b085      	sub	sp, #20
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	60f8      	str	r0, [r7, #12]
 80079d8:	60b9      	str	r1, [r7, #8]
 80079da:	4613      	mov	r3, r2
 80079dc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	68ba      	ldr	r2, [r7, #8]
 80079e2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	88fa      	ldrh	r2, [r7, #6]
 80079e8:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	88fa      	ldrh	r2, [r7, #6]
 80079ee:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	2200      	movs	r2, #0
 80079f4:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	2222      	movs	r2, #34	@ 0x22
 80079fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2200      	movs	r2, #0
 8007a02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	691b      	ldr	r3, [r3, #16]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d007      	beq.n	8007a1e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	68da      	ldr	r2, [r3, #12]
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007a1c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	695a      	ldr	r2, [r3, #20]
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f042 0201 	orr.w	r2, r2, #1
 8007a2c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	68da      	ldr	r2, [r3, #12]
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f042 0220 	orr.w	r2, r2, #32
 8007a3c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007a3e:	2300      	movs	r3, #0
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	3714      	adds	r7, #20
 8007a44:	46bd      	mov	sp, r7
 8007a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4a:	4770      	bx	lr

08007a4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b095      	sub	sp, #84	@ 0x54
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	330c      	adds	r3, #12
 8007a5a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a5e:	e853 3f00 	ldrex	r3, [r3]
 8007a62:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a66:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007a6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	330c      	adds	r3, #12
 8007a72:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007a74:	643a      	str	r2, [r7, #64]	@ 0x40
 8007a76:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a78:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007a7a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007a7c:	e841 2300 	strex	r3, r2, [r1]
 8007a80:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007a82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d1e5      	bne.n	8007a54 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	3314      	adds	r3, #20
 8007a8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a90:	6a3b      	ldr	r3, [r7, #32]
 8007a92:	e853 3f00 	ldrex	r3, [r3]
 8007a96:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a98:	69fb      	ldr	r3, [r7, #28]
 8007a9a:	f023 0301 	bic.w	r3, r3, #1
 8007a9e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	3314      	adds	r3, #20
 8007aa6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007aa8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007aaa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007aae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ab0:	e841 2300 	strex	r3, r2, [r1]
 8007ab4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d1e5      	bne.n	8007a88 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ac0:	2b01      	cmp	r3, #1
 8007ac2:	d119      	bne.n	8007af8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	330c      	adds	r3, #12
 8007aca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	e853 3f00 	ldrex	r3, [r3]
 8007ad2:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	f023 0310 	bic.w	r3, r3, #16
 8007ada:	647b      	str	r3, [r7, #68]	@ 0x44
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	330c      	adds	r3, #12
 8007ae2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007ae4:	61ba      	str	r2, [r7, #24]
 8007ae6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ae8:	6979      	ldr	r1, [r7, #20]
 8007aea:	69ba      	ldr	r2, [r7, #24]
 8007aec:	e841 2300 	strex	r3, r2, [r1]
 8007af0:	613b      	str	r3, [r7, #16]
   return(result);
 8007af2:	693b      	ldr	r3, [r7, #16]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d1e5      	bne.n	8007ac4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2220      	movs	r2, #32
 8007afc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2200      	movs	r2, #0
 8007b04:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007b06:	bf00      	nop
 8007b08:	3754      	adds	r7, #84	@ 0x54
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b10:	4770      	bx	lr

08007b12 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007b12:	b580      	push	{r7, lr}
 8007b14:	b084      	sub	sp, #16
 8007b16:	af00      	add	r7, sp, #0
 8007b18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b1e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	2200      	movs	r2, #0
 8007b24:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007b2c:	68f8      	ldr	r0, [r7, #12]
 8007b2e:	f7ff fecb 	bl	80078c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b32:	bf00      	nop
 8007b34:	3710      	adds	r7, #16
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}

08007b3a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007b3a:	b480      	push	{r7}
 8007b3c:	b085      	sub	sp, #20
 8007b3e:	af00      	add	r7, sp, #0
 8007b40:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b48:	b2db      	uxtb	r3, r3
 8007b4a:	2b21      	cmp	r3, #33	@ 0x21
 8007b4c:	d13e      	bne.n	8007bcc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	689b      	ldr	r3, [r3, #8]
 8007b52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b56:	d114      	bne.n	8007b82 <UART_Transmit_IT+0x48>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	691b      	ldr	r3, [r3, #16]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d110      	bne.n	8007b82 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6a1b      	ldr	r3, [r3, #32]
 8007b64:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	881b      	ldrh	r3, [r3, #0]
 8007b6a:	461a      	mov	r2, r3
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b74:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6a1b      	ldr	r3, [r3, #32]
 8007b7a:	1c9a      	adds	r2, r3, #2
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	621a      	str	r2, [r3, #32]
 8007b80:	e008      	b.n	8007b94 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6a1b      	ldr	r3, [r3, #32]
 8007b86:	1c59      	adds	r1, r3, #1
 8007b88:	687a      	ldr	r2, [r7, #4]
 8007b8a:	6211      	str	r1, [r2, #32]
 8007b8c:	781a      	ldrb	r2, [r3, #0]
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007b98:	b29b      	uxth	r3, r3
 8007b9a:	3b01      	subs	r3, #1
 8007b9c:	b29b      	uxth	r3, r3
 8007b9e:	687a      	ldr	r2, [r7, #4]
 8007ba0:	4619      	mov	r1, r3
 8007ba2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d10f      	bne.n	8007bc8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	68da      	ldr	r2, [r3, #12]
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007bb6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	68da      	ldr	r2, [r3, #12]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007bc6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007bc8:	2300      	movs	r3, #0
 8007bca:	e000      	b.n	8007bce <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007bcc:	2302      	movs	r3, #2
  }
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3714      	adds	r7, #20
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd8:	4770      	bx	lr

08007bda <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007bda:	b580      	push	{r7, lr}
 8007bdc:	b082      	sub	sp, #8
 8007bde:	af00      	add	r7, sp, #0
 8007be0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	68da      	ldr	r2, [r3, #12]
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007bf0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2220      	movs	r2, #32
 8007bf6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f7ff fe5a 	bl	80078b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007c00:	2300      	movs	r3, #0
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3708      	adds	r7, #8
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}

08007c0a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007c0a:	b580      	push	{r7, lr}
 8007c0c:	b08c      	sub	sp, #48	@ 0x30
 8007c0e:	af00      	add	r7, sp, #0
 8007c10:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007c18:	b2db      	uxtb	r3, r3
 8007c1a:	2b22      	cmp	r3, #34	@ 0x22
 8007c1c:	f040 80ab 	bne.w	8007d76 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	689b      	ldr	r3, [r3, #8]
 8007c24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c28:	d117      	bne.n	8007c5a <UART_Receive_IT+0x50>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	691b      	ldr	r3, [r3, #16]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d113      	bne.n	8007c5a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007c32:	2300      	movs	r3, #0
 8007c34:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c3a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	685b      	ldr	r3, [r3, #4]
 8007c42:	b29b      	uxth	r3, r3
 8007c44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c48:	b29a      	uxth	r2, r3
 8007c4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c4c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c52:	1c9a      	adds	r2, r3, #2
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	629a      	str	r2, [r3, #40]	@ 0x28
 8007c58:	e026      	b.n	8007ca8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007c60:	2300      	movs	r3, #0
 8007c62:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	689b      	ldr	r3, [r3, #8]
 8007c68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c6c:	d007      	beq.n	8007c7e <UART_Receive_IT+0x74>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	689b      	ldr	r3, [r3, #8]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d10a      	bne.n	8007c8c <UART_Receive_IT+0x82>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	691b      	ldr	r3, [r3, #16]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d106      	bne.n	8007c8c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	b2da      	uxtb	r2, r3
 8007c86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c88:	701a      	strb	r2, [r3, #0]
 8007c8a:	e008      	b.n	8007c9e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	685b      	ldr	r3, [r3, #4]
 8007c92:	b2db      	uxtb	r3, r3
 8007c94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c98:	b2da      	uxtb	r2, r3
 8007c9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c9c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ca2:	1c5a      	adds	r2, r3, #1
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007cac:	b29b      	uxth	r3, r3
 8007cae:	3b01      	subs	r3, #1
 8007cb0:	b29b      	uxth	r3, r3
 8007cb2:	687a      	ldr	r2, [r7, #4]
 8007cb4:	4619      	mov	r1, r3
 8007cb6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d15a      	bne.n	8007d72 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	68da      	ldr	r2, [r3, #12]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f022 0220 	bic.w	r2, r2, #32
 8007cca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	68da      	ldr	r2, [r3, #12]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007cda:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	695a      	ldr	r2, [r3, #20]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f022 0201 	bic.w	r2, r2, #1
 8007cea:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2220      	movs	r2, #32
 8007cf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cf8:	2b01      	cmp	r3, #1
 8007cfa:	d135      	bne.n	8007d68 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	330c      	adds	r3, #12
 8007d08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	e853 3f00 	ldrex	r3, [r3]
 8007d10:	613b      	str	r3, [r7, #16]
   return(result);
 8007d12:	693b      	ldr	r3, [r7, #16]
 8007d14:	f023 0310 	bic.w	r3, r3, #16
 8007d18:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	330c      	adds	r3, #12
 8007d20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d22:	623a      	str	r2, [r7, #32]
 8007d24:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d26:	69f9      	ldr	r1, [r7, #28]
 8007d28:	6a3a      	ldr	r2, [r7, #32]
 8007d2a:	e841 2300 	strex	r3, r2, [r1]
 8007d2e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007d30:	69bb      	ldr	r3, [r7, #24]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d1e5      	bne.n	8007d02 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f003 0310 	and.w	r3, r3, #16
 8007d40:	2b10      	cmp	r3, #16
 8007d42:	d10a      	bne.n	8007d5a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007d44:	2300      	movs	r3, #0
 8007d46:	60fb      	str	r3, [r7, #12]
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	60fb      	str	r3, [r7, #12]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	685b      	ldr	r3, [r3, #4]
 8007d56:	60fb      	str	r3, [r7, #12]
 8007d58:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007d5e:	4619      	mov	r1, r3
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f7ff fdbb 	bl	80078dc <HAL_UARTEx_RxEventCallback>
 8007d66:	e002      	b.n	8007d6e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f002 fd79 	bl	800a860 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	e002      	b.n	8007d78 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007d72:	2300      	movs	r3, #0
 8007d74:	e000      	b.n	8007d78 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007d76:	2302      	movs	r3, #2
  }
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	3730      	adds	r7, #48	@ 0x30
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}

08007d80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d84:	b0c0      	sub	sp, #256	@ 0x100
 8007d86:	af00      	add	r7, sp, #0
 8007d88:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	691b      	ldr	r3, [r3, #16]
 8007d94:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d9c:	68d9      	ldr	r1, [r3, #12]
 8007d9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007da2:	681a      	ldr	r2, [r3, #0]
 8007da4:	ea40 0301 	orr.w	r3, r0, r1
 8007da8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007dae:	689a      	ldr	r2, [r3, #8]
 8007db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007db4:	691b      	ldr	r3, [r3, #16]
 8007db6:	431a      	orrs	r2, r3
 8007db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007dbc:	695b      	ldr	r3, [r3, #20]
 8007dbe:	431a      	orrs	r2, r3
 8007dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007dc4:	69db      	ldr	r3, [r3, #28]
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	68db      	ldr	r3, [r3, #12]
 8007dd4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007dd8:	f021 010c 	bic.w	r1, r1, #12
 8007ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007de0:	681a      	ldr	r2, [r3, #0]
 8007de2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007de6:	430b      	orrs	r3, r1
 8007de8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007dea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	695b      	ldr	r3, [r3, #20]
 8007df2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007df6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007dfa:	6999      	ldr	r1, [r3, #24]
 8007dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e00:	681a      	ldr	r2, [r3, #0]
 8007e02:	ea40 0301 	orr.w	r3, r0, r1
 8007e06:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e0c:	681a      	ldr	r2, [r3, #0]
 8007e0e:	4b8f      	ldr	r3, [pc, #572]	@ (800804c <UART_SetConfig+0x2cc>)
 8007e10:	429a      	cmp	r2, r3
 8007e12:	d005      	beq.n	8007e20 <UART_SetConfig+0xa0>
 8007e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e18:	681a      	ldr	r2, [r3, #0]
 8007e1a:	4b8d      	ldr	r3, [pc, #564]	@ (8008050 <UART_SetConfig+0x2d0>)
 8007e1c:	429a      	cmp	r2, r3
 8007e1e:	d104      	bne.n	8007e2a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007e20:	f7fd fa2c 	bl	800527c <HAL_RCC_GetPCLK2Freq>
 8007e24:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007e28:	e003      	b.n	8007e32 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007e2a:	f7fd fa13 	bl	8005254 <HAL_RCC_GetPCLK1Freq>
 8007e2e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007e32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e36:	69db      	ldr	r3, [r3, #28]
 8007e38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007e3c:	f040 810c 	bne.w	8008058 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007e40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007e44:	2200      	movs	r2, #0
 8007e46:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007e4a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007e4e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007e52:	4622      	mov	r2, r4
 8007e54:	462b      	mov	r3, r5
 8007e56:	1891      	adds	r1, r2, r2
 8007e58:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007e5a:	415b      	adcs	r3, r3
 8007e5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007e5e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007e62:	4621      	mov	r1, r4
 8007e64:	eb12 0801 	adds.w	r8, r2, r1
 8007e68:	4629      	mov	r1, r5
 8007e6a:	eb43 0901 	adc.w	r9, r3, r1
 8007e6e:	f04f 0200 	mov.w	r2, #0
 8007e72:	f04f 0300 	mov.w	r3, #0
 8007e76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007e7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007e7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007e82:	4690      	mov	r8, r2
 8007e84:	4699      	mov	r9, r3
 8007e86:	4623      	mov	r3, r4
 8007e88:	eb18 0303 	adds.w	r3, r8, r3
 8007e8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007e90:	462b      	mov	r3, r5
 8007e92:	eb49 0303 	adc.w	r3, r9, r3
 8007e96:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007e9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e9e:	685b      	ldr	r3, [r3, #4]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007ea6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007eaa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007eae:	460b      	mov	r3, r1
 8007eb0:	18db      	adds	r3, r3, r3
 8007eb2:	653b      	str	r3, [r7, #80]	@ 0x50
 8007eb4:	4613      	mov	r3, r2
 8007eb6:	eb42 0303 	adc.w	r3, r2, r3
 8007eba:	657b      	str	r3, [r7, #84]	@ 0x54
 8007ebc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007ec0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007ec4:	f7f8 fe4e 	bl	8000b64 <__aeabi_uldivmod>
 8007ec8:	4602      	mov	r2, r0
 8007eca:	460b      	mov	r3, r1
 8007ecc:	4b61      	ldr	r3, [pc, #388]	@ (8008054 <UART_SetConfig+0x2d4>)
 8007ece:	fba3 2302 	umull	r2, r3, r3, r2
 8007ed2:	095b      	lsrs	r3, r3, #5
 8007ed4:	011c      	lsls	r4, r3, #4
 8007ed6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007eda:	2200      	movs	r2, #0
 8007edc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007ee0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007ee4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007ee8:	4642      	mov	r2, r8
 8007eea:	464b      	mov	r3, r9
 8007eec:	1891      	adds	r1, r2, r2
 8007eee:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007ef0:	415b      	adcs	r3, r3
 8007ef2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ef4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007ef8:	4641      	mov	r1, r8
 8007efa:	eb12 0a01 	adds.w	sl, r2, r1
 8007efe:	4649      	mov	r1, r9
 8007f00:	eb43 0b01 	adc.w	fp, r3, r1
 8007f04:	f04f 0200 	mov.w	r2, #0
 8007f08:	f04f 0300 	mov.w	r3, #0
 8007f0c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007f10:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007f14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007f18:	4692      	mov	sl, r2
 8007f1a:	469b      	mov	fp, r3
 8007f1c:	4643      	mov	r3, r8
 8007f1e:	eb1a 0303 	adds.w	r3, sl, r3
 8007f22:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007f26:	464b      	mov	r3, r9
 8007f28:	eb4b 0303 	adc.w	r3, fp, r3
 8007f2c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f34:	685b      	ldr	r3, [r3, #4]
 8007f36:	2200      	movs	r2, #0
 8007f38:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007f3c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007f40:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007f44:	460b      	mov	r3, r1
 8007f46:	18db      	adds	r3, r3, r3
 8007f48:	643b      	str	r3, [r7, #64]	@ 0x40
 8007f4a:	4613      	mov	r3, r2
 8007f4c:	eb42 0303 	adc.w	r3, r2, r3
 8007f50:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f52:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007f56:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007f5a:	f7f8 fe03 	bl	8000b64 <__aeabi_uldivmod>
 8007f5e:	4602      	mov	r2, r0
 8007f60:	460b      	mov	r3, r1
 8007f62:	4611      	mov	r1, r2
 8007f64:	4b3b      	ldr	r3, [pc, #236]	@ (8008054 <UART_SetConfig+0x2d4>)
 8007f66:	fba3 2301 	umull	r2, r3, r3, r1
 8007f6a:	095b      	lsrs	r3, r3, #5
 8007f6c:	2264      	movs	r2, #100	@ 0x64
 8007f6e:	fb02 f303 	mul.w	r3, r2, r3
 8007f72:	1acb      	subs	r3, r1, r3
 8007f74:	00db      	lsls	r3, r3, #3
 8007f76:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007f7a:	4b36      	ldr	r3, [pc, #216]	@ (8008054 <UART_SetConfig+0x2d4>)
 8007f7c:	fba3 2302 	umull	r2, r3, r3, r2
 8007f80:	095b      	lsrs	r3, r3, #5
 8007f82:	005b      	lsls	r3, r3, #1
 8007f84:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007f88:	441c      	add	r4, r3
 8007f8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007f8e:	2200      	movs	r2, #0
 8007f90:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007f94:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007f98:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007f9c:	4642      	mov	r2, r8
 8007f9e:	464b      	mov	r3, r9
 8007fa0:	1891      	adds	r1, r2, r2
 8007fa2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007fa4:	415b      	adcs	r3, r3
 8007fa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007fa8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007fac:	4641      	mov	r1, r8
 8007fae:	1851      	adds	r1, r2, r1
 8007fb0:	6339      	str	r1, [r7, #48]	@ 0x30
 8007fb2:	4649      	mov	r1, r9
 8007fb4:	414b      	adcs	r3, r1
 8007fb6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007fb8:	f04f 0200 	mov.w	r2, #0
 8007fbc:	f04f 0300 	mov.w	r3, #0
 8007fc0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007fc4:	4659      	mov	r1, fp
 8007fc6:	00cb      	lsls	r3, r1, #3
 8007fc8:	4651      	mov	r1, sl
 8007fca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007fce:	4651      	mov	r1, sl
 8007fd0:	00ca      	lsls	r2, r1, #3
 8007fd2:	4610      	mov	r0, r2
 8007fd4:	4619      	mov	r1, r3
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	4642      	mov	r2, r8
 8007fda:	189b      	adds	r3, r3, r2
 8007fdc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007fe0:	464b      	mov	r3, r9
 8007fe2:	460a      	mov	r2, r1
 8007fe4:	eb42 0303 	adc.w	r3, r2, r3
 8007fe8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ff0:	685b      	ldr	r3, [r3, #4]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007ff8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007ffc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008000:	460b      	mov	r3, r1
 8008002:	18db      	adds	r3, r3, r3
 8008004:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008006:	4613      	mov	r3, r2
 8008008:	eb42 0303 	adc.w	r3, r2, r3
 800800c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800800e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008012:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008016:	f7f8 fda5 	bl	8000b64 <__aeabi_uldivmod>
 800801a:	4602      	mov	r2, r0
 800801c:	460b      	mov	r3, r1
 800801e:	4b0d      	ldr	r3, [pc, #52]	@ (8008054 <UART_SetConfig+0x2d4>)
 8008020:	fba3 1302 	umull	r1, r3, r3, r2
 8008024:	095b      	lsrs	r3, r3, #5
 8008026:	2164      	movs	r1, #100	@ 0x64
 8008028:	fb01 f303 	mul.w	r3, r1, r3
 800802c:	1ad3      	subs	r3, r2, r3
 800802e:	00db      	lsls	r3, r3, #3
 8008030:	3332      	adds	r3, #50	@ 0x32
 8008032:	4a08      	ldr	r2, [pc, #32]	@ (8008054 <UART_SetConfig+0x2d4>)
 8008034:	fba2 2303 	umull	r2, r3, r2, r3
 8008038:	095b      	lsrs	r3, r3, #5
 800803a:	f003 0207 	and.w	r2, r3, #7
 800803e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4422      	add	r2, r4
 8008046:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008048:	e106      	b.n	8008258 <UART_SetConfig+0x4d8>
 800804a:	bf00      	nop
 800804c:	40011000 	.word	0x40011000
 8008050:	40011400 	.word	0x40011400
 8008054:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008058:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800805c:	2200      	movs	r2, #0
 800805e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008062:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008066:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800806a:	4642      	mov	r2, r8
 800806c:	464b      	mov	r3, r9
 800806e:	1891      	adds	r1, r2, r2
 8008070:	6239      	str	r1, [r7, #32]
 8008072:	415b      	adcs	r3, r3
 8008074:	627b      	str	r3, [r7, #36]	@ 0x24
 8008076:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800807a:	4641      	mov	r1, r8
 800807c:	1854      	adds	r4, r2, r1
 800807e:	4649      	mov	r1, r9
 8008080:	eb43 0501 	adc.w	r5, r3, r1
 8008084:	f04f 0200 	mov.w	r2, #0
 8008088:	f04f 0300 	mov.w	r3, #0
 800808c:	00eb      	lsls	r3, r5, #3
 800808e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008092:	00e2      	lsls	r2, r4, #3
 8008094:	4614      	mov	r4, r2
 8008096:	461d      	mov	r5, r3
 8008098:	4643      	mov	r3, r8
 800809a:	18e3      	adds	r3, r4, r3
 800809c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80080a0:	464b      	mov	r3, r9
 80080a2:	eb45 0303 	adc.w	r3, r5, r3
 80080a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80080aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80080ae:	685b      	ldr	r3, [r3, #4]
 80080b0:	2200      	movs	r2, #0
 80080b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80080b6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80080ba:	f04f 0200 	mov.w	r2, #0
 80080be:	f04f 0300 	mov.w	r3, #0
 80080c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80080c6:	4629      	mov	r1, r5
 80080c8:	008b      	lsls	r3, r1, #2
 80080ca:	4621      	mov	r1, r4
 80080cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80080d0:	4621      	mov	r1, r4
 80080d2:	008a      	lsls	r2, r1, #2
 80080d4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80080d8:	f7f8 fd44 	bl	8000b64 <__aeabi_uldivmod>
 80080dc:	4602      	mov	r2, r0
 80080de:	460b      	mov	r3, r1
 80080e0:	4b60      	ldr	r3, [pc, #384]	@ (8008264 <UART_SetConfig+0x4e4>)
 80080e2:	fba3 2302 	umull	r2, r3, r3, r2
 80080e6:	095b      	lsrs	r3, r3, #5
 80080e8:	011c      	lsls	r4, r3, #4
 80080ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80080ee:	2200      	movs	r2, #0
 80080f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80080f4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80080f8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80080fc:	4642      	mov	r2, r8
 80080fe:	464b      	mov	r3, r9
 8008100:	1891      	adds	r1, r2, r2
 8008102:	61b9      	str	r1, [r7, #24]
 8008104:	415b      	adcs	r3, r3
 8008106:	61fb      	str	r3, [r7, #28]
 8008108:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800810c:	4641      	mov	r1, r8
 800810e:	1851      	adds	r1, r2, r1
 8008110:	6139      	str	r1, [r7, #16]
 8008112:	4649      	mov	r1, r9
 8008114:	414b      	adcs	r3, r1
 8008116:	617b      	str	r3, [r7, #20]
 8008118:	f04f 0200 	mov.w	r2, #0
 800811c:	f04f 0300 	mov.w	r3, #0
 8008120:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008124:	4659      	mov	r1, fp
 8008126:	00cb      	lsls	r3, r1, #3
 8008128:	4651      	mov	r1, sl
 800812a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800812e:	4651      	mov	r1, sl
 8008130:	00ca      	lsls	r2, r1, #3
 8008132:	4610      	mov	r0, r2
 8008134:	4619      	mov	r1, r3
 8008136:	4603      	mov	r3, r0
 8008138:	4642      	mov	r2, r8
 800813a:	189b      	adds	r3, r3, r2
 800813c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008140:	464b      	mov	r3, r9
 8008142:	460a      	mov	r2, r1
 8008144:	eb42 0303 	adc.w	r3, r2, r3
 8008148:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800814c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008150:	685b      	ldr	r3, [r3, #4]
 8008152:	2200      	movs	r2, #0
 8008154:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008156:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008158:	f04f 0200 	mov.w	r2, #0
 800815c:	f04f 0300 	mov.w	r3, #0
 8008160:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008164:	4649      	mov	r1, r9
 8008166:	008b      	lsls	r3, r1, #2
 8008168:	4641      	mov	r1, r8
 800816a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800816e:	4641      	mov	r1, r8
 8008170:	008a      	lsls	r2, r1, #2
 8008172:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008176:	f7f8 fcf5 	bl	8000b64 <__aeabi_uldivmod>
 800817a:	4602      	mov	r2, r0
 800817c:	460b      	mov	r3, r1
 800817e:	4611      	mov	r1, r2
 8008180:	4b38      	ldr	r3, [pc, #224]	@ (8008264 <UART_SetConfig+0x4e4>)
 8008182:	fba3 2301 	umull	r2, r3, r3, r1
 8008186:	095b      	lsrs	r3, r3, #5
 8008188:	2264      	movs	r2, #100	@ 0x64
 800818a:	fb02 f303 	mul.w	r3, r2, r3
 800818e:	1acb      	subs	r3, r1, r3
 8008190:	011b      	lsls	r3, r3, #4
 8008192:	3332      	adds	r3, #50	@ 0x32
 8008194:	4a33      	ldr	r2, [pc, #204]	@ (8008264 <UART_SetConfig+0x4e4>)
 8008196:	fba2 2303 	umull	r2, r3, r2, r3
 800819a:	095b      	lsrs	r3, r3, #5
 800819c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80081a0:	441c      	add	r4, r3
 80081a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80081a6:	2200      	movs	r2, #0
 80081a8:	673b      	str	r3, [r7, #112]	@ 0x70
 80081aa:	677a      	str	r2, [r7, #116]	@ 0x74
 80081ac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80081b0:	4642      	mov	r2, r8
 80081b2:	464b      	mov	r3, r9
 80081b4:	1891      	adds	r1, r2, r2
 80081b6:	60b9      	str	r1, [r7, #8]
 80081b8:	415b      	adcs	r3, r3
 80081ba:	60fb      	str	r3, [r7, #12]
 80081bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80081c0:	4641      	mov	r1, r8
 80081c2:	1851      	adds	r1, r2, r1
 80081c4:	6039      	str	r1, [r7, #0]
 80081c6:	4649      	mov	r1, r9
 80081c8:	414b      	adcs	r3, r1
 80081ca:	607b      	str	r3, [r7, #4]
 80081cc:	f04f 0200 	mov.w	r2, #0
 80081d0:	f04f 0300 	mov.w	r3, #0
 80081d4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80081d8:	4659      	mov	r1, fp
 80081da:	00cb      	lsls	r3, r1, #3
 80081dc:	4651      	mov	r1, sl
 80081de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80081e2:	4651      	mov	r1, sl
 80081e4:	00ca      	lsls	r2, r1, #3
 80081e6:	4610      	mov	r0, r2
 80081e8:	4619      	mov	r1, r3
 80081ea:	4603      	mov	r3, r0
 80081ec:	4642      	mov	r2, r8
 80081ee:	189b      	adds	r3, r3, r2
 80081f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80081f2:	464b      	mov	r3, r9
 80081f4:	460a      	mov	r2, r1
 80081f6:	eb42 0303 	adc.w	r3, r2, r3
 80081fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80081fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008200:	685b      	ldr	r3, [r3, #4]
 8008202:	2200      	movs	r2, #0
 8008204:	663b      	str	r3, [r7, #96]	@ 0x60
 8008206:	667a      	str	r2, [r7, #100]	@ 0x64
 8008208:	f04f 0200 	mov.w	r2, #0
 800820c:	f04f 0300 	mov.w	r3, #0
 8008210:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008214:	4649      	mov	r1, r9
 8008216:	008b      	lsls	r3, r1, #2
 8008218:	4641      	mov	r1, r8
 800821a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800821e:	4641      	mov	r1, r8
 8008220:	008a      	lsls	r2, r1, #2
 8008222:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008226:	f7f8 fc9d 	bl	8000b64 <__aeabi_uldivmod>
 800822a:	4602      	mov	r2, r0
 800822c:	460b      	mov	r3, r1
 800822e:	4b0d      	ldr	r3, [pc, #52]	@ (8008264 <UART_SetConfig+0x4e4>)
 8008230:	fba3 1302 	umull	r1, r3, r3, r2
 8008234:	095b      	lsrs	r3, r3, #5
 8008236:	2164      	movs	r1, #100	@ 0x64
 8008238:	fb01 f303 	mul.w	r3, r1, r3
 800823c:	1ad3      	subs	r3, r2, r3
 800823e:	011b      	lsls	r3, r3, #4
 8008240:	3332      	adds	r3, #50	@ 0x32
 8008242:	4a08      	ldr	r2, [pc, #32]	@ (8008264 <UART_SetConfig+0x4e4>)
 8008244:	fba2 2303 	umull	r2, r3, r2, r3
 8008248:	095b      	lsrs	r3, r3, #5
 800824a:	f003 020f 	and.w	r2, r3, #15
 800824e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	4422      	add	r2, r4
 8008256:	609a      	str	r2, [r3, #8]
}
 8008258:	bf00      	nop
 800825a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800825e:	46bd      	mov	sp, r7
 8008260:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008264:	51eb851f 	.word	0x51eb851f

08008268 <_ZN3CCD7SI_sendEv>:
**/

#include "CCD.h"


void CCD::SI_send() {
 8008268:	b580      	push	{r7, lr}
 800826a:	b082      	sub	sp, #8
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
    if(state == 0){ //刚开中断会直接触发中断，而不是在下降沿触发
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8008276:	2b00      	cmp	r3, #0
 8008278:	d107      	bne.n	800828a <_ZN3CCD7SI_sendEv+0x22>
        state++;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8008280:	1c5a      	adds	r2, r3, #1
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
        state = 0;
        HAL_GPIO_WritePin(CCD_SI_GPIO_Port, CCD_SI_Pin, GPIO_PIN_RESET);
        //开ADC DMA
        HAL_ADC_Start_DMA(&hadc3, (uint32_t *)data, 128);
    }
}
 8008288:	e029      	b.n	80082de <_ZN3CCD7SI_sendEv+0x76>
    }else if(state == 1){
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8008290:	2b01      	cmp	r3, #1
 8008292:	d10c      	bne.n	80082ae <_ZN3CCD7SI_sendEv+0x46>
        HAL_GPIO_WritePin(CCD_SI_GPIO_Port, CCD_SI_Pin, GPIO_PIN_SET);
 8008294:	2201      	movs	r2, #1
 8008296:	2101      	movs	r1, #1
 8008298:	4813      	ldr	r0, [pc, #76]	@ (80082e8 <_ZN3CCD7SI_sendEv+0x80>)
 800829a:	f7fc f9f3 	bl	8004684 <HAL_GPIO_WritePin>
        state++;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 80082a4:	1c5a      	adds	r2, r3, #1
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
}
 80082ac:	e017      	b.n	80082de <_ZN3CCD7SI_sendEv+0x76>
        __HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC4);
 80082ae:	4b0f      	ldr	r3, [pc, #60]	@ (80082ec <_ZN3CCD7SI_sendEv+0x84>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	68da      	ldr	r2, [r3, #12]
 80082b4:	4b0d      	ldr	r3, [pc, #52]	@ (80082ec <_ZN3CCD7SI_sendEv+0x84>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f022 0210 	bic.w	r2, r2, #16
 80082bc:	60da      	str	r2, [r3, #12]
        state = 0;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2200      	movs	r2, #0
 80082c2:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
        HAL_GPIO_WritePin(CCD_SI_GPIO_Port, CCD_SI_Pin, GPIO_PIN_RESET);
 80082c6:	2200      	movs	r2, #0
 80082c8:	2101      	movs	r1, #1
 80082ca:	4807      	ldr	r0, [pc, #28]	@ (80082e8 <_ZN3CCD7SI_sendEv+0x80>)
 80082cc:	f7fc f9da 	bl	8004684 <HAL_GPIO_WritePin>
        HAL_ADC_Start_DMA(&hadc3, (uint32_t *)data, 128);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	3304      	adds	r3, #4
 80082d4:	2280      	movs	r2, #128	@ 0x80
 80082d6:	4619      	mov	r1, r3
 80082d8:	4805      	ldr	r0, [pc, #20]	@ (80082f0 <_ZN3CCD7SI_sendEv+0x88>)
 80082da:	f7fa fe55 	bl	8002f88 <HAL_ADC_Start_DMA>
}
 80082de:	bf00      	nop
 80082e0:	3708      	adds	r7, #8
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}
 80082e6:	bf00      	nop
 80082e8:	40021000 	.word	0x40021000
 80082ec:	200005fc 	.word	0x200005fc
 80082f0:	20000324 	.word	0x20000324

080082f4 <_ZN3CCD7HandlerEv>:

void CCD::Handler() {
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b082      	sub	sp, #8
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
    if(HAL_GetTick() % integrate_time == 0){
 80082fc:	f7fa fc40 	bl	8002b80 <HAL_GetTick>
 8008300:	4603      	mov	r3, r0
 8008302:	687a      	ldr	r2, [r7, #4]
 8008304:	6812      	ldr	r2, [r2, #0]
 8008306:	fbb3 f1f2 	udiv	r1, r3, r2
 800830a:	fb01 f202 	mul.w	r2, r1, r2
 800830e:	1a9b      	subs	r3, r3, r2
 8008310:	2b00      	cmp	r3, #0
 8008312:	bf0c      	ite	eq
 8008314:	2301      	moveq	r3, #1
 8008316:	2300      	movne	r3, #0
 8008318:	b2db      	uxtb	r3, r3
 800831a:	2b00      	cmp	r3, #0
 800831c:	d00f      	beq.n	800833e <_ZN3CCD7HandlerEv+0x4a>
        __HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC4);
 800831e:	4b0d      	ldr	r3, [pc, #52]	@ (8008354 <_ZN3CCD7HandlerEv+0x60>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	68da      	ldr	r2, [r3, #12]
 8008324:	4b0b      	ldr	r3, [pc, #44]	@ (8008354 <_ZN3CCD7HandlerEv+0x60>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f042 0210 	orr.w	r2, r2, #16
 800832c:	60da      	str	r2, [r3, #12]
        sample_t = 0;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2200      	movs	r2, #0
 8008332:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
        sample_complete = false;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2200      	movs	r2, #0
 800833a:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108
    }
    sample_t++;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8008344:	1c5a      	adds	r2, r3, #1
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
}
 800834c:	bf00      	nop
 800834e:	3708      	adds	r7, #8
 8008350:	46bd      	mov	sp, r7
 8008352:	bd80      	pop	{r7, pc}
 8008354:	200005fc 	.word	0x200005fc

08008358 <_ZN3CCD4initEv>:

void CCD::init() {
 8008358:	b580      	push	{r7, lr}
 800835a:	b082      	sub	sp, #8
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8008360:	210c      	movs	r1, #12
 8008362:	4803      	ldr	r0, [pc, #12]	@ (8008370 <_ZN3CCD4initEv+0x18>)
 8008364:	f7fd fe60 	bl	8006028 <HAL_TIM_PWM_Start>
}
 8008368:	bf00      	nop
 800836a:	3708      	adds	r7, #8
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}
 8008370:	200005fc 	.word	0x200005fc

08008374 <_ZN7ChassisC1EP9N20_MotorS1_P3IMUf>:
  ******************************************************************************
**/

#include "Chassis.h"

Chassis::Chassis(N20_Motor *left_motor, N20_Motor *right_motor, IMU *imu, float wheel_seperation) {
 8008374:	b480      	push	{r7}
 8008376:	b087      	sub	sp, #28
 8008378:	af00      	add	r7, sp, #0
 800837a:	6178      	str	r0, [r7, #20]
 800837c:	6139      	str	r1, [r7, #16]
 800837e:	60fa      	str	r2, [r7, #12]
 8008380:	60bb      	str	r3, [r7, #8]
 8008382:	ed87 0a01 	vstr	s0, [r7, #4]
 8008386:	697b      	ldr	r3, [r7, #20]
 8008388:	f04f 0200 	mov.w	r2, #0
 800838c:	615a      	str	r2, [r3, #20]
 800838e:	697b      	ldr	r3, [r7, #20]
 8008390:	f04f 0200 	mov.w	r2, #0
 8008394:	619a      	str	r2, [r3, #24]
 8008396:	697b      	ldr	r3, [r7, #20]
 8008398:	f04f 0200 	mov.w	r2, #0
 800839c:	61da      	str	r2, [r3, #28]
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	f04f 0200 	mov.w	r2, #0
 80083a4:	621a      	str	r2, [r3, #32]
 80083a6:	697b      	ldr	r3, [r7, #20]
 80083a8:	f04f 0200 	mov.w	r2, #0
 80083ac:	625a      	str	r2, [r3, #36]	@ 0x24
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	f04f 0200 	mov.w	r2, #0
 80083b4:	631a      	str	r2, [r3, #48]	@ 0x30
 80083b6:	697b      	ldr	r3, [r7, #20]
 80083b8:	f04f 0200 	mov.w	r2, #0
 80083bc:	635a      	str	r2, [r3, #52]	@ 0x34
 80083be:	697b      	ldr	r3, [r7, #20]
 80083c0:	f04f 0200 	mov.w	r2, #0
 80083c4:	639a      	str	r2, [r3, #56]	@ 0x38
 80083c6:	697b      	ldr	r3, [r7, #20]
 80083c8:	f04f 0200 	mov.w	r2, #0
 80083cc:	63da      	str	r2, [r3, #60]	@ 0x3c
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	4a0b      	ldr	r2, [pc, #44]	@ (8008400 <_ZN7ChassisC1EP9N20_MotorS1_P3IMUf+0x8c>)
 80083d2:	641a      	str	r2, [r3, #64]	@ 0x40
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	4a0b      	ldr	r2, [pc, #44]	@ (8008404 <_ZN7ChassisC1EP9N20_MotorS1_P3IMUf+0x90>)
 80083d8:	645a      	str	r2, [r3, #68]	@ 0x44
    this->motorL = left_motor;
 80083da:	697b      	ldr	r3, [r7, #20]
 80083dc:	693a      	ldr	r2, [r7, #16]
 80083de:	605a      	str	r2, [r3, #4]
    this->motorR = right_motor;
 80083e0:	697b      	ldr	r3, [r7, #20]
 80083e2:	68fa      	ldr	r2, [r7, #12]
 80083e4:	609a      	str	r2, [r3, #8]
    this->imu = imu;
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	68ba      	ldr	r2, [r7, #8]
 80083ea:	60da      	str	r2, [r3, #12]
    this->wheel_seperation = wheel_seperation;
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	687a      	ldr	r2, [r7, #4]
 80083f0:	611a      	str	r2, [r3, #16]
}
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	4618      	mov	r0, r3
 80083f6:	371c      	adds	r7, #28
 80083f8:	46bd      	mov	sp, r7
 80083fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fe:	4770      	bx	lr
 8008400:	3f80e526 	.word	0x3f80e526
 8008404:	3f8289ca 	.word	0x3f8289ca

08008408 <_ZN7Chassis7HandlerEv>:
    Q_bias	+= K_1 * Angle_err;	 //后验估计
    angle_dot   = Gyro - Q_bias;	 //输出值(后验估计)的微分=角速度
    return angle;
}

void Chassis::Handler() {
 8008408:	b5b0      	push	{r4, r5, r7, lr}
 800840a:	b088      	sub	sp, #32
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
    v = v * 0.9 + (motorL->v + motorR->v) / 2 * 0.1;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	695b      	ldr	r3, [r3, #20]
 8008414:	4618      	mov	r0, r3
 8008416:	f7f8 f83b 	bl	8000490 <__aeabi_f2d>
 800841a:	f20f 4384 	addw	r3, pc, #1156	@ 0x484
 800841e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008422:	f7f8 f88d 	bl	8000540 <__aeabi_dmul>
 8008426:	4602      	mov	r2, r0
 8008428:	460b      	mov	r3, r1
 800842a:	4614      	mov	r4, r2
 800842c:	461d      	mov	r5, r3
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	685b      	ldr	r3, [r3, #4]
 8008432:	ed93 7a02 	vldr	s14, [r3, #8]
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	689b      	ldr	r3, [r3, #8]
 800843a:	edd3 7a02 	vldr	s15, [r3, #8]
 800843e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008442:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8008446:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800844a:	ee16 0a90 	vmov	r0, s13
 800844e:	f7f8 f81f 	bl	8000490 <__aeabi_f2d>
 8008452:	f20f 4354 	addw	r3, pc, #1108	@ 0x454
 8008456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800845a:	f7f8 f871 	bl	8000540 <__aeabi_dmul>
 800845e:	4602      	mov	r2, r0
 8008460:	460b      	mov	r3, r1
 8008462:	4620      	mov	r0, r4
 8008464:	4629      	mov	r1, r5
 8008466:	f7f7 feb5 	bl	80001d4 <__adddf3>
 800846a:	4602      	mov	r2, r0
 800846c:	460b      	mov	r3, r1
 800846e:	4610      	mov	r0, r2
 8008470:	4619      	mov	r1, r3
 8008472:	f7f8 fb27 	bl	8000ac4 <__aeabi_d2f>
 8008476:	4602      	mov	r2, r0
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	615a      	str	r2, [r3, #20]
    w = w * 0.9 + (motorR->v - motorL->v) / 2 * 0.1; //差速
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	699b      	ldr	r3, [r3, #24]
 8008480:	4618      	mov	r0, r3
 8008482:	f7f8 f805 	bl	8000490 <__aeabi_f2d>
 8008486:	f20f 4318 	addw	r3, pc, #1048	@ 0x418
 800848a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800848e:	f7f8 f857 	bl	8000540 <__aeabi_dmul>
 8008492:	4602      	mov	r2, r0
 8008494:	460b      	mov	r3, r1
 8008496:	4614      	mov	r4, r2
 8008498:	461d      	mov	r5, r3
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	689b      	ldr	r3, [r3, #8]
 800849e:	ed93 7a02 	vldr	s14, [r3, #8]
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	685b      	ldr	r3, [r3, #4]
 80084a6:	edd3 7a02 	vldr	s15, [r3, #8]
 80084aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80084ae:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80084b2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80084b6:	ee16 0a90 	vmov	r0, s13
 80084ba:	f7f7 ffe9 	bl	8000490 <__aeabi_f2d>
 80084be:	a3fa      	add	r3, pc, #1000	@ (adr r3, 80088a8 <_ZN7Chassis7HandlerEv+0x4a0>)
 80084c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084c4:	f7f8 f83c 	bl	8000540 <__aeabi_dmul>
 80084c8:	4602      	mov	r2, r0
 80084ca:	460b      	mov	r3, r1
 80084cc:	4620      	mov	r0, r4
 80084ce:	4629      	mov	r1, r5
 80084d0:	f7f7 fe80 	bl	80001d4 <__adddf3>
 80084d4:	4602      	mov	r2, r0
 80084d6:	460b      	mov	r3, r1
 80084d8:	4610      	mov	r0, r2
 80084da:	4619      	mov	r1, r3
 80084dc:	f7f8 faf2 	bl	8000ac4 <__aeabi_d2f>
 80084e0:	4602      	mov	r2, r0
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	619a      	str	r2, [r3, #24]


    switch (this->state){
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	781b      	ldrb	r3, [r3, #0]
 80084ea:	2b02      	cmp	r3, #2
 80084ec:	f000 8252 	beq.w	8008994 <_ZN7Chassis7HandlerEv+0x58c>
 80084f0:	2b02      	cmp	r3, #2
 80084f2:	f300 8258 	bgt.w	80089a6 <_ZN7Chassis7HandlerEv+0x59e>
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d002      	beq.n	8008500 <_ZN7Chassis7HandlerEv+0xf8>
 80084fa:	2b01      	cmp	r3, #1
 80084fc:	d01d      	beq.n	800853a <_ZN7Chassis7HandlerEv+0x132>
        case CHASSIS_RELEASE:{
            this->motorL->state = MOTOR_RELEASE;
            this->motorR->state = MOTOR_RELEASE;
        } break;
        default:
            break;
 80084fe:	e252      	b.n	80089a6 <_ZN7Chassis7HandlerEv+0x59e>
            this->motorL->state = MOTOR_STOP;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	685b      	ldr	r3, [r3, #4]
 8008504:	2200      	movs	r2, #0
 8008506:	701a      	strb	r2, [r3, #0]
            this->motorR->state = MOTOR_STOP;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	689b      	ldr	r3, [r3, #8]
 800850c:	2200      	movs	r2, #0
 800850e:	701a      	strb	r2, [r3, #0]
            ang = 0; ang1 = 0; ang2 = 0;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f04f 0200 	mov.w	r2, #0
 8008516:	61da      	str	r2, [r3, #28]
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f04f 0200 	mov.w	r2, #0
 800851e:	621a      	str	r2, [r3, #32]
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f04f 0200 	mov.w	r2, #0
 8008526:	625a      	str	r2, [r3, #36]	@ 0x24
            x = 0; y = 0;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f04f 0200 	mov.w	r2, #0
 800852e:	631a      	str	r2, [r3, #48]	@ 0x30
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f04f 0200 	mov.w	r2, #0
 8008536:	635a      	str	r2, [r3, #52]	@ 0x34
        }  break;
 8008538:	e236      	b.n	80089a8 <_ZN7Chassis7HandlerEv+0x5a0>
            float output1 = (v_set - w_set) * 58327;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8008546:	ee77 7a67 	vsub.f32	s15, s14, s15
 800854a:	ed9f 7acb 	vldr	s14, [pc, #812]	@ 8008878 <_ZN7Chassis7HandlerEv+0x470>
 800854e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008552:	edc7 7a07 	vstr	s15, [r7, #28]
            float output2 = (v_set + w_set) * 58327;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8008562:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008566:	ed9f 7ac4 	vldr	s14, [pc, #784]	@ 8008878 <_ZN7Chassis7HandlerEv+0x470>
 800856a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800856e:	edc7 7a06 	vstr	s15, [r7, #24]
            float thresh = 404;
 8008572:	4bc2      	ldr	r3, [pc, #776]	@ (800887c <_ZN7Chassis7HandlerEv+0x474>)
 8008574:	617b      	str	r3, [r7, #20]
            if(output1 > 0) output1 += thresh;
 8008576:	edd7 7a07 	vldr	s15, [r7, #28]
 800857a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800857e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008582:	dd08      	ble.n	8008596 <_ZN7Chassis7HandlerEv+0x18e>
 8008584:	ed97 7a07 	vldr	s14, [r7, #28]
 8008588:	edd7 7a05 	vldr	s15, [r7, #20]
 800858c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008590:	edc7 7a07 	vstr	s15, [r7, #28]
 8008594:	e00e      	b.n	80085b4 <_ZN7Chassis7HandlerEv+0x1ac>
            else if(output1 < 0) output1 -= thresh;
 8008596:	edd7 7a07 	vldr	s15, [r7, #28]
 800859a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800859e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085a2:	d507      	bpl.n	80085b4 <_ZN7Chassis7HandlerEv+0x1ac>
 80085a4:	ed97 7a07 	vldr	s14, [r7, #28]
 80085a8:	edd7 7a05 	vldr	s15, [r7, #20]
 80085ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80085b0:	edc7 7a07 	vstr	s15, [r7, #28]
            if(output2 > 0) output2 += thresh;
 80085b4:	edd7 7a06 	vldr	s15, [r7, #24]
 80085b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80085bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085c0:	dd08      	ble.n	80085d4 <_ZN7Chassis7HandlerEv+0x1cc>
 80085c2:	ed97 7a06 	vldr	s14, [r7, #24]
 80085c6:	edd7 7a05 	vldr	s15, [r7, #20]
 80085ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80085ce:	edc7 7a06 	vstr	s15, [r7, #24]
 80085d2:	e00e      	b.n	80085f2 <_ZN7Chassis7HandlerEv+0x1ea>
            else if(output2 < 0) output2 -= thresh;
 80085d4:	edd7 7a06 	vldr	s15, [r7, #24]
 80085d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80085dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085e0:	d507      	bpl.n	80085f2 <_ZN7Chassis7HandlerEv+0x1ea>
 80085e2:	ed97 7a06 	vldr	s14, [r7, #24]
 80085e6:	edd7 7a05 	vldr	s15, [r7, #20]
 80085ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80085ee:	edc7 7a06 	vstr	s15, [r7, #24]
            INRANGE(output1, 10000);
 80085f2:	edd7 7a07 	vldr	s15, [r7, #28]
 80085f6:	ed9f 7aa2 	vldr	s14, [pc, #648]	@ 8008880 <_ZN7Chassis7HandlerEv+0x478>
 80085fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80085fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008602:	dd02      	ble.n	800860a <_ZN7Chassis7HandlerEv+0x202>
 8008604:	4b9f      	ldr	r3, [pc, #636]	@ (8008884 <_ZN7Chassis7HandlerEv+0x47c>)
 8008606:	61fb      	str	r3, [r7, #28]
 8008608:	e00a      	b.n	8008620 <_ZN7Chassis7HandlerEv+0x218>
 800860a:	edd7 7a07 	vldr	s15, [r7, #28]
 800860e:	ed9f 7a9e 	vldr	s14, [pc, #632]	@ 8008888 <_ZN7Chassis7HandlerEv+0x480>
 8008612:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800861a:	d501      	bpl.n	8008620 <_ZN7Chassis7HandlerEv+0x218>
 800861c:	4b9b      	ldr	r3, [pc, #620]	@ (800888c <_ZN7Chassis7HandlerEv+0x484>)
 800861e:	61fb      	str	r3, [r7, #28]
            INRANGE(output2, 10000);
 8008620:	edd7 7a06 	vldr	s15, [r7, #24]
 8008624:	ed9f 7a96 	vldr	s14, [pc, #600]	@ 8008880 <_ZN7Chassis7HandlerEv+0x478>
 8008628:	eef4 7ac7 	vcmpe.f32	s15, s14
 800862c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008630:	dd02      	ble.n	8008638 <_ZN7Chassis7HandlerEv+0x230>
 8008632:	4b94      	ldr	r3, [pc, #592]	@ (8008884 <_ZN7Chassis7HandlerEv+0x47c>)
 8008634:	61bb      	str	r3, [r7, #24]
 8008636:	e00a      	b.n	800864e <_ZN7Chassis7HandlerEv+0x246>
 8008638:	edd7 7a06 	vldr	s15, [r7, #24]
 800863c:	ed9f 7a92 	vldr	s14, [pc, #584]	@ 8008888 <_ZN7Chassis7HandlerEv+0x480>
 8008640:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008648:	d501      	bpl.n	800864e <_ZN7Chassis7HandlerEv+0x246>
 800864a:	4b90      	ldr	r3, [pc, #576]	@ (800888c <_ZN7Chassis7HandlerEv+0x484>)
 800864c:	61bb      	str	r3, [r7, #24]
            this->motorL->intensity = this->motorL->intensity * 0.95 + (int)(output1 * 0.05);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	685b      	ldr	r3, [r3, #4]
 8008652:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8008656:	4618      	mov	r0, r3
 8008658:	f7f7 ff08 	bl	800046c <__aeabi_i2d>
 800865c:	a380      	add	r3, pc, #512	@ (adr r3, 8008860 <_ZN7Chassis7HandlerEv+0x458>)
 800865e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008662:	f7f7 ff6d 	bl	8000540 <__aeabi_dmul>
 8008666:	4602      	mov	r2, r0
 8008668:	460b      	mov	r3, r1
 800866a:	4614      	mov	r4, r2
 800866c:	461d      	mov	r5, r3
 800866e:	69f8      	ldr	r0, [r7, #28]
 8008670:	f7f7 ff0e 	bl	8000490 <__aeabi_f2d>
 8008674:	a37c      	add	r3, pc, #496	@ (adr r3, 8008868 <_ZN7Chassis7HandlerEv+0x460>)
 8008676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800867a:	f7f7 ff61 	bl	8000540 <__aeabi_dmul>
 800867e:	4602      	mov	r2, r0
 8008680:	460b      	mov	r3, r1
 8008682:	4610      	mov	r0, r2
 8008684:	4619      	mov	r1, r3
 8008686:	f7f8 f9f5 	bl	8000a74 <__aeabi_d2iz>
 800868a:	4603      	mov	r3, r0
 800868c:	4618      	mov	r0, r3
 800868e:	f7f7 feed 	bl	800046c <__aeabi_i2d>
 8008692:	4602      	mov	r2, r0
 8008694:	460b      	mov	r3, r1
 8008696:	4620      	mov	r0, r4
 8008698:	4629      	mov	r1, r5
 800869a:	f7f7 fd9b 	bl	80001d4 <__adddf3>
 800869e:	4602      	mov	r2, r0
 80086a0:	460b      	mov	r3, r1
 80086a2:	4610      	mov	r0, r2
 80086a4:	4619      	mov	r1, r3
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	685c      	ldr	r4, [r3, #4]
 80086aa:	f7f8 f9e3 	bl	8000a74 <__aeabi_d2iz>
 80086ae:	4603      	mov	r3, r0
 80086b0:	b21b      	sxth	r3, r3
 80086b2:	8063      	strh	r3, [r4, #2]
            this->motorR->intensity = this->motorR->intensity * 0.95 + (int)(output2 * 0.05);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	689b      	ldr	r3, [r3, #8]
 80086b8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80086bc:	4618      	mov	r0, r3
 80086be:	f7f7 fed5 	bl	800046c <__aeabi_i2d>
 80086c2:	a367      	add	r3, pc, #412	@ (adr r3, 8008860 <_ZN7Chassis7HandlerEv+0x458>)
 80086c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086c8:	f7f7 ff3a 	bl	8000540 <__aeabi_dmul>
 80086cc:	4602      	mov	r2, r0
 80086ce:	460b      	mov	r3, r1
 80086d0:	4614      	mov	r4, r2
 80086d2:	461d      	mov	r5, r3
 80086d4:	69b8      	ldr	r0, [r7, #24]
 80086d6:	f7f7 fedb 	bl	8000490 <__aeabi_f2d>
 80086da:	a363      	add	r3, pc, #396	@ (adr r3, 8008868 <_ZN7Chassis7HandlerEv+0x460>)
 80086dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086e0:	f7f7 ff2e 	bl	8000540 <__aeabi_dmul>
 80086e4:	4602      	mov	r2, r0
 80086e6:	460b      	mov	r3, r1
 80086e8:	4610      	mov	r0, r2
 80086ea:	4619      	mov	r1, r3
 80086ec:	f7f8 f9c2 	bl	8000a74 <__aeabi_d2iz>
 80086f0:	4603      	mov	r3, r0
 80086f2:	4618      	mov	r0, r3
 80086f4:	f7f7 feba 	bl	800046c <__aeabi_i2d>
 80086f8:	4602      	mov	r2, r0
 80086fa:	460b      	mov	r3, r1
 80086fc:	4620      	mov	r0, r4
 80086fe:	4629      	mov	r1, r5
 8008700:	f7f7 fd68 	bl	80001d4 <__adddf3>
 8008704:	4602      	mov	r2, r0
 8008706:	460b      	mov	r3, r1
 8008708:	4610      	mov	r0, r2
 800870a:	4619      	mov	r1, r3
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	689c      	ldr	r4, [r3, #8]
 8008710:	f7f8 f9b0 	bl	8000a74 <__aeabi_d2iz>
 8008714:	4603      	mov	r3, r0
 8008716:	b21b      	sxth	r3, r3
 8008718:	8063      	strh	r3, [r4, #2]
            this->motorL->state = MOTOR_RUN;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	685b      	ldr	r3, [r3, #4]
 800871e:	2201      	movs	r2, #1
 8008720:	701a      	strb	r2, [r3, #0]
            this->motorR->state = MOTOR_RUN;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	689b      	ldr	r3, [r3, #8]
 8008726:	2201      	movs	r2, #1
 8008728:	701a      	strb	r2, [r3, #0]
            ang1 += (motorR->v - motorL->v) / wheel_seperation / M_PI * 180 / MAIN_LOOP_FREQ;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6a1b      	ldr	r3, [r3, #32]
 800872e:	4618      	mov	r0, r3
 8008730:	f7f7 feae 	bl	8000490 <__aeabi_f2d>
 8008734:	4604      	mov	r4, r0
 8008736:	460d      	mov	r5, r1
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	689b      	ldr	r3, [r3, #8]
 800873c:	ed93 7a02 	vldr	s14, [r3, #8]
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	685b      	ldr	r3, [r3, #4]
 8008744:	edd3 7a02 	vldr	s15, [r3, #8]
 8008748:	ee37 7a67 	vsub.f32	s14, s14, s15
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	edd3 7a04 	vldr	s15, [r3, #16]
 8008752:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8008756:	ee16 0a90 	vmov	r0, s13
 800875a:	f7f7 fe99 	bl	8000490 <__aeabi_f2d>
 800875e:	a344      	add	r3, pc, #272	@ (adr r3, 8008870 <_ZN7Chassis7HandlerEv+0x468>)
 8008760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008764:	f7f8 f816 	bl	8000794 <__aeabi_ddiv>
 8008768:	4602      	mov	r2, r0
 800876a:	460b      	mov	r3, r1
 800876c:	4610      	mov	r0, r2
 800876e:	4619      	mov	r1, r3
 8008770:	f04f 0200 	mov.w	r2, #0
 8008774:	4b46      	ldr	r3, [pc, #280]	@ (8008890 <_ZN7Chassis7HandlerEv+0x488>)
 8008776:	f7f7 fee3 	bl	8000540 <__aeabi_dmul>
 800877a:	4602      	mov	r2, r0
 800877c:	460b      	mov	r3, r1
 800877e:	4610      	mov	r0, r2
 8008780:	4619      	mov	r1, r3
 8008782:	f04f 0200 	mov.w	r2, #0
 8008786:	4b43      	ldr	r3, [pc, #268]	@ (8008894 <_ZN7Chassis7HandlerEv+0x48c>)
 8008788:	f7f8 f804 	bl	8000794 <__aeabi_ddiv>
 800878c:	4602      	mov	r2, r0
 800878e:	460b      	mov	r3, r1
 8008790:	4620      	mov	r0, r4
 8008792:	4629      	mov	r1, r5
 8008794:	f7f7 fd1e 	bl	80001d4 <__adddf3>
 8008798:	4602      	mov	r2, r0
 800879a:	460b      	mov	r3, r1
 800879c:	4610      	mov	r0, r2
 800879e:	4619      	mov	r1, r3
 80087a0:	f7f8 f990 	bl	8000ac4 <__aeabi_d2f>
 80087a4:	4602      	mov	r2, r0
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	621a      	str	r2, [r3, #32]
            ang2 += imu->wz / MAIN_LOOP_FREQ;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	68db      	ldr	r3, [r3, #12]
 80087b4:	edd3 6a06 	vldr	s13, [r3, #24]
 80087b8:	ed9f 6a3e 	vldr	s12, [pc, #248]	@ 80088b4 <_ZN7Chassis7HandlerEv+0x4ac>
 80087bc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80087c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
            ang3 = ang1 * scale1;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	ed93 7a08 	vldr	s14, [r3, #32]
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80087d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
            ang4 = ang2 * scale2;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 80087ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
            ang = ang2 / 3540 * 3600;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80087fc:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8008898 <_ZN7Chassis7HandlerEv+0x490>
 8008800:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008804:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 800889c <_ZN7Chassis7HandlerEv+0x494>
 8008808:	ee67 7a87 	vmul.f32	s15, s15, s14
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	edc3 7a07 	vstr	s15, [r3, #28]
            MOD(ang, 360);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	edd3 7a07 	vldr	s15, [r3, #28]
 8008818:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 80088b0 <_ZN7Chassis7HandlerEv+0x4a8>
 800881c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008824:	db48      	blt.n	80088b8 <_ZN7Chassis7HandlerEv+0x4b0>
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	ed93 7a07 	vldr	s14, [r3, #28]
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	edd3 6a07 	vldr	s13, [r3, #28]
 8008832:	ed9f 6a1f 	vldr	s12, [pc, #124]	@ 80088b0 <_ZN7Chassis7HandlerEv+0x4a8>
 8008836:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800883a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800883e:	ee17 2a90 	vmov	r2, s15
 8008842:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 8008846:	fb02 f303 	mul.w	r3, r2, r3
 800884a:	ee07 3a90 	vmov	s15, r3
 800884e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008852:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	edc3 7a07 	vstr	s15, [r3, #28]
 800885c:	e050      	b.n	8008900 <_ZN7Chassis7HandlerEv+0x4f8>
 800885e:	bf00      	nop
 8008860:	66666666 	.word	0x66666666
 8008864:	3fee6666 	.word	0x3fee6666
 8008868:	9999999a 	.word	0x9999999a
 800886c:	3fa99999 	.word	0x3fa99999
 8008870:	54442d18 	.word	0x54442d18
 8008874:	400921fb 	.word	0x400921fb
 8008878:	4763d700 	.word	0x4763d700
 800887c:	43ca0000 	.word	0x43ca0000
 8008880:	461c4000 	.word	0x461c4000
 8008884:	461c4000 	.word	0x461c4000
 8008888:	c61c4000 	.word	0xc61c4000
 800888c:	c61c4000 	.word	0xc61c4000
 8008890:	40668000 	.word	0x40668000
 8008894:	408f4000 	.word	0x408f4000
 8008898:	455d4000 	.word	0x455d4000
 800889c:	45610000 	.word	0x45610000
 80088a0:	cccccccd 	.word	0xcccccccd
 80088a4:	3feccccc 	.word	0x3feccccc
 80088a8:	9999999a 	.word	0x9999999a
 80088ac:	3fb99999 	.word	0x3fb99999
 80088b0:	43b40000 	.word	0x43b40000
 80088b4:	447a0000 	.word	0x447a0000
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	edd3 7a07 	vldr	s15, [r3, #28]
 80088be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80088c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088c6:	d51b      	bpl.n	8008900 <_ZN7Chassis7HandlerEv+0x4f8>
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	ed93 7a07 	vldr	s14, [r3, #28]
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	edd3 6a07 	vldr	s13, [r3, #28]
 80088d4:	ed1f 6a0a 	vldr	s12, [pc, #-40]	@ 80088b0 <_ZN7Chassis7HandlerEv+0x4a8>
 80088d8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80088dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80088e0:	ee17 3a90 	vmov	r3, s15
 80088e4:	3b01      	subs	r3, #1
 80088e6:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 80088ea:	fb02 f303 	mul.w	r3, r2, r3
 80088ee:	ee07 3a90 	vmov	s15, r3
 80088f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80088f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	edc3 7a07 	vstr	s15, [r3, #28]
            arm_sin_cos_f32(ang, &temp_sin, &temp_cos);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	edd3 7a07 	vldr	s15, [r3, #28]
 8008906:	f107 0210 	add.w	r2, r7, #16
 800890a:	f107 030c 	add.w	r3, r7, #12
 800890e:	4611      	mov	r1, r2
 8008910:	4618      	mov	r0, r3
 8008912:	eeb0 0a67 	vmov.f32	s0, s15
 8008916:	f002 f8bd 	bl	800aa94 <arm_sin_cos_f32>
            x += (motorL->v + motorR->v) / 2 * temp_cos / MAIN_LOOP_FREQ;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	685b      	ldr	r3, [r3, #4]
 8008924:	edd3 6a02 	vldr	s13, [r3, #8]
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	689b      	ldr	r3, [r3, #8]
 800892c:	edd3 7a02 	vldr	s15, [r3, #8]
 8008930:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008934:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8008938:	eec7 6a86 	vdiv.f32	s13, s15, s12
 800893c:	edd7 7a04 	vldr	s15, [r7, #16]
 8008940:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8008944:	ed1f 6a25 	vldr	s12, [pc, #-148]	@ 80088b4 <_ZN7Chassis7HandlerEv+0x4ac>
 8008948:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800894c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
            y += (motorL->v + motorR->v) / 2 * temp_sin / MAIN_LOOP_FREQ;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	685b      	ldr	r3, [r3, #4]
 8008960:	edd3 6a02 	vldr	s13, [r3, #8]
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	689b      	ldr	r3, [r3, #8]
 8008968:	edd3 7a02 	vldr	s15, [r3, #8]
 800896c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008970:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8008974:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8008978:	edd7 7a03 	vldr	s15, [r7, #12]
 800897c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8008980:	ed1f 6a34 	vldr	s12, [pc, #-208]	@ 80088b4 <_ZN7Chassis7HandlerEv+0x4ac>
 8008984:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8008988:	ee77 7a27 	vadd.f32	s15, s14, s15
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
        } break;
 8008992:	e009      	b.n	80089a8 <_ZN7Chassis7HandlerEv+0x5a0>
            this->motorL->state = MOTOR_RELEASE;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	685b      	ldr	r3, [r3, #4]
 8008998:	2202      	movs	r2, #2
 800899a:	701a      	strb	r2, [r3, #0]
            this->motorR->state = MOTOR_RELEASE;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	689b      	ldr	r3, [r3, #8]
 80089a0:	2202      	movs	r2, #2
 80089a2:	701a      	strb	r2, [r3, #0]
        } break;
 80089a4:	e000      	b.n	80089a8 <_ZN7Chassis7HandlerEv+0x5a0>
            break;
 80089a6:	bf00      	nop
    }
}
 80089a8:	bf00      	nop
 80089aa:	3720      	adds	r7, #32
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bdb0      	pop	{r4, r5, r7, pc}

080089b0 <_ZSt5atan2ff>:
  using ::atan2;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b082      	sub	sp, #8
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	ed87 0a01 	vstr	s0, [r7, #4]
 80089ba:	edc7 0a00 	vstr	s1, [r7]
 80089be:	edd7 0a00 	vldr	s1, [r7]
 80089c2:	ed97 0a01 	vldr	s0, [r7, #4]
 80089c6:	f002 f8fb 	bl	800abc0 <atan2f>
 80089ca:	eef0 7a40 	vmov.f32	s15, s0
 80089ce:	eeb0 0a67 	vmov.f32	s0, s15
 80089d2:	3708      	adds	r7, #8
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bd80      	pop	{r7, pc}

080089d8 <_ZN10ControllerC1EP7Chassis>:
  ******************************************************************************
**/

#include "Controller.h"

Controller::Controller(Chassis *chassis) {
 80089d8:	b480      	push	{r7}
 80089da:	b083      	sub	sp, #12
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
 80089e0:	6039      	str	r1, [r7, #0]
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	f04f 0200 	mov.w	r2, #0
 80089e8:	611a      	str	r2, [r3, #16]
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	f04f 0200 	mov.w	r2, #0
 80089f0:	615a      	str	r2, [r3, #20]
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	4a13      	ldr	r2, [pc, #76]	@ (8008a44 <_ZN10ControllerC1EP7Chassis+0x6c>)
 80089f6:	629a      	str	r2, [r3, #40]	@ 0x28
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	4a13      	ldr	r2, [pc, #76]	@ (8008a48 <_ZN10ControllerC1EP7Chassis+0x70>)
 80089fc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8008a04:	631a      	str	r2, [r3, #48]	@ 0x30
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	4a10      	ldr	r2, [pc, #64]	@ (8008a4c <_ZN10ControllerC1EP7Chassis+0x74>)
 8008a0a:	635a      	str	r2, [r3, #52]	@ 0x34
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f04f 0200 	mov.w	r2, #0
 8008a12:	639a      	str	r2, [r3, #56]	@ 0x38
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f04f 0200 	mov.w	r2, #0
 8008a1a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	4a0b      	ldr	r2, [pc, #44]	@ (8008a4c <_ZN10ControllerC1EP7Chassis+0x74>)
 8008a20:	641a      	str	r2, [r3, #64]	@ 0x40
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	4a09      	ldr	r2, [pc, #36]	@ (8008a4c <_ZN10ControllerC1EP7Chassis+0x74>)
 8008a26:	645a      	str	r2, [r3, #68]	@ 0x44
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2201      	movs	r2, #1
 8008a2c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    this->chassis = chassis;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	683a      	ldr	r2, [r7, #0]
 8008a34:	601a      	str	r2, [r3, #0]

}
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	4618      	mov	r0, r3
 8008a3a:	370c      	adds	r7, #12
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a42:	4770      	bx	lr
 8008a44:	3ba3d70a 	.word	0x3ba3d70a
 8008a48:	40400000 	.word	0x40400000
 8008a4c:	3dcccccd 	.word	0x3dcccccd

08008a50 <_ZN10Controller7HandlerEv>:

void Controller::Handler(){
 8008a50:	b5b0      	push	{r4, r5, r7, lr}
 8008a52:	b084      	sub	sp, #16
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
    x = chassis->x;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	605a      	str	r2, [r3, #4]
    y = chassis->y;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	609a      	str	r2, [r3, #8]
    ang = chassis->ang;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	69da      	ldr	r2, [r3, #28]
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	60da      	str	r2, [r3, #12]
    x_err = x_set - x;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	ed93 7a04 	vldr	s14, [r3, #16]
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	edd3 7a01 	vldr	s15, [r3, #4]
 8008a82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	edc3 7a08 	vstr	s15, [r3, #32]
    y_err = y_set - y;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	ed93 7a05 	vldr	s14, [r3, #20]
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	edd3 7a02 	vldr	s15, [r3, #8]
 8008a98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

    if((x_err > -dist_th && x_err < dist_th) && (y_err > -dist_th && y_err < dist_th)){
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	ed93 7a08 	vldr	s14, [r3, #32]
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8008aae:	eef1 7a67 	vneg.f32	s15, s15
 8008ab2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008aba:	dd39      	ble.n	8008b30 <_ZN10Controller7HandlerEv+0xe0>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	ed93 7a08 	vldr	s14, [r3, #32]
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8008ac8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008acc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ad0:	d52e      	bpl.n	8008b30 <_ZN10Controller7HandlerEv+0xe0>
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8008ade:	eef1 7a67 	vneg.f32	s15, s15
 8008ae2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008ae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008aea:	dd21      	ble.n	8008b30 <_ZN10Controller7HandlerEv+0xe0>
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8008af8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b00:	d516      	bpl.n	8008b30 <_ZN10Controller7HandlerEv+0xe0>
        v_out = 0;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	f04f 0200 	mov.w	r2, #0
 8008b08:	639a      	str	r2, [r3, #56]	@ 0x38
        w_out = 0;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	f04f 0200 	mov.w	r2, #0
 8008b10:	63da      	str	r2, [r3, #60]	@ 0x3c
        chassis->v_set = v_out;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	687a      	ldr	r2, [r7, #4]
 8008b18:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008b1a:	639a      	str	r2, [r3, #56]	@ 0x38
        chassis->w_set = w_out;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	687a      	ldr	r2, [r7, #4]
 8008b22:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008b24:	63da      	str	r2, [r3, #60]	@ 0x3c
        reached = true;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2201      	movs	r2, #1
 8008b2a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
        return;
 8008b2e:	e139      	b.n	8008da4 <_ZN10Controller7HandlerEv+0x354>
    }
    reached = false;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2200      	movs	r2, #0
 8008b34:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    ang_err = atan2(y_err, x_err) / M_PI * 180 - ang;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	ed93 7a08 	vldr	s14, [r3, #32]
 8008b44:	eef0 0a47 	vmov.f32	s1, s14
 8008b48:	eeb0 0a67 	vmov.f32	s0, s15
 8008b4c:	f7ff ff30 	bl	80089b0 <_ZSt5atan2ff>
 8008b50:	ee10 3a10 	vmov	r3, s0
 8008b54:	4618      	mov	r0, r3
 8008b56:	f7f7 fc9b 	bl	8000490 <__aeabi_f2d>
 8008b5a:	a39b      	add	r3, pc, #620	@ (adr r3, 8008dc8 <_ZN10Controller7HandlerEv+0x378>)
 8008b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b60:	f7f7 fe18 	bl	8000794 <__aeabi_ddiv>
 8008b64:	4602      	mov	r2, r0
 8008b66:	460b      	mov	r3, r1
 8008b68:	4610      	mov	r0, r2
 8008b6a:	4619      	mov	r1, r3
 8008b6c:	f04f 0200 	mov.w	r2, #0
 8008b70:	4b8f      	ldr	r3, [pc, #572]	@ (8008db0 <_ZN10Controller7HandlerEv+0x360>)
 8008b72:	f7f7 fce5 	bl	8000540 <__aeabi_dmul>
 8008b76:	4602      	mov	r2, r0
 8008b78:	460b      	mov	r3, r1
 8008b7a:	4614      	mov	r4, r2
 8008b7c:	461d      	mov	r5, r3
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	68db      	ldr	r3, [r3, #12]
 8008b82:	4618      	mov	r0, r3
 8008b84:	f7f7 fc84 	bl	8000490 <__aeabi_f2d>
 8008b88:	4602      	mov	r2, r0
 8008b8a:	460b      	mov	r3, r1
 8008b8c:	4620      	mov	r0, r4
 8008b8e:	4629      	mov	r1, r5
 8008b90:	f7f7 fb1e 	bl	80001d0 <__aeabi_dsub>
 8008b94:	4602      	mov	r2, r0
 8008b96:	460b      	mov	r3, r1
 8008b98:	4610      	mov	r0, r2
 8008b9a:	4619      	mov	r1, r3
 8008b9c:	f7f7 ff92 	bl	8000ac4 <__aeabi_d2f>
 8008ba0:	4602      	mov	r2, r0
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	61da      	str	r2, [r3, #28]
    if(ang_err < -180) ang_err += 360;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	edd3 7a07 	vldr	s15, [r3, #28]
 8008bac:	ed9f 7a81 	vldr	s14, [pc, #516]	@ 8008db4 <_ZN10Controller7HandlerEv+0x364>
 8008bb0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008bb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bb8:	d50a      	bpl.n	8008bd0 <_ZN10Controller7HandlerEv+0x180>
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	edd3 7a07 	vldr	s15, [r3, #28]
 8008bc0:	ed9f 7a7d 	vldr	s14, [pc, #500]	@ 8008db8 <_ZN10Controller7HandlerEv+0x368>
 8008bc4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	edc3 7a07 	vstr	s15, [r3, #28]
 8008bce:	e013      	b.n	8008bf8 <_ZN10Controller7HandlerEv+0x1a8>
    else if(ang_err > 180) ang_err -= 360;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	edd3 7a07 	vldr	s15, [r3, #28]
 8008bd6:	ed9f 7a79 	vldr	s14, [pc, #484]	@ 8008dbc <_ZN10Controller7HandlerEv+0x36c>
 8008bda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008bde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008be2:	dd09      	ble.n	8008bf8 <_ZN10Controller7HandlerEv+0x1a8>
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	edd3 7a07 	vldr	s15, [r3, #28]
 8008bea:	ed9f 7a73 	vldr	s14, [pc, #460]	@ 8008db8 <_ZN10Controller7HandlerEv+0x368>
 8008bee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	edc3 7a07 	vstr	s15, [r3, #28]
    arm_sqrt_f32(x_err * x_err + y_err * y_err, &dist);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	ed93 7a08 	vldr	s14, [r3, #32]
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	edd3 7a08 	vldr	s15, [r3, #32]
 8008c04:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8008c14:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008c18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	3318      	adds	r3, #24
 8008c20:	edc7 7a03 	vstr	s15, [r7, #12]
 8008c24:	60bb      	str	r3, [r7, #8]
   */
  CMSIS_INLINE __STATIC_INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8008c26:	edd7 7a03 	vldr	s15, [r7, #12]
 8008c2a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c32:	db09      	blt.n	8008c48 <_ZN10Controller7HandlerEv+0x1f8>
#if   (__FPU_USED == 1) && defined ( __CC_ARM   )
      *pOut = __sqrtf(in);
#elif (__FPU_USED == 1) && (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050))
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
 8008c34:	ed97 0a03 	vldr	s0, [r7, #12]
 8008c38:	f001 ffc4 	bl	800abc4 <sqrtf>
 8008c3c:	eef0 7a40 	vmov.f32	s15, s0
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	edc3 7a00 	vstr	s15, [r3]
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
#else
      *pOut = sqrtf(in);
#endif

      return (ARM_MATH_SUCCESS);
 8008c46:	e004      	b.n	8008c52 <_ZN10Controller7HandlerEv+0x202>
    }
    else
    {
      *pOut = 0.0f;
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	f04f 0200 	mov.w	r2, #0
 8008c4e:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8008c50:	bf00      	nop
    //判断目标点在前方还是后方，先计算矢径的方向
    if(ang_err > 90 || ang_err < -90) dist = -dist;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	edd3 7a07 	vldr	s15, [r3, #28]
 8008c58:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8008dc0 <_ZN10Controller7HandlerEv+0x370>
 8008c5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c64:	dc09      	bgt.n	8008c7a <_ZN10Controller7HandlerEv+0x22a>
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	edd3 7a07 	vldr	s15, [r3, #28]
 8008c6c:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8008dc4 <_ZN10Controller7HandlerEv+0x374>
 8008c70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c78:	d507      	bpl.n	8008c8a <_ZN10Controller7HandlerEv+0x23a>
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	edd3 7a06 	vldr	s15, [r3, #24]
 8008c80:	eef1 7a67 	vneg.f32	s15, s15
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	edc3 7a06 	vstr	s15, [r3, #24]

    if(ang_err > ang_th || ang_err < -ang_th){ //优先转向
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	ed93 7a07 	vldr	s14, [r3, #28]
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8008c96:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008c9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c9e:	dc0c      	bgt.n	8008cba <_ZN10Controller7HandlerEv+0x26a>
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	ed93 7a07 	vldr	s14, [r3, #28]
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8008cac:	eef1 7a67 	vneg.f32	s15, s15
 8008cb0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008cb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cb8:	d504      	bpl.n	8008cc4 <_ZN10Controller7HandlerEv+0x274>
        v_out = 0;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f04f 0200 	mov.w	r2, #0
 8008cc0:	639a      	str	r2, [r3, #56]	@ 0x38
 8008cc2:	e00a      	b.n	8008cda <_ZN10Controller7HandlerEv+0x28a>
    }else v_out = kp1 * dist;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	edd3 7a06 	vldr	s15, [r3, #24]
 8008cd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
    w_out = kp2 * chassis->wheel_seperation * ang_err;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	edd3 7a04 	vldr	s15, [r3, #16]
 8008ce8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	edd3 7a07 	vldr	s15, [r3, #28]
 8008cf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
    INRANGE(v_out, v_out_max);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8008d08:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d10:	dd04      	ble.n	8008d1c <_ZN10Controller7HandlerEv+0x2cc>
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	639a      	str	r2, [r3, #56]	@ 0x38
 8008d1a:	e014      	b.n	8008d46 <_ZN10Controller7HandlerEv+0x2f6>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8008d28:	eef1 7a67 	vneg.f32	s15, s15
 8008d2c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008d30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d34:	d507      	bpl.n	8008d46 <_ZN10Controller7HandlerEv+0x2f6>
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8008d3c:	eef1 7a67 	vneg.f32	s15, s15
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
    INRANGE(w_out, w_out_max);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8008d52:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d5a:	dd04      	ble.n	8008d66 <_ZN10Controller7HandlerEv+0x316>
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	63da      	str	r2, [r3, #60]	@ 0x3c
 8008d64:	e014      	b.n	8008d90 <_ZN10Controller7HandlerEv+0x340>
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8008d72:	eef1 7a67 	vneg.f32	s15, s15
 8008d76:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008d7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d7e:	d507      	bpl.n	8008d90 <_ZN10Controller7HandlerEv+0x340>
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8008d86:	eef1 7a67 	vneg.f32	s15, s15
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c

    chassis->v_set = v_out;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	687a      	ldr	r2, [r7, #4]
 8008d96:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008d98:	639a      	str	r2, [r3, #56]	@ 0x38
    chassis->w_set = w_out;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	687a      	ldr	r2, [r7, #4]
 8008da0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008da2:	63da      	str	r2, [r3, #60]	@ 0x3c

 8008da4:	3710      	adds	r7, #16
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bdb0      	pop	{r4, r5, r7, pc}
 8008daa:	bf00      	nop
 8008dac:	f3af 8000 	nop.w
 8008db0:	40668000 	.word	0x40668000
 8008db4:	c3340000 	.word	0xc3340000
 8008db8:	43b40000 	.word	0x43b40000
 8008dbc:	43340000 	.word	0x43340000
 8008dc0:	42b40000 	.word	0x42b40000
 8008dc4:	c2b40000 	.word	0xc2b40000
 8008dc8:	54442d18 	.word	0x54442d18
 8008dcc:	400921fb 	.word	0x400921fb

08008dd0 <_ZN7Encoder7HandlerEv>:

#include "Encoder.h"

#define CNT_OVERFLOW 65536

void Encoder::Handler() {
 8008dd0:	b480      	push	{r7}
 8008dd2:	b083      	sub	sp, #12
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
    pulse += (htim->Instance)->CNT - prev_cnt + carry_flag * CNT_OVERFLOW;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	685b      	ldr	r3, [r3, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	68db      	ldr	r3, [r3, #12]
 8008de4:	1ad3      	subs	r3, r2, r3
 8008de6:	687a      	ldr	r2, [r7, #4]
 8008de8:	6892      	ldr	r2, [r2, #8]
 8008dea:	0412      	lsls	r2, r2, #16
 8008dec:	4413      	add	r3, r2
 8008dee:	687a      	ldr	r2, [r7, #4]
 8008df0:	6812      	ldr	r2, [r2, #0]
 8008df2:	4413      	add	r3, r2
 8008df4:	461a      	mov	r2, r3
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	601a      	str	r2, [r3, #0]
    carry_flag = 0;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	609a      	str	r2, [r3, #8]
    prev_cnt = (htim->Instance)->CNT;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	685b      	ldr	r3, [r3, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	60da      	str	r2, [r3, #12]

}
 8008e0c:	bf00      	nop
 8008e0e:	370c      	adds	r7, #12
 8008e10:	46bd      	mov	sp, r7
 8008e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e16:	4770      	bx	lr

08008e18 <_ZN7EncoderC1EP17TIM_HandleTypeDef>:

Encoder::Encoder(TIM_HandleTypeDef *htim) {
 8008e18:	b480      	push	{r7}
 8008e1a:	b083      	sub	sp, #12
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
 8008e20:	6039      	str	r1, [r7, #0]
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2200      	movs	r2, #0
 8008e26:	601a      	str	r2, [r3, #0]
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	609a      	str	r2, [r3, #8]
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2200      	movs	r2, #0
 8008e32:	60da      	str	r2, [r3, #12]
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2200      	movs	r2, #0
 8008e38:	741a      	strb	r2, [r3, #16]
    this->htim = htim;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	683a      	ldr	r2, [r7, #0]
 8008e3e:	605a      	str	r2, [r3, #4]
}
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	4618      	mov	r0, r3
 8008e44:	370c      	adds	r7, #12
 8008e46:	46bd      	mov	sp, r7
 8008e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4c:	4770      	bx	lr

08008e4e <_ZN7Encoder4initEv>:

void Encoder::init() {
 8008e4e:	b580      	push	{r7, lr}
 8008e50:	b082      	sub	sp, #8
 8008e52:	af00      	add	r7, sp, #0
 8008e54:	6078      	str	r0, [r7, #4]
    HAL_TIM_Encoder_Start(htim, TIM_CHANNEL_ALL);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	685b      	ldr	r3, [r3, #4]
 8008e5a:	213c      	movs	r1, #60	@ 0x3c
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	f7fd fa51 	bl	8006304 <HAL_TIM_Encoder_Start>
    HAL_TIM_Base_Start_IT(htim);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	685b      	ldr	r3, [r3, #4]
 8008e66:	4618      	mov	r0, r3
 8008e68:	f7fd f814 	bl	8005e94 <HAL_TIM_Base_Start_IT>
}
 8008e6c:	bf00      	nop
 8008e6e:	3708      	adds	r7, #8
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd80      	pop	{r7, pc}

08008e74 <_ZN7Encoder15overflow_updateEv>:

void Encoder::overflow_update() {
 8008e74:	b480      	push	{r7}
 8008e76:	b083      	sub	sp, #12
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
    if(!init_flag){
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	7c1b      	ldrb	r3, [r3, #16]
 8008e80:	f083 0301 	eor.w	r3, r3, #1
 8008e84:	b2db      	uxtb	r3, r3
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d003      	beq.n	8008e92 <_ZN7Encoder15overflow_updateEv+0x1e>
        init_flag = true;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2201      	movs	r2, #1
 8008e8e:	741a      	strb	r2, [r3, #16]
        return;
 8008e90:	e017      	b.n	8008ec2 <_ZN7Encoder15overflow_updateEv+0x4e>
    }
    if((htim->Instance)->CNT < CNT_OVERFLOW / 2) carry_flag++;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	685b      	ldr	r3, [r3, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e9a:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	bf94      	ite	ls
 8008ea2:	2301      	movls	r3, #1
 8008ea4:	2300      	movhi	r3, #0
 8008ea6:	b2db      	uxtb	r3, r3
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d005      	beq.n	8008eb8 <_ZN7Encoder15overflow_updateEv+0x44>
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	689b      	ldr	r3, [r3, #8]
 8008eb0:	1c5a      	adds	r2, r3, #1
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	609a      	str	r2, [r3, #8]
 8008eb6:	e004      	b.n	8008ec2 <_ZN7Encoder15overflow_updateEv+0x4e>
    else carry_flag--;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	689b      	ldr	r3, [r3, #8]
 8008ebc:	1e5a      	subs	r2, r3, #1
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	609a      	str	r2, [r3, #8]
}
 8008ec2:	370c      	adds	r7, #12
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eca:	4770      	bx	lr

08008ecc <_ZN3IMU8get_dataEv>:
**/

#include "IMU.h"
#include "imu660.h"

void IMU::get_data(){
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b082      	sub	sp, #8
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
    imu660ra_get_acc();                                                         // 获取 IMU660RA 的加速度测量数值
 8008ed4:	f001 fa36 	bl	800a344 <imu660ra_get_acc>
    imu660ra_get_gyro();
 8008ed8:	f001 fa62 	bl	800a3a0 <imu660ra_get_gyro>

    this->ax = this->ax * k_imu + (1 - k_imu) * (imu660ra_acc_transition(imu660ra_acc_x) - ax_offset);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	ed93 7a01 	vldr	s14, [r3, #4]
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8008ee8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8008ef2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ef6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8008efa:	4b6f      	ldr	r3, [pc, #444]	@ (80090b8 <_ZN3IMU8get_dataEv+0x1ec>)
 8008efc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008f00:	ee07 3a90 	vmov	s15, r3
 8008f04:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8008f08:	4b6c      	ldr	r3, [pc, #432]	@ (80090bc <_ZN3IMU8get_dataEv+0x1f0>)
 8008f0a:	edd3 7a00 	vldr	s15, [r3]
 8008f0e:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8008f18:	ee76 7a67 	vsub.f32	s15, s12, s15
 8008f1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008f20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	edc3 7a01 	vstr	s15, [r3, #4]
    this->ay = this->ay * k_imu + (1 - k_imu) * (imu660ra_acc_transition(imu660ra_acc_y) - ay_offset);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	ed93 7a02 	vldr	s14, [r3, #8]
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8008f36:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8008f40:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f44:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8008f48:	4b5d      	ldr	r3, [pc, #372]	@ (80090c0 <_ZN3IMU8get_dataEv+0x1f4>)
 8008f4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008f4e:	ee07 3a90 	vmov	s15, r3
 8008f52:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8008f56:	4b59      	ldr	r3, [pc, #356]	@ (80090bc <_ZN3IMU8get_dataEv+0x1f0>)
 8008f58:	edd3 7a00 	vldr	s15, [r3]
 8008f5c:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8008f66:	ee76 7a67 	vsub.f32	s15, s12, s15
 8008f6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008f6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	edc3 7a02 	vstr	s15, [r3, #8]
    this->az = this->az * k_imu + (1 - k_imu) * (imu660ra_acc_transition(imu660ra_acc_z) - az_offset);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	ed93 7a03 	vldr	s14, [r3, #12]
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8008f84:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8008f8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f92:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8008f96:	4b4b      	ldr	r3, [pc, #300]	@ (80090c4 <_ZN3IMU8get_dataEv+0x1f8>)
 8008f98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008f9c:	ee07 3a90 	vmov	s15, r3
 8008fa0:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8008fa4:	4b45      	ldr	r3, [pc, #276]	@ (80090bc <_ZN3IMU8get_dataEv+0x1f0>)
 8008fa6:	edd3 7a00 	vldr	s15, [r3]
 8008faa:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8008fb4:	ee76 7a67 	vsub.f32	s15, s12, s15
 8008fb8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008fbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	edc3 7a03 	vstr	s15, [r3, #12]
    this->wx = this->wx * k_imu + (1 - k_imu) * (imu660ra_gyro_transition(imu660ra_gyro_x) - wx_offset);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	ed93 7a04 	vldr	s14, [r3, #16]
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8008fd2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8008fdc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008fe0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8008fe4:	4b38      	ldr	r3, [pc, #224]	@ (80090c8 <_ZN3IMU8get_dataEv+0x1fc>)
 8008fe6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008fea:	ee07 3a90 	vmov	s15, r3
 8008fee:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8008ff2:	4b32      	ldr	r3, [pc, #200]	@ (80090bc <_ZN3IMU8get_dataEv+0x1f0>)
 8008ff4:	edd3 7a01 	vldr	s15, [r3, #4]
 8008ff8:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8009002:	ee76 7a67 	vsub.f32	s15, s12, s15
 8009006:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800900a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	edc3 7a04 	vstr	s15, [r3, #16]
    this->wy = this->wy * k_imu + (1 - k_imu) * (imu660ra_gyro_transition(imu660ra_gyro_y) - wy_offset);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	ed93 7a05 	vldr	s14, [r3, #20]
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8009020:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800902a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800902e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8009032:	4b26      	ldr	r3, [pc, #152]	@ (80090cc <_ZN3IMU8get_dataEv+0x200>)
 8009034:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009038:	ee07 3a90 	vmov	s15, r3
 800903c:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8009040:	4b1e      	ldr	r3, [pc, #120]	@ (80090bc <_ZN3IMU8get_dataEv+0x1f0>)
 8009042:	edd3 7a01 	vldr	s15, [r3, #4]
 8009046:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8009050:	ee76 7a67 	vsub.f32	s15, s12, s15
 8009054:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009058:	ee77 7a27 	vadd.f32	s15, s14, s15
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	edc3 7a05 	vstr	s15, [r3, #20]
    this->wz = this->wz * k_imu + (1 - k_imu) * (imu660ra_gyro_transition(imu660ra_gyro_z) - wz_offset);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	ed93 7a06 	vldr	s14, [r3, #24]
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800906e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8009078:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800907c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8009080:	4b13      	ldr	r3, [pc, #76]	@ (80090d0 <_ZN3IMU8get_dataEv+0x204>)
 8009082:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009086:	ee07 3a90 	vmov	s15, r3
 800908a:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 800908e:	4b0b      	ldr	r3, [pc, #44]	@ (80090bc <_ZN3IMU8get_dataEv+0x1f0>)
 8009090:	edd3 7a01 	vldr	s15, [r3, #4]
 8009094:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800909e:	ee76 7a67 	vsub.f32	s15, s12, s15
 80090a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80090a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	edc3 7a06 	vstr	s15, [r3, #24]
}
 80090b0:	bf00      	nop
 80090b2:	3708      	adds	r7, #8
 80090b4:	46bd      	mov	sp, r7
 80090b6:	bd80      	pop	{r7, pc}
 80090b8:	20000842 	.word	0x20000842
 80090bc:	20000210 	.word	0x20000210
 80090c0:	20000844 	.word	0x20000844
 80090c4:	20000846 	.word	0x20000846
 80090c8:	2000083c 	.word	0x2000083c
 80090cc:	2000083e 	.word	0x2000083e
 80090d0:	20000840 	.word	0x20000840

080090d4 <_ZN3IMU4initEv>:
#define IMU_CALIBRATE_N 1000
void IMU::init() {
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b08a      	sub	sp, #40	@ 0x28
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
    if(imu660ra_init()) this->state = IMU_ERR;
 80090dc:	f001 f98e 	bl	800a3fc <imu660ra_init>
 80090e0:	4603      	mov	r3, r0
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	bf14      	ite	ne
 80090e6:	2301      	movne	r3, #1
 80090e8:	2300      	moveq	r3, #0
 80090ea:	b2db      	uxtb	r3, r3
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d003      	beq.n	80090f8 <_ZN3IMU4initEv+0x24>
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2202      	movs	r2, #2
 80090f4:	701a      	strb	r2, [r3, #0]
 80090f6:	e002      	b.n	80090fe <_ZN3IMU4initEv+0x2a>
    else this->state = IMU_CALIBRATE;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2203      	movs	r2, #3
 80090fc:	701a      	strb	r2, [r3, #0]

    HAL_Delay(10);
 80090fe:	200a      	movs	r0, #10
 8009100:	f7f9 fd4a 	bl	8002b98 <HAL_Delay>
    if(this->state == IMU_CALIBRATE){
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	781b      	ldrb	r3, [r3, #0]
 8009108:	2b03      	cmp	r3, #3
 800910a:	f040 8091 	bne.w	8009230 <_ZN3IMU4initEv+0x15c>
        //calibrate
        float ax_mean = 0, ay_mean = 0, az_mean = 0, wx_mean = 0, wy_mean = 0, wz_mean = 0;
 800910e:	f04f 0300 	mov.w	r3, #0
 8009112:	627b      	str	r3, [r7, #36]	@ 0x24
 8009114:	f04f 0300 	mov.w	r3, #0
 8009118:	623b      	str	r3, [r7, #32]
 800911a:	f04f 0300 	mov.w	r3, #0
 800911e:	61fb      	str	r3, [r7, #28]
 8009120:	f04f 0300 	mov.w	r3, #0
 8009124:	61bb      	str	r3, [r7, #24]
 8009126:	f04f 0300 	mov.w	r3, #0
 800912a:	617b      	str	r3, [r7, #20]
 800912c:	f04f 0300 	mov.w	r3, #0
 8009130:	613b      	str	r3, [r7, #16]
        for(int i = 0; i < IMU_CALIBRATE_N; i++){
 8009132:	2300      	movs	r3, #0
 8009134:	60fb      	str	r3, [r7, #12]
 8009136:	e03e      	b.n	80091b6 <_ZN3IMU4initEv+0xe2>
           get_data();
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	f7ff fec7 	bl	8008ecc <_ZN3IMU8get_dataEv>
           ax_mean += ax;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	edd3 7a01 	vldr	s15, [r3, #4]
 8009144:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8009148:	ee77 7a27 	vadd.f32	s15, s14, s15
 800914c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
           ay_mean += ay;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	edd3 7a02 	vldr	s15, [r3, #8]
 8009156:	ed97 7a08 	vldr	s14, [r7, #32]
 800915a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800915e:	edc7 7a08 	vstr	s15, [r7, #32]
           az_mean += az;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	edd3 7a03 	vldr	s15, [r3, #12]
 8009168:	ed97 7a07 	vldr	s14, [r7, #28]
 800916c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009170:	edc7 7a07 	vstr	s15, [r7, #28]
           wx_mean += wx;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	edd3 7a04 	vldr	s15, [r3, #16]
 800917a:	ed97 7a06 	vldr	s14, [r7, #24]
 800917e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009182:	edc7 7a06 	vstr	s15, [r7, #24]
           wy_mean += wy;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	edd3 7a05 	vldr	s15, [r3, #20]
 800918c:	ed97 7a05 	vldr	s14, [r7, #20]
 8009190:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009194:	edc7 7a05 	vstr	s15, [r7, #20]
           wz_mean += wz;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	edd3 7a06 	vldr	s15, [r3, #24]
 800919e:	ed97 7a04 	vldr	s14, [r7, #16]
 80091a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80091a6:	edc7 7a04 	vstr	s15, [r7, #16]
           HAL_Delay(1);
 80091aa:	2001      	movs	r0, #1
 80091ac:	f7f9 fcf4 	bl	8002b98 <HAL_Delay>
        for(int i = 0; i < IMU_CALIBRATE_N; i++){
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	3301      	adds	r3, #1
 80091b4:	60fb      	str	r3, [r7, #12]
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80091bc:	dbbc      	blt.n	8009138 <_ZN3IMU4initEv+0x64>
        }
        //倾斜校正

        ax_offset = ax_mean / IMU_CALIBRATE_N;
 80091be:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80091c2:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 8009238 <_ZN3IMU4initEv+0x164>
 80091c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
        ay_offset = ay_mean / IMU_CALIBRATE_N;
 80091d0:	ed97 7a08 	vldr	s14, [r7, #32]
 80091d4:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8009238 <_ZN3IMU4initEv+0x164>
 80091d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
        az_offset = az_mean / IMU_CALIBRATE_N;
 80091e2:	ed97 7a07 	vldr	s14, [r7, #28]
 80091e6:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8009238 <_ZN3IMU4initEv+0x164>
 80091ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
        wx_offset = wx_mean / IMU_CALIBRATE_N;
 80091f4:	ed97 7a06 	vldr	s14, [r7, #24]
 80091f8:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8009238 <_ZN3IMU4initEv+0x164>
 80091fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
        wy_offset = wy_mean / IMU_CALIBRATE_N;
 8009206:	ed97 7a05 	vldr	s14, [r7, #20]
 800920a:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8009238 <_ZN3IMU4initEv+0x164>
 800920e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
        wz_offset = wz_mean / IMU_CALIBRATE_N;
 8009218:	ed97 7a04 	vldr	s14, [r7, #16]
 800921c:	eddf 6a06 	vldr	s13, [pc, #24]	@ 8009238 <_ZN3IMU4initEv+0x164>
 8009220:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
        state = IMU_RUN;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2201      	movs	r2, #1
 800922e:	701a      	strb	r2, [r3, #0]
    }
}
 8009230:	bf00      	nop
 8009232:	3728      	adds	r7, #40	@ 0x28
 8009234:	46bd      	mov	sp, r7
 8009236:	bd80      	pop	{r7, pc}
 8009238:	447a0000 	.word	0x447a0000

0800923c <_ZN3IMU7HandlerEv>:

void IMU::Handler() {
 800923c:	b580      	push	{r7, lr}
 800923e:	b084      	sub	sp, #16
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
    if(this->state == IMU_RUN){
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	781b      	ldrb	r3, [r3, #0]
 8009248:	2b01      	cmp	r3, #1
 800924a:	d135      	bne.n	80092b8 <_ZN3IMU7HandlerEv+0x7c>
        get_data();
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	f7ff fe3d 	bl	8008ecc <_ZN3IMU8get_dataEv>

        float temp_cos, temp_sin;
        arm_sin_cos_f32(correct_ang, &temp_sin, &temp_cos);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	edd3 7a07 	vldr	s15, [r3, #28]
 8009258:	f107 020c 	add.w	r2, r7, #12
 800925c:	f107 0308 	add.w	r3, r7, #8
 8009260:	4611      	mov	r1, r2
 8009262:	4618      	mov	r0, r3
 8009264:	eeb0 0a67 	vmov.f32	s0, s15
 8009268:	f001 fc14 	bl	800aa94 <arm_sin_cos_f32>
        ax_correct = ax * temp_cos - ay * temp_sin;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	ed93 7a01 	vldr	s14, [r3, #4]
 8009272:	edd7 7a03 	vldr	s15, [r7, #12]
 8009276:	ee27 7a27 	vmul.f32	s14, s14, s15
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	edd3 6a02 	vldr	s13, [r3, #8]
 8009280:	edd7 7a02 	vldr	s15, [r7, #8]
 8009284:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009288:	ee77 7a67 	vsub.f32	s15, s14, s15
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	edc3 7a08 	vstr	s15, [r3, #32]
        ay_correct = ay * temp_cos + ax * temp_sin;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	ed93 7a02 	vldr	s14, [r3, #8]
 8009298:	edd7 7a03 	vldr	s15, [r7, #12]
 800929c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	edd3 6a01 	vldr	s13, [r3, #4]
 80092a6:	edd7 7a02 	vldr	s15, [r7, #8]
 80092aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80092ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    }
}
 80092b8:	bf00      	nop
 80092ba:	3710      	adds	r7, #16
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}

080092c0 <_ZN9N20_Motor7HandlerEv>:
  ******************************************************************************
**/

#include "N20_Motor.h"

void N20_Motor::Handler() {
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b082      	sub	sp, #8
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
    measure_parameter();
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f000 f809 	bl	80092e0 <_ZN9N20_Motor17measure_parameterEv>
    output_intensity();
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f000 f900 	bl	80094d4 <_ZN9N20_Motor16output_intensityEv>
}
 80092d4:	bf00      	nop
 80092d6:	3708      	adds	r7, #8
 80092d8:	46bd      	mov	sp, r7
 80092da:	bd80      	pop	{r7, pc}
 80092dc:	0000      	movs	r0, r0
	...

080092e0 <_ZN9N20_Motor17measure_parameterEv>:

void N20_Motor::measure_parameter() {
 80092e0:	b5b0      	push	{r4, r5, r7, lr}
 80092e2:	b084      	sub	sp, #16
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
    float inc = (float)encoder->pulse / this->reduction_rate * 360;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	68db      	ldr	r3, [r3, #12]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	ee07 3a90 	vmov	s15, r3
 80092f2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	ed93 7a04 	vldr	s14, [r3, #16]
 80092fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009300:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8009438 <_ZN9N20_Motor17measure_parameterEv+0x158>
 8009304:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009308:	edc7 7a03 	vstr	s15, [r7, #12]
    inc_pulse = encoder->pulse;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	68db      	ldr	r3, [r3, #12]
 8009310:	681a      	ldr	r2, [r3, #0]
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	629a      	str	r2, [r3, #40]	@ 0x28
    encoder->pulse = 0;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	68db      	ldr	r3, [r3, #12]
 800931a:	2200      	movs	r2, #0
 800931c:	601a      	str	r2, [r3, #0]
    this->v = inc / 180 * M_PI * MAIN_LOOP_FREQ * radius;
 800931e:	edd7 7a03 	vldr	s15, [r7, #12]
 8009322:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 800943c <_ZN9N20_Motor17measure_parameterEv+0x15c>
 8009326:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800932a:	ee16 0a90 	vmov	r0, s13
 800932e:	f7f7 f8af 	bl	8000490 <__aeabi_f2d>
 8009332:	a33f      	add	r3, pc, #252	@ (adr r3, 8009430 <_ZN9N20_Motor17measure_parameterEv+0x150>)
 8009334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009338:	f7f7 f902 	bl	8000540 <__aeabi_dmul>
 800933c:	4602      	mov	r2, r0
 800933e:	460b      	mov	r3, r1
 8009340:	4610      	mov	r0, r2
 8009342:	4619      	mov	r1, r3
 8009344:	f04f 0200 	mov.w	r2, #0
 8009348:	4b3d      	ldr	r3, [pc, #244]	@ (8009440 <_ZN9N20_Motor17measure_parameterEv+0x160>)
 800934a:	f7f7 f8f9 	bl	8000540 <__aeabi_dmul>
 800934e:	4602      	mov	r2, r0
 8009350:	460b      	mov	r3, r1
 8009352:	4614      	mov	r4, r2
 8009354:	461d      	mov	r5, r3
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	695b      	ldr	r3, [r3, #20]
 800935a:	4618      	mov	r0, r3
 800935c:	f7f7 f898 	bl	8000490 <__aeabi_f2d>
 8009360:	4602      	mov	r2, r0
 8009362:	460b      	mov	r3, r1
 8009364:	4620      	mov	r0, r4
 8009366:	4629      	mov	r1, r5
 8009368:	f7f7 f8ea 	bl	8000540 <__aeabi_dmul>
 800936c:	4602      	mov	r2, r0
 800936e:	460b      	mov	r3, r1
 8009370:	4610      	mov	r0, r2
 8009372:	4619      	mov	r1, r3
 8009374:	f7f7 fba6 	bl	8000ac4 <__aeabi_d2f>
 8009378:	4602      	mov	r2, r0
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	609a      	str	r2, [r3, #8]
    this->ang += inc;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	ed93 7a01 	vldr	s14, [r3, #4]
 8009384:	edd7 7a03 	vldr	s15, [r7, #12]
 8009388:	ee77 7a27 	vadd.f32	s15, s14, s15
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	edc3 7a01 	vstr	s15, [r3, #4]
    if(this->ang >= 360){
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	edd3 7a01 	vldr	s15, [r3, #4]
 8009398:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8009438 <_ZN9N20_Motor17measure_parameterEv+0x158>
 800939c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80093a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093a4:	db1b      	blt.n	80093de <_ZN9N20_Motor17measure_parameterEv+0xfe>
        this->ang -= (int)(this->ang / 360) * 360;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	ed93 7a01 	vldr	s14, [r3, #4]
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	edd3 6a01 	vldr	s13, [r3, #4]
 80093b2:	ed9f 6a21 	vldr	s12, [pc, #132]	@ 8009438 <_ZN9N20_Motor17measure_parameterEv+0x158>
 80093b6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80093ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80093be:	ee17 2a90 	vmov	r2, s15
 80093c2:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 80093c6:	fb02 f303 	mul.w	r3, r2, r3
 80093ca:	ee07 3a90 	vmov	s15, r3
 80093ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80093d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	edc3 7a01 	vstr	s15, [r3, #4]
    }else if(this->ang < 0){
        this->ang -= (int)(this->ang / 360) * 360 - 360;
    }
}
 80093dc:	e024      	b.n	8009428 <_ZN9N20_Motor17measure_parameterEv+0x148>
    }else if(this->ang < 0){
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	edd3 7a01 	vldr	s15, [r3, #4]
 80093e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80093e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093ec:	d400      	bmi.n	80093f0 <_ZN9N20_Motor17measure_parameterEv+0x110>
}
 80093ee:	e01b      	b.n	8009428 <_ZN9N20_Motor17measure_parameterEv+0x148>
        this->ang -= (int)(this->ang / 360) * 360 - 360;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	ed93 7a01 	vldr	s14, [r3, #4]
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	edd3 6a01 	vldr	s13, [r3, #4]
 80093fc:	ed9f 6a0e 	vldr	s12, [pc, #56]	@ 8009438 <_ZN9N20_Motor17measure_parameterEv+0x158>
 8009400:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8009404:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009408:	ee17 3a90 	vmov	r3, s15
 800940c:	3b01      	subs	r3, #1
 800940e:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8009412:	fb02 f303 	mul.w	r3, r2, r3
 8009416:	ee07 3a90 	vmov	s15, r3
 800941a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800941e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8009428:	bf00      	nop
 800942a:	3710      	adds	r7, #16
 800942c:	46bd      	mov	sp, r7
 800942e:	bdb0      	pop	{r4, r5, r7, pc}
 8009430:	54442d18 	.word	0x54442d18
 8009434:	400921fb 	.word	0x400921fb
 8009438:	43b40000 	.word	0x43b40000
 800943c:	43340000 	.word	0x43340000
 8009440:	408f4000 	.word	0x408f4000

08009444 <_ZN9N20_Motor12pwm_set_dutyEmt>:

#define PWM_DUTY_MAX 10000
void N20_Motor::pwm_set_duty(uint32_t channel, uint16_t duty){ //0-10000 TODO cube配置
 8009444:	b480      	push	{r7}
 8009446:	b085      	sub	sp, #20
 8009448:	af00      	add	r7, sp, #0
 800944a:	60f8      	str	r0, [r7, #12]
 800944c:	60b9      	str	r1, [r7, #8]
 800944e:	4613      	mov	r3, r2
 8009450:	80fb      	strh	r3, [r7, #6]
    switch (channel) {
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	2b0c      	cmp	r3, #12
 8009456:	d835      	bhi.n	80094c4 <_ZN9N20_Motor12pwm_set_dutyEmt+0x80>
 8009458:	a201      	add	r2, pc, #4	@ (adr r2, 8009460 <_ZN9N20_Motor12pwm_set_dutyEmt+0x1c>)
 800945a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800945e:	bf00      	nop
 8009460:	08009495 	.word	0x08009495
 8009464:	080094c5 	.word	0x080094c5
 8009468:	080094c5 	.word	0x080094c5
 800946c:	080094c5 	.word	0x080094c5
 8009470:	080094a1 	.word	0x080094a1
 8009474:	080094c5 	.word	0x080094c5
 8009478:	080094c5 	.word	0x080094c5
 800947c:	080094c5 	.word	0x080094c5
 8009480:	080094ad 	.word	0x080094ad
 8009484:	080094c5 	.word	0x080094c5
 8009488:	080094c5 	.word	0x080094c5
 800948c:	080094c5 	.word	0x080094c5
 8009490:	080094b9 	.word	0x080094b9
        case TIM_CHANNEL_1: htim->Instance->CCR1 = duty; break;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	69db      	ldr	r3, [r3, #28]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	88fa      	ldrh	r2, [r7, #6]
 800949c:	635a      	str	r2, [r3, #52]	@ 0x34
 800949e:	e012      	b.n	80094c6 <_ZN9N20_Motor12pwm_set_dutyEmt+0x82>
        case TIM_CHANNEL_2: htim->Instance->CCR2 = duty; break;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	69db      	ldr	r3, [r3, #28]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	88fa      	ldrh	r2, [r7, #6]
 80094a8:	639a      	str	r2, [r3, #56]	@ 0x38
 80094aa:	e00c      	b.n	80094c6 <_ZN9N20_Motor12pwm_set_dutyEmt+0x82>
        case TIM_CHANNEL_3: htim->Instance->CCR3 = duty; break;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	69db      	ldr	r3, [r3, #28]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	88fa      	ldrh	r2, [r7, #6]
 80094b4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80094b6:	e006      	b.n	80094c6 <_ZN9N20_Motor12pwm_set_dutyEmt+0x82>
        case TIM_CHANNEL_4: htim->Instance->CCR4 = duty; break;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	69db      	ldr	r3, [r3, #28]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	88fa      	ldrh	r2, [r7, #6]
 80094c0:	641a      	str	r2, [r3, #64]	@ 0x40
 80094c2:	e000      	b.n	80094c6 <_ZN9N20_Motor12pwm_set_dutyEmt+0x82>
        default: break;
 80094c4:	bf00      	nop
    }
}
 80094c6:	bf00      	nop
 80094c8:	3714      	adds	r7, #20
 80094ca:	46bd      	mov	sp, r7
 80094cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d0:	4770      	bx	lr
 80094d2:	bf00      	nop

080094d4 <_ZN9N20_Motor16output_intensityEv>:

void N20_Motor::output_intensity() {
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b082      	sub	sp, #8
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
    INRANGE(this->intensity, PWM_DUTY_MAX);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80094e2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80094e6:	4293      	cmp	r3, r2
 80094e8:	dd04      	ble.n	80094f4 <_ZN9N20_Motor16output_intensityEv+0x20>
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	f242 7210 	movw	r2, #10000	@ 0x2710
 80094f0:	805a      	strh	r2, [r3, #2]
 80094f2:	e009      	b.n	8009508 <_ZN9N20_Motor16output_intensityEv+0x34>
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80094fa:	4a56      	ldr	r2, [pc, #344]	@ (8009654 <_ZN9N20_Motor16output_intensityEv+0x180>)
 80094fc:	4293      	cmp	r3, r2
 80094fe:	da03      	bge.n	8009508 <_ZN9N20_Motor16output_intensityEv+0x34>
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f64d 02f0 	movw	r2, #55536	@ 0xd8f0
 8009506:	805a      	strh	r2, [r3, #2]
    switch(this->state){
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	781b      	ldrb	r3, [r3, #0]
 800950c:	2b02      	cmp	r3, #2
 800950e:	f000 808b 	beq.w	8009628 <_ZN9N20_Motor16output_intensityEv+0x154>
 8009512:	2b02      	cmp	r3, #2
 8009514:	f300 809a 	bgt.w	800964c <_ZN9N20_Motor16output_intensityEv+0x178>
 8009518:	2b00      	cmp	r3, #0
 800951a:	d002      	beq.n	8009522 <_ZN9N20_Motor16output_intensityEv+0x4e>
 800951c:	2b01      	cmp	r3, #1
 800951e:	d014      	beq.n	800954a <_ZN9N20_Motor16output_intensityEv+0x76>
            //gpio_set_level(this->IN2_pin, 1);
            pwm_set_duty(pwm_channel1, 0);
            pwm_set_duty(pwm_channel2, 0);
        }break;
    }
}
 8009520:	e094      	b.n	800964c <_ZN9N20_Motor16output_intensityEv+0x178>
            this->intensity = 0;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2200      	movs	r2, #0
 8009526:	805a      	strh	r2, [r3, #2]
            pwm_set_duty(pwm_channel1, PWM_DUTY_MAX - 1);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	6a1b      	ldr	r3, [r3, #32]
 800952c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8009530:	4619      	mov	r1, r3
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	f7ff ff86 	bl	8009444 <_ZN9N20_Motor12pwm_set_dutyEmt>
            pwm_set_duty(pwm_channel2, PWM_DUTY_MAX - 1);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800953c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8009540:	4619      	mov	r1, r3
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	f7ff ff7e 	bl	8009444 <_ZN9N20_Motor12pwm_set_dutyEmt>
        }break;
 8009548:	e080      	b.n	800964c <_ZN9N20_Motor16output_intensityEv+0x178>
            if(this->intensity < 0){
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009550:	2b00      	cmp	r3, #0
 8009552:	da34      	bge.n	80095be <_ZN9N20_Motor16output_intensityEv+0xea>
                pwm_set_duty(pwm_channel1, PWM_DUTY_MAX - (int)MAP(ABS(this->intensity), 0, PWM_DUTY_MAX, this->deadzone, PWM_DUTY_MAX));
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	6a19      	ldr	r1, [r3, #32]
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800955e:	2b00      	cmp	r3, #0
 8009560:	bfb8      	it	lt
 8009562:	425b      	neglt	r3, r3
 8009564:	b29b      	uxth	r3, r3
 8009566:	ee07 3a90 	vmov	s15, r3
 800956a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800956e:	eddf 6a3a 	vldr	s13, [pc, #232]	@ 8009658 <_ZN9N20_Motor16output_intensityEv+0x184>
 8009572:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	edd3 7a06 	vldr	s15, [r3, #24]
 800957c:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8009658 <_ZN9N20_Motor16output_intensityEv+0x184>
 8009580:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8009584:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	edd3 7a06 	vldr	s15, [r3, #24]
 800958e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009592:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009596:	ee17 3a90 	vmov	r3, s15
 800959a:	b29b      	uxth	r3, r3
 800959c:	f5c3 531c 	rsb	r3, r3, #9984	@ 0x2700
 80095a0:	3310      	adds	r3, #16
 80095a2:	b29b      	uxth	r3, r3
 80095a4:	461a      	mov	r2, r3
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f7ff ff4c 	bl	8009444 <_ZN9N20_Motor12pwm_set_dutyEmt>
                pwm_set_duty(pwm_channel2, PWM_DUTY_MAX - 1);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095b0:	f242 720f 	movw	r2, #9999	@ 0x270f
 80095b4:	4619      	mov	r1, r3
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	f7ff ff44 	bl	8009444 <_ZN9N20_Motor12pwm_set_dutyEmt>
        }break;
 80095bc:	e046      	b.n	800964c <_ZN9N20_Motor16output_intensityEv+0x178>
                pwm_set_duty(pwm_channel1, PWM_DUTY_MAX - 1);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6a1b      	ldr	r3, [r3, #32]
 80095c2:	f242 720f 	movw	r2, #9999	@ 0x270f
 80095c6:	4619      	mov	r1, r3
 80095c8:	6878      	ldr	r0, [r7, #4]
 80095ca:	f7ff ff3b 	bl	8009444 <_ZN9N20_Motor12pwm_set_dutyEmt>
                pwm_set_duty(pwm_channel2, PWM_DUTY_MAX - (int)MAP(ABS(this->intensity), 0, PWM_DUTY_MAX, this->deadzone, PWM_DUTY_MAX));
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	bfb8      	it	lt
 80095dc:	425b      	neglt	r3, r3
 80095de:	b29b      	uxth	r3, r3
 80095e0:	ee07 3a90 	vmov	s15, r3
 80095e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80095e8:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 8009658 <_ZN9N20_Motor16output_intensityEv+0x184>
 80095ec:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	edd3 7a06 	vldr	s15, [r3, #24]
 80095f6:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8009658 <_ZN9N20_Motor16output_intensityEv+0x184>
 80095fa:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80095fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	edd3 7a06 	vldr	s15, [r3, #24]
 8009608:	ee77 7a27 	vadd.f32	s15, s14, s15
 800960c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009610:	ee17 3a90 	vmov	r3, s15
 8009614:	b29b      	uxth	r3, r3
 8009616:	f5c3 531c 	rsb	r3, r3, #9984	@ 0x2700
 800961a:	3310      	adds	r3, #16
 800961c:	b29b      	uxth	r3, r3
 800961e:	461a      	mov	r2, r3
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	f7ff ff0f 	bl	8009444 <_ZN9N20_Motor12pwm_set_dutyEmt>
        }break;
 8009626:	e011      	b.n	800964c <_ZN9N20_Motor16output_intensityEv+0x178>
            this->intensity = 0;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2200      	movs	r2, #0
 800962c:	805a      	strh	r2, [r3, #2]
            pwm_set_duty(pwm_channel1, 0);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	6a1b      	ldr	r3, [r3, #32]
 8009632:	2200      	movs	r2, #0
 8009634:	4619      	mov	r1, r3
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f7ff ff04 	bl	8009444 <_ZN9N20_Motor12pwm_set_dutyEmt>
            pwm_set_duty(pwm_channel2, 0);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009640:	2200      	movs	r2, #0
 8009642:	4619      	mov	r1, r3
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f7ff fefd 	bl	8009444 <_ZN9N20_Motor12pwm_set_dutyEmt>
        }break;
 800964a:	bf00      	nop
}
 800964c:	bf00      	nop
 800964e:	3708      	adds	r7, #8
 8009650:	46bd      	mov	sp, r7
 8009652:	bd80      	pop	{r7, pc}
 8009654:	ffffd8f0 	.word	0xffffd8f0
 8009658:	461c4000 	.word	0x461c4000

0800965c <_ZN5MotorC1Ev>:
    MOTOR_STOP = 0,
    MOTOR_RUN,
    MOTOR_RELEASE
} motor_state;

class Motor{
 800965c:	b480      	push	{r7}
 800965e:	b083      	sub	sp, #12
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2200      	movs	r2, #0
 8009668:	701a      	strb	r2, [r3, #0]
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2200      	movs	r2, #0
 800966e:	805a      	strh	r2, [r3, #2]
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	f04f 0200 	mov.w	r2, #0
 8009676:	605a      	str	r2, [r3, #4]
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f04f 0200 	mov.w	r2, #0
 800967e:	609a      	str	r2, [r3, #8]
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	4618      	mov	r0, r3
 8009684:	370c      	adds	r7, #12
 8009686:	46bd      	mov	sp, r7
 8009688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968c:	4770      	bx	lr

0800968e <_ZN9N20_MotorC1EP17TIM_HandleTypeDefmmP7Encoderfff>:

N20_Motor::N20_Motor(TIM_HandleTypeDef *htim, uint32_t pwm_channel1, uint32_t pwm_channel2, Encoder *encoder,
 800968e:	b580      	push	{r7, lr}
 8009690:	b088      	sub	sp, #32
 8009692:	af00      	add	r7, sp, #0
 8009694:	61f8      	str	r0, [r7, #28]
 8009696:	61b9      	str	r1, [r7, #24]
 8009698:	617a      	str	r2, [r7, #20]
 800969a:	613b      	str	r3, [r7, #16]
 800969c:	ed87 0a03 	vstr	s0, [r7, #12]
 80096a0:	edc7 0a02 	vstr	s1, [r7, #8]
 80096a4:	ed87 1a01 	vstr	s2, [r7, #4]
                     float reduction_rate, float radius, float deadzone) {
 80096a8:	69fb      	ldr	r3, [r7, #28]
 80096aa:	4618      	mov	r0, r3
 80096ac:	f7ff ffd6 	bl	800965c <_ZN5MotorC1Ev>
 80096b0:	69fb      	ldr	r3, [r7, #28]
 80096b2:	2200      	movs	r2, #0
 80096b4:	629a      	str	r2, [r3, #40]	@ 0x28
    this->htim = htim;
 80096b6:	69fb      	ldr	r3, [r7, #28]
 80096b8:	69ba      	ldr	r2, [r7, #24]
 80096ba:	61da      	str	r2, [r3, #28]
    this->pwm_channel1 = pwm_channel1;
 80096bc:	69fb      	ldr	r3, [r7, #28]
 80096be:	697a      	ldr	r2, [r7, #20]
 80096c0:	621a      	str	r2, [r3, #32]
    this->pwm_channel2 = pwm_channel2;
 80096c2:	69fb      	ldr	r3, [r7, #28]
 80096c4:	693a      	ldr	r2, [r7, #16]
 80096c6:	625a      	str	r2, [r3, #36]	@ 0x24
    this->encoder = encoder;
 80096c8:	69fb      	ldr	r3, [r7, #28]
 80096ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80096cc:	60da      	str	r2, [r3, #12]
    this->reduction_rate = reduction_rate;
 80096ce:	69fb      	ldr	r3, [r7, #28]
 80096d0:	68fa      	ldr	r2, [r7, #12]
 80096d2:	611a      	str	r2, [r3, #16]
    this->radius = radius;
 80096d4:	69fb      	ldr	r3, [r7, #28]
 80096d6:	68ba      	ldr	r2, [r7, #8]
 80096d8:	615a      	str	r2, [r3, #20]
    this->deadzone = deadzone;
 80096da:	69fb      	ldr	r3, [r7, #28]
 80096dc:	687a      	ldr	r2, [r7, #4]
 80096de:	619a      	str	r2, [r3, #24]

}
 80096e0:	69fb      	ldr	r3, [r7, #28]
 80096e2:	4618      	mov	r0, r3
 80096e4:	3720      	adds	r7, #32
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bd80      	pop	{r7, pc}

080096ea <_ZN9N20_Motor4initEv>:

void N20_Motor::init() {
 80096ea:	b580      	push	{r7, lr}
 80096ec:	b082      	sub	sp, #8
 80096ee:	af00      	add	r7, sp, #0
 80096f0:	6078      	str	r0, [r7, #4]
    HAL_TIM_PWM_Start(htim, pwm_channel1);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	69da      	ldr	r2, [r3, #28]
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	6a1b      	ldr	r3, [r3, #32]
 80096fa:	4619      	mov	r1, r3
 80096fc:	4610      	mov	r0, r2
 80096fe:	f7fc fc93 	bl	8006028 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(htim, pwm_channel2);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	69da      	ldr	r2, [r3, #28]
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800970a:	4619      	mov	r1, r3
 800970c:	4610      	mov	r0, r2
 800970e:	f7fc fc8b 	bl	8006028 <HAL_TIM_PWM_Start>
}
 8009712:	bf00      	nop
 8009714:	3708      	adds	r7, #8
 8009716:	46bd      	mov	sp, r7
 8009718:	bd80      	pop	{r7, pc}

0800971a <_ZN3PID4calcEv>:
  ******************************************************************************
**/

#include "PID.h"

float PID::calc(){
 800971a:	b480      	push	{r7}
 800971c:	b085      	sub	sp, #20
 800971e:	af00      	add	r7, sp, #0
 8009720:	6078      	str	r0, [r7, #4]
    float err = this->target - *(this->feedback);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	ed93 7a00 	vldr	s14, [r3]
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	685b      	ldr	r3, [r3, #4]
 800972c:	edd3 7a00 	vldr	s15, [r3]
 8009730:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009734:	edc7 7a03 	vstr	s15, [r7, #12]
    this->component_d = (err - this->err) * this->kd;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	edd3 7a02 	vldr	s15, [r3, #8]
 800973e:	ed97 7a03 	vldr	s14, [r7, #12]
 8009742:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800974c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	edc3 7a05 	vstr	s15, [r3, #20]
    this->component_i +=  err * this->ki;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	ed93 7a04 	vldr	s14, [r3, #16]
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	edd3 6a08 	vldr	s13, [r3, #32]
 8009762:	edd7 7a03 	vldr	s15, [r7, #12]
 8009766:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800976a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	edc3 7a04 	vstr	s15, [r3, #16]
    this->component_p = err * this->kp;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	ed93 7a07 	vldr	s14, [r3, #28]
 800977a:	edd7 7a03 	vldr	s15, [r7, #12]
 800977e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	edc3 7a03 	vstr	s15, [r3, #12]
    INRANGE(this->component_p, this->component_p_max);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	ed93 7a03 	vldr	s14, [r3, #12]
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8009794:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800979c:	dd04      	ble.n	80097a8 <_ZN3PID4calcEv+0x8e>
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	60da      	str	r2, [r3, #12]
 80097a6:	e014      	b.n	80097d2 <_ZN3PID4calcEv+0xb8>
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	ed93 7a03 	vldr	s14, [r3, #12]
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80097b4:	eef1 7a67 	vneg.f32	s15, s15
 80097b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80097bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097c0:	d507      	bpl.n	80097d2 <_ZN3PID4calcEv+0xb8>
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80097c8:	eef1 7a67 	vneg.f32	s15, s15
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	edc3 7a03 	vstr	s15, [r3, #12]
    INRANGE(this->component_i, this->component_i_max);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	ed93 7a04 	vldr	s14, [r3, #16]
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80097de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80097e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097e6:	dd04      	ble.n	80097f2 <_ZN3PID4calcEv+0xd8>
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	611a      	str	r2, [r3, #16]
 80097f0:	e014      	b.n	800981c <_ZN3PID4calcEv+0x102>
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	ed93 7a04 	vldr	s14, [r3, #16]
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80097fe:	eef1 7a67 	vneg.f32	s15, s15
 8009802:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800980a:	d507      	bpl.n	800981c <_ZN3PID4calcEv+0x102>
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8009812:	eef1 7a67 	vneg.f32	s15, s15
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	edc3 7a04 	vstr	s15, [r3, #16]
    INRANGE(this->component_d, this->component_d_max);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	ed93 7a05 	vldr	s14, [r3, #20]
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8009828:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800982c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009830:	dd04      	ble.n	800983c <_ZN3PID4calcEv+0x122>
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	615a      	str	r2, [r3, #20]
 800983a:	e014      	b.n	8009866 <_ZN3PID4calcEv+0x14c>
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	ed93 7a05 	vldr	s14, [r3, #20]
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8009848:	eef1 7a67 	vneg.f32	s15, s15
 800984c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009854:	d507      	bpl.n	8009866 <_ZN3PID4calcEv+0x14c>
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800985c:	eef1 7a67 	vneg.f32	s15, s15
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	edc3 7a05 	vstr	s15, [r3, #20]
    this->err = err;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	68fa      	ldr	r2, [r7, #12]
 800986a:	609a      	str	r2, [r3, #8]
    this->output = this->component_p + this->component_i + this->component_d;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	ed93 7a03 	vldr	s14, [r3, #12]
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	edd3 7a04 	vldr	s15, [r3, #16]
 8009878:	ee37 7a27 	vadd.f32	s14, s14, s15
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	edd3 7a05 	vldr	s15, [r3, #20]
 8009882:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	edc3 7a06 	vstr	s15, [r3, #24]
    INRANGE(this->output, this->output_max);
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	ed93 7a06 	vldr	s14, [r3, #24]
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8009898:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800989c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098a0:	dd04      	ble.n	80098ac <_ZN3PID4calcEv+0x192>
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	619a      	str	r2, [r3, #24]
 80098aa:	e014      	b.n	80098d6 <_ZN3PID4calcEv+0x1bc>
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	ed93 7a06 	vldr	s14, [r3, #24]
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80098b8:	eef1 7a67 	vneg.f32	s15, s15
 80098bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80098c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098c4:	d507      	bpl.n	80098d6 <_ZN3PID4calcEv+0x1bc>
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80098cc:	eef1 7a67 	vneg.f32	s15, s15
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	edc3 7a06 	vstr	s15, [r3, #24]

    return this->output;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	699b      	ldr	r3, [r3, #24]
 80098da:	ee07 3a90 	vmov	s15, r3
}
 80098de:	eeb0 0a67 	vmov.f32	s0, s15
 80098e2:	3714      	adds	r7, #20
 80098e4:	46bd      	mov	sp, r7
 80098e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ea:	4770      	bx	lr

080098ec <_ZN3PIDC1Efffffff>:

PID::PID(float kp, float ki, float kd, float component_p_max, float component_i_max,
 80098ec:	b480      	push	{r7}
 80098ee:	b089      	sub	sp, #36	@ 0x24
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	61f8      	str	r0, [r7, #28]
 80098f4:	ed87 0a06 	vstr	s0, [r7, #24]
 80098f8:	edc7 0a05 	vstr	s1, [r7, #20]
 80098fc:	ed87 1a04 	vstr	s2, [r7, #16]
 8009900:	edc7 1a03 	vstr	s3, [r7, #12]
 8009904:	ed87 2a02 	vstr	s4, [r7, #8]
 8009908:	edc7 2a01 	vstr	s5, [r7, #4]
 800990c:	ed87 3a00 	vstr	s6, [r7]
         float component_d_max, float output_max) {
 8009910:	69fb      	ldr	r3, [r7, #28]
 8009912:	f04f 0200 	mov.w	r2, #0
 8009916:	601a      	str	r2, [r3, #0]
 8009918:	69fb      	ldr	r3, [r7, #28]
 800991a:	f04f 0200 	mov.w	r2, #0
 800991e:	609a      	str	r2, [r3, #8]
 8009920:	69fb      	ldr	r3, [r7, #28]
 8009922:	f04f 0200 	mov.w	r2, #0
 8009926:	60da      	str	r2, [r3, #12]
 8009928:	69fb      	ldr	r3, [r7, #28]
 800992a:	f04f 0200 	mov.w	r2, #0
 800992e:	611a      	str	r2, [r3, #16]
 8009930:	69fb      	ldr	r3, [r7, #28]
 8009932:	f04f 0200 	mov.w	r2, #0
 8009936:	615a      	str	r2, [r3, #20]
 8009938:	69fb      	ldr	r3, [r7, #28]
 800993a:	f04f 0200 	mov.w	r2, #0
 800993e:	619a      	str	r2, [r3, #24]
    this->kp = kp;
 8009940:	69fb      	ldr	r3, [r7, #28]
 8009942:	69ba      	ldr	r2, [r7, #24]
 8009944:	61da      	str	r2, [r3, #28]
    this->ki = ki;
 8009946:	69fb      	ldr	r3, [r7, #28]
 8009948:	697a      	ldr	r2, [r7, #20]
 800994a:	621a      	str	r2, [r3, #32]
    this->kd = kd;
 800994c:	69fb      	ldr	r3, [r7, #28]
 800994e:	693a      	ldr	r2, [r7, #16]
 8009950:	625a      	str	r2, [r3, #36]	@ 0x24
    this->component_p_max = component_p_max;
 8009952:	69fb      	ldr	r3, [r7, #28]
 8009954:	68fa      	ldr	r2, [r7, #12]
 8009956:	629a      	str	r2, [r3, #40]	@ 0x28
    this->component_i_max = component_i_max;
 8009958:	69fb      	ldr	r3, [r7, #28]
 800995a:	68ba      	ldr	r2, [r7, #8]
 800995c:	62da      	str	r2, [r3, #44]	@ 0x2c
    this->component_d_max = component_d_max;
 800995e:	69fb      	ldr	r3, [r7, #28]
 8009960:	687a      	ldr	r2, [r7, #4]
 8009962:	631a      	str	r2, [r3, #48]	@ 0x30
    this->output_max = output_max;
 8009964:	69fb      	ldr	r3, [r7, #28]
 8009966:	683a      	ldr	r2, [r7, #0]
 8009968:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800996a:	69fb      	ldr	r3, [r7, #28]
 800996c:	4618      	mov	r0, r3
 800996e:	3724      	adds	r7, #36	@ 0x24
 8009970:	46bd      	mov	sp, r7
 8009972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009976:	4770      	bx	lr

08009978 <_ZN6RemoteC1EP20__UART_HandleTypeDef>:
            }
        }
	}
}

Remote::Remote(UART_HandleTypeDef *huart) {
 8009978:	b480      	push	{r7}
 800997a:	b083      	sub	sp, #12
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
 8009980:	6039      	str	r1, [r7, #0]
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2200      	movs	r2, #0
 8009986:	701a      	strb	r2, [r3, #0]
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2200      	movs	r2, #0
 800998c:	f8a3 20ca 	strh.w	r2, [r3, #202]	@ 0xca
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2200      	movs	r2, #0
 8009994:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f04f 0200 	mov.w	r2, #0
 800999e:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	f04f 0200 	mov.w	r2, #0
 80099a8:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f04f 0200 	mov.w	r2, #0
 80099b2:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	f04f 0200 	mov.w	r2, #0
 80099bc:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    this->huart = huart;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	683a      	ldr	r2, [r7, #0]
 80099c4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
}
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	4618      	mov	r0, r3
 80099cc:	370c      	adds	r7, #12
 80099ce:	46bd      	mov	sp, r7
 80099d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d4:	4770      	bx	lr

080099d6 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 80099d6:	b480      	push	{r7}
 80099d8:	b083      	sub	sp, #12
 80099da:	af00      	add	r7, sp, #0
 80099dc:	ed87 0a01 	vstr	s0, [r7, #4]
 80099e0:	edd7 7a01 	vldr	s15, [r7, #4]
 80099e4:	eef0 7ae7 	vabs.f32	s15, s15
 80099e8:	eeb0 0a67 	vmov.f32	s0, s15
 80099ec:	370c      	adds	r7, #12
 80099ee:	46bd      	mov	sp, r7
 80099f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f4:	4770      	bx	lr
	...

080099f8 <_ZN8TrackingC1EP7ChassisP3CCDP3PIDP10Controller>:
						2641.63,2640.21,2637.08,2639.83,2630.44,2632.93,2631.94,2632.31,
						2629.85,2629.91,2624.66,2625.5,2620.12,2615.18,2612.95,2604.39,2589.61,2587.5,2584.95,
						2582.28,2553.78,2483.84,2428.47,2454.0,2465.4,2417.91,2374.55};
float max_ccd_norm = 2663.08;

Tracking::Tracking(Chassis* chassis, CCD* ccd,PID* tracking_PID,Controller* controller)
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b084      	sub	sp, #16
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	60f8      	str	r0, [r7, #12]
 8009a00:	60b9      	str	r1, [r7, #8]
 8009a02:	607a      	str	r2, [r7, #4]
 8009a04:	603b      	str	r3, [r7, #0]
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	4a17      	ldr	r2, [pc, #92]	@ (8009a68 <_ZN8TrackingC1EP7ChassisP3CCDP3PIDP10Controller+0x70>)
 8009a0a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	2200      	movs	r2, #0
 8009a12:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	2200      	movs	r2, #0
 8009a1a:	f883 22c0 	strb.w	r2, [r3, #704]	@ 0x2c0
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 8009a24:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8009a28:	2100      	movs	r1, #0
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f001 fa67 	bl	800aefe <memset>
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009a36:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8009a3a:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8009a3e:	2100      	movs	r1, #0
 8009a40:	4618      	mov	r0, r3
 8009a42:	f001 fa5c 	bl	800aefe <memset>
{
	this->chassis = chassis;
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	68ba      	ldr	r2, [r7, #8]
 8009a4a:	609a      	str	r2, [r3, #8]
	this->ccd = ccd;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	687a      	ldr	r2, [r7, #4]
 8009a50:	605a      	str	r2, [r3, #4]
	this->tracking_PID = tracking_PID;
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	683a      	ldr	r2, [r7, #0]
 8009a56:	601a      	str	r2, [r3, #0]
	this->controller = controller;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	69ba      	ldr	r2, [r7, #24]
 8009a5c:	60da      	str	r2, [r3, #12]
}
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	4618      	mov	r0, r3
 8009a62:	3710      	adds	r7, #16
 8009a64:	46bd      	mov	sp, r7
 8009a66:	bd80      	pop	{r7, pc}
 8009a68:	3dcccccd 	.word	0x3dcccccd

08009a6c <_ZN8Tracking4initEv>:

void Tracking::init()
{
 8009a6c:	b480      	push	{r7}
 8009a6e:	b083      	sub	sp, #12
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
	tracking_PID->target = 0;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	f04f 0200 	mov.w	r2, #0
 8009a7c:	601a      	str	r2, [r3, #0]
	tracking_PID->feedback = &input;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	687a      	ldr	r2, [r7, #4]
 8009a84:	f502 7229 	add.w	r2, r2, #676	@ 0x2a4
 8009a88:	605a      	str	r2, [r3, #4]
	last_x_line = 15.4/100;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	4a13      	ldr	r2, [pc, #76]	@ (8009adc <_ZN8Tracking4initEv+0x70>)
 8009a8e:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
	last_y_line = 0;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	f04f 0200 	mov.w	r2, #0
 8009a98:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
	last_dir = dir_filtered = 64;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	f04f 4285 	mov.w	r2, #1115684864	@ 0x42800000
 8009aa2:	f8c3 2290 	str.w	r2, [r3, #656]	@ 0x290
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	2240      	movs	r2, #64	@ 0x40
 8009aaa:	f8a3 229a 	strh.w	r2, [r3, #666]	@ 0x29a
	v = 0.08;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	4a0b      	ldr	r2, [pc, #44]	@ (8009ae0 <_ZN8Tracking4initEv+0x74>)
 8009ab2:	f8c3 22ac 	str.w	r2, [r3, #684]	@ 0x2ac
	controller->x_set = 0.154;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	68db      	ldr	r3, [r3, #12]
 8009aba:	4a08      	ldr	r2, [pc, #32]	@ (8009adc <_ZN8Tracking4initEv+0x70>)
 8009abc:	611a      	str	r2, [r3, #16]
	controller->y_set = 0.05;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	68db      	ldr	r3, [r3, #12]
 8009ac2:	4a08      	ldr	r2, [pc, #32]	@ (8009ae4 <_ZN8Tracking4initEv+0x78>)
 8009ac4:	615a      	str	r2, [r3, #20]
	state = 0;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2200      	movs	r2, #0
 8009aca:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
}
 8009ace:	bf00      	nop
 8009ad0:	370c      	adds	r7, #12
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad8:	4770      	bx	lr
 8009ada:	bf00      	nop
 8009adc:	3e1db22d 	.word	0x3e1db22d
 8009ae0:	3da3d70a 	.word	0x3da3d70a
 8009ae4:	3d4ccccd 	.word	0x3d4ccccd

08009ae8 <_ZN8Tracking7processEv>:
void Tracking::process()
{
 8009ae8:	b480      	push	{r7}
 8009aea:	b087      	sub	sp, #28
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
	// Normalization
	int i;
	for(i = 0; i < 128; ++i)
 8009af0:	2300      	movs	r3, #0
 8009af2:	617b      	str	r3, [r7, #20]
 8009af4:	e020      	b.n	8009b38 <_ZN8Tracking7processEv+0x50>
	{
		data_norm[i] = ccd->data[i]/ccd_norm[i]*max_ccd_norm;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	685a      	ldr	r2, [r3, #4]
 8009afa:	697b      	ldr	r3, [r7, #20]
 8009afc:	005b      	lsls	r3, r3, #1
 8009afe:	4413      	add	r3, r2
 8009b00:	889b      	ldrh	r3, [r3, #4]
 8009b02:	ee07 3a90 	vmov	s15, r3
 8009b06:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8009b0a:	4a98      	ldr	r2, [pc, #608]	@ (8009d6c <_ZN8Tracking7processEv+0x284>)
 8009b0c:	697b      	ldr	r3, [r7, #20]
 8009b0e:	009b      	lsls	r3, r3, #2
 8009b10:	4413      	add	r3, r2
 8009b12:	edd3 7a00 	vldr	s15, [r3]
 8009b16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b1a:	4b95      	ldr	r3, [pc, #596]	@ (8009d70 <_ZN8Tracking7processEv+0x288>)
 8009b1c:	edd3 7a00 	vldr	s15, [r3]
 8009b20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b24:	687a      	ldr	r2, [r7, #4]
 8009b26:	697b      	ldr	r3, [r7, #20]
 8009b28:	3304      	adds	r3, #4
 8009b2a:	009b      	lsls	r3, r3, #2
 8009b2c:	4413      	add	r3, r2
 8009b2e:	edc3 7a00 	vstr	s15, [r3]
	for(i = 0; i < 128; ++i)
 8009b32:	697b      	ldr	r3, [r7, #20]
 8009b34:	3301      	adds	r3, #1
 8009b36:	617b      	str	r3, [r7, #20]
 8009b38:	697b      	ldr	r3, [r7, #20]
 8009b3a:	2b7f      	cmp	r3, #127	@ 0x7f
 8009b3c:	dddb      	ble.n	8009af6 <_ZN8Tracking7processEv+0xe>
	}

	// Get the threshold
	float min_data = 3000;
 8009b3e:	4b8d      	ldr	r3, [pc, #564]	@ (8009d74 <_ZN8Tracking7processEv+0x28c>)
 8009b40:	613b      	str	r3, [r7, #16]
	float max_data = 0;
 8009b42:	f04f 0300 	mov.w	r3, #0
 8009b46:	60fb      	str	r3, [r7, #12]
	for(i = 0; i < 128; ++i)
 8009b48:	2300      	movs	r3, #0
 8009b4a:	617b      	str	r3, [r7, #20]
 8009b4c:	e02d      	b.n	8009baa <_ZN8Tracking7processEv+0xc2>
	{
		if(data_norm[i] > max_data)
 8009b4e:	687a      	ldr	r2, [r7, #4]
 8009b50:	697b      	ldr	r3, [r7, #20]
 8009b52:	3304      	adds	r3, #4
 8009b54:	009b      	lsls	r3, r3, #2
 8009b56:	4413      	add	r3, r2
 8009b58:	edd3 7a00 	vldr	s15, [r3]
 8009b5c:	ed97 7a03 	vldr	s14, [r7, #12]
 8009b60:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b68:	d507      	bpl.n	8009b7a <_ZN8Tracking7processEv+0x92>
		{
			max_data = data_norm[i];
 8009b6a:	687a      	ldr	r2, [r7, #4]
 8009b6c:	697b      	ldr	r3, [r7, #20]
 8009b6e:	3304      	adds	r3, #4
 8009b70:	009b      	lsls	r3, r3, #2
 8009b72:	4413      	add	r3, r2
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	60fb      	str	r3, [r7, #12]
 8009b78:	e014      	b.n	8009ba4 <_ZN8Tracking7processEv+0xbc>
		}
		else if(data_norm[i] < min_data)
 8009b7a:	687a      	ldr	r2, [r7, #4]
 8009b7c:	697b      	ldr	r3, [r7, #20]
 8009b7e:	3304      	adds	r3, #4
 8009b80:	009b      	lsls	r3, r3, #2
 8009b82:	4413      	add	r3, r2
 8009b84:	edd3 7a00 	vldr	s15, [r3]
 8009b88:	ed97 7a04 	vldr	s14, [r7, #16]
 8009b8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b94:	dd06      	ble.n	8009ba4 <_ZN8Tracking7processEv+0xbc>
		{
			min_data = data_norm[i];
 8009b96:	687a      	ldr	r2, [r7, #4]
 8009b98:	697b      	ldr	r3, [r7, #20]
 8009b9a:	3304      	adds	r3, #4
 8009b9c:	009b      	lsls	r3, r3, #2
 8009b9e:	4413      	add	r3, r2
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	613b      	str	r3, [r7, #16]
	for(i = 0; i < 128; ++i)
 8009ba4:	697b      	ldr	r3, [r7, #20]
 8009ba6:	3301      	adds	r3, #1
 8009ba8:	617b      	str	r3, [r7, #20]
 8009baa:	697b      	ldr	r3, [r7, #20]
 8009bac:	2b7f      	cmp	r3, #127	@ 0x7f
 8009bae:	ddce      	ble.n	8009b4e <_ZN8Tracking7processEv+0x66>
		}

	}
	if(max_data - min_data > 700)
 8009bb0:	ed97 7a03 	vldr	s14, [r7, #12]
 8009bb4:	edd7 7a04 	vldr	s15, [r7, #16]
 8009bb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009bbc:	ed9f 7a6e 	vldr	s14, [pc, #440]	@ 8009d78 <_ZN8Tracking7processEv+0x290>
 8009bc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009bc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bc8:	dd0d      	ble.n	8009be6 <_ZN8Tracking7processEv+0xfe>
	{
		threshold = (max_data + min_data)/2;
 8009bca:	ed97 7a03 	vldr	s14, [r7, #12]
 8009bce:	edd7 7a04 	vldr	s15, [r7, #16]
 8009bd2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009bd6:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8009bda:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	edc3 7aa7 	vstr	s15, [r3, #668]	@ 0x29c
 8009be4:	e004      	b.n	8009bf0 <_ZN8Tracking7processEv+0x108>
	}
	else threshold = 0;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	f04f 0200 	mov.w	r2, #0
 8009bec:	f8c3 229c 	str.w	r2, [r3, #668]	@ 0x29c

	// Binarization
	for(i = 0; i < 128; ++i)
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	617b      	str	r3, [r7, #20]
 8009bf4:	e020      	b.n	8009c38 <_ZN8Tracking7processEv+0x150>
	{
		if(data_norm[i] > threshold)
 8009bf6:	687a      	ldr	r2, [r7, #4]
 8009bf8:	697b      	ldr	r3, [r7, #20]
 8009bfa:	3304      	adds	r3, #4
 8009bfc:	009b      	lsls	r3, r3, #2
 8009bfe:	4413      	add	r3, r2
 8009c00:	ed93 7a00 	vldr	s14, [r3]
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	edd3 7aa7 	vldr	s15, [r3, #668]	@ 0x29c
 8009c0a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009c0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c12:	dd07      	ble.n	8009c24 <_ZN8Tracking7processEv+0x13c>
		{
			bin_ccd[i] = 1;
 8009c14:	687a      	ldr	r2, [r7, #4]
 8009c16:	697b      	ldr	r3, [r7, #20]
 8009c18:	4413      	add	r3, r2
 8009c1a:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 8009c1e:	2201      	movs	r2, #1
 8009c20:	701a      	strb	r2, [r3, #0]
 8009c22:	e006      	b.n	8009c32 <_ZN8Tracking7processEv+0x14a>
		}
		else
		{
			bin_ccd[i] = 0;
 8009c24:	687a      	ldr	r2, [r7, #4]
 8009c26:	697b      	ldr	r3, [r7, #20]
 8009c28:	4413      	add	r3, r2
 8009c2a:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 8009c2e:	2200      	movs	r2, #0
 8009c30:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 128; ++i)
 8009c32:	697b      	ldr	r3, [r7, #20]
 8009c34:	3301      	adds	r3, #1
 8009c36:	617b      	str	r3, [r7, #20]
 8009c38:	697b      	ldr	r3, [r7, #20]
 8009c3a:	2b7f      	cmp	r3, #127	@ 0x7f
 8009c3c:	dddb      	ble.n	8009bf6 <_ZN8Tracking7processEv+0x10e>
		}
	}
	//Get the direction
	//从两边向中间找线
	for(i = 3; i < 125; ++i)	//从左找线
 8009c3e:	2303      	movs	r3, #3
 8009c40:	617b      	str	r3, [r7, #20]
 8009c42:	e03e      	b.n	8009cc2 <_ZN8Tracking7processEv+0x1da>
	{
		if(bin_ccd[i-1] + bin_ccd[i-2] + bin_ccd[i-3] == 3
 8009c44:	697b      	ldr	r3, [r7, #20]
 8009c46:	3b01      	subs	r3, #1
 8009c48:	687a      	ldr	r2, [r7, #4]
 8009c4a:	4413      	add	r3, r2
 8009c4c:	f893 3210 	ldrb.w	r3, [r3, #528]	@ 0x210
 8009c50:	4619      	mov	r1, r3
 8009c52:	697b      	ldr	r3, [r7, #20]
 8009c54:	3b02      	subs	r3, #2
 8009c56:	687a      	ldr	r2, [r7, #4]
 8009c58:	4413      	add	r3, r2
 8009c5a:	f893 3210 	ldrb.w	r3, [r3, #528]	@ 0x210
 8009c5e:	440b      	add	r3, r1
 8009c60:	697a      	ldr	r2, [r7, #20]
 8009c62:	3a03      	subs	r2, #3
 8009c64:	6879      	ldr	r1, [r7, #4]
 8009c66:	440a      	add	r2, r1
 8009c68:	f892 2210 	ldrb.w	r2, [r2, #528]	@ 0x210
 8009c6c:	4413      	add	r3, r2
 8009c6e:	2b03      	cmp	r3, #3
 8009c70:	d11c      	bne.n	8009cac <_ZN8Tracking7processEv+0x1c4>
			&& bin_ccd[i+1] + bin_ccd[i+2] + bin_ccd[i+3] == 0)
 8009c72:	697b      	ldr	r3, [r7, #20]
 8009c74:	3301      	adds	r3, #1
 8009c76:	687a      	ldr	r2, [r7, #4]
 8009c78:	4413      	add	r3, r2
 8009c7a:	f893 3210 	ldrb.w	r3, [r3, #528]	@ 0x210
 8009c7e:	4619      	mov	r1, r3
 8009c80:	697b      	ldr	r3, [r7, #20]
 8009c82:	3302      	adds	r3, #2
 8009c84:	687a      	ldr	r2, [r7, #4]
 8009c86:	4413      	add	r3, r2
 8009c88:	f893 3210 	ldrb.w	r3, [r3, #528]	@ 0x210
 8009c8c:	440b      	add	r3, r1
 8009c8e:	697a      	ldr	r2, [r7, #20]
 8009c90:	3203      	adds	r2, #3
 8009c92:	6879      	ldr	r1, [r7, #4]
 8009c94:	440a      	add	r2, r1
 8009c96:	f892 2210 	ldrb.w	r2, [r2, #528]	@ 0x210
 8009c9a:	4413      	add	r3, r2
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d105      	bne.n	8009cac <_ZN8Tracking7processEv+0x1c4>
		{
			Left = i;
 8009ca0:	697b      	ldr	r3, [r7, #20]
 8009ca2:	b29a      	uxth	r2, r3
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	f8a3 22a0 	strh.w	r2, [r3, #672]	@ 0x2a0
			break;
 8009caa:	e00d      	b.n	8009cc8 <_ZN8Tracking7processEv+0x1e0>
		}
		if(i == 124)
 8009cac:	697b      	ldr	r3, [r7, #20]
 8009cae:	2b7c      	cmp	r3, #124	@ 0x7c
 8009cb0:	d104      	bne.n	8009cbc <_ZN8Tracking7processEv+0x1d4>
			Left = 500;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8009cb8:	f8a3 22a0 	strh.w	r2, [r3, #672]	@ 0x2a0
	for(i = 3; i < 125; ++i)	//从左找线
 8009cbc:	697b      	ldr	r3, [r7, #20]
 8009cbe:	3301      	adds	r3, #1
 8009cc0:	617b      	str	r3, [r7, #20]
 8009cc2:	697b      	ldr	r3, [r7, #20]
 8009cc4:	2b7c      	cmp	r3, #124	@ 0x7c
 8009cc6:	ddbd      	ble.n	8009c44 <_ZN8Tracking7processEv+0x15c>
	}

	for(i = 125; i > 3; --i)
 8009cc8:	237d      	movs	r3, #125	@ 0x7d
 8009cca:	617b      	str	r3, [r7, #20]
 8009ccc:	e03e      	b.n	8009d4c <_ZN8Tracking7processEv+0x264>
	{
		if(bin_ccd[i-1] + bin_ccd[i-2] + bin_ccd[i-3] == 0
 8009cce:	697b      	ldr	r3, [r7, #20]
 8009cd0:	3b01      	subs	r3, #1
 8009cd2:	687a      	ldr	r2, [r7, #4]
 8009cd4:	4413      	add	r3, r2
 8009cd6:	f893 3210 	ldrb.w	r3, [r3, #528]	@ 0x210
 8009cda:	4619      	mov	r1, r3
 8009cdc:	697b      	ldr	r3, [r7, #20]
 8009cde:	3b02      	subs	r3, #2
 8009ce0:	687a      	ldr	r2, [r7, #4]
 8009ce2:	4413      	add	r3, r2
 8009ce4:	f893 3210 	ldrb.w	r3, [r3, #528]	@ 0x210
 8009ce8:	440b      	add	r3, r1
 8009cea:	697a      	ldr	r2, [r7, #20]
 8009cec:	3a03      	subs	r2, #3
 8009cee:	6879      	ldr	r1, [r7, #4]
 8009cf0:	440a      	add	r2, r1
 8009cf2:	f892 2210 	ldrb.w	r2, [r2, #528]	@ 0x210
 8009cf6:	4413      	add	r3, r2
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d11c      	bne.n	8009d36 <_ZN8Tracking7processEv+0x24e>
			&& bin_ccd[i+1] + bin_ccd[i+2] + bin_ccd[i+3] == 3)
 8009cfc:	697b      	ldr	r3, [r7, #20]
 8009cfe:	3301      	adds	r3, #1
 8009d00:	687a      	ldr	r2, [r7, #4]
 8009d02:	4413      	add	r3, r2
 8009d04:	f893 3210 	ldrb.w	r3, [r3, #528]	@ 0x210
 8009d08:	4619      	mov	r1, r3
 8009d0a:	697b      	ldr	r3, [r7, #20]
 8009d0c:	3302      	adds	r3, #2
 8009d0e:	687a      	ldr	r2, [r7, #4]
 8009d10:	4413      	add	r3, r2
 8009d12:	f893 3210 	ldrb.w	r3, [r3, #528]	@ 0x210
 8009d16:	440b      	add	r3, r1
 8009d18:	697a      	ldr	r2, [r7, #20]
 8009d1a:	3203      	adds	r2, #3
 8009d1c:	6879      	ldr	r1, [r7, #4]
 8009d1e:	440a      	add	r2, r1
 8009d20:	f892 2210 	ldrb.w	r2, [r2, #528]	@ 0x210
 8009d24:	4413      	add	r3, r2
 8009d26:	2b03      	cmp	r3, #3
 8009d28:	d105      	bne.n	8009d36 <_ZN8Tracking7processEv+0x24e>
		{
			Right = i;
 8009d2a:	697b      	ldr	r3, [r7, #20]
 8009d2c:	b29a      	uxth	r2, r3
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	f8a3 22a2 	strh.w	r2, [r3, #674]	@ 0x2a2
			break;
 8009d34:	e00d      	b.n	8009d52 <_ZN8Tracking7processEv+0x26a>
		}
		if(i == 4)
 8009d36:	697b      	ldr	r3, [r7, #20]
 8009d38:	2b04      	cmp	r3, #4
 8009d3a:	d104      	bne.n	8009d46 <_ZN8Tracking7processEv+0x25e>
			Right = 500;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8009d42:	f8a3 22a2 	strh.w	r2, [r3, #674]	@ 0x2a2
	for(i = 125; i > 3; --i)
 8009d46:	697b      	ldr	r3, [r7, #20]
 8009d48:	3b01      	subs	r3, #1
 8009d4a:	617b      	str	r3, [r7, #20]
 8009d4c:	697b      	ldr	r3, [r7, #20]
 8009d4e:	2b03      	cmp	r3, #3
 8009d50:	dcbd      	bgt.n	8009cce <_ZN8Tracking7processEv+0x1e6>
	}

	last_dir = dir;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	f8b3 2298 	ldrh.w	r2, [r3, #664]	@ 0x298
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	f8a3 229a 	strh.w	r2, [r3, #666]	@ 0x29a
}
 8009d5e:	bf00      	nop
 8009d60:	371c      	adds	r7, #28
 8009d62:	46bd      	mov	sp, r7
 8009d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d68:	4770      	bx	lr
 8009d6a:	bf00      	nop
 8009d6c:	2000000c 	.word	0x2000000c
 8009d70:	2000020c 	.word	0x2000020c
 8009d74:	453b8000 	.word	0x453b8000
 8009d78:	442f0000 	.word	0x442f0000
 8009d7c:	00000000 	.word	0x00000000

08009d80 <_ZN8Tracking7HandlerEv>:
//#define U_turn
//#define line_memory1
#define line_memory2

void Tracking::Handler()
{
 8009d80:	b590      	push	{r4, r7, lr}
 8009d82:	ed2d 8b02 	vpush	{d8}
 8009d86:	b083      	sub	sp, #12
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]

#ifdef line_memory2

	static int t1 = 0;
	static int t2 = 0;
	if(!start_flag)
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	f893 32c0 	ldrb.w	r3, [r3, #704]	@ 0x2c0
 8009d92:	f083 0301 	eor.w	r3, r3, #1
 8009d96:	b2db      	uxtb	r3, r3
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	f000 8123 	beq.w	8009fe4 <_ZN8Tracking7HandlerEv+0x264>
	{
		if(Left == 500)
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	f8b3 32a0 	ldrh.w	r3, [r3, #672]	@ 0x2a0
 8009da4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8009da8:	d10d      	bne.n	8009dc6 <_ZN8Tracking7HandlerEv+0x46>
		{
			chassis->v_set = 0 ;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	689b      	ldr	r3, [r3, #8]
 8009dae:	f04f 0200 	mov.w	r2, #0
 8009db2:	639a      	str	r2, [r3, #56]	@ 0x38
			chassis->w_set = 0.05;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	689b      	ldr	r3, [r3, #8]
 8009db8:	4a85      	ldr	r2, [pc, #532]	@ (8009fd0 <_ZN8Tracking7HandlerEv+0x250>)
 8009dba:	63da      	str	r2, [r3, #60]	@ 0x3c
			chassis->state = CHASSIS_RUN;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	689b      	ldr	r3, [r3, #8]
 8009dc0:	2201      	movs	r2, #1
 8009dc2:	701a      	strb	r2, [r3, #0]
 8009dc4:	e0e8      	b.n	8009f98 <_ZN8Tracking7HandlerEv+0x218>
		}
		else if(Right == 500)
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	f8b3 32a2 	ldrh.w	r3, [r3, #674]	@ 0x2a2
 8009dcc:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8009dd0:	d10d      	bne.n	8009dee <_ZN8Tracking7HandlerEv+0x6e>
		{
			chassis->v_set = 0 ;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	689b      	ldr	r3, [r3, #8]
 8009dd6:	f04f 0200 	mov.w	r2, #0
 8009dda:	639a      	str	r2, [r3, #56]	@ 0x38
			chassis->w_set = -0.05;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	689b      	ldr	r3, [r3, #8]
 8009de0:	4a7c      	ldr	r2, [pc, #496]	@ (8009fd4 <_ZN8Tracking7HandlerEv+0x254>)
 8009de2:	63da      	str	r2, [r3, #60]	@ 0x3c
			chassis->state = CHASSIS_RUN;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	689b      	ldr	r3, [r3, #8]
 8009de8:	2201      	movs	r2, #1
 8009dea:	701a      	strb	r2, [r3, #0]
 8009dec:	e0d4      	b.n	8009f98 <_ZN8Tracking7HandlerEv+0x218>
		}
		else
		{
			dir = (Right + Left)/2;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	f8b3 32a2 	ldrh.w	r3, [r3, #674]	@ 0x2a2
 8009df4:	461a      	mov	r2, r3
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	f8b3 32a0 	ldrh.w	r3, [r3, #672]	@ 0x2a0
 8009dfc:	4413      	add	r3, r2
 8009dfe:	0fda      	lsrs	r2, r3, #31
 8009e00:	4413      	add	r3, r2
 8009e02:	105b      	asrs	r3, r3, #1
 8009e04:	b29a      	uxth	r2, r3
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	f8a3 2298 	strh.w	r2, [r3, #664]	@ 0x298
			dir_filtered = (1 - k_filter) * dir + k_filter * dir_filtered;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	edd3 7aa5 	vldr	s15, [r3, #660]	@ 0x294
 8009e12:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009e16:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	f8b3 3298 	ldrh.w	r3, [r3, #664]	@ 0x298
 8009e20:	ee07 3a90 	vmov	s15, r3
 8009e24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009e28:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	edd3 6aa5 	vldr	s13, [r3, #660]	@ 0x294
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	edd3 7aa4 	vldr	s15, [r3, #656]	@ 0x290
 8009e38:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009e3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	edc3 7aa4 	vstr	s15, [r3, #656]	@ 0x290
			input = dir_filtered-64;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	edd3 7aa4 	vldr	s15, [r3, #656]	@ 0x290
 8009e4c:	ed9f 7a62 	vldr	s14, [pc, #392]	@ 8009fd8 <_ZN8Tracking7HandlerEv+0x258>
 8009e50:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	edc3 7aa9 	vstr	s15, [r3, #676]	@ 0x2a4
			if(Right - Left < 35)
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	f8b3 32a2 	ldrh.w	r3, [r3, #674]	@ 0x2a2
 8009e60:	461a      	mov	r2, r3
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	f8b3 32a0 	ldrh.w	r3, [r3, #672]	@ 0x2a0
 8009e68:	1ad3      	subs	r3, r2, r3
 8009e6a:	2b22      	cmp	r3, #34	@ 0x22
 8009e6c:	f300 8094 	bgt.w	8009f98 <_ZN8Tracking7HandlerEv+0x218>
			{
				chassis->v_set = v ;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	689b      	ldr	r3, [r3, #8]
 8009e74:	687a      	ldr	r2, [r7, #4]
 8009e76:	f8d2 22ac 	ldr.w	r2, [r2, #684]	@ 0x2ac
 8009e7a:	639a      	str	r2, [r3, #56]	@ 0x38
				chassis->w_set = tracking_PID->calc()*0.5;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	4618      	mov	r0, r3
 8009e82:	f7ff fc4a 	bl	800971a <_ZN3PID4calcEv>
 8009e86:	ee10 3a10 	vmov	r3, s0
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	f7f6 fb00 	bl	8000490 <__aeabi_f2d>
 8009e90:	f04f 0200 	mov.w	r2, #0
 8009e94:	4b51      	ldr	r3, [pc, #324]	@ (8009fdc <_ZN8Tracking7HandlerEv+0x25c>)
 8009e96:	f7f6 fb53 	bl	8000540 <__aeabi_dmul>
 8009e9a:	4602      	mov	r2, r0
 8009e9c:	460b      	mov	r3, r1
 8009e9e:	4610      	mov	r0, r2
 8009ea0:	4619      	mov	r1, r3
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	689c      	ldr	r4, [r3, #8]
 8009ea6:	f7f6 fe0d 	bl	8000ac4 <__aeabi_d2f>
 8009eaa:	4603      	mov	r3, r0
 8009eac:	63e3      	str	r3, [r4, #60]	@ 0x3c
				chassis->state = CHASSIS_RUN;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	689b      	ldr	r3, [r3, #8]
 8009eb2:	2201      	movs	r2, #1
 8009eb4:	701a      	strb	r2, [r3, #0]
				x_line = chassis->x;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	689b      	ldr	r3, [r3, #8]
 8009eba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
				y_line = chassis->y;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	689b      	ldr	r3, [r3, #8]
 8009ec6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
				if(abs(x_line - last_x_line) + abs(y_line - last_y_line) > 0.03)
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	ed93 7aac 	vldr	s14, [r3, #688]	@ 0x2b0
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	edd3 7aae 	vldr	s15, [r3, #696]	@ 0x2b8
 8009eda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009ede:	eeb0 0a67 	vmov.f32	s0, s15
 8009ee2:	f7ff fd78 	bl	80099d6 <_ZSt3absf>
 8009ee6:	eeb0 8a40 	vmov.f32	s16, s0
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	ed93 7aad 	vldr	s14, [r3, #692]	@ 0x2b4
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	edd3 7aaf 	vldr	s15, [r3, #700]	@ 0x2bc
 8009ef6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009efa:	eeb0 0a67 	vmov.f32	s0, s15
 8009efe:	f7ff fd6a 	bl	80099d6 <_ZSt3absf>
 8009f02:	eef0 7a40 	vmov.f32	s15, s0
 8009f06:	ee78 7a27 	vadd.f32	s15, s16, s15
 8009f0a:	ee17 0a90 	vmov	r0, s15
 8009f0e:	f7f6 fabf 	bl	8000490 <__aeabi_f2d>
 8009f12:	2301      	movs	r3, #1
 8009f14:	461c      	mov	r4, r3
 8009f16:	a32c      	add	r3, pc, #176	@ (adr r3, 8009fc8 <_ZN8Tracking7HandlerEv+0x248>)
 8009f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f1c:	f7f6 fda0 	bl	8000a60 <__aeabi_dcmpgt>
 8009f20:	4603      	mov	r3, r0
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d101      	bne.n	8009f2a <_ZN8Tracking7HandlerEv+0x1aa>
 8009f26:	2300      	movs	r3, #0
 8009f28:	461c      	mov	r4, r3
 8009f2a:	b2e3      	uxtb	r3, r4
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d033      	beq.n	8009f98 <_ZN8Tracking7HandlerEv+0x218>
				{
					x_line_array[t1] = x_line;
 8009f30:	4b2b      	ldr	r3, [pc, #172]	@ (8009fe0 <_ZN8Tracking7HandlerEv+0x260>)
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	687a      	ldr	r2, [r7, #4]
 8009f36:	f8d2 22b0 	ldr.w	r2, [r2, #688]	@ 0x2b0
 8009f3a:	6879      	ldr	r1, [r7, #4]
 8009f3c:	33b0      	adds	r3, #176	@ 0xb0
 8009f3e:	009b      	lsls	r3, r3, #2
 8009f40:	440b      	add	r3, r1
 8009f42:	3304      	adds	r3, #4
 8009f44:	601a      	str	r2, [r3, #0]
					y_line_array[t1] = y_line;
 8009f46:	4b26      	ldr	r3, [pc, #152]	@ (8009fe0 <_ZN8Tracking7HandlerEv+0x260>)
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	687a      	ldr	r2, [r7, #4]
 8009f4c:	f8d2 22b4 	ldr.w	r2, [r2, #692]	@ 0x2b4
 8009f50:	6879      	ldr	r1, [r7, #4]
 8009f52:	f503 6393 	add.w	r3, r3, #1176	@ 0x498
 8009f56:	009b      	lsls	r3, r3, #2
 8009f58:	440b      	add	r3, r1
 8009f5a:	3304      	adds	r3, #4
 8009f5c:	601a      	str	r2, [r3, #0]
					++t1;
 8009f5e:	4b20      	ldr	r3, [pc, #128]	@ (8009fe0 <_ZN8Tracking7HandlerEv+0x260>)
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	3301      	adds	r3, #1
 8009f64:	4a1e      	ldr	r2, [pc, #120]	@ (8009fe0 <_ZN8Tracking7HandlerEv+0x260>)
 8009f66:	6013      	str	r3, [r2, #0]
					last_x_line = x_line;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	f8d3 22b0 	ldr.w	r2, [r3, #688]	@ 0x2b0
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
					last_y_line = y_line;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f8d3 22b4 	ldr.w	r2, [r3, #692]	@ 0x2b4
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
					controller->x_set = x_line;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	68db      	ldr	r3, [r3, #12]
 8009f84:	687a      	ldr	r2, [r7, #4]
 8009f86:	f8d2 22b0 	ldr.w	r2, [r2, #688]	@ 0x2b0
 8009f8a:	611a      	str	r2, [r3, #16]
					controller->y_set = y_line;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	68db      	ldr	r3, [r3, #12]
 8009f90:	687a      	ldr	r2, [r7, #4]
 8009f92:	f8d2 22b4 	ldr.w	r2, [r2, #692]	@ 0x2b4
 8009f96:	615a      	str	r2, [r3, #20]
//			{
//				chassis->state = CHASSIS_STOP;
//				start_flag = 1;
//			}
		}
		if(Right == 500 && Left == 500)
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	f8b3 32a2 	ldrh.w	r3, [r3, #674]	@ 0x2a2
 8009f9e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8009fa2:	f040 80a2 	bne.w	800a0ea <_ZN8Tracking7HandlerEv+0x36a>
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	f8b3 32a0 	ldrh.w	r3, [r3, #672]	@ 0x2a0
 8009fac:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8009fb0:	f040 809b 	bne.w	800a0ea <_ZN8Tracking7HandlerEv+0x36a>
		{
			chassis->state = CHASSIS_STOP;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	689b      	ldr	r3, [r3, #8]
 8009fb8:	2200      	movs	r2, #0
 8009fba:	701a      	strb	r2, [r3, #0]
			start_flag = 1;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2201      	movs	r2, #1
 8009fc0:	f883 22c0 	strb.w	r2, [r3, #704]	@ 0x2c0
	}


#endif

}
 8009fc4:	e091      	b.n	800a0ea <_ZN8Tracking7HandlerEv+0x36a>
 8009fc6:	bf00      	nop
 8009fc8:	eb851eb8 	.word	0xeb851eb8
 8009fcc:	3f9eb851 	.word	0x3f9eb851
 8009fd0:	3d4ccccd 	.word	0x3d4ccccd
 8009fd4:	bd4ccccd 	.word	0xbd4ccccd
 8009fd8:	42800000 	.word	0x42800000
 8009fdc:	3fe00000 	.word	0x3fe00000
 8009fe0:	20000834 	.word	0x20000834
		if(t2 == 0)
 8009fe4:	4b46      	ldr	r3, [pc, #280]	@ (800a100 <_ZN8Tracking7HandlerEv+0x380>)
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d112      	bne.n	800a012 <_ZN8Tracking7HandlerEv+0x292>
			controller->x_set = x_line_array[0];
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	68db      	ldr	r3, [r3, #12]
 8009ff0:	687a      	ldr	r2, [r7, #4]
 8009ff2:	f8d2 22c4 	ldr.w	r2, [r2, #708]	@ 0x2c4
 8009ff6:	611a      	str	r2, [r3, #16]
			controller->y_set = y_line_array[0];
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	68db      	ldr	r3, [r3, #12]
 8009ffc:	687a      	ldr	r2, [r7, #4]
 8009ffe:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a002:	f8d2 2264 	ldr.w	r2, [r2, #612]	@ 0x264
 800a006:	615a      	str	r2, [r3, #20]
			controller->Handler();
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	68db      	ldr	r3, [r3, #12]
 800a00c:	4618      	mov	r0, r3
 800a00e:	f7fe fd1f 	bl	8008a50 <_ZN10Controller7HandlerEv>
		if(t2 < t1)
 800a012:	4b3b      	ldr	r3, [pc, #236]	@ (800a100 <_ZN8Tracking7HandlerEv+0x380>)
 800a014:	681a      	ldr	r2, [r3, #0]
 800a016:	4b3b      	ldr	r3, [pc, #236]	@ (800a104 <_ZN8Tracking7HandlerEv+0x384>)
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	429a      	cmp	r2, r3
 800a01c:	da61      	bge.n	800a0e2 <_ZN8Tracking7HandlerEv+0x362>
			if(abs(chassis->x-x_line_array[t2]) + abs(chassis->y-y_line_array[t2]) < 0.03)
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	689b      	ldr	r3, [r3, #8]
 800a022:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800a026:	4b36      	ldr	r3, [pc, #216]	@ (800a100 <_ZN8Tracking7HandlerEv+0x380>)
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	687a      	ldr	r2, [r7, #4]
 800a02c:	33b0      	adds	r3, #176	@ 0xb0
 800a02e:	009b      	lsls	r3, r3, #2
 800a030:	4413      	add	r3, r2
 800a032:	3304      	adds	r3, #4
 800a034:	edd3 7a00 	vldr	s15, [r3]
 800a038:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a03c:	eeb0 0a67 	vmov.f32	s0, s15
 800a040:	f7ff fcc9 	bl	80099d6 <_ZSt3absf>
 800a044:	eeb0 8a40 	vmov.f32	s16, s0
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	689b      	ldr	r3, [r3, #8]
 800a04c:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 800a050:	4b2b      	ldr	r3, [pc, #172]	@ (800a100 <_ZN8Tracking7HandlerEv+0x380>)
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	687a      	ldr	r2, [r7, #4]
 800a056:	f503 6393 	add.w	r3, r3, #1176	@ 0x498
 800a05a:	009b      	lsls	r3, r3, #2
 800a05c:	4413      	add	r3, r2
 800a05e:	3304      	adds	r3, #4
 800a060:	edd3 7a00 	vldr	s15, [r3]
 800a064:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a068:	eeb0 0a67 	vmov.f32	s0, s15
 800a06c:	f7ff fcb3 	bl	80099d6 <_ZSt3absf>
 800a070:	eef0 7a40 	vmov.f32	s15, s0
 800a074:	ee78 7a27 	vadd.f32	s15, s16, s15
 800a078:	ee17 0a90 	vmov	r0, s15
 800a07c:	f7f6 fa08 	bl	8000490 <__aeabi_f2d>
 800a080:	2301      	movs	r3, #1
 800a082:	461c      	mov	r4, r3
 800a084:	a31c      	add	r3, pc, #112	@ (adr r3, 800a0f8 <_ZN8Tracking7HandlerEv+0x378>)
 800a086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a08a:	f7f6 fccb 	bl	8000a24 <__aeabi_dcmplt>
 800a08e:	4603      	mov	r3, r0
 800a090:	2b00      	cmp	r3, #0
 800a092:	d101      	bne.n	800a098 <_ZN8Tracking7HandlerEv+0x318>
 800a094:	2300      	movs	r3, #0
 800a096:	461c      	mov	r4, r3
 800a098:	b2e3      	uxtb	r3, r4
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d025      	beq.n	800a0ea <_ZN8Tracking7HandlerEv+0x36a>
				t2++;
 800a09e:	4b18      	ldr	r3, [pc, #96]	@ (800a100 <_ZN8Tracking7HandlerEv+0x380>)
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	3301      	adds	r3, #1
 800a0a4:	4a16      	ldr	r2, [pc, #88]	@ (800a100 <_ZN8Tracking7HandlerEv+0x380>)
 800a0a6:	6013      	str	r3, [r2, #0]
				controller->x_set = x_line_array[t2];
 800a0a8:	4b15      	ldr	r3, [pc, #84]	@ (800a100 <_ZN8Tracking7HandlerEv+0x380>)
 800a0aa:	681a      	ldr	r2, [r3, #0]
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	68db      	ldr	r3, [r3, #12]
 800a0b0:	6879      	ldr	r1, [r7, #4]
 800a0b2:	32b0      	adds	r2, #176	@ 0xb0
 800a0b4:	0092      	lsls	r2, r2, #2
 800a0b6:	440a      	add	r2, r1
 800a0b8:	3204      	adds	r2, #4
 800a0ba:	6812      	ldr	r2, [r2, #0]
 800a0bc:	611a      	str	r2, [r3, #16]
				controller->y_set = y_line_array[t2];
 800a0be:	4b10      	ldr	r3, [pc, #64]	@ (800a100 <_ZN8Tracking7HandlerEv+0x380>)
 800a0c0:	681a      	ldr	r2, [r3, #0]
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	68db      	ldr	r3, [r3, #12]
 800a0c6:	6879      	ldr	r1, [r7, #4]
 800a0c8:	f502 6293 	add.w	r2, r2, #1176	@ 0x498
 800a0cc:	0092      	lsls	r2, r2, #2
 800a0ce:	440a      	add	r2, r1
 800a0d0:	3204      	adds	r2, #4
 800a0d2:	6812      	ldr	r2, [r2, #0]
 800a0d4:	615a      	str	r2, [r3, #20]
				controller->Handler();
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	68db      	ldr	r3, [r3, #12]
 800a0da:	4618      	mov	r0, r3
 800a0dc:	f7fe fcb8 	bl	8008a50 <_ZN10Controller7HandlerEv>
}
 800a0e0:	e003      	b.n	800a0ea <_ZN8Tracking7HandlerEv+0x36a>
			chassis->state = CHASSIS_STOP;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	689b      	ldr	r3, [r3, #8]
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	701a      	strb	r2, [r3, #0]
}
 800a0ea:	bf00      	nop
 800a0ec:	370c      	adds	r7, #12
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	ecbd 8b02 	vpop	{d8}
 800a0f4:	bd90      	pop	{r4, r7, pc}
 800a0f6:	bf00      	nop
 800a0f8:	eb851eb8 	.word	0xeb851eb8
 800a0fc:	3f9eb851 	.word	0x3f9eb851
 800a100:	20000838 	.word	0x20000838
 800a104:	20000834 	.word	0x20000834

0800a108 <spi_write_8bit_register>:

int16_t imu660ra_gyro_x = 0, imu660ra_gyro_y = 0, imu660ra_gyro_z = 0;            // 三轴陀螺仪数据   gyro (陀螺仪)
int16_t imu660ra_acc_x = 0, imu660ra_acc_y = 0, imu660ra_acc_z = 0;               // 三轴加速度计数据 acc  (accelerometer 加速度计)
float imu660ra_transition_factor[2] = {4096, 16.4};

void spi_write_8bit_register(SPI_HandleTypeDef *hspi, uint8_t reg, uint8_t data){
 800a108:	b580      	push	{r7, lr}
 800a10a:	b084      	sub	sp, #16
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
 800a110:	460b      	mov	r3, r1
 800a112:	70fb      	strb	r3, [r7, #3]
 800a114:	4613      	mov	r3, r2
 800a116:	70bb      	strb	r3, [r7, #2]
    uint8_t temp = reg;
 800a118:	78fb      	ldrb	r3, [r7, #3]
 800a11a:	73fb      	strb	r3, [r7, #15]
    HAL_SPI_Transmit(hspi, &temp, 1, 0xffff);
 800a11c:	f107 010f 	add.w	r1, r7, #15
 800a120:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a124:	2201      	movs	r2, #1
 800a126:	6878      	ldr	r0, [r7, #4]
 800a128:	f7fb f945 	bl	80053b6 <HAL_SPI_Transmit>
    temp = data;
 800a12c:	78bb      	ldrb	r3, [r7, #2]
 800a12e:	73fb      	strb	r3, [r7, #15]
    HAL_SPI_Transmit(hspi, &temp, 1, 0xffff);
 800a130:	f107 010f 	add.w	r1, r7, #15
 800a134:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a138:	2201      	movs	r2, #1
 800a13a:	6878      	ldr	r0, [r7, #4]
 800a13c:	f7fb f93b 	bl	80053b6 <HAL_SPI_Transmit>
}
 800a140:	bf00      	nop
 800a142:	3710      	adds	r7, #16
 800a144:	46bd      	mov	sp, r7
 800a146:	bd80      	pop	{r7, pc}

0800a148 <spi_write_8bit_registers>:

void spi_write_8bit_registers(SPI_HandleTypeDef *hspi, uint8_t reg, uint8_t* data, uint16_t len){
 800a148:	b580      	push	{r7, lr}
 800a14a:	b086      	sub	sp, #24
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	60f8      	str	r0, [r7, #12]
 800a150:	607a      	str	r2, [r7, #4]
 800a152:	461a      	mov	r2, r3
 800a154:	460b      	mov	r3, r1
 800a156:	72fb      	strb	r3, [r7, #11]
 800a158:	4613      	mov	r3, r2
 800a15a:	813b      	strh	r3, [r7, #8]
    uint8_t temp = reg;
 800a15c:	7afb      	ldrb	r3, [r7, #11]
 800a15e:	75fb      	strb	r3, [r7, #23]
    HAL_SPI_Transmit(hspi, &temp, 1, 0xffff);
 800a160:	f107 0117 	add.w	r1, r7, #23
 800a164:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a168:	2201      	movs	r2, #1
 800a16a:	68f8      	ldr	r0, [r7, #12]
 800a16c:	f7fb f923 	bl	80053b6 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(hspi, data, len, 0xffff);
 800a170:	893a      	ldrh	r2, [r7, #8]
 800a172:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a176:	6879      	ldr	r1, [r7, #4]
 800a178:	68f8      	ldr	r0, [r7, #12]
 800a17a:	f7fb f91c 	bl	80053b6 <HAL_SPI_Transmit>
}
 800a17e:	bf00      	nop
 800a180:	3718      	adds	r7, #24
 800a182:	46bd      	mov	sp, r7
 800a184:	bd80      	pop	{r7, pc}

0800a186 <spi_read_8bit_registers>:

void spi_read_8bit_registers(SPI_HandleTypeDef *hspi, uint8_t reg, uint8_t* data, uint16_t len){
 800a186:	b580      	push	{r7, lr}
 800a188:	b086      	sub	sp, #24
 800a18a:	af00      	add	r7, sp, #0
 800a18c:	60f8      	str	r0, [r7, #12]
 800a18e:	607a      	str	r2, [r7, #4]
 800a190:	461a      	mov	r2, r3
 800a192:	460b      	mov	r3, r1
 800a194:	72fb      	strb	r3, [r7, #11]
 800a196:	4613      	mov	r3, r2
 800a198:	813b      	strh	r3, [r7, #8]
    uint8_t temp = reg;
 800a19a:	7afb      	ldrb	r3, [r7, #11]
 800a19c:	75fb      	strb	r3, [r7, #23]
    HAL_SPI_Transmit(hspi, &temp, 1, 0xffff);
 800a19e:	f107 0117 	add.w	r1, r7, #23
 800a1a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a1a6:	2201      	movs	r2, #1
 800a1a8:	68f8      	ldr	r0, [r7, #12]
 800a1aa:	f7fb f904 	bl	80053b6 <HAL_SPI_Transmit>
    HAL_SPI_Receive(hspi, data, len, 0xffff);
 800a1ae:	893a      	ldrh	r2, [r7, #8]
 800a1b0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a1b4:	6879      	ldr	r1, [r7, #4]
 800a1b6:	68f8      	ldr	r0, [r7, #12]
 800a1b8:	f7fb fa39 	bl	800562e <HAL_SPI_Receive>
}
 800a1bc:	bf00      	nop
 800a1be:	3718      	adds	r7, #24
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bd80      	pop	{r7, pc}

0800a1c4 <imu660ra_write_register>:
// 返回参数     void
// 使用示例     imu660ra_write_register(IMU660RA_PWR_CONF, 0x00);                   // 关闭高级省电模式
// 备注信息     内部调用
//-------------------------------------------------------------------------------------------------------------------
static void imu660ra_write_register (uint8_t reg, uint8_t data)
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b082      	sub	sp, #8
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	4603      	mov	r3, r0
 800a1cc:	460a      	mov	r2, r1
 800a1ce:	71fb      	strb	r3, [r7, #7]
 800a1d0:	4613      	mov	r3, r2
 800a1d2:	71bb      	strb	r3, [r7, #6]
    IMU660RA_CS(0);
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	2102      	movs	r1, #2
 800a1d8:	4808      	ldr	r0, [pc, #32]	@ (800a1fc <imu660ra_write_register+0x38>)
 800a1da:	f7fa fa53 	bl	8004684 <HAL_GPIO_WritePin>
    spi_write_8bit_register(IMU660RA_SPI, reg | IMU660RA_SPI_W, data);
 800a1de:	79ba      	ldrb	r2, [r7, #6]
 800a1e0:	79fb      	ldrb	r3, [r7, #7]
 800a1e2:	4619      	mov	r1, r3
 800a1e4:	4806      	ldr	r0, [pc, #24]	@ (800a200 <imu660ra_write_register+0x3c>)
 800a1e6:	f7ff ff8f 	bl	800a108 <spi_write_8bit_register>
    IMU660RA_CS(1);
 800a1ea:	2201      	movs	r2, #1
 800a1ec:	2102      	movs	r1, #2
 800a1ee:	4803      	ldr	r0, [pc, #12]	@ (800a1fc <imu660ra_write_register+0x38>)
 800a1f0:	f7fa fa48 	bl	8004684 <HAL_GPIO_WritePin>
}
 800a1f4:	bf00      	nop
 800a1f6:	3708      	adds	r7, #8
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	bd80      	pop	{r7, pc}
 800a1fc:	40020800 	.word	0x40020800
 800a200:	200004c8 	.word	0x200004c8

0800a204 <imu660ra_write_registers>:
// 返回参数     void
// 使用示例     imu660ra_write_registers(IMU660RA_INIT_DATA, imu660ra_config_file, sizeof(imu660ra_config_file));
// 备注信息     内部调用
//-------------------------------------------------------------------------------------------------------------------
static void imu660ra_write_registers (uint8_t reg, const uint8_t *data, uint32_t len)
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b084      	sub	sp, #16
 800a208:	af00      	add	r7, sp, #0
 800a20a:	4603      	mov	r3, r0
 800a20c:	60b9      	str	r1, [r7, #8]
 800a20e:	607a      	str	r2, [r7, #4]
 800a210:	73fb      	strb	r3, [r7, #15]
    IMU660RA_CS(0);
 800a212:	2200      	movs	r2, #0
 800a214:	2102      	movs	r1, #2
 800a216:	4809      	ldr	r0, [pc, #36]	@ (800a23c <imu660ra_write_registers+0x38>)
 800a218:	f7fa fa34 	bl	8004684 <HAL_GPIO_WritePin>
    spi_write_8bit_registers(IMU660RA_SPI, reg | IMU660RA_SPI_W, (uint8_t*)data, len);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	b29b      	uxth	r3, r3
 800a220:	7bf9      	ldrb	r1, [r7, #15]
 800a222:	68ba      	ldr	r2, [r7, #8]
 800a224:	4806      	ldr	r0, [pc, #24]	@ (800a240 <imu660ra_write_registers+0x3c>)
 800a226:	f7ff ff8f 	bl	800a148 <spi_write_8bit_registers>
    IMU660RA_CS(1);
 800a22a:	2201      	movs	r2, #1
 800a22c:	2102      	movs	r1, #2
 800a22e:	4803      	ldr	r0, [pc, #12]	@ (800a23c <imu660ra_write_registers+0x38>)
 800a230:	f7fa fa28 	bl	8004684 <HAL_GPIO_WritePin>
}
 800a234:	bf00      	nop
 800a236:	3710      	adds	r7, #16
 800a238:	46bd      	mov	sp, r7
 800a23a:	bd80      	pop	{r7, pc}
 800a23c:	40020800 	.word	0x40020800
 800a240:	200004c8 	.word	0x200004c8

0800a244 <imu660ra_read_register>:
// 返回参数     uint8           数据
// 使用示例     imu660ra_read_register(IMU660RA_CHIP_ID);
// 备注信息     内部调用
//-------------------------------------------------------------------------------------------------------------------
static uint8_t imu660ra_read_register (uint8_t reg)
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b084      	sub	sp, #16
 800a248:	af00      	add	r7, sp, #0
 800a24a:	4603      	mov	r3, r0
 800a24c:	71fb      	strb	r3, [r7, #7]
    uint8_t data[2];
    IMU660RA_CS(0);
 800a24e:	2200      	movs	r2, #0
 800a250:	2102      	movs	r1, #2
 800a252:	480b      	ldr	r0, [pc, #44]	@ (800a280 <imu660ra_read_register+0x3c>)
 800a254:	f7fa fa16 	bl	8004684 <HAL_GPIO_WritePin>
    spi_read_8bit_registers(IMU660RA_SPI, reg | IMU660RA_SPI_R, data, 2);
 800a258:	79fb      	ldrb	r3, [r7, #7]
 800a25a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a25e:	b2d9      	uxtb	r1, r3
 800a260:	f107 020c 	add.w	r2, r7, #12
 800a264:	2302      	movs	r3, #2
 800a266:	4807      	ldr	r0, [pc, #28]	@ (800a284 <imu660ra_read_register+0x40>)
 800a268:	f7ff ff8d 	bl	800a186 <spi_read_8bit_registers>
    IMU660RA_CS(1);
 800a26c:	2201      	movs	r2, #1
 800a26e:	2102      	movs	r1, #2
 800a270:	4803      	ldr	r0, [pc, #12]	@ (800a280 <imu660ra_read_register+0x3c>)
 800a272:	f7fa fa07 	bl	8004684 <HAL_GPIO_WritePin>
    return data[1];
 800a276:	7b7b      	ldrb	r3, [r7, #13]
}
 800a278:	4618      	mov	r0, r3
 800a27a:	3710      	adds	r7, #16
 800a27c:	46bd      	mov	sp, r7
 800a27e:	bd80      	pop	{r7, pc}
 800a280:	40020800 	.word	0x40020800
 800a284:	200004c8 	.word	0x200004c8

0800a288 <imu660ra_read_registers>:
// 返回参数     void
// 使用示例     imu660ra_read_registers(IMU660RA_ACC_ADDRESS, dat, 6);
// 备注信息     内部调用
//-------------------------------------------------------------------------------------------------------------------
static void imu660ra_read_registers (uint8_t reg, uint8_t *data, uint32_t len)
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b088      	sub	sp, #32
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	4603      	mov	r3, r0
 800a290:	60b9      	str	r1, [r7, #8]
 800a292:	607a      	str	r2, [r7, #4]
 800a294:	73fb      	strb	r3, [r7, #15]
    uint8_t temp_data[8];
    IMU660RA_CS(0);
 800a296:	2200      	movs	r2, #0
 800a298:	2102      	movs	r1, #2
 800a29a:	4817      	ldr	r0, [pc, #92]	@ (800a2f8 <imu660ra_read_registers+0x70>)
 800a29c:	f7fa f9f2 	bl	8004684 <HAL_GPIO_WritePin>
    spi_read_8bit_registers(IMU660RA_SPI, reg | IMU660RA_SPI_R, temp_data, len + 1);
 800a2a0:	7bfb      	ldrb	r3, [r7, #15]
 800a2a2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a2a6:	b2d9      	uxtb	r1, r3
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	b29b      	uxth	r3, r3
 800a2ac:	3301      	adds	r3, #1
 800a2ae:	b29b      	uxth	r3, r3
 800a2b0:	f107 0214 	add.w	r2, r7, #20
 800a2b4:	4811      	ldr	r0, [pc, #68]	@ (800a2fc <imu660ra_read_registers+0x74>)
 800a2b6:	f7ff ff66 	bl	800a186 <spi_read_8bit_registers>
    IMU660RA_CS(1);
 800a2ba:	2201      	movs	r2, #1
 800a2bc:	2102      	movs	r1, #2
 800a2be:	480e      	ldr	r0, [pc, #56]	@ (800a2f8 <imu660ra_read_registers+0x70>)
 800a2c0:	f7fa f9e0 	bl	8004684 <HAL_GPIO_WritePin>
    for(int i = 0; i < len; i ++)
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	61fb      	str	r3, [r7, #28]
 800a2c8:	e00c      	b.n	800a2e4 <imu660ra_read_registers+0x5c>
    {
        *(data ++) = temp_data[i + 1];
 800a2ca:	69fb      	ldr	r3, [r7, #28]
 800a2cc:	1c5a      	adds	r2, r3, #1
 800a2ce:	68bb      	ldr	r3, [r7, #8]
 800a2d0:	1c59      	adds	r1, r3, #1
 800a2d2:	60b9      	str	r1, [r7, #8]
 800a2d4:	3220      	adds	r2, #32
 800a2d6:	443a      	add	r2, r7
 800a2d8:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800a2dc:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < len; i ++)
 800a2de:	69fb      	ldr	r3, [r7, #28]
 800a2e0:	3301      	adds	r3, #1
 800a2e2:	61fb      	str	r3, [r7, #28]
 800a2e4:	69fb      	ldr	r3, [r7, #28]
 800a2e6:	687a      	ldr	r2, [r7, #4]
 800a2e8:	429a      	cmp	r2, r3
 800a2ea:	d8ee      	bhi.n	800a2ca <imu660ra_read_registers+0x42>
    }
}
 800a2ec:	bf00      	nop
 800a2ee:	bf00      	nop
 800a2f0:	3720      	adds	r7, #32
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	bd80      	pop	{r7, pc}
 800a2f6:	bf00      	nop
 800a2f8:	40020800 	.word	0x40020800
 800a2fc:	200004c8 	.word	0x200004c8

0800a300 <imu660ra_self_check>:
// 返回参数     uint8           1-自检失败 0-自检成功
// 使用示例     imu660ra_self_check();
// 备注信息     内部调用
//-------------------------------------------------------------------------------------------------------------------
static uint8_t imu660ra_self_check (void)
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b082      	sub	sp, #8
 800a304:	af00      	add	r7, sp, #0
    uint8_t dat = 0, return_state = 0;
 800a306:	2300      	movs	r3, #0
 800a308:	70fb      	strb	r3, [r7, #3]
 800a30a:	2300      	movs	r3, #0
 800a30c:	71fb      	strb	r3, [r7, #7]
    uint16_t timeout_count = 0;
 800a30e:	2300      	movs	r3, #0
 800a310:	80bb      	strh	r3, [r7, #4]
    do
    {
        if(IMU660RA_TIMEOUT_COUNT < timeout_count ++)
 800a312:	88bb      	ldrh	r3, [r7, #4]
 800a314:	1c5a      	adds	r2, r3, #1
 800a316:	80ba      	strh	r2, [r7, #4]
 800a318:	2bff      	cmp	r3, #255	@ 0xff
 800a31a:	d902      	bls.n	800a322 <imu660ra_self_check+0x22>
        {
            return_state =  1;
 800a31c:	2301      	movs	r3, #1
 800a31e:	71fb      	strb	r3, [r7, #7]
            break;
 800a320:	e00a      	b.n	800a338 <imu660ra_self_check+0x38>
        }
        dat = imu660ra_read_register(IMU660RA_CHIP_ID);
 800a322:	2000      	movs	r0, #0
 800a324:	f7ff ff8e 	bl	800a244 <imu660ra_read_register>
 800a328:	4603      	mov	r3, r0
 800a32a:	70fb      	strb	r3, [r7, #3]
        system_delay_ms(1);
 800a32c:	2001      	movs	r0, #1
 800a32e:	f7f8 fc33 	bl	8002b98 <HAL_Delay>
    }while(0x24 != dat);                                                        // 读取设备ID是否等于0X24，如果不是0X24则认为没检测到设备
 800a332:	78fb      	ldrb	r3, [r7, #3]
 800a334:	2b24      	cmp	r3, #36	@ 0x24
 800a336:	d1ec      	bne.n	800a312 <imu660ra_self_check+0x12>
    return return_state;
 800a338:	79fb      	ldrb	r3, [r7, #7]
}
 800a33a:	4618      	mov	r0, r3
 800a33c:	3708      	adds	r7, #8
 800a33e:	46bd      	mov	sp, r7
 800a340:	bd80      	pop	{r7, pc}
	...

0800a344 <imu660ra_get_acc>:
// 使用示例     imu660ra_get_acc();                                             // 执行该函数后，直接查看对应的变量即可
// 备注信息     使用 SPI 的采集时间为69us
//             使用 IIC 的采集时间为126us        采集加速度计的时间与采集陀螺仪的时间一致的原因是都只是读取寄存器数据
//-------------------------------------------------------------------------------------------------------------------
void imu660ra_get_acc (void)
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b082      	sub	sp, #8
 800a348:	af00      	add	r7, sp, #0
    uint8_t dat[6];

    imu660ra_read_registers(IMU660RA_ACC_ADDRESS, dat, 6);
 800a34a:	463b      	mov	r3, r7
 800a34c:	2206      	movs	r2, #6
 800a34e:	4619      	mov	r1, r3
 800a350:	200c      	movs	r0, #12
 800a352:	f7ff ff99 	bl	800a288 <imu660ra_read_registers>
    imu660ra_acc_x = (int16_t)(((uint16_t)dat[1] << 8 | dat[0]));
 800a356:	787b      	ldrb	r3, [r7, #1]
 800a358:	021b      	lsls	r3, r3, #8
 800a35a:	b21a      	sxth	r2, r3
 800a35c:	783b      	ldrb	r3, [r7, #0]
 800a35e:	b21b      	sxth	r3, r3
 800a360:	4313      	orrs	r3, r2
 800a362:	b21a      	sxth	r2, r3
 800a364:	4b0b      	ldr	r3, [pc, #44]	@ (800a394 <imu660ra_get_acc+0x50>)
 800a366:	801a      	strh	r2, [r3, #0]
    imu660ra_acc_y = (int16_t)(((uint16_t)dat[3] << 8 | dat[2]));
 800a368:	78fb      	ldrb	r3, [r7, #3]
 800a36a:	021b      	lsls	r3, r3, #8
 800a36c:	b21a      	sxth	r2, r3
 800a36e:	78bb      	ldrb	r3, [r7, #2]
 800a370:	b21b      	sxth	r3, r3
 800a372:	4313      	orrs	r3, r2
 800a374:	b21a      	sxth	r2, r3
 800a376:	4b08      	ldr	r3, [pc, #32]	@ (800a398 <imu660ra_get_acc+0x54>)
 800a378:	801a      	strh	r2, [r3, #0]
    imu660ra_acc_z = (int16_t)(((uint16_t)dat[5] << 8 | dat[4]));
 800a37a:	797b      	ldrb	r3, [r7, #5]
 800a37c:	021b      	lsls	r3, r3, #8
 800a37e:	b21a      	sxth	r2, r3
 800a380:	793b      	ldrb	r3, [r7, #4]
 800a382:	b21b      	sxth	r3, r3
 800a384:	4313      	orrs	r3, r2
 800a386:	b21a      	sxth	r2, r3
 800a388:	4b04      	ldr	r3, [pc, #16]	@ (800a39c <imu660ra_get_acc+0x58>)
 800a38a:	801a      	strh	r2, [r3, #0]
}
 800a38c:	bf00      	nop
 800a38e:	3708      	adds	r7, #8
 800a390:	46bd      	mov	sp, r7
 800a392:	bd80      	pop	{r7, pc}
 800a394:	20000842 	.word	0x20000842
 800a398:	20000844 	.word	0x20000844
 800a39c:	20000846 	.word	0x20000846

0800a3a0 <imu660ra_get_gyro>:
// 使用示例     imu660ra_get_gyro();                                            // 执行该函数后，直接查看对应的变量即可
// 备注信息     使用 SPI 的采集时间为69us
//             使用 IIC 的采集时间为126us
//-------------------------------------------------------------------------------------------------------------------
void imu660ra_get_gyro (void)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b082      	sub	sp, #8
 800a3a4:	af00      	add	r7, sp, #0
    uint8_t dat[6];

    imu660ra_read_registers(IMU660RA_GYRO_ADDRESS, dat, 6);
 800a3a6:	463b      	mov	r3, r7
 800a3a8:	2206      	movs	r2, #6
 800a3aa:	4619      	mov	r1, r3
 800a3ac:	2012      	movs	r0, #18
 800a3ae:	f7ff ff6b 	bl	800a288 <imu660ra_read_registers>
    imu660ra_gyro_x = (int16_t)(((uint16_t)dat[1] << 8 | dat[0]));
 800a3b2:	787b      	ldrb	r3, [r7, #1]
 800a3b4:	021b      	lsls	r3, r3, #8
 800a3b6:	b21a      	sxth	r2, r3
 800a3b8:	783b      	ldrb	r3, [r7, #0]
 800a3ba:	b21b      	sxth	r3, r3
 800a3bc:	4313      	orrs	r3, r2
 800a3be:	b21a      	sxth	r2, r3
 800a3c0:	4b0b      	ldr	r3, [pc, #44]	@ (800a3f0 <imu660ra_get_gyro+0x50>)
 800a3c2:	801a      	strh	r2, [r3, #0]
    imu660ra_gyro_y = (int16_t)(((uint16_t)dat[3] << 8 | dat[2]));
 800a3c4:	78fb      	ldrb	r3, [r7, #3]
 800a3c6:	021b      	lsls	r3, r3, #8
 800a3c8:	b21a      	sxth	r2, r3
 800a3ca:	78bb      	ldrb	r3, [r7, #2]
 800a3cc:	b21b      	sxth	r3, r3
 800a3ce:	4313      	orrs	r3, r2
 800a3d0:	b21a      	sxth	r2, r3
 800a3d2:	4b08      	ldr	r3, [pc, #32]	@ (800a3f4 <imu660ra_get_gyro+0x54>)
 800a3d4:	801a      	strh	r2, [r3, #0]
    imu660ra_gyro_z = (int16_t)(((uint16_t)dat[5] << 8 | dat[4]));
 800a3d6:	797b      	ldrb	r3, [r7, #5]
 800a3d8:	021b      	lsls	r3, r3, #8
 800a3da:	b21a      	sxth	r2, r3
 800a3dc:	793b      	ldrb	r3, [r7, #4]
 800a3de:	b21b      	sxth	r3, r3
 800a3e0:	4313      	orrs	r3, r2
 800a3e2:	b21a      	sxth	r2, r3
 800a3e4:	4b04      	ldr	r3, [pc, #16]	@ (800a3f8 <imu660ra_get_gyro+0x58>)
 800a3e6:	801a      	strh	r2, [r3, #0]
}
 800a3e8:	bf00      	nop
 800a3ea:	3708      	adds	r7, #8
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	bd80      	pop	{r7, pc}
 800a3f0:	2000083c 	.word	0x2000083c
 800a3f4:	2000083e 	.word	0x2000083e
 800a3f8:	20000840 	.word	0x20000840

0800a3fc <imu660ra_init>:
// 使用示例     imu660ra_init();
// 备注信息
//-------------------------------------------------------------------------------------------------------------------
int imu660ra_state = 0;
uint8_t imu660ra_init (void)
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b082      	sub	sp, #8
 800a400:	af00      	add	r7, sp, #0
    uint8_t return_state = 0;
 800a402:	2300      	movs	r3, #0
 800a404:	71fb      	strb	r3, [r7, #7]
    system_delay_ms(20);                                                        // 等待设备上电成功
 800a406:	2014      	movs	r0, #20
 800a408:	f7f8 fbc6 	bl	8002b98 <HAL_Delay>
    iic_init(IMU660RA_IIC_INDEX, IMU660RA_DEV_ADDR, IMU660RA_IIC_SPEED, IMU660RA_SCL_PIN, IMU660RA_SDA_PIN);        // 配置 IMU660RA 的 IIC 端口
#endif
#else
    //spi_init(IMU660RA_SPI, SPI_MODE0, IMU660RA_SPI_SPEED, IMU660RA_SPC_PIN, IMU660RA_SDI_PIN, IMU660RA_SDO_PIN, SPI_CS_NULL);   // 配置 IMU660RA 的 SPI 端口
    //gpio_init(IMU660RA_CS_PIN, GPO, GPIO_HIGH, GPO_PUSH_PULL);                  // 配置 IMU660RA 的CS端口
    imu660ra_read_register(IMU660RA_CHIP_ID);                                   // 读取一下设备ID 将设备设置为SPI模式
 800a40c:	2000      	movs	r0, #0
 800a40e:	f7ff ff19 	bl	800a244 <imu660ra_read_register>
#endif
    do{
        if(imu660ra_self_check())                                               // IMU660RA 自检
 800a412:	f7ff ff75 	bl	800a300 <imu660ra_self_check>
 800a416:	4603      	mov	r3, r0
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d005      	beq.n	800a428 <imu660ra_init+0x2c>
        {
            // 如果程序在输出了断言信息 并且提示出错位置在这里
            // 那么就是 IMU660RA 自检出错并超时退出了
            // 检查一下接线有没有问题 如果没问题可能就是坏了
            //zf_log(0, "imu660ra self check error.");
            imu660ra_state = 1;
 800a41c:	4b29      	ldr	r3, [pc, #164]	@ (800a4c4 <imu660ra_init+0xc8>)
 800a41e:	2201      	movs	r2, #1
 800a420:	601a      	str	r2, [r3, #0]
            return_state = 1;
 800a422:	2301      	movs	r3, #1
 800a424:	71fb      	strb	r3, [r7, #7]
            break;
 800a426:	e047      	b.n	800a4b8 <imu660ra_init+0xbc>
        }
        imu660ra_write_register(IMU660RA_PWR_CONF, 0x00);                       // 关闭高级省电模式
 800a428:	2100      	movs	r1, #0
 800a42a:	207c      	movs	r0, #124	@ 0x7c
 800a42c:	f7ff feca 	bl	800a1c4 <imu660ra_write_register>
        system_delay_ms(1);
 800a430:	2001      	movs	r0, #1
 800a432:	f7f8 fbb1 	bl	8002b98 <HAL_Delay>
        imu660ra_write_register(IMU660RA_INIT_CTRL, 0x00);                      // 开始对模块进行初始化配置
 800a436:	2100      	movs	r1, #0
 800a438:	2059      	movs	r0, #89	@ 0x59
 800a43a:	f7ff fec3 	bl	800a1c4 <imu660ra_write_register>
        imu660ra_write_registers(IMU660RA_INIT_DATA, imu660ra_config_file, sizeof(imu660ra_config_file));   // 输出配置文件
 800a43e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800a442:	4921      	ldr	r1, [pc, #132]	@ (800a4c8 <imu660ra_init+0xcc>)
 800a444:	205e      	movs	r0, #94	@ 0x5e
 800a446:	f7ff fedd 	bl	800a204 <imu660ra_write_registers>
        imu660ra_write_register(IMU660RA_INIT_CTRL, 0x01);                      // 初始化配置结束
 800a44a:	2101      	movs	r1, #1
 800a44c:	2059      	movs	r0, #89	@ 0x59
 800a44e:	f7ff feb9 	bl	800a1c4 <imu660ra_write_register>
        system_delay_ms(20);
 800a452:	2014      	movs	r0, #20
 800a454:	f7f8 fba0 	bl	8002b98 <HAL_Delay>
        if(0 == imu660ra_read_register(IMU660RA_INT_STA))                       // 检查是否配置完成
 800a458:	2021      	movs	r0, #33	@ 0x21
 800a45a:	f7ff fef3 	bl	800a244 <imu660ra_read_register>
 800a45e:	4603      	mov	r3, r0
 800a460:	2b00      	cmp	r3, #0
 800a462:	d105      	bne.n	800a470 <imu660ra_init+0x74>
        {
            // 如果程序在输出了断言信息 并且提示出错位置在这里
            // 那么就是 IMU660RA 配置初始化文件出错了
            // 检查一下接线有没有问题 如果没问题可能就是坏了
            //zf_log(0, "imu660ra init error.");
            imu660ra_state = 2;
 800a464:	4b17      	ldr	r3, [pc, #92]	@ (800a4c4 <imu660ra_init+0xc8>)
 800a466:	2202      	movs	r2, #2
 800a468:	601a      	str	r2, [r3, #0]
            return_state = 1;
 800a46a:	2301      	movs	r3, #1
 800a46c:	71fb      	strb	r3, [r7, #7]
            break;
 800a46e:	e023      	b.n	800a4b8 <imu660ra_init+0xbc>
        }
        imu660ra_write_register(IMU660RA_PWR_CTRL, 0x0E);                       // 开启性能模式  使能陀螺仪、加速度、温度传感器
 800a470:	210e      	movs	r1, #14
 800a472:	207d      	movs	r0, #125	@ 0x7d
 800a474:	f7ff fea6 	bl	800a1c4 <imu660ra_write_register>
        imu660ra_write_register(IMU660RA_ACC_CONF, 0xA7);                       // 加速度采集配置 性能模式 正常采集 50Hz  采样频率
 800a478:	21a7      	movs	r1, #167	@ 0xa7
 800a47a:	2040      	movs	r0, #64	@ 0x40
 800a47c:	f7ff fea2 	bl	800a1c4 <imu660ra_write_register>
        imu660ra_write_register(IMU660RA_GYR_CONF, 0xA9);                       // 陀螺仪采集配置 性能模式 正常采集 200Hz 采样频率
 800a480:	21a9      	movs	r1, #169	@ 0xa9
 800a482:	2042      	movs	r0, #66	@ 0x42
 800a484:	f7ff fe9e 	bl	800a1c4 <imu660ra_write_register>
                imu660ra_state = 3;
                return_state = 1;
            }break;
            case IMU660RA_ACC_SAMPLE_SGN_2G:
            {
                imu660ra_write_register(IMU660RA_ACC_RANGE, 0x00);
 800a488:	2100      	movs	r1, #0
 800a48a:	2041      	movs	r0, #65	@ 0x41
 800a48c:	f7ff fe9a 	bl	800a1c4 <imu660ra_write_register>
                imu660ra_transition_factor[0] = 16384;
 800a490:	4b0e      	ldr	r3, [pc, #56]	@ (800a4cc <imu660ra_init+0xd0>)
 800a492:	f04f 428d 	mov.w	r2, #1182793728	@ 0x46800000
 800a496:	601a      	str	r2, [r3, #0]
            }break;
 800a498:	bf00      	nop
            {
                imu660ra_write_register(IMU660RA_ACC_RANGE, 0x03);
                imu660ra_transition_factor[0] = 2048;
            }break;
        }
        if(1 == return_state)
 800a49a:	79fb      	ldrb	r3, [r7, #7]
 800a49c:	2b01      	cmp	r3, #1
 800a49e:	d00a      	beq.n	800a4b6 <imu660ra_init+0xba>
                imu660ra_write_register(IMU660RA_GYR_RANGE, 0x01);
                imu660ra_transition_factor[1] = 32.8;
            }break;
            case IMU660RA_GYRO_SAMPLE_SGN_2000DPS:
            {
                imu660ra_write_register(IMU660RA_GYR_RANGE, 0x00);
 800a4a0:	2100      	movs	r1, #0
 800a4a2:	2043      	movs	r0, #67	@ 0x43
 800a4a4:	f7ff fe8e 	bl	800a1c4 <imu660ra_write_register>
                imu660ra_transition_factor[1] = 16.4;
 800a4a8:	4b08      	ldr	r3, [pc, #32]	@ (800a4cc <imu660ra_init+0xd0>)
 800a4aa:	4a09      	ldr	r2, [pc, #36]	@ (800a4d0 <imu660ra_init+0xd4>)
 800a4ac:	605a      	str	r2, [r3, #4]
            }break;
 800a4ae:	bf00      	nop
        }
        if(1 == return_state)
 800a4b0:	79fb      	ldrb	r3, [r7, #7]
 800a4b2:	2b01      	cmp	r3, #1
 800a4b4:	e000      	b.n	800a4b8 <imu660ra_init+0xbc>
            break;
 800a4b6:	bf00      	nop
        {
            break;
        }
    }while(0);
    return return_state;
 800a4b8:	79fb      	ldrb	r3, [r7, #7]
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	3708      	adds	r7, #8
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	bd80      	pop	{r7, pc}
 800a4c2:	bf00      	nop
 800a4c4:	20000848 	.word	0x20000848
 800a4c8:	0800afb8 	.word	0x0800afb8
 800a4cc:	20000210 	.word	0x20000210
 800a4d0:	41833333 	.word	0x41833333

0800a4d4 <_ZN3CCDC1Ev>:
#ifndef CONTROL_CCD_H
#define CONTROL_CCD_H

#include "hal.h"

class CCD {
 800a4d4:	b480      	push	{r7}
 800a4d6:	b083      	sub	sp, #12
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	220a      	movs	r2, #10
 800a4e0:	601a      	str	r2, [r3, #0]
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	2200      	movs	r2, #0
 800a4f6:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	370c      	adds	r7, #12
 800a500:	46bd      	mov	sp, r7
 800a502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a506:	4770      	bx	lr

0800a508 <_ZN3IMUC1Ev>:
    IMU_ERR,
    IMU_CALIBRATE
} IMU_state;


class IMU {
 800a508:	b480      	push	{r7}
 800a50a:	b083      	sub	sp, #12
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	f04f 0200 	mov.w	r2, #0
 800a516:	61da      	str	r2, [r3, #28]
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	f04f 0200 	mov.w	r2, #0
 800a51e:	629a      	str	r2, [r3, #40]	@ 0x28
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	f04f 0200 	mov.w	r2, #0
 800a526:	62da      	str	r2, [r3, #44]	@ 0x2c
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	f04f 0200 	mov.w	r2, #0
 800a52e:	631a      	str	r2, [r3, #48]	@ 0x30
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	f04f 0200 	mov.w	r2, #0
 800a536:	635a      	str	r2, [r3, #52]	@ 0x34
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	f04f 0200 	mov.w	r2, #0
 800a53e:	639a      	str	r2, [r3, #56]	@ 0x38
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	f04f 0200 	mov.w	r2, #0
 800a546:	63da      	str	r2, [r3, #60]	@ 0x3c
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f04f 0200 	mov.w	r2, #0
 800a54e:	641a      	str	r2, [r3, #64]	@ 0x40
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	4618      	mov	r0, r3
 800a554:	370c      	adds	r7, #12
 800a556:	46bd      	mov	sp, r7
 800a558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55c:	4770      	bx	lr
	...

0800a560 <_Z8get_vpwrv>:
Tracking tracking(&chassis,&ccd,&tracking_PID,&controller);

float vpwr = 12, vpwr_th = 9;
int pwr_cnt = 0;

void get_vpwr(){
 800a560:	b580      	push	{r7, lr}
 800a562:	b082      	sub	sp, #8
 800a564:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc2);
 800a566:	481e      	ldr	r0, [pc, #120]	@ (800a5e0 <_Z8get_vpwrv+0x80>)
 800a568:	f7f8 fb7e 	bl	8002c68 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2, 1000);
 800a56c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800a570:	481b      	ldr	r0, [pc, #108]	@ (800a5e0 <_Z8get_vpwrv+0x80>)
 800a572:	f7f8 fc7e 	bl	8002e72 <HAL_ADC_PollForConversion>
	int val = HAL_ADC_GetValue(&hadc2);
 800a576:	481a      	ldr	r0, [pc, #104]	@ (800a5e0 <_Z8get_vpwrv+0x80>)
 800a578:	f7f8 fe16 	bl	80031a8 <HAL_ADC_GetValue>
 800a57c:	4603      	mov	r3, r0
 800a57e:	607b      	str	r3, [r7, #4]
	HAL_ADC_Stop(&hadc2);
 800a580:	4817      	ldr	r0, [pc, #92]	@ (800a5e0 <_Z8get_vpwrv+0x80>)
 800a582:	f7f8 fc43 	bl	8002e0c <HAL_ADC_Stop>
	vpwr = (float)val / 4096 * 3.3 * 8;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	ee07 3a90 	vmov	s15, r3
 800a58c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a590:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800a5e4 <_Z8get_vpwrv+0x84>
 800a594:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800a598:	ee16 0a90 	vmov	r0, s13
 800a59c:	f7f5 ff78 	bl	8000490 <__aeabi_f2d>
 800a5a0:	a30d      	add	r3, pc, #52	@ (adr r3, 800a5d8 <_Z8get_vpwrv+0x78>)
 800a5a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5a6:	f7f5 ffcb 	bl	8000540 <__aeabi_dmul>
 800a5aa:	4602      	mov	r2, r0
 800a5ac:	460b      	mov	r3, r1
 800a5ae:	4610      	mov	r0, r2
 800a5b0:	4619      	mov	r1, r3
 800a5b2:	f04f 0200 	mov.w	r2, #0
 800a5b6:	4b0c      	ldr	r3, [pc, #48]	@ (800a5e8 <_Z8get_vpwrv+0x88>)
 800a5b8:	f7f5 ffc2 	bl	8000540 <__aeabi_dmul>
 800a5bc:	4602      	mov	r2, r0
 800a5be:	460b      	mov	r3, r1
 800a5c0:	4610      	mov	r0, r2
 800a5c2:	4619      	mov	r1, r3
 800a5c4:	f7f6 fa7e 	bl	8000ac4 <__aeabi_d2f>
 800a5c8:	4603      	mov	r3, r0
 800a5ca:	4a08      	ldr	r2, [pc, #32]	@ (800a5ec <_Z8get_vpwrv+0x8c>)
 800a5cc:	6013      	str	r3, [r2, #0]
}
 800a5ce:	bf00      	nop
 800a5d0:	3708      	adds	r7, #8
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	bd80      	pop	{r7, pc}
 800a5d6:	bf00      	nop
 800a5d8:	66666666 	.word	0x66666666
 800a5dc:	400a6666 	.word	0x400a6666
 800a5e0:	200002dc 	.word	0x200002dc
 800a5e4:	45800000 	.word	0x45800000
 800a5e8:	40200000 	.word	0x40200000
 800a5ec:	20000218 	.word	0x20000218

0800a5f0 <setup>:

void setup(){
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	af00      	add	r7, sp, #0

    left_encoder.init();
 800a5f4:	480d      	ldr	r0, [pc, #52]	@ (800a62c <setup+0x3c>)
 800a5f6:	f7fe fc2a 	bl	8008e4e <_ZN7Encoder4initEv>
    right_encoder.init();
 800a5fa:	480d      	ldr	r0, [pc, #52]	@ (800a630 <setup+0x40>)
 800a5fc:	f7fe fc27 	bl	8008e4e <_ZN7Encoder4initEv>
	left_motor.init();
 800a600:	480c      	ldr	r0, [pc, #48]	@ (800a634 <setup+0x44>)
 800a602:	f7ff f872 	bl	80096ea <_ZN9N20_Motor4initEv>
	right_motor.init();
 800a606:	480c      	ldr	r0, [pc, #48]	@ (800a638 <setup+0x48>)
 800a608:	f7ff f86f 	bl	80096ea <_ZN9N20_Motor4initEv>
    ccd.init();
 800a60c:	480b      	ldr	r0, [pc, #44]	@ (800a63c <setup+0x4c>)
 800a60e:	f7fd fea3 	bl	8008358 <_ZN3CCD4initEv>
    imu.init();
 800a612:	480b      	ldr	r0, [pc, #44]	@ (800a640 <setup+0x50>)
 800a614:	f7fe fd5e 	bl	80090d4 <_ZN3IMU4initEv>
	HAL_UART_Receive_IT(&huart1,(uint8_t *)(uart1_rx_buf), 1);//接收一个字节
 800a618:	2201      	movs	r2, #1
 800a61a:	490a      	ldr	r1, [pc, #40]	@ (800a644 <setup+0x54>)
 800a61c:	480a      	ldr	r0, [pc, #40]	@ (800a648 <setup+0x58>)
 800a61e:	f7fc fe8a 	bl	8007336 <HAL_UART_Receive_IT>
	tracking.init();
 800a622:	480a      	ldr	r0, [pc, #40]	@ (800a64c <setup+0x5c>)
 800a624:	f7ff fa22 	bl	8009a6c <_ZN8Tracking4initEv>

}
 800a628:	bf00      	nop
 800a62a:	bd80      	pop	{r7, pc}
 800a62c:	200008b8 	.word	0x200008b8
 800a630:	200008cc 	.word	0x200008cc
 800a634:	2000090c 	.word	0x2000090c
 800a638:	200008e0 	.word	0x200008e0
 800a63c:	20000938 	.word	0x20000938
 800a640:	20000b2c 	.word	0x20000b2c
 800a644:	2000084c 	.word	0x2000084c
 800a648:	20000764 	.word	0x20000764
 800a64c:	20000c3c 	.word	0x20000c3c

0800a650 <loop>:

uint8_t start_flag[] = {0xfe, 0xfe};
uint8_t end_flag[] = {0xff, 0xff};
void loop(){
 800a650:	b580      	push	{r7, lr}
 800a652:	af00      	add	r7, sp, #0
    if(ccd.sample_complete == true){
 800a654:	4b3b      	ldr	r3, [pc, #236]	@ (800a744 <loop+0xf4>)
 800a656:	f893 3108 	ldrb.w	r3, [r3, #264]	@ 0x108
 800a65a:	2b01      	cmp	r3, #1
 800a65c:	d13f      	bne.n	800a6de <loop+0x8e>
		HAL_UART_Transmit(&huart1, start_flag, 2, 0xffff);
 800a65e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a662:	2202      	movs	r2, #2
 800a664:	4938      	ldr	r1, [pc, #224]	@ (800a748 <loop+0xf8>)
 800a666:	4839      	ldr	r0, [pc, #228]	@ (800a74c <loop+0xfc>)
 800a668:	f7fc fdd3 	bl	8007212 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (uint8_t *)ccd.data, 128 * 2, 0xffff);
 800a66c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a670:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a674:	4936      	ldr	r1, [pc, #216]	@ (800a750 <loop+0x100>)
 800a676:	4835      	ldr	r0, [pc, #212]	@ (800a74c <loop+0xfc>)
 800a678:	f7fc fdcb 	bl	8007212 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, end_flag, 2, 0xffff);
 800a67c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a680:	2202      	movs	r2, #2
 800a682:	4934      	ldr	r1, [pc, #208]	@ (800a754 <loop+0x104>)
 800a684:	4831      	ldr	r0, [pc, #196]	@ (800a74c <loop+0xfc>)
 800a686:	f7fc fdc4 	bl	8007212 <HAL_UART_Transmit>

		HAL_UART_Transmit(&huart1, (uint8_t *)&chassis.x, 4, 0xffff);
 800a68a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a68e:	2204      	movs	r2, #4
 800a690:	4931      	ldr	r1, [pc, #196]	@ (800a758 <loop+0x108>)
 800a692:	482e      	ldr	r0, [pc, #184]	@ (800a74c <loop+0xfc>)
 800a694:	f7fc fdbd 	bl	8007212 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (uint8_t *)&chassis.y, 4, 0xffff);
 800a698:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a69c:	2204      	movs	r2, #4
 800a69e:	492f      	ldr	r1, [pc, #188]	@ (800a75c <loop+0x10c>)
 800a6a0:	482a      	ldr	r0, [pc, #168]	@ (800a74c <loop+0xfc>)
 800a6a2:	f7fc fdb6 	bl	8007212 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (uint8_t *)&chassis.ang, 4, 0xffff);
 800a6a6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a6aa:	2204      	movs	r2, #4
 800a6ac:	492c      	ldr	r1, [pc, #176]	@ (800a760 <loop+0x110>)
 800a6ae:	4827      	ldr	r0, [pc, #156]	@ (800a74c <loop+0xfc>)
 800a6b0:	f7fc fdaf 	bl	8007212 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (uint8_t *)&chassis.ang1, 4, 0xffff);
 800a6b4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a6b8:	2204      	movs	r2, #4
 800a6ba:	492a      	ldr	r1, [pc, #168]	@ (800a764 <loop+0x114>)
 800a6bc:	4823      	ldr	r0, [pc, #140]	@ (800a74c <loop+0xfc>)
 800a6be:	f7fc fda8 	bl	8007212 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (uint8_t *)&chassis.ang2, 4, 0xffff);
 800a6c2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a6c6:	2204      	movs	r2, #4
 800a6c8:	4927      	ldr	r1, [pc, #156]	@ (800a768 <loop+0x118>)
 800a6ca:	4820      	ldr	r0, [pc, #128]	@ (800a74c <loop+0xfc>)
 800a6cc:	f7fc fda1 	bl	8007212 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, end_flag, 2, 0xffff);
 800a6d0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a6d4:	2202      	movs	r2, #2
 800a6d6:	491f      	ldr	r1, [pc, #124]	@ (800a754 <loop+0x104>)
 800a6d8:	481c      	ldr	r0, [pc, #112]	@ (800a74c <loop+0xfc>)
 800a6da:	f7fc fd9a 	bl	8007212 <HAL_UART_Transmit>
//    if(intensity >= 10000) intensity = 0;
//    HAL_Delay(500);
//    printf("%d,%f,%f;\r\n", intensity, chassis.v, chassis.w);


    get_vpwr();
 800a6de:	f7ff ff3f 	bl	800a560 <_Z8get_vpwrv>
    if(vpwr < vpwr_th && vpwr > 3){
 800a6e2:	4b22      	ldr	r3, [pc, #136]	@ (800a76c <loop+0x11c>)
 800a6e4:	ed93 7a00 	vldr	s14, [r3]
 800a6e8:	4b21      	ldr	r3, [pc, #132]	@ (800a770 <loop+0x120>)
 800a6ea:	edd3 7a00 	vldr	s15, [r3]
 800a6ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a6f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6f6:	d519      	bpl.n	800a72c <loop+0xdc>
 800a6f8:	4b1c      	ldr	r3, [pc, #112]	@ (800a76c <loop+0x11c>)
 800a6fa:	edd3 7a00 	vldr	s15, [r3]
 800a6fe:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 800a702:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a70a:	dd0f      	ble.n	800a72c <loop+0xdc>
        if(pwr_cnt >= 10){
 800a70c:	4b19      	ldr	r3, [pc, #100]	@ (800a774 <loop+0x124>)
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	2b09      	cmp	r3, #9
 800a712:	dd05      	ble.n	800a720 <loop+0xd0>
            HAL_GPIO_WritePin(BEEP_GPIO_Port, BEEP_Pin, GPIO_PIN_SET);
 800a714:	2201      	movs	r2, #1
 800a716:	2104      	movs	r1, #4
 800a718:	4817      	ldr	r0, [pc, #92]	@ (800a778 <loop+0x128>)
 800a71a:	f7f9 ffb3 	bl	8004684 <HAL_GPIO_WritePin>
        if(pwr_cnt >= 10){
 800a71e:	e00e      	b.n	800a73e <loop+0xee>
        }else pwr_cnt++;
 800a720:	4b14      	ldr	r3, [pc, #80]	@ (800a774 <loop+0x124>)
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	3301      	adds	r3, #1
 800a726:	4a13      	ldr	r2, [pc, #76]	@ (800a774 <loop+0x124>)
 800a728:	6013      	str	r3, [r2, #0]
        if(pwr_cnt >= 10){
 800a72a:	e008      	b.n	800a73e <loop+0xee>
    }
    else{
        HAL_GPIO_WritePin(BEEP_GPIO_Port, BEEP_Pin, GPIO_PIN_RESET);
 800a72c:	2200      	movs	r2, #0
 800a72e:	2104      	movs	r1, #4
 800a730:	4811      	ldr	r0, [pc, #68]	@ (800a778 <loop+0x128>)
 800a732:	f7f9 ffa7 	bl	8004684 <HAL_GPIO_WritePin>
        pwr_cnt = 0;
 800a736:	4b0f      	ldr	r3, [pc, #60]	@ (800a774 <loop+0x124>)
 800a738:	2200      	movs	r2, #0
 800a73a:	601a      	str	r2, [r3, #0]
    }

}
 800a73c:	bf00      	nop
 800a73e:	bf00      	nop
 800a740:	bd80      	pop	{r7, pc}
 800a742:	bf00      	nop
 800a744:	20000938 	.word	0x20000938
 800a748:	20000220 	.word	0x20000220
 800a74c:	20000764 	.word	0x20000764
 800a750:	2000093c 	.word	0x2000093c
 800a754:	20000224 	.word	0x20000224
 800a758:	20000ba0 	.word	0x20000ba0
 800a75c:	20000ba4 	.word	0x20000ba4
 800a760:	20000b8c 	.word	0x20000b8c
 800a764:	20000b90 	.word	0x20000b90
 800a768:	20000b94 	.word	0x20000b94
 800a76c:	20000218 	.word	0x20000218
 800a770:	2000021c 	.word	0x2000021c
 800a774:	20002e40 	.word	0x20002e40
 800a778:	40021000 	.word	0x40021000

0800a77c <task_handler>:


void task_handler(){
 800a77c:	b580      	push	{r7, lr}
 800a77e:	af00      	add	r7, sp, #0
	left_encoder.Handler();
 800a780:	4818      	ldr	r0, [pc, #96]	@ (800a7e4 <task_handler+0x68>)
 800a782:	f7fe fb25 	bl	8008dd0 <_ZN7Encoder7HandlerEv>
	right_encoder.Handler();
 800a786:	4818      	ldr	r0, [pc, #96]	@ (800a7e8 <task_handler+0x6c>)
 800a788:	f7fe fb22 	bl	8008dd0 <_ZN7Encoder7HandlerEv>
	left_motor.Handler();
 800a78c:	4817      	ldr	r0, [pc, #92]	@ (800a7ec <task_handler+0x70>)
 800a78e:	f7fe fd97 	bl	80092c0 <_ZN9N20_Motor7HandlerEv>
	right_motor.Handler();
 800a792:	4817      	ldr	r0, [pc, #92]	@ (800a7f0 <task_handler+0x74>)
 800a794:	f7fe fd94 	bl	80092c0 <_ZN9N20_Motor7HandlerEv>
	ccd.Handler();
 800a798:	4816      	ldr	r0, [pc, #88]	@ (800a7f4 <task_handler+0x78>)
 800a79a:	f7fd fdab 	bl	80082f4 <_ZN3CCD7HandlerEv>
//	remote.Handler();
	imu.Handler();
 800a79e:	4816      	ldr	r0, [pc, #88]	@ (800a7f8 <task_handler+0x7c>)
 800a7a0:	f7fe fd4c 	bl	800923c <_ZN3IMU7HandlerEv>
	chassis.Handler();
 800a7a4:	4815      	ldr	r0, [pc, #84]	@ (800a7fc <task_handler+0x80>)
 800a7a6:	f7fd fe2f 	bl	8008408 <_ZN7Chassis7HandlerEv>
	tracking.Handler();
 800a7aa:	4815      	ldr	r0, [pc, #84]	@ (800a800 <task_handler+0x84>)
 800a7ac:	f7ff fae8 	bl	8009d80 <_ZN8Tracking7HandlerEv>
//	controller.x_set = remote.x;
//	controller.y_set = remote.y;
//	chassis.state = CHASSIS_RUN;
//	controller.Handler();

	if(HAL_GetTick() % 500 == 0) HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800a7b0:	f7f8 f9e6 	bl	8002b80 <HAL_GetTick>
 800a7b4:	4602      	mov	r2, r0
 800a7b6:	4b13      	ldr	r3, [pc, #76]	@ (800a804 <task_handler+0x88>)
 800a7b8:	fba3 1302 	umull	r1, r3, r3, r2
 800a7bc:	095b      	lsrs	r3, r3, #5
 800a7be:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800a7c2:	fb01 f303 	mul.w	r3, r1, r3
 800a7c6:	1ad3      	subs	r3, r2, r3
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	bf0c      	ite	eq
 800a7cc:	2301      	moveq	r3, #1
 800a7ce:	2300      	movne	r3, #0
 800a7d0:	b2db      	uxtb	r3, r3
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d004      	beq.n	800a7e0 <task_handler+0x64>
 800a7d6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800a7da:	480b      	ldr	r0, [pc, #44]	@ (800a808 <task_handler+0x8c>)
 800a7dc:	f7f9 ff6b 	bl	80046b6 <HAL_GPIO_TogglePin>
//	controller.Handler();


#endif

}
 800a7e0:	bf00      	nop
 800a7e2:	bd80      	pop	{r7, pc}
 800a7e4:	200008b8 	.word	0x200008b8
 800a7e8:	200008cc 	.word	0x200008cc
 800a7ec:	2000090c 	.word	0x2000090c
 800a7f0:	200008e0 	.word	0x200008e0
 800a7f4:	20000938 	.word	0x20000938
 800a7f8:	20000b2c 	.word	0x20000b2c
 800a7fc:	20000b70 	.word	0x20000b70
 800a800:	20000c3c 	.word	0x20000c3c
 800a804:	10624dd3 	.word	0x10624dd3
 800a808:	40020800 	.word	0x40020800

0800a80c <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b082      	sub	sp, #8
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
    if(htim == &htim2){
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	4a09      	ldr	r2, [pc, #36]	@ (800a83c <HAL_TIM_PeriodElapsedCallback+0x30>)
 800a818:	4293      	cmp	r3, r2
 800a81a:	d103      	bne.n	800a824 <HAL_TIM_PeriodElapsedCallback+0x18>
        right_encoder.overflow_update();
 800a81c:	4808      	ldr	r0, [pc, #32]	@ (800a840 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800a81e:	f7fe fb29 	bl	8008e74 <_ZN7Encoder15overflow_updateEv>
    }else if(htim == &htim5){
        left_encoder.overflow_update();
    }
}
 800a822:	e006      	b.n	800a832 <HAL_TIM_PeriodElapsedCallback+0x26>
    }else if(htim == &htim5){
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	4a07      	ldr	r2, [pc, #28]	@ (800a844 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800a828:	4293      	cmp	r3, r2
 800a82a:	d102      	bne.n	800a832 <HAL_TIM_PeriodElapsedCallback+0x26>
        left_encoder.overflow_update();
 800a82c:	4806      	ldr	r0, [pc, #24]	@ (800a848 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800a82e:	f7fe fb21 	bl	8008e74 <_ZN7Encoder15overflow_updateEv>
}
 800a832:	bf00      	nop
 800a834:	3708      	adds	r7, #8
 800a836:	46bd      	mov	sp, r7
 800a838:	bd80      	pop	{r7, pc}
 800a83a:	bf00      	nop
 800a83c:	2000056c 	.word	0x2000056c
 800a840:	200008cc 	.word	0x200008cc
 800a844:	20000644 	.word	0x20000644
 800a848:	200008b8 	.word	0x200008b8

0800a84c <CCD_Handler>:

void CCD_Handler(){ //放在TIM中断回调函数里，注意前置，以免延时
 800a84c:	b580      	push	{r7, lr}
 800a84e:	af00      	add	r7, sp, #0
    ccd.SI_send();
 800a850:	4802      	ldr	r0, [pc, #8]	@ (800a85c <CCD_Handler+0x10>)
 800a852:	f7fd fd09 	bl	8008268 <_ZN3CCD7SI_sendEv>
}
 800a856:	bf00      	nop
 800a858:	bd80      	pop	{r7, pc}
 800a85a:	bf00      	nop
 800a85c:	20000938 	.word	0x20000938

0800a860 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a860:	b580      	push	{r7, lr}
 800a862:	b084      	sub	sp, #16
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
    if(huart == &huart1){
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	4a2b      	ldr	r2, [pc, #172]	@ (800a918 <HAL_UART_RxCpltCallback+0xb8>)
 800a86c:	4293      	cmp	r3, r2
 800a86e:	d14f      	bne.n	800a910 <HAL_UART_RxCpltCallback+0xb0>
        uint8_t val = uart1_rx_buf[uart1_rx_len++];
 800a870:	4b2a      	ldr	r3, [pc, #168]	@ (800a91c <HAL_UART_RxCpltCallback+0xbc>)
 800a872:	881b      	ldrh	r3, [r3, #0]
 800a874:	1c5a      	adds	r2, r3, #1
 800a876:	b291      	uxth	r1, r2
 800a878:	4a28      	ldr	r2, [pc, #160]	@ (800a91c <HAL_UART_RxCpltCallback+0xbc>)
 800a87a:	8011      	strh	r1, [r2, #0]
 800a87c:	461a      	mov	r2, r3
 800a87e:	4b28      	ldr	r3, [pc, #160]	@ (800a920 <HAL_UART_RxCpltCallback+0xc0>)
 800a880:	5c9b      	ldrb	r3, [r3, r2]
 800a882:	73fb      	strb	r3, [r7, #15]
        if(uart1_rx_len >= UART1_BUF_LEN) uart1_rx_len = 0;
 800a884:	4b25      	ldr	r3, [pc, #148]	@ (800a91c <HAL_UART_RxCpltCallback+0xbc>)
 800a886:	881b      	ldrh	r3, [r3, #0]
 800a888:	2b63      	cmp	r3, #99	@ 0x63
 800a88a:	d902      	bls.n	800a892 <HAL_UART_RxCpltCallback+0x32>
 800a88c:	4b23      	ldr	r3, [pc, #140]	@ (800a91c <HAL_UART_RxCpltCallback+0xbc>)
 800a88e:	2200      	movs	r2, #0
 800a890:	801a      	strh	r2, [r3, #0]

        if(val == '\r'){
 800a892:	7bfb      	ldrb	r3, [r7, #15]
 800a894:	2b0d      	cmp	r3, #13
 800a896:	d103      	bne.n	800a8a0 <HAL_UART_RxCpltCallback+0x40>
            uart1_state = 1;
 800a898:	4b22      	ldr	r3, [pc, #136]	@ (800a924 <HAL_UART_RxCpltCallback+0xc4>)
 800a89a:	2201      	movs	r2, #1
 800a89c:	601a      	str	r2, [r3, #0]
 800a89e:	e025      	b.n	800a8ec <HAL_UART_RxCpltCallback+0x8c>
        }else if(val == '\n'){
 800a8a0:	7bfb      	ldrb	r3, [r7, #15]
 800a8a2:	2b0a      	cmp	r3, #10
 800a8a4:	d122      	bne.n	800a8ec <HAL_UART_RxCpltCallback+0x8c>
            if(uart1_state == 1){
 800a8a6:	4b1f      	ldr	r3, [pc, #124]	@ (800a924 <HAL_UART_RxCpltCallback+0xc4>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	2b01      	cmp	r3, #1
 800a8ac:	d112      	bne.n	800a8d4 <HAL_UART_RxCpltCallback+0x74>
				memcpy(remote.data, uart1_rx_buf, uart1_rx_len);
 800a8ae:	4b1b      	ldr	r3, [pc, #108]	@ (800a91c <HAL_UART_RxCpltCallback+0xbc>)
 800a8b0:	881b      	ldrh	r3, [r3, #0]
 800a8b2:	461a      	mov	r2, r3
 800a8b4:	491a      	ldr	r1, [pc, #104]	@ (800a920 <HAL_UART_RxCpltCallback+0xc0>)
 800a8b6:	481c      	ldr	r0, [pc, #112]	@ (800a928 <HAL_UART_RxCpltCallback+0xc8>)
 800a8b8:	f000 fb54 	bl	800af64 <memcpy>
				remote.len = uart1_rx_len;
 800a8bc:	4b17      	ldr	r3, [pc, #92]	@ (800a91c <HAL_UART_RxCpltCallback+0xbc>)
 800a8be:	881a      	ldrh	r2, [r3, #0]
 800a8c0:	4b1a      	ldr	r3, [pc, #104]	@ (800a92c <HAL_UART_RxCpltCallback+0xcc>)
 800a8c2:	f8a3 20ca 	strh.w	r2, [r3, #202]	@ 0xca
				//remote.process_data((uint16_t*)uart1_rx_buf, uart1_rx_len);
                uart1_state = 0;
 800a8c6:	4b17      	ldr	r3, [pc, #92]	@ (800a924 <HAL_UART_RxCpltCallback+0xc4>)
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	601a      	str	r2, [r3, #0]
                uart1_rx_len = 0;
 800a8cc:	4b13      	ldr	r3, [pc, #76]	@ (800a91c <HAL_UART_RxCpltCallback+0xbc>)
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	801a      	strh	r2, [r3, #0]
 800a8d2:	e00b      	b.n	800a8ec <HAL_UART_RxCpltCallback+0x8c>
            }else uart1_state = 0;
 800a8d4:	4b13      	ldr	r3, [pc, #76]	@ (800a924 <HAL_UART_RxCpltCallback+0xc4>)
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	601a      	str	r2, [r3, #0]
        }

		while(HAL_UART_Receive_IT(&huart1, (uint8_t *)(uart1_rx_buf + uart1_rx_len), 1) != HAL_OK){
 800a8da:	e007      	b.n	800a8ec <HAL_UART_RxCpltCallback+0x8c>
			huart1.RxState = HAL_UART_STATE_READY;
 800a8dc:	4b0e      	ldr	r3, [pc, #56]	@ (800a918 <HAL_UART_RxCpltCallback+0xb8>)
 800a8de:	2220      	movs	r2, #32
 800a8e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
			__HAL_UNLOCK(&huart1);
 800a8e4:	4b0c      	ldr	r3, [pc, #48]	@ (800a918 <HAL_UART_RxCpltCallback+0xb8>)
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		while(HAL_UART_Receive_IT(&huart1, (uint8_t *)(uart1_rx_buf + uart1_rx_len), 1) != HAL_OK){
 800a8ec:	4b0b      	ldr	r3, [pc, #44]	@ (800a91c <HAL_UART_RxCpltCallback+0xbc>)
 800a8ee:	881b      	ldrh	r3, [r3, #0]
 800a8f0:	461a      	mov	r2, r3
 800a8f2:	4b0b      	ldr	r3, [pc, #44]	@ (800a920 <HAL_UART_RxCpltCallback+0xc0>)
 800a8f4:	4413      	add	r3, r2
 800a8f6:	2201      	movs	r2, #1
 800a8f8:	4619      	mov	r1, r3
 800a8fa:	4807      	ldr	r0, [pc, #28]	@ (800a918 <HAL_UART_RxCpltCallback+0xb8>)
 800a8fc:	f7fc fd1b 	bl	8007336 <HAL_UART_Receive_IT>
 800a900:	4603      	mov	r3, r0
 800a902:	2b00      	cmp	r3, #0
 800a904:	bf14      	ite	ne
 800a906:	2301      	movne	r3, #1
 800a908:	2300      	moveq	r3, #0
 800a90a:	b2db      	uxtb	r3, r3
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d1e5      	bne.n	800a8dc <HAL_UART_RxCpltCallback+0x7c>
		}
    }

}
 800a910:	bf00      	nop
 800a912:	3710      	adds	r7, #16
 800a914:	46bd      	mov	sp, r7
 800a916:	bd80      	pop	{r7, pc}
 800a918:	20000764 	.word	0x20000764
 800a91c:	200008b0 	.word	0x200008b0
 800a920:	2000084c 	.word	0x2000084c
 800a924:	200008b4 	.word	0x200008b4
 800a928:	20000a4a 	.word	0x20000a4a
 800a92c:	20000a48 	.word	0x20000a48

0800a930 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 800a930:	b580      	push	{r7, lr}
 800a932:	b082      	sub	sp, #8
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
    if(hadc == &hadc3){
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	4a07      	ldr	r2, [pc, #28]	@ (800a958 <HAL_ADC_ConvCpltCallback+0x28>)
 800a93c:	4293      	cmp	r3, r2
 800a93e:	d103      	bne.n	800a948 <HAL_ADC_ConvCpltCallback+0x18>
        ccd.sample_complete = true;
 800a940:	4b06      	ldr	r3, [pc, #24]	@ (800a95c <HAL_ADC_ConvCpltCallback+0x2c>)
 800a942:	2201      	movs	r2, #1
 800a944:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108
    }
    tracking.process();
 800a948:	4805      	ldr	r0, [pc, #20]	@ (800a960 <HAL_ADC_ConvCpltCallback+0x30>)
 800a94a:	f7ff f8cd 	bl	8009ae8 <_ZN8Tracking7processEv>
}
 800a94e:	bf00      	nop
 800a950:	3708      	adds	r7, #8
 800a952:	46bd      	mov	sp, r7
 800a954:	bd80      	pop	{r7, pc}
 800a956:	bf00      	nop
 800a958:	20000324 	.word	0x20000324
 800a95c:	20000938 	.word	0x20000938
 800a960:	20000c3c 	.word	0x20000c3c

0800a964 <_Z41__static_initialization_and_destruction_0ii>:
 800a964:	b580      	push	{r7, lr}
 800a966:	b084      	sub	sp, #16
 800a968:	af02      	add	r7, sp, #8
 800a96a:	6078      	str	r0, [r7, #4]
 800a96c:	6039      	str	r1, [r7, #0]
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	2b01      	cmp	r3, #1
 800a972:	d157      	bne.n	800aa24 <_Z41__static_initialization_and_destruction_0ii+0xc0>
 800a974:	683b      	ldr	r3, [r7, #0]
 800a976:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a97a:	4293      	cmp	r3, r2
 800a97c:	d152      	bne.n	800aa24 <_Z41__static_initialization_and_destruction_0ii+0xc0>
Encoder left_encoder(&htim5);
 800a97e:	492b      	ldr	r1, [pc, #172]	@ (800aa2c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 800a980:	482b      	ldr	r0, [pc, #172]	@ (800aa30 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 800a982:	f7fe fa49 	bl	8008e18 <_ZN7EncoderC1EP17TIM_HandleTypeDef>
Encoder right_encoder(&htim2);
 800a986:	492b      	ldr	r1, [pc, #172]	@ (800aa34 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 800a988:	482b      	ldr	r0, [pc, #172]	@ (800aa38 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 800a98a:	f7fe fa45 	bl	8008e18 <_ZN7EncoderC1EP17TIM_HandleTypeDef>
                     );
 800a98e:	4b28      	ldr	r3, [pc, #160]	@ (800aa30 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 800a990:	9300      	str	r3, [sp, #0]
 800a992:	ed9f 1a2a 	vldr	s2, [pc, #168]	@ 800aa3c <_Z41__static_initialization_and_destruction_0ii+0xd8>
 800a996:	eddf 0a2a 	vldr	s1, [pc, #168]	@ 800aa40 <_Z41__static_initialization_and_destruction_0ii+0xdc>
 800a99a:	ed9f 0a2a 	vldr	s0, [pc, #168]	@ 800aa44 <_Z41__static_initialization_and_destruction_0ii+0xe0>
 800a99e:	2304      	movs	r3, #4
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	4929      	ldr	r1, [pc, #164]	@ (800aa48 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 800a9a4:	4829      	ldr	r0, [pc, #164]	@ (800aa4c <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 800a9a6:	f7fe fe72 	bl	800968e <_ZN9N20_MotorC1EP17TIM_HandleTypeDefmmP7Encoderfff>
);
 800a9aa:	4b23      	ldr	r3, [pc, #140]	@ (800aa38 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 800a9ac:	9300      	str	r3, [sp, #0]
 800a9ae:	ed9f 1a23 	vldr	s2, [pc, #140]	@ 800aa3c <_Z41__static_initialization_and_destruction_0ii+0xd8>
 800a9b2:	eddf 0a23 	vldr	s1, [pc, #140]	@ 800aa40 <_Z41__static_initialization_and_destruction_0ii+0xdc>
 800a9b6:	ed9f 0a23 	vldr	s0, [pc, #140]	@ 800aa44 <_Z41__static_initialization_and_destruction_0ii+0xe0>
 800a9ba:	230c      	movs	r3, #12
 800a9bc:	2208      	movs	r2, #8
 800a9be:	4922      	ldr	r1, [pc, #136]	@ (800aa48 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 800a9c0:	4823      	ldr	r0, [pc, #140]	@ (800aa50 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 800a9c2:	f7fe fe64 	bl	800968e <_ZN9N20_MotorC1EP17TIM_HandleTypeDefmmP7Encoderfff>
CCD ccd;
 800a9c6:	4823      	ldr	r0, [pc, #140]	@ (800aa54 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
 800a9c8:	f7ff fd84 	bl	800a4d4 <_ZN3CCDC1Ev>
Remote remote(&huart1);
 800a9cc:	4922      	ldr	r1, [pc, #136]	@ (800aa58 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 800a9ce:	4823      	ldr	r0, [pc, #140]	@ (800aa5c <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 800a9d0:	f7fe ffd2 	bl	8009978 <_ZN6RemoteC1EP20__UART_HandleTypeDef>
IMU imu;
 800a9d4:	4822      	ldr	r0, [pc, #136]	@ (800aa60 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
 800a9d6:	f7ff fd97 	bl	800a508 <_ZN3IMUC1Ev>
Chassis chassis(&left_motor, &right_motor, &imu, 112.5 / 1000);
 800a9da:	ed9f 0a22 	vldr	s0, [pc, #136]	@ 800aa64 <_Z41__static_initialization_and_destruction_0ii+0x100>
 800a9de:	4b20      	ldr	r3, [pc, #128]	@ (800aa60 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
 800a9e0:	4a1a      	ldr	r2, [pc, #104]	@ (800aa4c <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 800a9e2:	491b      	ldr	r1, [pc, #108]	@ (800aa50 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 800a9e4:	4820      	ldr	r0, [pc, #128]	@ (800aa68 <_Z41__static_initialization_and_destruction_0ii+0x104>)
 800a9e6:	f7fd fcc5 	bl	8008374 <_ZN7ChassisC1EP9N20_MotorS1_P3IMUf>
Controller controller(&chassis);
 800a9ea:	491f      	ldr	r1, [pc, #124]	@ (800aa68 <_Z41__static_initialization_and_destruction_0ii+0x104>)
 800a9ec:	481f      	ldr	r0, [pc, #124]	@ (800aa6c <_Z41__static_initialization_and_destruction_0ii+0x108>)
 800a9ee:	f7fd fff3 	bl	80089d8 <_ZN10ControllerC1EP7Chassis>
PID tracking_PID(0.004,0,0,0.1,0.005,0.1,0.1);
 800a9f2:	ed9f 3a1f 	vldr	s6, [pc, #124]	@ 800aa70 <_Z41__static_initialization_and_destruction_0ii+0x10c>
 800a9f6:	eddf 2a1e 	vldr	s5, [pc, #120]	@ 800aa70 <_Z41__static_initialization_and_destruction_0ii+0x10c>
 800a9fa:	ed9f 2a1e 	vldr	s4, [pc, #120]	@ 800aa74 <_Z41__static_initialization_and_destruction_0ii+0x110>
 800a9fe:	eddf 1a1c 	vldr	s3, [pc, #112]	@ 800aa70 <_Z41__static_initialization_and_destruction_0ii+0x10c>
 800aa02:	ed9f 1a0e 	vldr	s2, [pc, #56]	@ 800aa3c <_Z41__static_initialization_and_destruction_0ii+0xd8>
 800aa06:	eddf 0a0d 	vldr	s1, [pc, #52]	@ 800aa3c <_Z41__static_initialization_and_destruction_0ii+0xd8>
 800aa0a:	ed9f 0a1b 	vldr	s0, [pc, #108]	@ 800aa78 <_Z41__static_initialization_and_destruction_0ii+0x114>
 800aa0e:	481b      	ldr	r0, [pc, #108]	@ (800aa7c <_Z41__static_initialization_and_destruction_0ii+0x118>)
 800aa10:	f7fe ff6c 	bl	80098ec <_ZN3PIDC1Efffffff>
Tracking tracking(&chassis,&ccd,&tracking_PID,&controller);
 800aa14:	4b15      	ldr	r3, [pc, #84]	@ (800aa6c <_Z41__static_initialization_and_destruction_0ii+0x108>)
 800aa16:	9300      	str	r3, [sp, #0]
 800aa18:	4b18      	ldr	r3, [pc, #96]	@ (800aa7c <_Z41__static_initialization_and_destruction_0ii+0x118>)
 800aa1a:	4a0e      	ldr	r2, [pc, #56]	@ (800aa54 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
 800aa1c:	4912      	ldr	r1, [pc, #72]	@ (800aa68 <_Z41__static_initialization_and_destruction_0ii+0x104>)
 800aa1e:	4818      	ldr	r0, [pc, #96]	@ (800aa80 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
 800aa20:	f7fe ffea 	bl	80099f8 <_ZN8TrackingC1EP7ChassisP3CCDP3PIDP10Controller>
}
 800aa24:	bf00      	nop
 800aa26:	3708      	adds	r7, #8
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	bd80      	pop	{r7, pc}
 800aa2c:	20000644 	.word	0x20000644
 800aa30:	200008b8 	.word	0x200008b8
 800aa34:	2000056c 	.word	0x2000056c
 800aa38:	200008cc 	.word	0x200008cc
 800aa3c:	00000000 	.word	0x00000000
 800aa40:	3c87dce8 	.word	0x3c87dce8
 800aa44:	46026000 	.word	0x46026000
 800aa48:	20000524 	.word	0x20000524
 800aa4c:	200008e0 	.word	0x200008e0
 800aa50:	2000090c 	.word	0x2000090c
 800aa54:	20000938 	.word	0x20000938
 800aa58:	20000764 	.word	0x20000764
 800aa5c:	20000a48 	.word	0x20000a48
 800aa60:	20000b2c 	.word	0x20000b2c
 800aa64:	3de66666 	.word	0x3de66666
 800aa68:	20000b70 	.word	0x20000b70
 800aa6c:	20000bb8 	.word	0x20000bb8
 800aa70:	3dcccccd 	.word	0x3dcccccd
 800aa74:	3ba3d70a 	.word	0x3ba3d70a
 800aa78:	3b83126f 	.word	0x3b83126f
 800aa7c:	20000c04 	.word	0x20000c04
 800aa80:	20000c3c 	.word	0x20000c3c

0800aa84 <_GLOBAL__sub_I_uart1_rx_buf>:
 800aa84:	b580      	push	{r7, lr}
 800aa86:	af00      	add	r7, sp, #0
 800aa88:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800aa8c:	2001      	movs	r0, #1
 800aa8e:	f7ff ff69 	bl	800a964 <_Z41__static_initialization_and_destruction_0ii>
 800aa92:	bd80      	pop	{r7, pc}

0800aa94 <arm_sin_cos_f32>:
 800aa94:	ed9f 6a46 	vldr	s12, [pc, #280]	@ 800abb0 <arm_sin_cos_f32+0x11c>
 800aa98:	eddf 7a46 	vldr	s15, [pc, #280]	@ 800abb4 <arm_sin_cos_f32+0x120>
 800aa9c:	4a46      	ldr	r2, [pc, #280]	@ (800abb8 <arm_sin_cos_f32+0x124>)
 800aa9e:	ed9f 4a47 	vldr	s8, [pc, #284]	@ 800abbc <arm_sin_cos_f32+0x128>
 800aaa2:	ee20 6a06 	vmul.f32	s12, s0, s12
 800aaa6:	b470      	push	{r4, r5, r6}
 800aaa8:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 800aaac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aab0:	bf48      	it	mi
 800aab2:	eeb1 6a46 	vnegmi.f32	s12, s12
 800aab6:	eefd 4ac6 	vcvt.s32.f32	s9, s12
 800aaba:	ed2d 8b02 	vpush	{d8}
 800aabe:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 800aac2:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 800aac6:	ee36 6a64 	vsub.f32	s12, s12, s9
 800aaca:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800aace:	ee66 4a27 	vmul.f32	s9, s12, s15
 800aad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aad6:	eefc 7ae4 	vcvt.u32.f32	s15, s9
 800aada:	ee17 3a90 	vmov	r3, s15
 800aade:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aae2:	f103 0480 	add.w	r4, r3, #128	@ 0x80
 800aae6:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 800aaea:	f3c4 0408 	ubfx	r4, r4, #0, #9
 800aaee:	ed96 2a00 	vldr	s4, [r6]
 800aaf2:	ed96 7a01 	vldr	s14, [r6, #4]
 800aaf6:	eb02 0584 	add.w	r5, r2, r4, lsl #2
 800aafa:	edd5 1a00 	vldr	s3, [r5]
 800aafe:	ed95 8a01 	vldr	s16, [r5, #4]
 800ab02:	eeb1 6a42 	vneg.f32	s12, s4
 800ab06:	ee78 5a61 	vsub.f32	s11, s16, s3
 800ab0a:	ee76 2a47 	vsub.f32	s5, s12, s14
 800ab0e:	ee76 0a06 	vadd.f32	s1, s12, s12
 800ab12:	ee07 3a90 	vmov	s15, r3
 800ab16:	ee70 0ac7 	vsub.f32	s1, s1, s14
 800ab1a:	eef8 3a67 	vcvt.f32.u32	s7, s15
 800ab1e:	ee37 7a42 	vsub.f32	s14, s14, s4
 800ab22:	ee35 5aa5 	vadd.f32	s10, s11, s11
 800ab26:	ee62 2a84 	vmul.f32	s5, s5, s8
 800ab2a:	ee31 3a88 	vadd.f32	s6, s3, s16
 800ab2e:	ee31 1aa1 	vadd.f32	s2, s3, s3
 800ab32:	ee74 7ae3 	vsub.f32	s15, s9, s7
 800ab36:	ee32 5ac5 	vsub.f32	s10, s5, s10
 800ab3a:	ee71 3a08 	vadd.f32	s7, s2, s16
 800ab3e:	ee60 2a84 	vmul.f32	s5, s1, s8
 800ab42:	ee63 4a04 	vmul.f32	s9, s6, s8
 800ab46:	ee77 0a07 	vadd.f32	s1, s14, s14
 800ab4a:	ee65 5aa6 	vmul.f32	s11, s11, s13
 800ab4e:	ee74 4ae0 	vsub.f32	s9, s9, s1
 800ab52:	ee67 6a26 	vmul.f32	s13, s14, s13
 800ab56:	ee23 7a84 	vmul.f32	s14, s7, s8
 800ab5a:	ee25 5a27 	vmul.f32	s10, s10, s15
 800ab5e:	ee75 5ae2 	vsub.f32	s11, s11, s5
 800ab62:	ee64 4aa7 	vmul.f32	s9, s9, s15
 800ab66:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800ab6a:	ee35 5a85 	vadd.f32	s10, s11, s10
 800ab6e:	ee37 7a24 	vadd.f32	s14, s14, s9
 800ab72:	ee25 5a27 	vmul.f32	s10, s10, s15
 800ab76:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ab7a:	ee66 5a04 	vmul.f32	s11, s12, s8
 800ab7e:	ee61 6a84 	vmul.f32	s13, s3, s8
 800ab82:	ee35 6a85 	vadd.f32	s12, s11, s10
 800ab86:	ee36 7a87 	vadd.f32	s14, s13, s14
 800ab8a:	ee26 6a27 	vmul.f32	s12, s12, s15
 800ab8e:	ecbd 8b02 	vpop	{d8}
 800ab92:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab96:	ee36 6a21 	vadd.f32	s12, s12, s3
 800ab9a:	ee77 7a82 	vadd.f32	s15, s15, s4
 800ab9e:	ed81 6a00 	vstr	s12, [r1]
 800aba2:	bf48      	it	mi
 800aba4:	eef1 7a67 	vnegmi.f32	s15, s15
 800aba8:	edc0 7a00 	vstr	s15, [r0]
 800abac:	bc70      	pop	{r4, r5, r6}
 800abae:	4770      	bx	lr
 800abb0:	3b360b61 	.word	0x3b360b61
 800abb4:	44000000 	.word	0x44000000
 800abb8:	0800cfb8 	.word	0x0800cfb8
 800abbc:	3c490fdb 	.word	0x3c490fdb

0800abc0 <atan2f>:
 800abc0:	f000 b822 	b.w	800ac08 <__ieee754_atan2f>

0800abc4 <sqrtf>:
 800abc4:	b508      	push	{r3, lr}
 800abc6:	ed2d 8b02 	vpush	{d8}
 800abca:	eeb0 8a40 	vmov.f32	s16, s0
 800abce:	f000 f817 	bl	800ac00 <__ieee754_sqrtf>
 800abd2:	eeb4 8a48 	vcmp.f32	s16, s16
 800abd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abda:	d60c      	bvs.n	800abf6 <sqrtf+0x32>
 800abdc:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800abfc <sqrtf+0x38>
 800abe0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800abe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abe8:	d505      	bpl.n	800abf6 <sqrtf+0x32>
 800abea:	f000 f991 	bl	800af10 <__errno>
 800abee:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800abf2:	2321      	movs	r3, #33	@ 0x21
 800abf4:	6003      	str	r3, [r0, #0]
 800abf6:	ecbd 8b02 	vpop	{d8}
 800abfa:	bd08      	pop	{r3, pc}
 800abfc:	00000000 	.word	0x00000000

0800ac00 <__ieee754_sqrtf>:
 800ac00:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800ac04:	4770      	bx	lr
	...

0800ac08 <__ieee754_atan2f>:
 800ac08:	ee10 2a90 	vmov	r2, s1
 800ac0c:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800ac10:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800ac14:	b510      	push	{r4, lr}
 800ac16:	eef0 7a40 	vmov.f32	s15, s0
 800ac1a:	d806      	bhi.n	800ac2a <__ieee754_atan2f+0x22>
 800ac1c:	ee10 0a10 	vmov	r0, s0
 800ac20:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800ac24:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800ac28:	d904      	bls.n	800ac34 <__ieee754_atan2f+0x2c>
 800ac2a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800ac2e:	eeb0 0a67 	vmov.f32	s0, s15
 800ac32:	bd10      	pop	{r4, pc}
 800ac34:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800ac38:	d103      	bne.n	800ac42 <__ieee754_atan2f+0x3a>
 800ac3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac3e:	f000 b883 	b.w	800ad48 <atanf>
 800ac42:	1794      	asrs	r4, r2, #30
 800ac44:	f004 0402 	and.w	r4, r4, #2
 800ac48:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800ac4c:	b943      	cbnz	r3, 800ac60 <__ieee754_atan2f+0x58>
 800ac4e:	2c02      	cmp	r4, #2
 800ac50:	d05e      	beq.n	800ad10 <__ieee754_atan2f+0x108>
 800ac52:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800ad24 <__ieee754_atan2f+0x11c>
 800ac56:	2c03      	cmp	r4, #3
 800ac58:	bf08      	it	eq
 800ac5a:	eef0 7a47 	vmoveq.f32	s15, s14
 800ac5e:	e7e6      	b.n	800ac2e <__ieee754_atan2f+0x26>
 800ac60:	b941      	cbnz	r1, 800ac74 <__ieee754_atan2f+0x6c>
 800ac62:	eddf 7a31 	vldr	s15, [pc, #196]	@ 800ad28 <__ieee754_atan2f+0x120>
 800ac66:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800ad2c <__ieee754_atan2f+0x124>
 800ac6a:	2800      	cmp	r0, #0
 800ac6c:	bfb8      	it	lt
 800ac6e:	eef0 7a47 	vmovlt.f32	s15, s14
 800ac72:	e7dc      	b.n	800ac2e <__ieee754_atan2f+0x26>
 800ac74:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800ac78:	d110      	bne.n	800ac9c <__ieee754_atan2f+0x94>
 800ac7a:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800ac7e:	f104 34ff 	add.w	r4, r4, #4294967295
 800ac82:	d107      	bne.n	800ac94 <__ieee754_atan2f+0x8c>
 800ac84:	2c02      	cmp	r4, #2
 800ac86:	d846      	bhi.n	800ad16 <__ieee754_atan2f+0x10e>
 800ac88:	4b29      	ldr	r3, [pc, #164]	@ (800ad30 <__ieee754_atan2f+0x128>)
 800ac8a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ac8e:	edd3 7a00 	vldr	s15, [r3]
 800ac92:	e7cc      	b.n	800ac2e <__ieee754_atan2f+0x26>
 800ac94:	2c02      	cmp	r4, #2
 800ac96:	d841      	bhi.n	800ad1c <__ieee754_atan2f+0x114>
 800ac98:	4b26      	ldr	r3, [pc, #152]	@ (800ad34 <__ieee754_atan2f+0x12c>)
 800ac9a:	e7f6      	b.n	800ac8a <__ieee754_atan2f+0x82>
 800ac9c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800aca0:	d0df      	beq.n	800ac62 <__ieee754_atan2f+0x5a>
 800aca2:	1a5b      	subs	r3, r3, r1
 800aca4:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800aca8:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800acac:	da1a      	bge.n	800ace4 <__ieee754_atan2f+0xdc>
 800acae:	2a00      	cmp	r2, #0
 800acb0:	da01      	bge.n	800acb6 <__ieee754_atan2f+0xae>
 800acb2:	313c      	adds	r1, #60	@ 0x3c
 800acb4:	db19      	blt.n	800acea <__ieee754_atan2f+0xe2>
 800acb6:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800acba:	f000 f919 	bl	800aef0 <fabsf>
 800acbe:	f000 f843 	bl	800ad48 <atanf>
 800acc2:	eef0 7a40 	vmov.f32	s15, s0
 800acc6:	2c01      	cmp	r4, #1
 800acc8:	d012      	beq.n	800acf0 <__ieee754_atan2f+0xe8>
 800acca:	2c02      	cmp	r4, #2
 800accc:	d017      	beq.n	800acfe <__ieee754_atan2f+0xf6>
 800acce:	2c00      	cmp	r4, #0
 800acd0:	d0ad      	beq.n	800ac2e <__ieee754_atan2f+0x26>
 800acd2:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800ad38 <__ieee754_atan2f+0x130>
 800acd6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800acda:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800ad3c <__ieee754_atan2f+0x134>
 800acde:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ace2:	e7a4      	b.n	800ac2e <__ieee754_atan2f+0x26>
 800ace4:	eddf 7a10 	vldr	s15, [pc, #64]	@ 800ad28 <__ieee754_atan2f+0x120>
 800ace8:	e7ed      	b.n	800acc6 <__ieee754_atan2f+0xbe>
 800acea:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800ad40 <__ieee754_atan2f+0x138>
 800acee:	e7ea      	b.n	800acc6 <__ieee754_atan2f+0xbe>
 800acf0:	ee17 3a90 	vmov	r3, s15
 800acf4:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800acf8:	ee07 3a90 	vmov	s15, r3
 800acfc:	e797      	b.n	800ac2e <__ieee754_atan2f+0x26>
 800acfe:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800ad38 <__ieee754_atan2f+0x130>
 800ad02:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ad06:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800ad3c <__ieee754_atan2f+0x134>
 800ad0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ad0e:	e78e      	b.n	800ac2e <__ieee754_atan2f+0x26>
 800ad10:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800ad3c <__ieee754_atan2f+0x134>
 800ad14:	e78b      	b.n	800ac2e <__ieee754_atan2f+0x26>
 800ad16:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800ad44 <__ieee754_atan2f+0x13c>
 800ad1a:	e788      	b.n	800ac2e <__ieee754_atan2f+0x26>
 800ad1c:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800ad40 <__ieee754_atan2f+0x138>
 800ad20:	e785      	b.n	800ac2e <__ieee754_atan2f+0x26>
 800ad22:	bf00      	nop
 800ad24:	c0490fdb 	.word	0xc0490fdb
 800ad28:	3fc90fdb 	.word	0x3fc90fdb
 800ad2c:	bfc90fdb 	.word	0xbfc90fdb
 800ad30:	0800d7c8 	.word	0x0800d7c8
 800ad34:	0800d7bc 	.word	0x0800d7bc
 800ad38:	33bbbd2e 	.word	0x33bbbd2e
 800ad3c:	40490fdb 	.word	0x40490fdb
 800ad40:	00000000 	.word	0x00000000
 800ad44:	3f490fdb 	.word	0x3f490fdb

0800ad48 <atanf>:
 800ad48:	b538      	push	{r3, r4, r5, lr}
 800ad4a:	ee10 5a10 	vmov	r5, s0
 800ad4e:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800ad52:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800ad56:	eef0 7a40 	vmov.f32	s15, s0
 800ad5a:	d310      	bcc.n	800ad7e <atanf+0x36>
 800ad5c:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800ad60:	d904      	bls.n	800ad6c <atanf+0x24>
 800ad62:	ee70 7a00 	vadd.f32	s15, s0, s0
 800ad66:	eeb0 0a67 	vmov.f32	s0, s15
 800ad6a:	bd38      	pop	{r3, r4, r5, pc}
 800ad6c:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800aea4 <atanf+0x15c>
 800ad70:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800aea8 <atanf+0x160>
 800ad74:	2d00      	cmp	r5, #0
 800ad76:	bfc8      	it	gt
 800ad78:	eef0 7a47 	vmovgt.f32	s15, s14
 800ad7c:	e7f3      	b.n	800ad66 <atanf+0x1e>
 800ad7e:	4b4b      	ldr	r3, [pc, #300]	@ (800aeac <atanf+0x164>)
 800ad80:	429c      	cmp	r4, r3
 800ad82:	d810      	bhi.n	800ada6 <atanf+0x5e>
 800ad84:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800ad88:	d20a      	bcs.n	800ada0 <atanf+0x58>
 800ad8a:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800aeb0 <atanf+0x168>
 800ad8e:	ee30 7a07 	vadd.f32	s14, s0, s14
 800ad92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ad96:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800ad9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad9e:	dce2      	bgt.n	800ad66 <atanf+0x1e>
 800ada0:	f04f 33ff 	mov.w	r3, #4294967295
 800ada4:	e013      	b.n	800adce <atanf+0x86>
 800ada6:	f000 f8a3 	bl	800aef0 <fabsf>
 800adaa:	4b42      	ldr	r3, [pc, #264]	@ (800aeb4 <atanf+0x16c>)
 800adac:	429c      	cmp	r4, r3
 800adae:	d84f      	bhi.n	800ae50 <atanf+0x108>
 800adb0:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800adb4:	429c      	cmp	r4, r3
 800adb6:	d841      	bhi.n	800ae3c <atanf+0xf4>
 800adb8:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800adbc:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800adc0:	eea0 7a27 	vfma.f32	s14, s0, s15
 800adc4:	2300      	movs	r3, #0
 800adc6:	ee30 0a27 	vadd.f32	s0, s0, s15
 800adca:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800adce:	1c5a      	adds	r2, r3, #1
 800add0:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800add4:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800aeb8 <atanf+0x170>
 800add8:	eddf 5a38 	vldr	s11, [pc, #224]	@ 800aebc <atanf+0x174>
 800addc:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 800aec0 <atanf+0x178>
 800ade0:	ee66 6a06 	vmul.f32	s13, s12, s12
 800ade4:	eee6 5a87 	vfma.f32	s11, s13, s14
 800ade8:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800aec4 <atanf+0x17c>
 800adec:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800adf0:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800aec8 <atanf+0x180>
 800adf4:	eee7 5a26 	vfma.f32	s11, s14, s13
 800adf8:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800aecc <atanf+0x184>
 800adfc:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800ae00:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800aed0 <atanf+0x188>
 800ae04:	eee7 5a26 	vfma.f32	s11, s14, s13
 800ae08:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800aed4 <atanf+0x18c>
 800ae0c:	eea6 5a87 	vfma.f32	s10, s13, s14
 800ae10:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800aed8 <atanf+0x190>
 800ae14:	eea5 7a26 	vfma.f32	s14, s10, s13
 800ae18:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 800aedc <atanf+0x194>
 800ae1c:	eea7 5a26 	vfma.f32	s10, s14, s13
 800ae20:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800aee0 <atanf+0x198>
 800ae24:	eea5 7a26 	vfma.f32	s14, s10, s13
 800ae28:	ee27 7a26 	vmul.f32	s14, s14, s13
 800ae2c:	eea5 7a86 	vfma.f32	s14, s11, s12
 800ae30:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ae34:	d121      	bne.n	800ae7a <atanf+0x132>
 800ae36:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ae3a:	e794      	b.n	800ad66 <atanf+0x1e>
 800ae3c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800ae40:	ee30 7a67 	vsub.f32	s14, s0, s15
 800ae44:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ae48:	2301      	movs	r3, #1
 800ae4a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ae4e:	e7be      	b.n	800adce <atanf+0x86>
 800ae50:	4b24      	ldr	r3, [pc, #144]	@ (800aee4 <atanf+0x19c>)
 800ae52:	429c      	cmp	r4, r3
 800ae54:	d80b      	bhi.n	800ae6e <atanf+0x126>
 800ae56:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800ae5a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ae5e:	eea0 7a27 	vfma.f32	s14, s0, s15
 800ae62:	2302      	movs	r3, #2
 800ae64:	ee70 6a67 	vsub.f32	s13, s0, s15
 800ae68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae6c:	e7af      	b.n	800adce <atanf+0x86>
 800ae6e:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800ae72:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ae76:	2303      	movs	r3, #3
 800ae78:	e7a9      	b.n	800adce <atanf+0x86>
 800ae7a:	4a1b      	ldr	r2, [pc, #108]	@ (800aee8 <atanf+0x1a0>)
 800ae7c:	491b      	ldr	r1, [pc, #108]	@ (800aeec <atanf+0x1a4>)
 800ae7e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800ae82:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800ae86:	edd3 6a00 	vldr	s13, [r3]
 800ae8a:	ee37 7a66 	vsub.f32	s14, s14, s13
 800ae8e:	2d00      	cmp	r5, #0
 800ae90:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ae94:	edd2 7a00 	vldr	s15, [r2]
 800ae98:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ae9c:	bfb8      	it	lt
 800ae9e:	eef1 7a67 	vneglt.f32	s15, s15
 800aea2:	e760      	b.n	800ad66 <atanf+0x1e>
 800aea4:	bfc90fdb 	.word	0xbfc90fdb
 800aea8:	3fc90fdb 	.word	0x3fc90fdb
 800aeac:	3edfffff 	.word	0x3edfffff
 800aeb0:	7149f2ca 	.word	0x7149f2ca
 800aeb4:	3f97ffff 	.word	0x3f97ffff
 800aeb8:	3c8569d7 	.word	0x3c8569d7
 800aebc:	3d4bda59 	.word	0x3d4bda59
 800aec0:	bd6ef16b 	.word	0xbd6ef16b
 800aec4:	3d886b35 	.word	0x3d886b35
 800aec8:	3dba2e6e 	.word	0x3dba2e6e
 800aecc:	3e124925 	.word	0x3e124925
 800aed0:	3eaaaaab 	.word	0x3eaaaaab
 800aed4:	bd15a221 	.word	0xbd15a221
 800aed8:	bd9d8795 	.word	0xbd9d8795
 800aedc:	bde38e38 	.word	0xbde38e38
 800aee0:	be4ccccd 	.word	0xbe4ccccd
 800aee4:	401bffff 	.word	0x401bffff
 800aee8:	0800d7e4 	.word	0x0800d7e4
 800aeec:	0800d7d4 	.word	0x0800d7d4

0800aef0 <fabsf>:
 800aef0:	ee10 3a10 	vmov	r3, s0
 800aef4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800aef8:	ee00 3a10 	vmov	s0, r3
 800aefc:	4770      	bx	lr

0800aefe <memset>:
 800aefe:	4402      	add	r2, r0
 800af00:	4603      	mov	r3, r0
 800af02:	4293      	cmp	r3, r2
 800af04:	d100      	bne.n	800af08 <memset+0xa>
 800af06:	4770      	bx	lr
 800af08:	f803 1b01 	strb.w	r1, [r3], #1
 800af0c:	e7f9      	b.n	800af02 <memset+0x4>
	...

0800af10 <__errno>:
 800af10:	4b01      	ldr	r3, [pc, #4]	@ (800af18 <__errno+0x8>)
 800af12:	6818      	ldr	r0, [r3, #0]
 800af14:	4770      	bx	lr
 800af16:	bf00      	nop
 800af18:	20000228 	.word	0x20000228

0800af1c <__libc_init_array>:
 800af1c:	b570      	push	{r4, r5, r6, lr}
 800af1e:	4d0d      	ldr	r5, [pc, #52]	@ (800af54 <__libc_init_array+0x38>)
 800af20:	4c0d      	ldr	r4, [pc, #52]	@ (800af58 <__libc_init_array+0x3c>)
 800af22:	1b64      	subs	r4, r4, r5
 800af24:	10a4      	asrs	r4, r4, #2
 800af26:	2600      	movs	r6, #0
 800af28:	42a6      	cmp	r6, r4
 800af2a:	d109      	bne.n	800af40 <__libc_init_array+0x24>
 800af2c:	4d0b      	ldr	r5, [pc, #44]	@ (800af5c <__libc_init_array+0x40>)
 800af2e:	4c0c      	ldr	r4, [pc, #48]	@ (800af60 <__libc_init_array+0x44>)
 800af30:	f000 f826 	bl	800af80 <_init>
 800af34:	1b64      	subs	r4, r4, r5
 800af36:	10a4      	asrs	r4, r4, #2
 800af38:	2600      	movs	r6, #0
 800af3a:	42a6      	cmp	r6, r4
 800af3c:	d105      	bne.n	800af4a <__libc_init_array+0x2e>
 800af3e:	bd70      	pop	{r4, r5, r6, pc}
 800af40:	f855 3b04 	ldr.w	r3, [r5], #4
 800af44:	4798      	blx	r3
 800af46:	3601      	adds	r6, #1
 800af48:	e7ee      	b.n	800af28 <__libc_init_array+0xc>
 800af4a:	f855 3b04 	ldr.w	r3, [r5], #4
 800af4e:	4798      	blx	r3
 800af50:	3601      	adds	r6, #1
 800af52:	e7f2      	b.n	800af3a <__libc_init_array+0x1e>
 800af54:	0800d7fc 	.word	0x0800d7fc
 800af58:	0800d7fc 	.word	0x0800d7fc
 800af5c:	0800d7fc 	.word	0x0800d7fc
 800af60:	0800d804 	.word	0x0800d804

0800af64 <memcpy>:
 800af64:	440a      	add	r2, r1
 800af66:	4291      	cmp	r1, r2
 800af68:	f100 33ff 	add.w	r3, r0, #4294967295
 800af6c:	d100      	bne.n	800af70 <memcpy+0xc>
 800af6e:	4770      	bx	lr
 800af70:	b510      	push	{r4, lr}
 800af72:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af76:	f803 4f01 	strb.w	r4, [r3, #1]!
 800af7a:	4291      	cmp	r1, r2
 800af7c:	d1f9      	bne.n	800af72 <memcpy+0xe>
 800af7e:	bd10      	pop	{r4, pc}

0800af80 <_init>:
 800af80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af82:	bf00      	nop
 800af84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af86:	bc08      	pop	{r3}
 800af88:	469e      	mov	lr, r3
 800af8a:	4770      	bx	lr

0800af8c <_fini>:
 800af8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af8e:	bf00      	nop
 800af90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af92:	bc08      	pop	{r3}
 800af94:	469e      	mov	lr, r3
 800af96:	4770      	bx	lr
