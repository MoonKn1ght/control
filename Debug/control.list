
control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e30  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08005fb8  08005fb8  00006fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005fd0  08005fd0  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  08005fd0  08005fd0  00006fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005fd8  08005fd8  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08005fd8  08005fd8  00006fd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005fe0  08005fe0  00006fe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005fe4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000700c  2**0
                  CONTENTS
 10 .bss          0000061c  2000000c  2000000c  0000700c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000628  20000628  0000700c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b55d  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b8b  00000000  00000000  00022599  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014f0  00000000  00000000  00026128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001069  00000000  00000000  00027618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000272cf  00000000  00000000  00028681  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d5af  00000000  00000000  0004f950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1539  00000000  00000000  0006ceff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014e438  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005794  00000000  00000000  0014e47c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004b  00000000  00000000  00153c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005fa0 	.word	0x08005fa0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005fa0 	.word	0x08005fa0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b084      	sub	sp, #16
 80004bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004be:	463b      	mov	r3, r7
 80004c0:	2200      	movs	r2, #0
 80004c2:	601a      	str	r2, [r3, #0]
 80004c4:	605a      	str	r2, [r3, #4]
 80004c6:	609a      	str	r2, [r3, #8]
 80004c8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80004ca:	4b21      	ldr	r3, [pc, #132]	@ (8000550 <MX_ADC1_Init+0x98>)
 80004cc:	4a21      	ldr	r2, [pc, #132]	@ (8000554 <MX_ADC1_Init+0x9c>)
 80004ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80004d0:	4b1f      	ldr	r3, [pc, #124]	@ (8000550 <MX_ADC1_Init+0x98>)
 80004d2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80004d6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004d8:	4b1d      	ldr	r3, [pc, #116]	@ (8000550 <MX_ADC1_Init+0x98>)
 80004da:	2200      	movs	r2, #0
 80004dc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80004de:	4b1c      	ldr	r3, [pc, #112]	@ (8000550 <MX_ADC1_Init+0x98>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80004e4:	4b1a      	ldr	r3, [pc, #104]	@ (8000550 <MX_ADC1_Init+0x98>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004ea:	4b19      	ldr	r3, [pc, #100]	@ (8000550 <MX_ADC1_Init+0x98>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004f2:	4b17      	ldr	r3, [pc, #92]	@ (8000550 <MX_ADC1_Init+0x98>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004f8:	4b15      	ldr	r3, [pc, #84]	@ (8000550 <MX_ADC1_Init+0x98>)
 80004fa:	4a17      	ldr	r2, [pc, #92]	@ (8000558 <MX_ADC1_Init+0xa0>)
 80004fc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004fe:	4b14      	ldr	r3, [pc, #80]	@ (8000550 <MX_ADC1_Init+0x98>)
 8000500:	2200      	movs	r2, #0
 8000502:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000504:	4b12      	ldr	r3, [pc, #72]	@ (8000550 <MX_ADC1_Init+0x98>)
 8000506:	2201      	movs	r2, #1
 8000508:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800050a:	4b11      	ldr	r3, [pc, #68]	@ (8000550 <MX_ADC1_Init+0x98>)
 800050c:	2200      	movs	r2, #0
 800050e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000512:	4b0f      	ldr	r3, [pc, #60]	@ (8000550 <MX_ADC1_Init+0x98>)
 8000514:	2201      	movs	r2, #1
 8000516:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000518:	480d      	ldr	r0, [pc, #52]	@ (8000550 <MX_ADC1_Init+0x98>)
 800051a:	f001 fea3 	bl	8002264 <HAL_ADC_Init>
 800051e:	4603      	mov	r3, r0
 8000520:	2b00      	cmp	r3, #0
 8000522:	d001      	beq.n	8000528 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000524:	f000 fcca 	bl	8000ebc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000528:	2306      	movs	r3, #6
 800052a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800052c:	2301      	movs	r3, #1
 800052e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000530:	2300      	movs	r3, #0
 8000532:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000534:	463b      	mov	r3, r7
 8000536:	4619      	mov	r1, r3
 8000538:	4805      	ldr	r0, [pc, #20]	@ (8000550 <MX_ADC1_Init+0x98>)
 800053a:	f001 fed7 	bl	80022ec <HAL_ADC_ConfigChannel>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d001      	beq.n	8000548 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000544:	f000 fcba 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000548:	bf00      	nop
 800054a:	3710      	adds	r7, #16
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}
 8000550:	20000028 	.word	0x20000028
 8000554:	40012000 	.word	0x40012000
 8000558:	0f000001 	.word	0x0f000001

0800055c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b084      	sub	sp, #16
 8000560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000562:	463b      	mov	r3, r7
 8000564:	2200      	movs	r2, #0
 8000566:	601a      	str	r2, [r3, #0]
 8000568:	605a      	str	r2, [r3, #4]
 800056a:	609a      	str	r2, [r3, #8]
 800056c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800056e:	4b21      	ldr	r3, [pc, #132]	@ (80005f4 <MX_ADC2_Init+0x98>)
 8000570:	4a21      	ldr	r2, [pc, #132]	@ (80005f8 <MX_ADC2_Init+0x9c>)
 8000572:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000574:	4b1f      	ldr	r3, [pc, #124]	@ (80005f4 <MX_ADC2_Init+0x98>)
 8000576:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800057a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800057c:	4b1d      	ldr	r3, [pc, #116]	@ (80005f4 <MX_ADC2_Init+0x98>)
 800057e:	2200      	movs	r2, #0
 8000580:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000582:	4b1c      	ldr	r3, [pc, #112]	@ (80005f4 <MX_ADC2_Init+0x98>)
 8000584:	2200      	movs	r2, #0
 8000586:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000588:	4b1a      	ldr	r3, [pc, #104]	@ (80005f4 <MX_ADC2_Init+0x98>)
 800058a:	2200      	movs	r2, #0
 800058c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800058e:	4b19      	ldr	r3, [pc, #100]	@ (80005f4 <MX_ADC2_Init+0x98>)
 8000590:	2200      	movs	r2, #0
 8000592:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000596:	4b17      	ldr	r3, [pc, #92]	@ (80005f4 <MX_ADC2_Init+0x98>)
 8000598:	2200      	movs	r2, #0
 800059a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800059c:	4b15      	ldr	r3, [pc, #84]	@ (80005f4 <MX_ADC2_Init+0x98>)
 800059e:	4a17      	ldr	r2, [pc, #92]	@ (80005fc <MX_ADC2_Init+0xa0>)
 80005a0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005a2:	4b14      	ldr	r3, [pc, #80]	@ (80005f4 <MX_ADC2_Init+0x98>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80005a8:	4b12      	ldr	r3, [pc, #72]	@ (80005f4 <MX_ADC2_Init+0x98>)
 80005aa:	2201      	movs	r2, #1
 80005ac:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80005ae:	4b11      	ldr	r3, [pc, #68]	@ (80005f4 <MX_ADC2_Init+0x98>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005b6:	4b0f      	ldr	r3, [pc, #60]	@ (80005f4 <MX_ADC2_Init+0x98>)
 80005b8:	2201      	movs	r2, #1
 80005ba:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80005bc:	480d      	ldr	r0, [pc, #52]	@ (80005f4 <MX_ADC2_Init+0x98>)
 80005be:	f001 fe51 	bl	8002264 <HAL_ADC_Init>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80005c8:	f000 fc78 	bl	8000ebc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80005cc:	2302      	movs	r3, #2
 80005ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80005d0:	2301      	movs	r3, #1
 80005d2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80005d4:	2307      	movs	r3, #7
 80005d6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80005d8:	463b      	mov	r3, r7
 80005da:	4619      	mov	r1, r3
 80005dc:	4805      	ldr	r0, [pc, #20]	@ (80005f4 <MX_ADC2_Init+0x98>)
 80005de:	f001 fe85 	bl	80022ec <HAL_ADC_ConfigChannel>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80005e8:	f000 fc68 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80005ec:	bf00      	nop
 80005ee:	3710      	adds	r7, #16
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	20000070 	.word	0x20000070
 80005f8:	40012100 	.word	0x40012100
 80005fc:	0f000001 	.word	0x0f000001

08000600 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b084      	sub	sp, #16
 8000604:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000606:	463b      	mov	r3, r7
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000612:	4b21      	ldr	r3, [pc, #132]	@ (8000698 <MX_ADC3_Init+0x98>)
 8000614:	4a21      	ldr	r2, [pc, #132]	@ (800069c <MX_ADC3_Init+0x9c>)
 8000616:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000618:	4b1f      	ldr	r3, [pc, #124]	@ (8000698 <MX_ADC3_Init+0x98>)
 800061a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800061e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000620:	4b1d      	ldr	r3, [pc, #116]	@ (8000698 <MX_ADC3_Init+0x98>)
 8000622:	2200      	movs	r2, #0
 8000624:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8000626:	4b1c      	ldr	r3, [pc, #112]	@ (8000698 <MX_ADC3_Init+0x98>)
 8000628:	2200      	movs	r2, #0
 800062a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800062c:	4b1a      	ldr	r3, [pc, #104]	@ (8000698 <MX_ADC3_Init+0x98>)
 800062e:	2200      	movs	r2, #0
 8000630:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000632:	4b19      	ldr	r3, [pc, #100]	@ (8000698 <MX_ADC3_Init+0x98>)
 8000634:	2200      	movs	r2, #0
 8000636:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800063a:	4b17      	ldr	r3, [pc, #92]	@ (8000698 <MX_ADC3_Init+0x98>)
 800063c:	2200      	movs	r2, #0
 800063e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000640:	4b15      	ldr	r3, [pc, #84]	@ (8000698 <MX_ADC3_Init+0x98>)
 8000642:	4a17      	ldr	r2, [pc, #92]	@ (80006a0 <MX_ADC3_Init+0xa0>)
 8000644:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000646:	4b14      	ldr	r3, [pc, #80]	@ (8000698 <MX_ADC3_Init+0x98>)
 8000648:	2200      	movs	r2, #0
 800064a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800064c:	4b12      	ldr	r3, [pc, #72]	@ (8000698 <MX_ADC3_Init+0x98>)
 800064e:	2201      	movs	r2, #1
 8000650:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000652:	4b11      	ldr	r3, [pc, #68]	@ (8000698 <MX_ADC3_Init+0x98>)
 8000654:	2200      	movs	r2, #0
 8000656:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800065a:	4b0f      	ldr	r3, [pc, #60]	@ (8000698 <MX_ADC3_Init+0x98>)
 800065c:	2201      	movs	r2, #1
 800065e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000660:	480d      	ldr	r0, [pc, #52]	@ (8000698 <MX_ADC3_Init+0x98>)
 8000662:	f001 fdff 	bl	8002264 <HAL_ADC_Init>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 800066c:	f000 fc26 	bl	8000ebc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000670:	2303      	movs	r3, #3
 8000672:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000674:	2301      	movs	r3, #1
 8000676:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000678:	2300      	movs	r3, #0
 800067a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800067c:	463b      	mov	r3, r7
 800067e:	4619      	mov	r1, r3
 8000680:	4805      	ldr	r0, [pc, #20]	@ (8000698 <MX_ADC3_Init+0x98>)
 8000682:	f001 fe33 	bl	80022ec <HAL_ADC_ConfigChannel>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 800068c:	f000 fc16 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000690:	bf00      	nop
 8000692:	3710      	adds	r7, #16
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	200000b8 	.word	0x200000b8
 800069c:	40012200 	.word	0x40012200
 80006a0:	0f000001 	.word	0x0f000001

080006a4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b08e      	sub	sp, #56	@ 0x38
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
 80006b8:	60da      	str	r2, [r3, #12]
 80006ba:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a52      	ldr	r2, [pc, #328]	@ (800080c <HAL_ADC_MspInit+0x168>)
 80006c2:	4293      	cmp	r3, r2
 80006c4:	d142      	bne.n	800074c <HAL_ADC_MspInit+0xa8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006c6:	2300      	movs	r3, #0
 80006c8:	623b      	str	r3, [r7, #32]
 80006ca:	4b51      	ldr	r3, [pc, #324]	@ (8000810 <HAL_ADC_MspInit+0x16c>)
 80006cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006ce:	4a50      	ldr	r2, [pc, #320]	@ (8000810 <HAL_ADC_MspInit+0x16c>)
 80006d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80006d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80006d6:	4b4e      	ldr	r3, [pc, #312]	@ (8000810 <HAL_ADC_MspInit+0x16c>)
 80006d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80006de:	623b      	str	r3, [r7, #32]
 80006e0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	61fb      	str	r3, [r7, #28]
 80006e6:	4b4a      	ldr	r3, [pc, #296]	@ (8000810 <HAL_ADC_MspInit+0x16c>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ea:	4a49      	ldr	r2, [pc, #292]	@ (8000810 <HAL_ADC_MspInit+0x16c>)
 80006ec:	f043 0301 	orr.w	r3, r3, #1
 80006f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006f2:	4b47      	ldr	r3, [pc, #284]	@ (8000810 <HAL_ADC_MspInit+0x16c>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f6:	f003 0301 	and.w	r3, r3, #1
 80006fa:	61fb      	str	r3, [r7, #28]
 80006fc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	61bb      	str	r3, [r7, #24]
 8000702:	4b43      	ldr	r3, [pc, #268]	@ (8000810 <HAL_ADC_MspInit+0x16c>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000706:	4a42      	ldr	r2, [pc, #264]	@ (8000810 <HAL_ADC_MspInit+0x16c>)
 8000708:	f043 0302 	orr.w	r3, r3, #2
 800070c:	6313      	str	r3, [r2, #48]	@ 0x30
 800070e:	4b40      	ldr	r3, [pc, #256]	@ (8000810 <HAL_ADC_MspInit+0x16c>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000712:	f003 0302 	and.w	r3, r3, #2
 8000716:	61bb      	str	r3, [r7, #24]
 8000718:	69bb      	ldr	r3, [r7, #24]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800071a:	23c0      	movs	r3, #192	@ 0xc0
 800071c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800071e:	2303      	movs	r3, #3
 8000720:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000722:	2300      	movs	r3, #0
 8000724:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000726:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800072a:	4619      	mov	r1, r3
 800072c:	4839      	ldr	r0, [pc, #228]	@ (8000814 <HAL_ADC_MspInit+0x170>)
 800072e:	f002 fa9b 	bl	8002c68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000732:	2303      	movs	r3, #3
 8000734:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000736:	2303      	movs	r3, #3
 8000738:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073a:	2300      	movs	r3, #0
 800073c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800073e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000742:	4619      	mov	r1, r3
 8000744:	4834      	ldr	r0, [pc, #208]	@ (8000818 <HAL_ADC_MspInit+0x174>)
 8000746:	f002 fa8f 	bl	8002c68 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 800074a:	e05a      	b.n	8000802 <HAL_ADC_MspInit+0x15e>
  else if(adcHandle->Instance==ADC2)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a32      	ldr	r2, [pc, #200]	@ (800081c <HAL_ADC_MspInit+0x178>)
 8000752:	4293      	cmp	r3, r2
 8000754:	d128      	bne.n	80007a8 <HAL_ADC_MspInit+0x104>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	617b      	str	r3, [r7, #20]
 800075a:	4b2d      	ldr	r3, [pc, #180]	@ (8000810 <HAL_ADC_MspInit+0x16c>)
 800075c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800075e:	4a2c      	ldr	r2, [pc, #176]	@ (8000810 <HAL_ADC_MspInit+0x16c>)
 8000760:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000764:	6453      	str	r3, [r2, #68]	@ 0x44
 8000766:	4b2a      	ldr	r3, [pc, #168]	@ (8000810 <HAL_ADC_MspInit+0x16c>)
 8000768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800076a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800076e:	617b      	str	r3, [r7, #20]
 8000770:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	613b      	str	r3, [r7, #16]
 8000776:	4b26      	ldr	r3, [pc, #152]	@ (8000810 <HAL_ADC_MspInit+0x16c>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077a:	4a25      	ldr	r2, [pc, #148]	@ (8000810 <HAL_ADC_MspInit+0x16c>)
 800077c:	f043 0301 	orr.w	r3, r3, #1
 8000780:	6313      	str	r3, [r2, #48]	@ 0x30
 8000782:	4b23      	ldr	r3, [pc, #140]	@ (8000810 <HAL_ADC_MspInit+0x16c>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000786:	f003 0301 	and.w	r3, r3, #1
 800078a:	613b      	str	r3, [r7, #16]
 800078c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800078e:	2304      	movs	r3, #4
 8000790:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000792:	2303      	movs	r3, #3
 8000794:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000796:	2300      	movs	r3, #0
 8000798:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800079a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800079e:	4619      	mov	r1, r3
 80007a0:	481c      	ldr	r0, [pc, #112]	@ (8000814 <HAL_ADC_MspInit+0x170>)
 80007a2:	f002 fa61 	bl	8002c68 <HAL_GPIO_Init>
}
 80007a6:	e02c      	b.n	8000802 <HAL_ADC_MspInit+0x15e>
  else if(adcHandle->Instance==ADC3)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a1c      	ldr	r2, [pc, #112]	@ (8000820 <HAL_ADC_MspInit+0x17c>)
 80007ae:	4293      	cmp	r3, r2
 80007b0:	d127      	bne.n	8000802 <HAL_ADC_MspInit+0x15e>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	60fb      	str	r3, [r7, #12]
 80007b6:	4b16      	ldr	r3, [pc, #88]	@ (8000810 <HAL_ADC_MspInit+0x16c>)
 80007b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007ba:	4a15      	ldr	r2, [pc, #84]	@ (8000810 <HAL_ADC_MspInit+0x16c>)
 80007bc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80007c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80007c2:	4b13      	ldr	r3, [pc, #76]	@ (8000810 <HAL_ADC_MspInit+0x16c>)
 80007c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	60bb      	str	r3, [r7, #8]
 80007d2:	4b0f      	ldr	r3, [pc, #60]	@ (8000810 <HAL_ADC_MspInit+0x16c>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d6:	4a0e      	ldr	r2, [pc, #56]	@ (8000810 <HAL_ADC_MspInit+0x16c>)
 80007d8:	f043 0301 	orr.w	r3, r3, #1
 80007dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007de:	4b0c      	ldr	r3, [pc, #48]	@ (8000810 <HAL_ADC_MspInit+0x16c>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	60bb      	str	r3, [r7, #8]
 80007e8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80007ea:	2308      	movs	r3, #8
 80007ec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007ee:	2303      	movs	r3, #3
 80007f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007fa:	4619      	mov	r1, r3
 80007fc:	4805      	ldr	r0, [pc, #20]	@ (8000814 <HAL_ADC_MspInit+0x170>)
 80007fe:	f002 fa33 	bl	8002c68 <HAL_GPIO_Init>
}
 8000802:	bf00      	nop
 8000804:	3738      	adds	r7, #56	@ 0x38
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	40012000 	.word	0x40012000
 8000810:	40023800 	.word	0x40023800
 8000814:	40020000 	.word	0x40020000
 8000818:	40020400 	.word	0x40020400
 800081c:	40012100 	.word	0x40012100
 8000820:	40012200 	.word	0x40012200

08000824 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000828:	4b16      	ldr	r3, [pc, #88]	@ (8000884 <MX_CAN1_Init+0x60>)
 800082a:	4a17      	ldr	r2, [pc, #92]	@ (8000888 <MX_CAN1_Init+0x64>)
 800082c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800082e:	4b15      	ldr	r3, [pc, #84]	@ (8000884 <MX_CAN1_Init+0x60>)
 8000830:	2210      	movs	r2, #16
 8000832:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000834:	4b13      	ldr	r3, [pc, #76]	@ (8000884 <MX_CAN1_Init+0x60>)
 8000836:	2200      	movs	r2, #0
 8000838:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800083a:	4b12      	ldr	r3, [pc, #72]	@ (8000884 <MX_CAN1_Init+0x60>)
 800083c:	2200      	movs	r2, #0
 800083e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000840:	4b10      	ldr	r3, [pc, #64]	@ (8000884 <MX_CAN1_Init+0x60>)
 8000842:	2200      	movs	r2, #0
 8000844:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000846:	4b0f      	ldr	r3, [pc, #60]	@ (8000884 <MX_CAN1_Init+0x60>)
 8000848:	2200      	movs	r2, #0
 800084a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800084c:	4b0d      	ldr	r3, [pc, #52]	@ (8000884 <MX_CAN1_Init+0x60>)
 800084e:	2200      	movs	r2, #0
 8000850:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000852:	4b0c      	ldr	r3, [pc, #48]	@ (8000884 <MX_CAN1_Init+0x60>)
 8000854:	2200      	movs	r2, #0
 8000856:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000858:	4b0a      	ldr	r3, [pc, #40]	@ (8000884 <MX_CAN1_Init+0x60>)
 800085a:	2200      	movs	r2, #0
 800085c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800085e:	4b09      	ldr	r3, [pc, #36]	@ (8000884 <MX_CAN1_Init+0x60>)
 8000860:	2200      	movs	r2, #0
 8000862:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000864:	4b07      	ldr	r3, [pc, #28]	@ (8000884 <MX_CAN1_Init+0x60>)
 8000866:	2200      	movs	r2, #0
 8000868:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800086a:	4b06      	ldr	r3, [pc, #24]	@ (8000884 <MX_CAN1_Init+0x60>)
 800086c:	2200      	movs	r2, #0
 800086e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000870:	4804      	ldr	r0, [pc, #16]	@ (8000884 <MX_CAN1_Init+0x60>)
 8000872:	f001 ff59 	bl	8002728 <HAL_CAN_Init>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 800087c:	f000 fb1e 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000880:	bf00      	nop
 8000882:	bd80      	pop	{r7, pc}
 8000884:	20000100 	.word	0x20000100
 8000888:	40006400 	.word	0x40006400

0800088c <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000890:	4b16      	ldr	r3, [pc, #88]	@ (80008ec <MX_CAN2_Init+0x60>)
 8000892:	4a17      	ldr	r2, [pc, #92]	@ (80008f0 <MX_CAN2_Init+0x64>)
 8000894:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 8000896:	4b15      	ldr	r3, [pc, #84]	@ (80008ec <MX_CAN2_Init+0x60>)
 8000898:	2210      	movs	r2, #16
 800089a:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 800089c:	4b13      	ldr	r3, [pc, #76]	@ (80008ec <MX_CAN2_Init+0x60>)
 800089e:	2200      	movs	r2, #0
 80008a0:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80008a2:	4b12      	ldr	r3, [pc, #72]	@ (80008ec <MX_CAN2_Init+0x60>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 80008a8:	4b10      	ldr	r3, [pc, #64]	@ (80008ec <MX_CAN2_Init+0x60>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 80008ae:	4b0f      	ldr	r3, [pc, #60]	@ (80008ec <MX_CAN2_Init+0x60>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80008b4:	4b0d      	ldr	r3, [pc, #52]	@ (80008ec <MX_CAN2_Init+0x60>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80008ba:	4b0c      	ldr	r3, [pc, #48]	@ (80008ec <MX_CAN2_Init+0x60>)
 80008bc:	2200      	movs	r2, #0
 80008be:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80008c0:	4b0a      	ldr	r3, [pc, #40]	@ (80008ec <MX_CAN2_Init+0x60>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80008c6:	4b09      	ldr	r3, [pc, #36]	@ (80008ec <MX_CAN2_Init+0x60>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80008cc:	4b07      	ldr	r3, [pc, #28]	@ (80008ec <MX_CAN2_Init+0x60>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80008d2:	4b06      	ldr	r3, [pc, #24]	@ (80008ec <MX_CAN2_Init+0x60>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80008d8:	4804      	ldr	r0, [pc, #16]	@ (80008ec <MX_CAN2_Init+0x60>)
 80008da:	f001 ff25 	bl	8002728 <HAL_CAN_Init>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 80008e4:	f000 faea 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80008e8:	bf00      	nop
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	20000128 	.word	0x20000128
 80008f0:	40006800 	.word	0x40006800

080008f4 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b08c      	sub	sp, #48	@ 0x30
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fc:	f107 031c 	add.w	r3, r7, #28
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	605a      	str	r2, [r3, #4]
 8000906:	609a      	str	r2, [r3, #8]
 8000908:	60da      	str	r2, [r3, #12]
 800090a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a43      	ldr	r2, [pc, #268]	@ (8000a20 <HAL_CAN_MspInit+0x12c>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d136      	bne.n	8000984 <HAL_CAN_MspInit+0x90>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000916:	4b43      	ldr	r3, [pc, #268]	@ (8000a24 <HAL_CAN_MspInit+0x130>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	3301      	adds	r3, #1
 800091c:	4a41      	ldr	r2, [pc, #260]	@ (8000a24 <HAL_CAN_MspInit+0x130>)
 800091e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000920:	4b40      	ldr	r3, [pc, #256]	@ (8000a24 <HAL_CAN_MspInit+0x130>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	2b01      	cmp	r3, #1
 8000926:	d10d      	bne.n	8000944 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000928:	2300      	movs	r3, #0
 800092a:	61bb      	str	r3, [r7, #24]
 800092c:	4b3e      	ldr	r3, [pc, #248]	@ (8000a28 <HAL_CAN_MspInit+0x134>)
 800092e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000930:	4a3d      	ldr	r2, [pc, #244]	@ (8000a28 <HAL_CAN_MspInit+0x134>)
 8000932:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000936:	6413      	str	r3, [r2, #64]	@ 0x40
 8000938:	4b3b      	ldr	r3, [pc, #236]	@ (8000a28 <HAL_CAN_MspInit+0x134>)
 800093a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800093c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000940:	61bb      	str	r3, [r7, #24]
 8000942:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000944:	2300      	movs	r3, #0
 8000946:	617b      	str	r3, [r7, #20]
 8000948:	4b37      	ldr	r3, [pc, #220]	@ (8000a28 <HAL_CAN_MspInit+0x134>)
 800094a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094c:	4a36      	ldr	r2, [pc, #216]	@ (8000a28 <HAL_CAN_MspInit+0x134>)
 800094e:	f043 0301 	orr.w	r3, r3, #1
 8000952:	6313      	str	r3, [r2, #48]	@ 0x30
 8000954:	4b34      	ldr	r3, [pc, #208]	@ (8000a28 <HAL_CAN_MspInit+0x134>)
 8000956:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000958:	f003 0301 	and.w	r3, r3, #1
 800095c:	617b      	str	r3, [r7, #20]
 800095e:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000960:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000964:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000966:	2302      	movs	r3, #2
 8000968:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800096e:	2303      	movs	r3, #3
 8000970:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000972:	2309      	movs	r3, #9
 8000974:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000976:	f107 031c 	add.w	r3, r7, #28
 800097a:	4619      	mov	r1, r3
 800097c:	482b      	ldr	r0, [pc, #172]	@ (8000a2c <HAL_CAN_MspInit+0x138>)
 800097e:	f002 f973 	bl	8002c68 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8000982:	e048      	b.n	8000a16 <HAL_CAN_MspInit+0x122>
  else if(canHandle->Instance==CAN2)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a29      	ldr	r2, [pc, #164]	@ (8000a30 <HAL_CAN_MspInit+0x13c>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d143      	bne.n	8000a16 <HAL_CAN_MspInit+0x122>
    __HAL_RCC_CAN2_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	613b      	str	r3, [r7, #16]
 8000992:	4b25      	ldr	r3, [pc, #148]	@ (8000a28 <HAL_CAN_MspInit+0x134>)
 8000994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000996:	4a24      	ldr	r2, [pc, #144]	@ (8000a28 <HAL_CAN_MspInit+0x134>)
 8000998:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800099c:	6413      	str	r3, [r2, #64]	@ 0x40
 800099e:	4b22      	ldr	r3, [pc, #136]	@ (8000a28 <HAL_CAN_MspInit+0x134>)
 80009a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009a2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80009a6:	613b      	str	r3, [r7, #16]
 80009a8:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80009aa:	4b1e      	ldr	r3, [pc, #120]	@ (8000a24 <HAL_CAN_MspInit+0x130>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	3301      	adds	r3, #1
 80009b0:	4a1c      	ldr	r2, [pc, #112]	@ (8000a24 <HAL_CAN_MspInit+0x130>)
 80009b2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80009b4:	4b1b      	ldr	r3, [pc, #108]	@ (8000a24 <HAL_CAN_MspInit+0x130>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	d10d      	bne.n	80009d8 <HAL_CAN_MspInit+0xe4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80009bc:	2300      	movs	r3, #0
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	4b19      	ldr	r3, [pc, #100]	@ (8000a28 <HAL_CAN_MspInit+0x134>)
 80009c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009c4:	4a18      	ldr	r2, [pc, #96]	@ (8000a28 <HAL_CAN_MspInit+0x134>)
 80009c6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80009ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80009cc:	4b16      	ldr	r3, [pc, #88]	@ (8000a28 <HAL_CAN_MspInit+0x134>)
 80009ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80009d4:	60fb      	str	r3, [r7, #12]
 80009d6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d8:	2300      	movs	r3, #0
 80009da:	60bb      	str	r3, [r7, #8]
 80009dc:	4b12      	ldr	r3, [pc, #72]	@ (8000a28 <HAL_CAN_MspInit+0x134>)
 80009de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e0:	4a11      	ldr	r2, [pc, #68]	@ (8000a28 <HAL_CAN_MspInit+0x134>)
 80009e2:	f043 0302 	orr.w	r3, r3, #2
 80009e6:	6313      	str	r3, [r2, #48]	@ 0x30
 80009e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000a28 <HAL_CAN_MspInit+0x134>)
 80009ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ec:	f003 0302 	and.w	r3, r3, #2
 80009f0:	60bb      	str	r3, [r7, #8]
 80009f2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_6;
 80009f4:	f44f 5382 	mov.w	r3, #4160	@ 0x1040
 80009f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fa:	2302      	movs	r3, #2
 80009fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a02:	2303      	movs	r3, #3
 8000a04:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000a06:	2309      	movs	r3, #9
 8000a08:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a0a:	f107 031c 	add.w	r3, r7, #28
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4808      	ldr	r0, [pc, #32]	@ (8000a34 <HAL_CAN_MspInit+0x140>)
 8000a12:	f002 f929 	bl	8002c68 <HAL_GPIO_Init>
}
 8000a16:	bf00      	nop
 8000a18:	3730      	adds	r7, #48	@ 0x30
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40006400 	.word	0x40006400
 8000a24:	20000150 	.word	0x20000150
 8000a28:	40023800 	.word	0x40023800
 8000a2c:	40020000 	.word	0x40020000
 8000a30:	40006800 	.word	0x40006800
 8000a34:	40020400 	.word	0x40020400

08000a38 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b08c      	sub	sp, #48	@ 0x30
 8000a3c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3e:	f107 031c 	add.w	r3, r7, #28
 8000a42:	2200      	movs	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	605a      	str	r2, [r3, #4]
 8000a48:	609a      	str	r2, [r3, #8]
 8000a4a:	60da      	str	r2, [r3, #12]
 8000a4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	61bb      	str	r3, [r7, #24]
 8000a52:	4b56      	ldr	r3, [pc, #344]	@ (8000bac <MX_GPIO_Init+0x174>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a56:	4a55      	ldr	r2, [pc, #340]	@ (8000bac <MX_GPIO_Init+0x174>)
 8000a58:	f043 0310 	orr.w	r3, r3, #16
 8000a5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a5e:	4b53      	ldr	r3, [pc, #332]	@ (8000bac <MX_GPIO_Init+0x174>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a62:	f003 0310 	and.w	r3, r3, #16
 8000a66:	61bb      	str	r3, [r7, #24]
 8000a68:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	617b      	str	r3, [r7, #20]
 8000a6e:	4b4f      	ldr	r3, [pc, #316]	@ (8000bac <MX_GPIO_Init+0x174>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a72:	4a4e      	ldr	r2, [pc, #312]	@ (8000bac <MX_GPIO_Init+0x174>)
 8000a74:	f043 0304 	orr.w	r3, r3, #4
 8000a78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a7a:	4b4c      	ldr	r3, [pc, #304]	@ (8000bac <MX_GPIO_Init+0x174>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7e:	f003 0304 	and.w	r3, r3, #4
 8000a82:	617b      	str	r3, [r7, #20]
 8000a84:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	613b      	str	r3, [r7, #16]
 8000a8a:	4b48      	ldr	r3, [pc, #288]	@ (8000bac <MX_GPIO_Init+0x174>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8e:	4a47      	ldr	r2, [pc, #284]	@ (8000bac <MX_GPIO_Init+0x174>)
 8000a90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a96:	4b45      	ldr	r3, [pc, #276]	@ (8000bac <MX_GPIO_Init+0x174>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a9e:	613b      	str	r3, [r7, #16]
 8000aa0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	60fb      	str	r3, [r7, #12]
 8000aa6:	4b41      	ldr	r3, [pc, #260]	@ (8000bac <MX_GPIO_Init+0x174>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aaa:	4a40      	ldr	r2, [pc, #256]	@ (8000bac <MX_GPIO_Init+0x174>)
 8000aac:	f043 0301 	orr.w	r3, r3, #1
 8000ab0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ab2:	4b3e      	ldr	r3, [pc, #248]	@ (8000bac <MX_GPIO_Init+0x174>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab6:	f003 0301 	and.w	r3, r3, #1
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	60bb      	str	r3, [r7, #8]
 8000ac2:	4b3a      	ldr	r3, [pc, #232]	@ (8000bac <MX_GPIO_Init+0x174>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac6:	4a39      	ldr	r2, [pc, #228]	@ (8000bac <MX_GPIO_Init+0x174>)
 8000ac8:	f043 0302 	orr.w	r3, r3, #2
 8000acc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ace:	4b37      	ldr	r3, [pc, #220]	@ (8000bac <MX_GPIO_Init+0x174>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad2:	f003 0302 	and.w	r3, r3, #2
 8000ad6:	60bb      	str	r3, [r7, #8]
 8000ad8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	607b      	str	r3, [r7, #4]
 8000ade:	4b33      	ldr	r3, [pc, #204]	@ (8000bac <MX_GPIO_Init+0x174>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae2:	4a32      	ldr	r2, [pc, #200]	@ (8000bac <MX_GPIO_Init+0x174>)
 8000ae4:	f043 0308 	orr.w	r3, r3, #8
 8000ae8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aea:	4b30      	ldr	r3, [pc, #192]	@ (8000bac <MX_GPIO_Init+0x174>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aee:	f003 0308 	and.w	r3, r3, #8
 8000af2:	607b      	str	r3, [r7, #4]
 8000af4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, BEEP_Pin|CCD_SI_Pin, GPIO_PIN_RESET);
 8000af6:	2200      	movs	r2, #0
 8000af8:	2105      	movs	r1, #5
 8000afa:	482d      	ldr	r0, [pc, #180]	@ (8000bb0 <MX_GPIO_Init+0x178>)
 8000afc:	f002 fa50 	bl	8002fa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000b00:	2200      	movs	r2, #0
 8000b02:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b06:	482b      	ldr	r0, [pc, #172]	@ (8000bb4 <MX_GPIO_Init+0x17c>)
 8000b08:	f002 fa4a 	bl	8002fa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	2102      	movs	r1, #2
 8000b10:	4828      	ldr	r0, [pc, #160]	@ (8000bb4 <MX_GPIO_Init+0x17c>)
 8000b12:	f002 fa45 	bl	8002fa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BEEP_Pin;
 8000b16:	2304      	movs	r3, #4
 8000b18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b22:	2300      	movs	r3, #0
 8000b24:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(BEEP_GPIO_Port, &GPIO_InitStruct);
 8000b26:	f107 031c 	add.w	r3, r7, #28
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4820      	ldr	r0, [pc, #128]	@ (8000bb0 <MX_GPIO_Init+0x178>)
 8000b2e:	f002 f89b 	bl	8002c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000b32:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b40:	2300      	movs	r3, #0
 8000b42:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000b44:	f107 031c 	add.w	r3, r7, #28
 8000b48:	4619      	mov	r1, r3
 8000b4a:	481a      	ldr	r0, [pc, #104]	@ (8000bb4 <MX_GPIO_Init+0x17c>)
 8000b4c:	f002 f88c 	bl	8002c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8000b50:	2302      	movs	r3, #2
 8000b52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b54:	2301      	movs	r3, #1
 8000b56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b5c:	2303      	movs	r3, #3
 8000b5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8000b60:	f107 031c 	add.w	r3, r7, #28
 8000b64:	4619      	mov	r1, r3
 8000b66:	4813      	ldr	r0, [pc, #76]	@ (8000bb4 <MX_GPIO_Init+0x17c>)
 8000b68:	f002 f87e 	bl	8002c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_Pin;
 8000b6c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000b70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b72:	2300      	movs	r3, #0
 8000b74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b76:	2301      	movs	r3, #1
 8000b78:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 8000b7a:	f107 031c 	add.w	r3, r7, #28
 8000b7e:	4619      	mov	r1, r3
 8000b80:	480d      	ldr	r0, [pc, #52]	@ (8000bb8 <MX_GPIO_Init+0x180>)
 8000b82:	f002 f871 	bl	8002c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CCD_SI_Pin;
 8000b86:	2301      	movs	r3, #1
 8000b88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b92:	2303      	movs	r3, #3
 8000b94:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CCD_SI_GPIO_Port, &GPIO_InitStruct);
 8000b96:	f107 031c 	add.w	r3, r7, #28
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4804      	ldr	r0, [pc, #16]	@ (8000bb0 <MX_GPIO_Init+0x178>)
 8000b9e:	f002 f863 	bl	8002c68 <HAL_GPIO_Init>

}
 8000ba2:	bf00      	nop
 8000ba4:	3730      	adds	r7, #48	@ 0x30
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40023800 	.word	0x40023800
 8000bb0:	40021000 	.word	0x40021000
 8000bb4:	40020800 	.word	0x40020800
 8000bb8:	40020000 	.word	0x40020000

08000bbc <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000bc0:	4b12      	ldr	r3, [pc, #72]	@ (8000c0c <MX_I2C1_Init+0x50>)
 8000bc2:	4a13      	ldr	r2, [pc, #76]	@ (8000c10 <MX_I2C1_Init+0x54>)
 8000bc4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000bc6:	4b11      	ldr	r3, [pc, #68]	@ (8000c0c <MX_I2C1_Init+0x50>)
 8000bc8:	4a12      	ldr	r2, [pc, #72]	@ (8000c14 <MX_I2C1_Init+0x58>)
 8000bca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000bcc:	4b0f      	ldr	r3, [pc, #60]	@ (8000c0c <MX_I2C1_Init+0x50>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000bd2:	4b0e      	ldr	r3, [pc, #56]	@ (8000c0c <MX_I2C1_Init+0x50>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bd8:	4b0c      	ldr	r3, [pc, #48]	@ (8000c0c <MX_I2C1_Init+0x50>)
 8000bda:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000bde:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000be0:	4b0a      	ldr	r3, [pc, #40]	@ (8000c0c <MX_I2C1_Init+0x50>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000be6:	4b09      	ldr	r3, [pc, #36]	@ (8000c0c <MX_I2C1_Init+0x50>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bec:	4b07      	ldr	r3, [pc, #28]	@ (8000c0c <MX_I2C1_Init+0x50>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bf2:	4b06      	ldr	r3, [pc, #24]	@ (8000c0c <MX_I2C1_Init+0x50>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bf8:	4804      	ldr	r0, [pc, #16]	@ (8000c0c <MX_I2C1_Init+0x50>)
 8000bfa:	f002 fa05 	bl	8003008 <HAL_I2C_Init>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c04:	f000 f95a 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c08:	bf00      	nop
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	20000154 	.word	0x20000154
 8000c10:	40005400 	.word	0x40005400
 8000c14:	000186a0 	.word	0x000186a0

08000c18 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000c1c:	4b12      	ldr	r3, [pc, #72]	@ (8000c68 <MX_I2C2_Init+0x50>)
 8000c1e:	4a13      	ldr	r2, [pc, #76]	@ (8000c6c <MX_I2C2_Init+0x54>)
 8000c20:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000c22:	4b11      	ldr	r3, [pc, #68]	@ (8000c68 <MX_I2C2_Init+0x50>)
 8000c24:	4a12      	ldr	r2, [pc, #72]	@ (8000c70 <MX_I2C2_Init+0x58>)
 8000c26:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c28:	4b0f      	ldr	r3, [pc, #60]	@ (8000c68 <MX_I2C2_Init+0x50>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000c2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c68 <MX_I2C2_Init+0x50>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c34:	4b0c      	ldr	r3, [pc, #48]	@ (8000c68 <MX_I2C2_Init+0x50>)
 8000c36:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000c3a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c3c:	4b0a      	ldr	r3, [pc, #40]	@ (8000c68 <MX_I2C2_Init+0x50>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000c42:	4b09      	ldr	r3, [pc, #36]	@ (8000c68 <MX_I2C2_Init+0x50>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c48:	4b07      	ldr	r3, [pc, #28]	@ (8000c68 <MX_I2C2_Init+0x50>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c4e:	4b06      	ldr	r3, [pc, #24]	@ (8000c68 <MX_I2C2_Init+0x50>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000c54:	4804      	ldr	r0, [pc, #16]	@ (8000c68 <MX_I2C2_Init+0x50>)
 8000c56:	f002 f9d7 	bl	8003008 <HAL_I2C_Init>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000c60:	f000 f92c 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000c64:	bf00      	nop
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	200001a8 	.word	0x200001a8
 8000c6c:	40005800 	.word	0x40005800
 8000c70:	000186a0 	.word	0x000186a0

08000c74 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b08c      	sub	sp, #48	@ 0x30
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7c:	f107 031c 	add.w	r3, r7, #28
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	605a      	str	r2, [r3, #4]
 8000c86:	609a      	str	r2, [r3, #8]
 8000c88:	60da      	str	r2, [r3, #12]
 8000c8a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a33      	ldr	r2, [pc, #204]	@ (8000d60 <HAL_I2C_MspInit+0xec>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d12d      	bne.n	8000cf2 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	61bb      	str	r3, [r7, #24]
 8000c9a:	4b32      	ldr	r3, [pc, #200]	@ (8000d64 <HAL_I2C_MspInit+0xf0>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9e:	4a31      	ldr	r2, [pc, #196]	@ (8000d64 <HAL_I2C_MspInit+0xf0>)
 8000ca0:	f043 0302 	orr.w	r3, r3, #2
 8000ca4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ca6:	4b2f      	ldr	r3, [pc, #188]	@ (8000d64 <HAL_I2C_MspInit+0xf0>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000caa:	f003 0302 	and.w	r3, r3, #2
 8000cae:	61bb      	str	r3, [r7, #24]
 8000cb0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000cb2:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000cb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cb8:	2312      	movs	r3, #18
 8000cba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc0:	2303      	movs	r3, #3
 8000cc2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cc4:	2304      	movs	r3, #4
 8000cc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc8:	f107 031c 	add.w	r3, r7, #28
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4826      	ldr	r0, [pc, #152]	@ (8000d68 <HAL_I2C_MspInit+0xf4>)
 8000cd0:	f001 ffca 	bl	8002c68 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	617b      	str	r3, [r7, #20]
 8000cd8:	4b22      	ldr	r3, [pc, #136]	@ (8000d64 <HAL_I2C_MspInit+0xf0>)
 8000cda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cdc:	4a21      	ldr	r2, [pc, #132]	@ (8000d64 <HAL_I2C_MspInit+0xf0>)
 8000cde:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ce2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ce4:	4b1f      	ldr	r3, [pc, #124]	@ (8000d64 <HAL_I2C_MspInit+0xf0>)
 8000ce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ce8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000cec:	617b      	str	r3, [r7, #20]
 8000cee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000cf0:	e031      	b.n	8000d56 <HAL_I2C_MspInit+0xe2>
  else if(i2cHandle->Instance==I2C2)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4a1d      	ldr	r2, [pc, #116]	@ (8000d6c <HAL_I2C_MspInit+0xf8>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d12c      	bne.n	8000d56 <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	613b      	str	r3, [r7, #16]
 8000d00:	4b18      	ldr	r3, [pc, #96]	@ (8000d64 <HAL_I2C_MspInit+0xf0>)
 8000d02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d04:	4a17      	ldr	r2, [pc, #92]	@ (8000d64 <HAL_I2C_MspInit+0xf0>)
 8000d06:	f043 0302 	orr.w	r3, r3, #2
 8000d0a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d0c:	4b15      	ldr	r3, [pc, #84]	@ (8000d64 <HAL_I2C_MspInit+0xf0>)
 8000d0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d10:	f003 0302 	and.w	r3, r3, #2
 8000d14:	613b      	str	r3, [r7, #16]
 8000d16:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000d18:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000d1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d1e:	2312      	movs	r3, #18
 8000d20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d26:	2303      	movs	r3, #3
 8000d28:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000d2a:	2304      	movs	r3, #4
 8000d2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d2e:	f107 031c 	add.w	r3, r7, #28
 8000d32:	4619      	mov	r1, r3
 8000d34:	480c      	ldr	r0, [pc, #48]	@ (8000d68 <HAL_I2C_MspInit+0xf4>)
 8000d36:	f001 ff97 	bl	8002c68 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	60fb      	str	r3, [r7, #12]
 8000d3e:	4b09      	ldr	r3, [pc, #36]	@ (8000d64 <HAL_I2C_MspInit+0xf0>)
 8000d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d42:	4a08      	ldr	r2, [pc, #32]	@ (8000d64 <HAL_I2C_MspInit+0xf0>)
 8000d44:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000d48:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d4a:	4b06      	ldr	r3, [pc, #24]	@ (8000d64 <HAL_I2C_MspInit+0xf0>)
 8000d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	68fb      	ldr	r3, [r7, #12]
}
 8000d56:	bf00      	nop
 8000d58:	3730      	adds	r7, #48	@ 0x30
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	40005400 	.word	0x40005400
 8000d64:	40023800 	.word	0x40023800
 8000d68:	40020400 	.word	0x40020400
 8000d6c:	40005800 	.word	0x40005800

08000d70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d74:	f001 f9e0 	bl	8002138 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d78:	f000 f836 	bl	8000de8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d7c:	f7ff fe5c 	bl	8000a38 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000d80:	f7ff fb9a 	bl	80004b8 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000d84:	f7ff fbea 	bl	800055c <MX_ADC2_Init>
  MX_CAN1_Init();
 8000d88:	f7ff fd4c 	bl	8000824 <MX_CAN1_Init>
  MX_CAN2_Init();
 8000d8c:	f7ff fd7e 	bl	800088c <MX_CAN2_Init>
  MX_I2C1_Init();
 8000d90:	f7ff ff14 	bl	8000bbc <MX_I2C1_Init>
  MX_SPI2_Init();
 8000d94:	f000 f898 	bl	8000ec8 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000d98:	f000 f9e2 	bl	8001160 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000d9c:	f000 faa4 	bl	80012e8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000da0:	f000 faf6 	bl	8001390 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000da4:	f000 fb48 	bl	8001438 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000da8:	f000 fb9a 	bl	80014e0 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000dac:	f000 fbec 	bl	8001588 <MX_TIM8_Init>
  MX_TIM9_Init();
 8000db0:	f000 fcae 	bl	8001710 <MX_TIM9_Init>
  MX_TIM12_Init();
 8000db4:	f000 fd68 	bl	8001888 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 8000db8:	f001 f85a 	bl	8001e70 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000dbc:	f001 f882 	bl	8001ec4 <MX_USART2_UART_Init>
  MX_ADC3_Init();
 8000dc0:	f7ff fc1e 	bl	8000600 <MX_ADC3_Init>
  MX_I2C2_Init();
 8000dc4:	f7ff ff28 	bl	8000c18 <MX_I2C2_Init>
  MX_TIM11_Init();
 8000dc8:	f000 fd10 	bl	80017ec <MX_TIM11_Init>
  MX_USART3_UART_Init();
 8000dcc:	f001 f8a4 	bl	8001f18 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8000dd0:	213c      	movs	r1, #60	@ 0x3c
 8000dd2:	4804      	ldr	r0, [pc, #16]	@ (8000de4 <main+0x74>)
 8000dd4:	f003 f93b 	bl	800404e <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8000dd8:	4802      	ldr	r0, [pc, #8]	@ (8000de4 <main+0x74>)
 8000dda:	f002 ffc9 	bl	8003d70 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    loop();
 8000dde:	f005 f83f 	bl	8005e60 <loop>
 8000de2:	e7fc      	b.n	8000dde <main+0x6e>
 8000de4:	2000029c 	.word	0x2000029c

08000de8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b094      	sub	sp, #80	@ 0x50
 8000dec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dee:	f107 0320 	add.w	r3, r7, #32
 8000df2:	2230      	movs	r2, #48	@ 0x30
 8000df4:	2100      	movs	r1, #0
 8000df6:	4618      	mov	r0, r3
 8000df8:	f005 f8a6 	bl	8005f48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dfc:	f107 030c 	add.w	r3, r7, #12
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
 8000e0a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	60bb      	str	r3, [r7, #8]
 8000e10:	4b28      	ldr	r3, [pc, #160]	@ (8000eb4 <SystemClock_Config+0xcc>)
 8000e12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e14:	4a27      	ldr	r2, [pc, #156]	@ (8000eb4 <SystemClock_Config+0xcc>)
 8000e16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e1a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e1c:	4b25      	ldr	r3, [pc, #148]	@ (8000eb4 <SystemClock_Config+0xcc>)
 8000e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e24:	60bb      	str	r3, [r7, #8]
 8000e26:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e28:	2300      	movs	r3, #0
 8000e2a:	607b      	str	r3, [r7, #4]
 8000e2c:	4b22      	ldr	r3, [pc, #136]	@ (8000eb8 <SystemClock_Config+0xd0>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a21      	ldr	r2, [pc, #132]	@ (8000eb8 <SystemClock_Config+0xd0>)
 8000e32:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e36:	6013      	str	r3, [r2, #0]
 8000e38:	4b1f      	ldr	r3, [pc, #124]	@ (8000eb8 <SystemClock_Config+0xd0>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e40:	607b      	str	r3, [r7, #4]
 8000e42:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e44:	2301      	movs	r3, #1
 8000e46:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e48:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e4c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e52:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000e56:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e58:	2304      	movs	r3, #4
 8000e5a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000e5c:	23a8      	movs	r3, #168	@ 0xa8
 8000e5e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e60:	2302      	movs	r3, #2
 8000e62:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e64:	2304      	movs	r3, #4
 8000e66:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e68:	f107 0320 	add.w	r3, r7, #32
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f002 fa0f 	bl	8003290 <HAL_RCC_OscConfig>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e78:	f000 f820 	bl	8000ebc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e7c:	230f      	movs	r3, #15
 8000e7e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e80:	2302      	movs	r3, #2
 8000e82:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e84:	2300      	movs	r3, #0
 8000e86:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e88:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000e8c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e8e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e92:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e94:	f107 030c 	add.w	r3, r7, #12
 8000e98:	2105      	movs	r1, #5
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f002 fc70 	bl	8003780 <HAL_RCC_ClockConfig>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000ea6:	f000 f809 	bl	8000ebc <Error_Handler>
  }
}
 8000eaa:	bf00      	nop
 8000eac:	3750      	adds	r7, #80	@ 0x50
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40023800 	.word	0x40023800
 8000eb8:	40007000 	.word	0x40007000

08000ebc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ec0:	b672      	cpsid	i
}
 8000ec2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ec4:	bf00      	nop
 8000ec6:	e7fd      	b.n	8000ec4 <Error_Handler+0x8>

08000ec8 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000ecc:	4b17      	ldr	r3, [pc, #92]	@ (8000f2c <MX_SPI2_Init+0x64>)
 8000ece:	4a18      	ldr	r2, [pc, #96]	@ (8000f30 <MX_SPI2_Init+0x68>)
 8000ed0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000ed2:	4b16      	ldr	r3, [pc, #88]	@ (8000f2c <MX_SPI2_Init+0x64>)
 8000ed4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000ed8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000eda:	4b14      	ldr	r3, [pc, #80]	@ (8000f2c <MX_SPI2_Init+0x64>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ee0:	4b12      	ldr	r3, [pc, #72]	@ (8000f2c <MX_SPI2_Init+0x64>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ee6:	4b11      	ldr	r3, [pc, #68]	@ (8000f2c <MX_SPI2_Init+0x64>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000eec:	4b0f      	ldr	r3, [pc, #60]	@ (8000f2c <MX_SPI2_Init+0x64>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000ef2:	4b0e      	ldr	r3, [pc, #56]	@ (8000f2c <MX_SPI2_Init+0x64>)
 8000ef4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ef8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000efa:	4b0c      	ldr	r3, [pc, #48]	@ (8000f2c <MX_SPI2_Init+0x64>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f00:	4b0a      	ldr	r3, [pc, #40]	@ (8000f2c <MX_SPI2_Init+0x64>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f06:	4b09      	ldr	r3, [pc, #36]	@ (8000f2c <MX_SPI2_Init+0x64>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f0c:	4b07      	ldr	r3, [pc, #28]	@ (8000f2c <MX_SPI2_Init+0x64>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000f12:	4b06      	ldr	r3, [pc, #24]	@ (8000f2c <MX_SPI2_Init+0x64>)
 8000f14:	220a      	movs	r2, #10
 8000f16:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000f18:	4804      	ldr	r0, [pc, #16]	@ (8000f2c <MX_SPI2_Init+0x64>)
 8000f1a:	f002 fe51 	bl	8003bc0 <HAL_SPI_Init>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000f24:	f7ff ffca 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000f28:	bf00      	nop
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	200001fc 	.word	0x200001fc
 8000f30:	40003800 	.word	0x40003800

08000f34 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b08a      	sub	sp, #40	@ 0x28
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3c:	f107 0314 	add.w	r3, r7, #20
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]
 8000f4a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a28      	ldr	r2, [pc, #160]	@ (8000ff4 <HAL_SPI_MspInit+0xc0>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d14a      	bne.n	8000fec <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	613b      	str	r3, [r7, #16]
 8000f5a:	4b27      	ldr	r3, [pc, #156]	@ (8000ff8 <HAL_SPI_MspInit+0xc4>)
 8000f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f5e:	4a26      	ldr	r2, [pc, #152]	@ (8000ff8 <HAL_SPI_MspInit+0xc4>)
 8000f60:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f64:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f66:	4b24      	ldr	r3, [pc, #144]	@ (8000ff8 <HAL_SPI_MspInit+0xc4>)
 8000f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f6e:	613b      	str	r3, [r7, #16]
 8000f70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	60fb      	str	r3, [r7, #12]
 8000f76:	4b20      	ldr	r3, [pc, #128]	@ (8000ff8 <HAL_SPI_MspInit+0xc4>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7a:	4a1f      	ldr	r2, [pc, #124]	@ (8000ff8 <HAL_SPI_MspInit+0xc4>)
 8000f7c:	f043 0304 	orr.w	r3, r3, #4
 8000f80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f82:	4b1d      	ldr	r3, [pc, #116]	@ (8000ff8 <HAL_SPI_MspInit+0xc4>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f86:	f003 0304 	and.w	r3, r3, #4
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	60bb      	str	r3, [r7, #8]
 8000f92:	4b19      	ldr	r3, [pc, #100]	@ (8000ff8 <HAL_SPI_MspInit+0xc4>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f96:	4a18      	ldr	r2, [pc, #96]	@ (8000ff8 <HAL_SPI_MspInit+0xc4>)
 8000f98:	f043 0302 	orr.w	r3, r3, #2
 8000f9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f9e:	4b16      	ldr	r3, [pc, #88]	@ (8000ff8 <HAL_SPI_MspInit+0xc4>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa2:	f003 0302 	and.w	r3, r3, #2
 8000fa6:	60bb      	str	r3, [r7, #8]
 8000fa8:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000faa:	230c      	movs	r3, #12
 8000fac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb6:	2303      	movs	r3, #3
 8000fb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000fba:	2305      	movs	r3, #5
 8000fbc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fbe:	f107 0314 	add.w	r3, r7, #20
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	480d      	ldr	r0, [pc, #52]	@ (8000ffc <HAL_SPI_MspInit+0xc8>)
 8000fc6:	f001 fe4f 	bl	8002c68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000fca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd8:	2303      	movs	r3, #3
 8000fda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000fdc:	2305      	movs	r3, #5
 8000fde:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fe0:	f107 0314 	add.w	r3, r7, #20
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	4806      	ldr	r0, [pc, #24]	@ (8001000 <HAL_SPI_MspInit+0xcc>)
 8000fe8:	f001 fe3e 	bl	8002c68 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000fec:	bf00      	nop
 8000fee:	3728      	adds	r7, #40	@ 0x28
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	40003800 	.word	0x40003800
 8000ff8:	40023800 	.word	0x40023800
 8000ffc:	40020800 	.word	0x40020800
 8001000:	40020400 	.word	0x40020400

08001004 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	607b      	str	r3, [r7, #4]
 800100e:	4b10      	ldr	r3, [pc, #64]	@ (8001050 <HAL_MspInit+0x4c>)
 8001010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001012:	4a0f      	ldr	r2, [pc, #60]	@ (8001050 <HAL_MspInit+0x4c>)
 8001014:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001018:	6453      	str	r3, [r2, #68]	@ 0x44
 800101a:	4b0d      	ldr	r3, [pc, #52]	@ (8001050 <HAL_MspInit+0x4c>)
 800101c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800101e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001022:	607b      	str	r3, [r7, #4]
 8001024:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	603b      	str	r3, [r7, #0]
 800102a:	4b09      	ldr	r3, [pc, #36]	@ (8001050 <HAL_MspInit+0x4c>)
 800102c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800102e:	4a08      	ldr	r2, [pc, #32]	@ (8001050 <HAL_MspInit+0x4c>)
 8001030:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001034:	6413      	str	r3, [r2, #64]	@ 0x40
 8001036:	4b06      	ldr	r3, [pc, #24]	@ (8001050 <HAL_MspInit+0x4c>)
 8001038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800103a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800103e:	603b      	str	r3, [r7, #0]
 8001040:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001042:	bf00      	nop
 8001044:	370c      	adds	r7, #12
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	40023800 	.word	0x40023800

08001054 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001058:	bf00      	nop
 800105a:	e7fd      	b.n	8001058 <NMI_Handler+0x4>

0800105c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001060:	bf00      	nop
 8001062:	e7fd      	b.n	8001060 <HardFault_Handler+0x4>

08001064 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001068:	bf00      	nop
 800106a:	e7fd      	b.n	8001068 <MemManage_Handler+0x4>

0800106c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001070:	bf00      	nop
 8001072:	e7fd      	b.n	8001070 <BusFault_Handler+0x4>

08001074 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001078:	bf00      	nop
 800107a:	e7fd      	b.n	8001078 <UsageFault_Handler+0x4>

0800107c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001080:	bf00      	nop
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr

0800108a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800108a:	b480      	push	{r7}
 800108c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800108e:	bf00      	nop
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800109c:	bf00      	nop
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr

080010a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010a6:	b580      	push	{r7, lr}
 80010a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010aa:	f001 f897 	bl	80021dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
    task_handler();
 80010ae:	f004 fee7 	bl	8005e80 <task_handler>
  /* USER CODE END SysTick_IRQn 1 */
}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
	...

080010b8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80010bc:	4803      	ldr	r0, [pc, #12]	@ (80010cc <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 80010be:	f003 f854 	bl	800416a <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 80010c2:	4803      	ldr	r0, [pc, #12]	@ (80010d0 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 80010c4:	f003 f851 	bl	800416a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80010c8:	bf00      	nop
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	20000254 	.word	0x20000254
 80010d0:	2000044c 	.word	0x2000044c

080010d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80010d8:	4803      	ldr	r0, [pc, #12]	@ (80010e8 <TIM2_IRQHandler+0x14>)
 80010da:	f003 f846 	bl	800416a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  TIM2_handler();
 80010de:	f004 fed9 	bl	8005e94 <TIM2_handler>
  /* USER CODE END TIM2_IRQn 1 */
}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	2000029c 	.word	0x2000029c

080010ec <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80010f0:	4802      	ldr	r0, [pc, #8]	@ (80010fc <TIM3_IRQHandler+0x10>)
 80010f2:	f003 f83a 	bl	800416a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	200002e4 	.word	0x200002e4

08001100 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001104:	4802      	ldr	r0, [pc, #8]	@ (8001110 <TIM4_IRQHandler+0x10>)
 8001106:	f003 f830 	bl	800416a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800110a:	bf00      	nop
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	2000032c 	.word	0x2000032c

08001114 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001118:	4802      	ldr	r0, [pc, #8]	@ (8001124 <USART1_IRQHandler+0x10>)
 800111a:	f003 ff2b 	bl	8004f74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	200004dc 	.word	0x200004dc

08001128 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800112c:	4802      	ldr	r0, [pc, #8]	@ (8001138 <TIM5_IRQHandler+0x10>)
 800112e:	f003 f81c 	bl	800416a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20000374 	.word	0x20000374

0800113c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001140:	4b06      	ldr	r3, [pc, #24]	@ (800115c <SystemInit+0x20>)
 8001142:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001146:	4a05      	ldr	r2, [pc, #20]	@ (800115c <SystemInit+0x20>)
 8001148:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800114c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001150:	bf00      	nop
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	e000ed00 	.word	0xe000ed00

08001160 <MX_TIM1_Init>:
TIM_HandleTypeDef htim11;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b096      	sub	sp, #88	@ 0x58
 8001164:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001166:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	605a      	str	r2, [r3, #4]
 8001170:	609a      	str	r2, [r3, #8]
 8001172:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001174:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800117e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]
 8001186:	605a      	str	r2, [r3, #4]
 8001188:	609a      	str	r2, [r3, #8]
 800118a:	60da      	str	r2, [r3, #12]
 800118c:	611a      	str	r2, [r3, #16]
 800118e:	615a      	str	r2, [r3, #20]
 8001190:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001192:	1d3b      	adds	r3, r7, #4
 8001194:	2220      	movs	r2, #32
 8001196:	2100      	movs	r1, #0
 8001198:	4618      	mov	r0, r3
 800119a:	f004 fed5 	bl	8005f48 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800119e:	4b50      	ldr	r3, [pc, #320]	@ (80012e0 <MX_TIM1_Init+0x180>)
 80011a0:	4a50      	ldr	r2, [pc, #320]	@ (80012e4 <MX_TIM1_Init+0x184>)
 80011a2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80011a4:	4b4e      	ldr	r3, [pc, #312]	@ (80012e0 <MX_TIM1_Init+0x180>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011aa:	4b4d      	ldr	r3, [pc, #308]	@ (80012e0 <MX_TIM1_Init+0x180>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000 - 1;
 80011b0:	4b4b      	ldr	r3, [pc, #300]	@ (80012e0 <MX_TIM1_Init+0x180>)
 80011b2:	f242 720f 	movw	r2, #9999	@ 0x270f
 80011b6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011b8:	4b49      	ldr	r3, [pc, #292]	@ (80012e0 <MX_TIM1_Init+0x180>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011be:	4b48      	ldr	r3, [pc, #288]	@ (80012e0 <MX_TIM1_Init+0x180>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011c4:	4b46      	ldr	r3, [pc, #280]	@ (80012e0 <MX_TIM1_Init+0x180>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011ca:	4845      	ldr	r0, [pc, #276]	@ (80012e0 <MX_TIM1_Init+0x180>)
 80011cc:	f002 fd81 	bl	8003cd2 <HAL_TIM_Base_Init>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80011d6:	f7ff fe71 	bl	8000ebc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011de:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011e0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80011e4:	4619      	mov	r1, r3
 80011e6:	483e      	ldr	r0, [pc, #248]	@ (80012e0 <MX_TIM1_Init+0x180>)
 80011e8:	f003 f98a 	bl	8004500 <HAL_TIM_ConfigClockSource>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80011f2:	f7ff fe63 	bl	8000ebc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80011f6:	483a      	ldr	r0, [pc, #232]	@ (80012e0 <MX_TIM1_Init+0x180>)
 80011f8:	f002 fe2a 	bl	8003e50 <HAL_TIM_PWM_Init>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001202:	f7ff fe5b 	bl	8000ebc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001206:	2300      	movs	r3, #0
 8001208:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800120a:	2300      	movs	r3, #0
 800120c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800120e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001212:	4619      	mov	r1, r3
 8001214:	4832      	ldr	r0, [pc, #200]	@ (80012e0 <MX_TIM1_Init+0x180>)
 8001216:	f003 fd7d 	bl	8004d14 <HAL_TIMEx_MasterConfigSynchronization>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001220:	f7ff fe4c 	bl	8000ebc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001224:	2360      	movs	r3, #96	@ 0x60
 8001226:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001228:	2300      	movs	r3, #0
 800122a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800122c:	2300      	movs	r3, #0
 800122e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001230:	2300      	movs	r3, #0
 8001232:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001234:	2300      	movs	r3, #0
 8001236:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001238:	2300      	movs	r3, #0
 800123a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800123c:	2300      	movs	r3, #0
 800123e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001240:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001244:	2200      	movs	r2, #0
 8001246:	4619      	mov	r1, r3
 8001248:	4825      	ldr	r0, [pc, #148]	@ (80012e0 <MX_TIM1_Init+0x180>)
 800124a:	f003 f897 	bl	800437c <HAL_TIM_PWM_ConfigChannel>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001254:	f7ff fe32 	bl	8000ebc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001258:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800125c:	2204      	movs	r2, #4
 800125e:	4619      	mov	r1, r3
 8001260:	481f      	ldr	r0, [pc, #124]	@ (80012e0 <MX_TIM1_Init+0x180>)
 8001262:	f003 f88b 	bl	800437c <HAL_TIM_PWM_ConfigChannel>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 800126c:	f7ff fe26 	bl	8000ebc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001270:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001274:	2208      	movs	r2, #8
 8001276:	4619      	mov	r1, r3
 8001278:	4819      	ldr	r0, [pc, #100]	@ (80012e0 <MX_TIM1_Init+0x180>)
 800127a:	f003 f87f 	bl	800437c <HAL_TIM_PWM_ConfigChannel>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001284:	f7ff fe1a 	bl	8000ebc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001288:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800128c:	220c      	movs	r2, #12
 800128e:	4619      	mov	r1, r3
 8001290:	4813      	ldr	r0, [pc, #76]	@ (80012e0 <MX_TIM1_Init+0x180>)
 8001292:	f003 f873 	bl	800437c <HAL_TIM_PWM_ConfigChannel>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 800129c:	f7ff fe0e 	bl	8000ebc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012a0:	2300      	movs	r3, #0
 80012a2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012a4:	2300      	movs	r3, #0
 80012a6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012a8:	2300      	movs	r3, #0
 80012aa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012ac:	2300      	movs	r3, #0
 80012ae:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012b0:	2300      	movs	r3, #0
 80012b2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012b4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012b8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012ba:	2300      	movs	r3, #0
 80012bc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80012be:	1d3b      	adds	r3, r7, #4
 80012c0:	4619      	mov	r1, r3
 80012c2:	4807      	ldr	r0, [pc, #28]	@ (80012e0 <MX_TIM1_Init+0x180>)
 80012c4:	f003 fda2 	bl	8004e0c <HAL_TIMEx_ConfigBreakDeadTime>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 80012ce:	f7ff fdf5 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80012d2:	4803      	ldr	r0, [pc, #12]	@ (80012e0 <MX_TIM1_Init+0x180>)
 80012d4:	f000 fcf2 	bl	8001cbc <HAL_TIM_MspPostInit>

}
 80012d8:	bf00      	nop
 80012da:	3758      	adds	r7, #88	@ 0x58
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	20000254 	.word	0x20000254
 80012e4:	40010000 	.word	0x40010000

080012e8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b08c      	sub	sp, #48	@ 0x30
 80012ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80012ee:	f107 030c 	add.w	r3, r7, #12
 80012f2:	2224      	movs	r2, #36	@ 0x24
 80012f4:	2100      	movs	r1, #0
 80012f6:	4618      	mov	r0, r3
 80012f8:	f004 fe26 	bl	8005f48 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012fc:	1d3b      	adds	r3, r7, #4
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
 8001302:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001304:	4b21      	ldr	r3, [pc, #132]	@ (800138c <MX_TIM2_Init+0xa4>)
 8001306:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800130a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800130c:	4b1f      	ldr	r3, [pc, #124]	@ (800138c <MX_TIM2_Init+0xa4>)
 800130e:	2200      	movs	r2, #0
 8001310:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001312:	4b1e      	ldr	r3, [pc, #120]	@ (800138c <MX_TIM2_Init+0xa4>)
 8001314:	2200      	movs	r2, #0
 8001316:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65536;
 8001318:	4b1c      	ldr	r3, [pc, #112]	@ (800138c <MX_TIM2_Init+0xa4>)
 800131a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800131e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001320:	4b1a      	ldr	r3, [pc, #104]	@ (800138c <MX_TIM2_Init+0xa4>)
 8001322:	2200      	movs	r2, #0
 8001324:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001326:	4b19      	ldr	r3, [pc, #100]	@ (800138c <MX_TIM2_Init+0xa4>)
 8001328:	2200      	movs	r2, #0
 800132a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800132c:	2301      	movs	r3, #1
 800132e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001330:	2300      	movs	r3, #0
 8001332:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001334:	2301      	movs	r3, #1
 8001336:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001338:	2300      	movs	r3, #0
 800133a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800133c:	2300      	movs	r3, #0
 800133e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001340:	2300      	movs	r3, #0
 8001342:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001344:	2301      	movs	r3, #1
 8001346:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001348:	2300      	movs	r3, #0
 800134a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800134c:	2300      	movs	r3, #0
 800134e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001350:	f107 030c 	add.w	r3, r7, #12
 8001354:	4619      	mov	r1, r3
 8001356:	480d      	ldr	r0, [pc, #52]	@ (800138c <MX_TIM2_Init+0xa4>)
 8001358:	f002 fdd3 	bl	8003f02 <HAL_TIM_Encoder_Init>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001362:	f7ff fdab 	bl	8000ebc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001366:	2300      	movs	r3, #0
 8001368:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800136a:	2300      	movs	r3, #0
 800136c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800136e:	1d3b      	adds	r3, r7, #4
 8001370:	4619      	mov	r1, r3
 8001372:	4806      	ldr	r0, [pc, #24]	@ (800138c <MX_TIM2_Init+0xa4>)
 8001374:	f003 fcce 	bl	8004d14 <HAL_TIMEx_MasterConfigSynchronization>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800137e:	f7ff fd9d 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001382:	bf00      	nop
 8001384:	3730      	adds	r7, #48	@ 0x30
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	2000029c 	.word	0x2000029c

08001390 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b08c      	sub	sp, #48	@ 0x30
 8001394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001396:	f107 030c 	add.w	r3, r7, #12
 800139a:	2224      	movs	r2, #36	@ 0x24
 800139c:	2100      	movs	r1, #0
 800139e:	4618      	mov	r0, r3
 80013a0:	f004 fdd2 	bl	8005f48 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013a4:	1d3b      	adds	r3, r7, #4
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013ac:	4b20      	ldr	r3, [pc, #128]	@ (8001430 <MX_TIM3_Init+0xa0>)
 80013ae:	4a21      	ldr	r2, [pc, #132]	@ (8001434 <MX_TIM3_Init+0xa4>)
 80013b0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80013b2:	4b1f      	ldr	r3, [pc, #124]	@ (8001430 <MX_TIM3_Init+0xa0>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013b8:	4b1d      	ldr	r3, [pc, #116]	@ (8001430 <MX_TIM3_Init+0xa0>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80013be:	4b1c      	ldr	r3, [pc, #112]	@ (8001430 <MX_TIM3_Init+0xa0>)
 80013c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013c4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001430 <MX_TIM3_Init+0xa0>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013cc:	4b18      	ldr	r3, [pc, #96]	@ (8001430 <MX_TIM3_Init+0xa0>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80013d2:	2303      	movs	r3, #3
 80013d4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80013d6:	2300      	movs	r3, #0
 80013d8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013da:	2301      	movs	r3, #1
 80013dc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013de:	2300      	movs	r3, #0
 80013e0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80013e2:	2300      	movs	r3, #0
 80013e4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80013e6:	2300      	movs	r3, #0
 80013e8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013ea:	2301      	movs	r3, #1
 80013ec:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80013ee:	2300      	movs	r3, #0
 80013f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80013f2:	2300      	movs	r3, #0
 80013f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80013f6:	f107 030c 	add.w	r3, r7, #12
 80013fa:	4619      	mov	r1, r3
 80013fc:	480c      	ldr	r0, [pc, #48]	@ (8001430 <MX_TIM3_Init+0xa0>)
 80013fe:	f002 fd80 	bl	8003f02 <HAL_TIM_Encoder_Init>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001408:	f7ff fd58 	bl	8000ebc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800140c:	2300      	movs	r3, #0
 800140e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001410:	2300      	movs	r3, #0
 8001412:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001414:	1d3b      	adds	r3, r7, #4
 8001416:	4619      	mov	r1, r3
 8001418:	4805      	ldr	r0, [pc, #20]	@ (8001430 <MX_TIM3_Init+0xa0>)
 800141a:	f003 fc7b 	bl	8004d14 <HAL_TIMEx_MasterConfigSynchronization>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001424:	f7ff fd4a 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001428:	bf00      	nop
 800142a:	3730      	adds	r7, #48	@ 0x30
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	200002e4 	.word	0x200002e4
 8001434:	40000400 	.word	0x40000400

08001438 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b08c      	sub	sp, #48	@ 0x30
 800143c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800143e:	f107 030c 	add.w	r3, r7, #12
 8001442:	2224      	movs	r2, #36	@ 0x24
 8001444:	2100      	movs	r1, #0
 8001446:	4618      	mov	r0, r3
 8001448:	f004 fd7e 	bl	8005f48 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800144c:	1d3b      	adds	r3, r7, #4
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001454:	4b20      	ldr	r3, [pc, #128]	@ (80014d8 <MX_TIM4_Init+0xa0>)
 8001456:	4a21      	ldr	r2, [pc, #132]	@ (80014dc <MX_TIM4_Init+0xa4>)
 8001458:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800145a:	4b1f      	ldr	r3, [pc, #124]	@ (80014d8 <MX_TIM4_Init+0xa0>)
 800145c:	2200      	movs	r2, #0
 800145e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001460:	4b1d      	ldr	r3, [pc, #116]	@ (80014d8 <MX_TIM4_Init+0xa0>)
 8001462:	2200      	movs	r2, #0
 8001464:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001466:	4b1c      	ldr	r3, [pc, #112]	@ (80014d8 <MX_TIM4_Init+0xa0>)
 8001468:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800146c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800146e:	4b1a      	ldr	r3, [pc, #104]	@ (80014d8 <MX_TIM4_Init+0xa0>)
 8001470:	2200      	movs	r2, #0
 8001472:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001474:	4b18      	ldr	r3, [pc, #96]	@ (80014d8 <MX_TIM4_Init+0xa0>)
 8001476:	2200      	movs	r2, #0
 8001478:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800147a:	2303      	movs	r3, #3
 800147c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800147e:	2300      	movs	r3, #0
 8001480:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001482:	2301      	movs	r3, #1
 8001484:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001486:	2300      	movs	r3, #0
 8001488:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800148a:	2300      	movs	r3, #0
 800148c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800148e:	2300      	movs	r3, #0
 8001490:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001492:	2301      	movs	r3, #1
 8001494:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001496:	2300      	movs	r3, #0
 8001498:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800149a:	2300      	movs	r3, #0
 800149c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800149e:	f107 030c 	add.w	r3, r7, #12
 80014a2:	4619      	mov	r1, r3
 80014a4:	480c      	ldr	r0, [pc, #48]	@ (80014d8 <MX_TIM4_Init+0xa0>)
 80014a6:	f002 fd2c 	bl	8003f02 <HAL_TIM_Encoder_Init>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80014b0:	f7ff fd04 	bl	8000ebc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014b4:	2300      	movs	r3, #0
 80014b6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014b8:	2300      	movs	r3, #0
 80014ba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80014bc:	1d3b      	adds	r3, r7, #4
 80014be:	4619      	mov	r1, r3
 80014c0:	4805      	ldr	r0, [pc, #20]	@ (80014d8 <MX_TIM4_Init+0xa0>)
 80014c2:	f003 fc27 	bl	8004d14 <HAL_TIMEx_MasterConfigSynchronization>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80014cc:	f7ff fcf6 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80014d0:	bf00      	nop
 80014d2:	3730      	adds	r7, #48	@ 0x30
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	2000032c 	.word	0x2000032c
 80014dc:	40000800 	.word	0x40000800

080014e0 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b08c      	sub	sp, #48	@ 0x30
 80014e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80014e6:	f107 030c 	add.w	r3, r7, #12
 80014ea:	2224      	movs	r2, #36	@ 0x24
 80014ec:	2100      	movs	r1, #0
 80014ee:	4618      	mov	r0, r3
 80014f0:	f004 fd2a 	bl	8005f48 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014f4:	1d3b      	adds	r3, r7, #4
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80014fc:	4b20      	ldr	r3, [pc, #128]	@ (8001580 <MX_TIM5_Init+0xa0>)
 80014fe:	4a21      	ldr	r2, [pc, #132]	@ (8001584 <MX_TIM5_Init+0xa4>)
 8001500:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001502:	4b1f      	ldr	r3, [pc, #124]	@ (8001580 <MX_TIM5_Init+0xa0>)
 8001504:	2200      	movs	r2, #0
 8001506:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001508:	4b1d      	ldr	r3, [pc, #116]	@ (8001580 <MX_TIM5_Init+0xa0>)
 800150a:	2200      	movs	r2, #0
 800150c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 800150e:	4b1c      	ldr	r3, [pc, #112]	@ (8001580 <MX_TIM5_Init+0xa0>)
 8001510:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001514:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001516:	4b1a      	ldr	r3, [pc, #104]	@ (8001580 <MX_TIM5_Init+0xa0>)
 8001518:	2200      	movs	r2, #0
 800151a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800151c:	4b18      	ldr	r3, [pc, #96]	@ (8001580 <MX_TIM5_Init+0xa0>)
 800151e:	2200      	movs	r2, #0
 8001520:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001522:	2303      	movs	r3, #3
 8001524:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001526:	2300      	movs	r3, #0
 8001528:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800152a:	2301      	movs	r3, #1
 800152c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800152e:	2300      	movs	r3, #0
 8001530:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001532:	2300      	movs	r3, #0
 8001534:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001536:	2300      	movs	r3, #0
 8001538:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800153a:	2301      	movs	r3, #1
 800153c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800153e:	2300      	movs	r3, #0
 8001540:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001542:	2300      	movs	r3, #0
 8001544:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001546:	f107 030c 	add.w	r3, r7, #12
 800154a:	4619      	mov	r1, r3
 800154c:	480c      	ldr	r0, [pc, #48]	@ (8001580 <MX_TIM5_Init+0xa0>)
 800154e:	f002 fcd8 	bl	8003f02 <HAL_TIM_Encoder_Init>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001558:	f7ff fcb0 	bl	8000ebc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800155c:	2300      	movs	r3, #0
 800155e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001560:	2300      	movs	r3, #0
 8001562:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001564:	1d3b      	adds	r3, r7, #4
 8001566:	4619      	mov	r1, r3
 8001568:	4805      	ldr	r0, [pc, #20]	@ (8001580 <MX_TIM5_Init+0xa0>)
 800156a:	f003 fbd3 	bl	8004d14 <HAL_TIMEx_MasterConfigSynchronization>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001574:	f7ff fca2 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001578:	bf00      	nop
 800157a:	3730      	adds	r7, #48	@ 0x30
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	20000374 	.word	0x20000374
 8001584:	40000c00 	.word	0x40000c00

08001588 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b096      	sub	sp, #88	@ 0x58
 800158c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800158e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001592:	2200      	movs	r2, #0
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	605a      	str	r2, [r3, #4]
 8001598:	609a      	str	r2, [r3, #8]
 800159a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800159c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]
 80015ae:	605a      	str	r2, [r3, #4]
 80015b0:	609a      	str	r2, [r3, #8]
 80015b2:	60da      	str	r2, [r3, #12]
 80015b4:	611a      	str	r2, [r3, #16]
 80015b6:	615a      	str	r2, [r3, #20]
 80015b8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80015ba:	1d3b      	adds	r3, r7, #4
 80015bc:	2220      	movs	r2, #32
 80015be:	2100      	movs	r1, #0
 80015c0:	4618      	mov	r0, r3
 80015c2:	f004 fcc1 	bl	8005f48 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80015c6:	4b50      	ldr	r3, [pc, #320]	@ (8001708 <MX_TIM8_Init+0x180>)
 80015c8:	4a50      	ldr	r2, [pc, #320]	@ (800170c <MX_TIM8_Init+0x184>)
 80015ca:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80015cc:	4b4e      	ldr	r3, [pc, #312]	@ (8001708 <MX_TIM8_Init+0x180>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015d2:	4b4d      	ldr	r3, [pc, #308]	@ (8001708 <MX_TIM8_Init+0x180>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 10000 - 1;
 80015d8:	4b4b      	ldr	r3, [pc, #300]	@ (8001708 <MX_TIM8_Init+0x180>)
 80015da:	f242 720f 	movw	r2, #9999	@ 0x270f
 80015de:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015e0:	4b49      	ldr	r3, [pc, #292]	@ (8001708 <MX_TIM8_Init+0x180>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80015e6:	4b48      	ldr	r3, [pc, #288]	@ (8001708 <MX_TIM8_Init+0x180>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ec:	4b46      	ldr	r3, [pc, #280]	@ (8001708 <MX_TIM8_Init+0x180>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80015f2:	4845      	ldr	r0, [pc, #276]	@ (8001708 <MX_TIM8_Init+0x180>)
 80015f4:	f002 fb6d 	bl	8003cd2 <HAL_TIM_Base_Init>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80015fe:	f7ff fc5d 	bl	8000ebc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001602:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001606:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001608:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800160c:	4619      	mov	r1, r3
 800160e:	483e      	ldr	r0, [pc, #248]	@ (8001708 <MX_TIM8_Init+0x180>)
 8001610:	f002 ff76 	bl	8004500 <HAL_TIM_ConfigClockSource>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800161a:	f7ff fc4f 	bl	8000ebc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800161e:	483a      	ldr	r0, [pc, #232]	@ (8001708 <MX_TIM8_Init+0x180>)
 8001620:	f002 fc16 	bl	8003e50 <HAL_TIM_PWM_Init>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 800162a:	f7ff fc47 	bl	8000ebc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800162e:	2300      	movs	r3, #0
 8001630:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001632:	2300      	movs	r3, #0
 8001634:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001636:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800163a:	4619      	mov	r1, r3
 800163c:	4832      	ldr	r0, [pc, #200]	@ (8001708 <MX_TIM8_Init+0x180>)
 800163e:	f003 fb69 	bl	8004d14 <HAL_TIMEx_MasterConfigSynchronization>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001648:	f7ff fc38 	bl	8000ebc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800164c:	2360      	movs	r3, #96	@ 0x60
 800164e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001650:	2300      	movs	r3, #0
 8001652:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001654:	2300      	movs	r3, #0
 8001656:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001658:	2300      	movs	r3, #0
 800165a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800165c:	2300      	movs	r3, #0
 800165e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001660:	2300      	movs	r3, #0
 8001662:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001664:	2300      	movs	r3, #0
 8001666:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001668:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800166c:	2200      	movs	r2, #0
 800166e:	4619      	mov	r1, r3
 8001670:	4825      	ldr	r0, [pc, #148]	@ (8001708 <MX_TIM8_Init+0x180>)
 8001672:	f002 fe83 	bl	800437c <HAL_TIM_PWM_ConfigChannel>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 800167c:	f7ff fc1e 	bl	8000ebc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001680:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001684:	2204      	movs	r2, #4
 8001686:	4619      	mov	r1, r3
 8001688:	481f      	ldr	r0, [pc, #124]	@ (8001708 <MX_TIM8_Init+0x180>)
 800168a:	f002 fe77 	bl	800437c <HAL_TIM_PWM_ConfigChannel>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8001694:	f7ff fc12 	bl	8000ebc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001698:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800169c:	2208      	movs	r2, #8
 800169e:	4619      	mov	r1, r3
 80016a0:	4819      	ldr	r0, [pc, #100]	@ (8001708 <MX_TIM8_Init+0x180>)
 80016a2:	f002 fe6b 	bl	800437c <HAL_TIM_PWM_ConfigChannel>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 80016ac:	f7ff fc06 	bl	8000ebc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80016b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016b4:	220c      	movs	r2, #12
 80016b6:	4619      	mov	r1, r3
 80016b8:	4813      	ldr	r0, [pc, #76]	@ (8001708 <MX_TIM8_Init+0x180>)
 80016ba:	f002 fe5f 	bl	800437c <HAL_TIM_PWM_ConfigChannel>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 80016c4:	f7ff fbfa 	bl	8000ebc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016c8:	2300      	movs	r3, #0
 80016ca:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016cc:	2300      	movs	r3, #0
 80016ce:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016d0:	2300      	movs	r3, #0
 80016d2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80016d4:	2300      	movs	r3, #0
 80016d6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016d8:	2300      	movs	r3, #0
 80016da:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016dc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016e0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016e2:	2300      	movs	r3, #0
 80016e4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80016e6:	1d3b      	adds	r3, r7, #4
 80016e8:	4619      	mov	r1, r3
 80016ea:	4807      	ldr	r0, [pc, #28]	@ (8001708 <MX_TIM8_Init+0x180>)
 80016ec:	f003 fb8e 	bl	8004e0c <HAL_TIMEx_ConfigBreakDeadTime>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_TIM8_Init+0x172>
  {
    Error_Handler();
 80016f6:	f7ff fbe1 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80016fa:	4803      	ldr	r0, [pc, #12]	@ (8001708 <MX_TIM8_Init+0x180>)
 80016fc:	f000 fade 	bl	8001cbc <HAL_TIM_MspPostInit>

}
 8001700:	bf00      	nop
 8001702:	3758      	adds	r7, #88	@ 0x58
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	200003bc 	.word	0x200003bc
 800170c:	40010400 	.word	0x40010400

08001710 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b08c      	sub	sp, #48	@ 0x30
 8001714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001716:	f107 0320 	add.w	r3, r7, #32
 800171a:	2200      	movs	r2, #0
 800171c:	601a      	str	r2, [r3, #0]
 800171e:	605a      	str	r2, [r3, #4]
 8001720:	609a      	str	r2, [r3, #8]
 8001722:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001724:	1d3b      	adds	r3, r7, #4
 8001726:	2200      	movs	r2, #0
 8001728:	601a      	str	r2, [r3, #0]
 800172a:	605a      	str	r2, [r3, #4]
 800172c:	609a      	str	r2, [r3, #8]
 800172e:	60da      	str	r2, [r3, #12]
 8001730:	611a      	str	r2, [r3, #16]
 8001732:	615a      	str	r2, [r3, #20]
 8001734:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001736:	4b2b      	ldr	r3, [pc, #172]	@ (80017e4 <MX_TIM9_Init+0xd4>)
 8001738:	4a2b      	ldr	r2, [pc, #172]	@ (80017e8 <MX_TIM9_Init+0xd8>)
 800173a:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 336 - 1;
 800173c:	4b29      	ldr	r3, [pc, #164]	@ (80017e4 <MX_TIM9_Init+0xd4>)
 800173e:	f240 124f 	movw	r2, #335	@ 0x14f
 8001742:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001744:	4b27      	ldr	r3, [pc, #156]	@ (80017e4 <MX_TIM9_Init+0xd4>)
 8001746:	2200      	movs	r2, #0
 8001748:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 10000 - 1;
 800174a:	4b26      	ldr	r3, [pc, #152]	@ (80017e4 <MX_TIM9_Init+0xd4>)
 800174c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001750:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001752:	4b24      	ldr	r3, [pc, #144]	@ (80017e4 <MX_TIM9_Init+0xd4>)
 8001754:	2200      	movs	r2, #0
 8001756:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001758:	4b22      	ldr	r3, [pc, #136]	@ (80017e4 <MX_TIM9_Init+0xd4>)
 800175a:	2200      	movs	r2, #0
 800175c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800175e:	4821      	ldr	r0, [pc, #132]	@ (80017e4 <MX_TIM9_Init+0xd4>)
 8001760:	f002 fab7 	bl	8003cd2 <HAL_TIM_Base_Init>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <MX_TIM9_Init+0x5e>
  {
    Error_Handler();
 800176a:	f7ff fba7 	bl	8000ebc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800176e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001772:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001774:	f107 0320 	add.w	r3, r7, #32
 8001778:	4619      	mov	r1, r3
 800177a:	481a      	ldr	r0, [pc, #104]	@ (80017e4 <MX_TIM9_Init+0xd4>)
 800177c:	f002 fec0 	bl	8004500 <HAL_TIM_ConfigClockSource>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <MX_TIM9_Init+0x7a>
  {
    Error_Handler();
 8001786:	f7ff fb99 	bl	8000ebc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 800178a:	4816      	ldr	r0, [pc, #88]	@ (80017e4 <MX_TIM9_Init+0xd4>)
 800178c:	f002 fb60 	bl	8003e50 <HAL_TIM_PWM_Init>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 8001796:	f7ff fb91 	bl	8000ebc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800179a:	2360      	movs	r3, #96	@ 0x60
 800179c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800179e:	2300      	movs	r3, #0
 80017a0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017a2:	2300      	movs	r3, #0
 80017a4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017a6:	2300      	movs	r3, #0
 80017a8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017aa:	1d3b      	adds	r3, r7, #4
 80017ac:	2200      	movs	r2, #0
 80017ae:	4619      	mov	r1, r3
 80017b0:	480c      	ldr	r0, [pc, #48]	@ (80017e4 <MX_TIM9_Init+0xd4>)
 80017b2:	f002 fde3 	bl	800437c <HAL_TIM_PWM_ConfigChannel>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <MX_TIM9_Init+0xb0>
  {
    Error_Handler();
 80017bc:	f7ff fb7e 	bl	8000ebc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017c0:	1d3b      	adds	r3, r7, #4
 80017c2:	2204      	movs	r2, #4
 80017c4:	4619      	mov	r1, r3
 80017c6:	4807      	ldr	r0, [pc, #28]	@ (80017e4 <MX_TIM9_Init+0xd4>)
 80017c8:	f002 fdd8 	bl	800437c <HAL_TIM_PWM_ConfigChannel>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <MX_TIM9_Init+0xc6>
  {
    Error_Handler();
 80017d2:	f7ff fb73 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 80017d6:	4803      	ldr	r0, [pc, #12]	@ (80017e4 <MX_TIM9_Init+0xd4>)
 80017d8:	f000 fa70 	bl	8001cbc <HAL_TIM_MspPostInit>

}
 80017dc:	bf00      	nop
 80017de:	3730      	adds	r7, #48	@ 0x30
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	20000404 	.word	0x20000404
 80017e8:	40014000 	.word	0x40014000

080017ec <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b088      	sub	sp, #32
 80017f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80017f2:	1d3b      	adds	r3, r7, #4
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	605a      	str	r2, [r3, #4]
 80017fa:	609a      	str	r2, [r3, #8]
 80017fc:	60da      	str	r2, [r3, #12]
 80017fe:	611a      	str	r2, [r3, #16]
 8001800:	615a      	str	r2, [r3, #20]
 8001802:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001804:	4b1e      	ldr	r3, [pc, #120]	@ (8001880 <MX_TIM11_Init+0x94>)
 8001806:	4a1f      	ldr	r2, [pc, #124]	@ (8001884 <MX_TIM11_Init+0x98>)
 8001808:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 800180a:	4b1d      	ldr	r3, [pc, #116]	@ (8001880 <MX_TIM11_Init+0x94>)
 800180c:	2200      	movs	r2, #0
 800180e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001810:	4b1b      	ldr	r3, [pc, #108]	@ (8001880 <MX_TIM11_Init+0x94>)
 8001812:	2200      	movs	r2, #0
 8001814:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8001816:	4b1a      	ldr	r3, [pc, #104]	@ (8001880 <MX_TIM11_Init+0x94>)
 8001818:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800181c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800181e:	4b18      	ldr	r3, [pc, #96]	@ (8001880 <MX_TIM11_Init+0x94>)
 8001820:	2200      	movs	r2, #0
 8001822:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001824:	4b16      	ldr	r3, [pc, #88]	@ (8001880 <MX_TIM11_Init+0x94>)
 8001826:	2200      	movs	r2, #0
 8001828:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800182a:	4815      	ldr	r0, [pc, #84]	@ (8001880 <MX_TIM11_Init+0x94>)
 800182c:	f002 fa51 	bl	8003cd2 <HAL_TIM_Base_Init>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8001836:	f7ff fb41 	bl	8000ebc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 800183a:	4811      	ldr	r0, [pc, #68]	@ (8001880 <MX_TIM11_Init+0x94>)
 800183c:	f002 fb08 	bl	8003e50 <HAL_TIM_PWM_Init>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8001846:	f7ff fb39 	bl	8000ebc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800184a:	2360      	movs	r3, #96	@ 0x60
 800184c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800184e:	2300      	movs	r3, #0
 8001850:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001852:	2300      	movs	r3, #0
 8001854:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001856:	2300      	movs	r3, #0
 8001858:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800185a:	1d3b      	adds	r3, r7, #4
 800185c:	2200      	movs	r2, #0
 800185e:	4619      	mov	r1, r3
 8001860:	4807      	ldr	r0, [pc, #28]	@ (8001880 <MX_TIM11_Init+0x94>)
 8001862:	f002 fd8b 	bl	800437c <HAL_TIM_PWM_ConfigChannel>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 800186c:	f7ff fb26 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8001870:	4803      	ldr	r0, [pc, #12]	@ (8001880 <MX_TIM11_Init+0x94>)
 8001872:	f000 fa23 	bl	8001cbc <HAL_TIM_MspPostInit>

}
 8001876:	bf00      	nop
 8001878:	3720      	adds	r7, #32
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	2000044c 	.word	0x2000044c
 8001884:	40014800 	.word	0x40014800

08001888 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b08c      	sub	sp, #48	@ 0x30
 800188c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800188e:	f107 0320 	add.w	r3, r7, #32
 8001892:	2200      	movs	r2, #0
 8001894:	601a      	str	r2, [r3, #0]
 8001896:	605a      	str	r2, [r3, #4]
 8001898:	609a      	str	r2, [r3, #8]
 800189a:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800189c:	1d3b      	adds	r3, r7, #4
 800189e:	2200      	movs	r2, #0
 80018a0:	601a      	str	r2, [r3, #0]
 80018a2:	605a      	str	r2, [r3, #4]
 80018a4:	609a      	str	r2, [r3, #8]
 80018a6:	60da      	str	r2, [r3, #12]
 80018a8:	611a      	str	r2, [r3, #16]
 80018aa:	615a      	str	r2, [r3, #20]
 80018ac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80018ae:	4b2b      	ldr	r3, [pc, #172]	@ (800195c <MX_TIM12_Init+0xd4>)
 80018b0:	4a2b      	ldr	r2, [pc, #172]	@ (8001960 <MX_TIM12_Init+0xd8>)
 80018b2:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 168 - 1;
 80018b4:	4b29      	ldr	r3, [pc, #164]	@ (800195c <MX_TIM12_Init+0xd4>)
 80018b6:	22a7      	movs	r2, #167	@ 0xa7
 80018b8:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018ba:	4b28      	ldr	r3, [pc, #160]	@ (800195c <MX_TIM12_Init+0xd4>)
 80018bc:	2200      	movs	r2, #0
 80018be:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 10000 - 1;
 80018c0:	4b26      	ldr	r3, [pc, #152]	@ (800195c <MX_TIM12_Init+0xd4>)
 80018c2:	f242 720f 	movw	r2, #9999	@ 0x270f
 80018c6:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018c8:	4b24      	ldr	r3, [pc, #144]	@ (800195c <MX_TIM12_Init+0xd4>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018ce:	4b23      	ldr	r3, [pc, #140]	@ (800195c <MX_TIM12_Init+0xd4>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 80018d4:	4821      	ldr	r0, [pc, #132]	@ (800195c <MX_TIM12_Init+0xd4>)
 80018d6:	f002 f9fc 	bl	8003cd2 <HAL_TIM_Base_Init>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 80018e0:	f7ff faec 	bl	8000ebc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018e8:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 80018ea:	f107 0320 	add.w	r3, r7, #32
 80018ee:	4619      	mov	r1, r3
 80018f0:	481a      	ldr	r0, [pc, #104]	@ (800195c <MX_TIM12_Init+0xd4>)
 80018f2:	f002 fe05 	bl	8004500 <HAL_TIM_ConfigClockSource>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 80018fc:	f7ff fade 	bl	8000ebc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001900:	4816      	ldr	r0, [pc, #88]	@ (800195c <MX_TIM12_Init+0xd4>)
 8001902:	f002 faa5 	bl	8003e50 <HAL_TIM_PWM_Init>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 800190c:	f7ff fad6 	bl	8000ebc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001910:	2360      	movs	r3, #96	@ 0x60
 8001912:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001914:	2300      	movs	r3, #0
 8001916:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001918:	2300      	movs	r3, #0
 800191a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800191c:	2300      	movs	r3, #0
 800191e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001920:	1d3b      	adds	r3, r7, #4
 8001922:	2200      	movs	r2, #0
 8001924:	4619      	mov	r1, r3
 8001926:	480d      	ldr	r0, [pc, #52]	@ (800195c <MX_TIM12_Init+0xd4>)
 8001928:	f002 fd28 	bl	800437c <HAL_TIM_PWM_ConfigChannel>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 8001932:	f7ff fac3 	bl	8000ebc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001936:	1d3b      	adds	r3, r7, #4
 8001938:	2204      	movs	r2, #4
 800193a:	4619      	mov	r1, r3
 800193c:	4807      	ldr	r0, [pc, #28]	@ (800195c <MX_TIM12_Init+0xd4>)
 800193e:	f002 fd1d 	bl	800437c <HAL_TIM_PWM_ConfigChannel>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <MX_TIM12_Init+0xc4>
  {
    Error_Handler();
 8001948:	f7ff fab8 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 800194c:	4803      	ldr	r0, [pc, #12]	@ (800195c <MX_TIM12_Init+0xd4>)
 800194e:	f000 f9b5 	bl	8001cbc <HAL_TIM_MspPostInit>

}
 8001952:	bf00      	nop
 8001954:	3730      	adds	r7, #48	@ 0x30
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	20000494 	.word	0x20000494
 8001960:	40001800 	.word	0x40001800

08001964 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b088      	sub	sp, #32
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a3a      	ldr	r2, [pc, #232]	@ (8001a5c <HAL_TIM_Base_MspInit+0xf8>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d116      	bne.n	80019a4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	61fb      	str	r3, [r7, #28]
 800197a:	4b39      	ldr	r3, [pc, #228]	@ (8001a60 <HAL_TIM_Base_MspInit+0xfc>)
 800197c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800197e:	4a38      	ldr	r2, [pc, #224]	@ (8001a60 <HAL_TIM_Base_MspInit+0xfc>)
 8001980:	f043 0301 	orr.w	r3, r3, #1
 8001984:	6453      	str	r3, [r2, #68]	@ 0x44
 8001986:	4b36      	ldr	r3, [pc, #216]	@ (8001a60 <HAL_TIM_Base_MspInit+0xfc>)
 8001988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	61fb      	str	r3, [r7, #28]
 8001990:	69fb      	ldr	r3, [r7, #28]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001992:	2200      	movs	r2, #0
 8001994:	2100      	movs	r1, #0
 8001996:	201a      	movs	r0, #26
 8001998:	f001 f89d 	bl	8002ad6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800199c:	201a      	movs	r0, #26
 800199e:	f001 f8b6 	bl	8002b0e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM12_CLK_ENABLE();
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 80019a2:	e056      	b.n	8001a52 <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM8)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a2e      	ldr	r2, [pc, #184]	@ (8001a64 <HAL_TIM_Base_MspInit+0x100>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d10e      	bne.n	80019cc <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80019ae:	2300      	movs	r3, #0
 80019b0:	61bb      	str	r3, [r7, #24]
 80019b2:	4b2b      	ldr	r3, [pc, #172]	@ (8001a60 <HAL_TIM_Base_MspInit+0xfc>)
 80019b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019b6:	4a2a      	ldr	r2, [pc, #168]	@ (8001a60 <HAL_TIM_Base_MspInit+0xfc>)
 80019b8:	f043 0302 	orr.w	r3, r3, #2
 80019bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80019be:	4b28      	ldr	r3, [pc, #160]	@ (8001a60 <HAL_TIM_Base_MspInit+0xfc>)
 80019c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019c2:	f003 0302 	and.w	r3, r3, #2
 80019c6:	61bb      	str	r3, [r7, #24]
 80019c8:	69bb      	ldr	r3, [r7, #24]
}
 80019ca:	e042      	b.n	8001a52 <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM9)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a25      	ldr	r2, [pc, #148]	@ (8001a68 <HAL_TIM_Base_MspInit+0x104>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d10e      	bne.n	80019f4 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80019d6:	2300      	movs	r3, #0
 80019d8:	617b      	str	r3, [r7, #20]
 80019da:	4b21      	ldr	r3, [pc, #132]	@ (8001a60 <HAL_TIM_Base_MspInit+0xfc>)
 80019dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019de:	4a20      	ldr	r2, [pc, #128]	@ (8001a60 <HAL_TIM_Base_MspInit+0xfc>)
 80019e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80019e6:	4b1e      	ldr	r3, [pc, #120]	@ (8001a60 <HAL_TIM_Base_MspInit+0xfc>)
 80019e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019ee:	617b      	str	r3, [r7, #20]
 80019f0:	697b      	ldr	r3, [r7, #20]
}
 80019f2:	e02e      	b.n	8001a52 <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM11)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a1c      	ldr	r2, [pc, #112]	@ (8001a6c <HAL_TIM_Base_MspInit+0x108>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d116      	bne.n	8001a2c <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80019fe:	2300      	movs	r3, #0
 8001a00:	613b      	str	r3, [r7, #16]
 8001a02:	4b17      	ldr	r3, [pc, #92]	@ (8001a60 <HAL_TIM_Base_MspInit+0xfc>)
 8001a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a06:	4a16      	ldr	r2, [pc, #88]	@ (8001a60 <HAL_TIM_Base_MspInit+0xfc>)
 8001a08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a0e:	4b14      	ldr	r3, [pc, #80]	@ (8001a60 <HAL_TIM_Base_MspInit+0xfc>)
 8001a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a12:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a16:	613b      	str	r3, [r7, #16]
 8001a18:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	201a      	movs	r0, #26
 8001a20:	f001 f859 	bl	8002ad6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001a24:	201a      	movs	r0, #26
 8001a26:	f001 f872 	bl	8002b0e <HAL_NVIC_EnableIRQ>
}
 8001a2a:	e012      	b.n	8001a52 <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM12)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a0f      	ldr	r2, [pc, #60]	@ (8001a70 <HAL_TIM_Base_MspInit+0x10c>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d10d      	bne.n	8001a52 <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001a36:	2300      	movs	r3, #0
 8001a38:	60fb      	str	r3, [r7, #12]
 8001a3a:	4b09      	ldr	r3, [pc, #36]	@ (8001a60 <HAL_TIM_Base_MspInit+0xfc>)
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a3e:	4a08      	ldr	r2, [pc, #32]	@ (8001a60 <HAL_TIM_Base_MspInit+0xfc>)
 8001a40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a44:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a46:	4b06      	ldr	r3, [pc, #24]	@ (8001a60 <HAL_TIM_Base_MspInit+0xfc>)
 8001a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	68fb      	ldr	r3, [r7, #12]
}
 8001a52:	bf00      	nop
 8001a54:	3720      	adds	r7, #32
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	40010000 	.word	0x40010000
 8001a60:	40023800 	.word	0x40023800
 8001a64:	40010400 	.word	0x40010400
 8001a68:	40014000 	.word	0x40014000
 8001a6c:	40014800 	.word	0x40014800
 8001a70:	40001800 	.word	0x40001800

08001a74 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b090      	sub	sp, #64	@ 0x40
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a7c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	605a      	str	r2, [r3, #4]
 8001a86:	609a      	str	r2, [r3, #8]
 8001a88:	60da      	str	r2, [r3, #12]
 8001a8a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a94:	d152      	bne.n	8001b3c <HAL_TIM_Encoder_MspInit+0xc8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a96:	2300      	movs	r3, #0
 8001a98:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a9a:	4b81      	ldr	r3, [pc, #516]	@ (8001ca0 <HAL_TIM_Encoder_MspInit+0x22c>)
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a9e:	4a80      	ldr	r2, [pc, #512]	@ (8001ca0 <HAL_TIM_Encoder_MspInit+0x22c>)
 8001aa0:	f043 0301 	orr.w	r3, r3, #1
 8001aa4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001aa6:	4b7e      	ldr	r3, [pc, #504]	@ (8001ca0 <HAL_TIM_Encoder_MspInit+0x22c>)
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ab6:	4b7a      	ldr	r3, [pc, #488]	@ (8001ca0 <HAL_TIM_Encoder_MspInit+0x22c>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aba:	4a79      	ldr	r2, [pc, #484]	@ (8001ca0 <HAL_TIM_Encoder_MspInit+0x22c>)
 8001abc:	f043 0301 	orr.w	r3, r3, #1
 8001ac0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ac2:	4b77      	ldr	r3, [pc, #476]	@ (8001ca0 <HAL_TIM_Encoder_MspInit+0x22c>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	627b      	str	r3, [r7, #36]	@ 0x24
 8001acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ace:	2300      	movs	r3, #0
 8001ad0:	623b      	str	r3, [r7, #32]
 8001ad2:	4b73      	ldr	r3, [pc, #460]	@ (8001ca0 <HAL_TIM_Encoder_MspInit+0x22c>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad6:	4a72      	ldr	r2, [pc, #456]	@ (8001ca0 <HAL_TIM_Encoder_MspInit+0x22c>)
 8001ad8:	f043 0302 	orr.w	r3, r3, #2
 8001adc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ade:	4b70      	ldr	r3, [pc, #448]	@ (8001ca0 <HAL_TIM_Encoder_MspInit+0x22c>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	623b      	str	r3, [r7, #32]
 8001ae8:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001aea:	2320      	movs	r3, #32
 8001aec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aee:	2302      	movs	r3, #2
 8001af0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001af2:	2301      	movs	r3, #1
 8001af4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af6:	2300      	movs	r3, #0
 8001af8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001afa:	2301      	movs	r3, #1
 8001afc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001afe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b02:	4619      	mov	r1, r3
 8001b04:	4867      	ldr	r0, [pc, #412]	@ (8001ca4 <HAL_TIM_Encoder_MspInit+0x230>)
 8001b06:	f001 f8af 	bl	8002c68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001b0a:	2308      	movs	r3, #8
 8001b0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0e:	2302      	movs	r3, #2
 8001b10:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b12:	2301      	movs	r3, #1
 8001b14:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b16:	2300      	movs	r3, #0
 8001b18:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b1e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b22:	4619      	mov	r1, r3
 8001b24:	4860      	ldr	r0, [pc, #384]	@ (8001ca8 <HAL_TIM_Encoder_MspInit+0x234>)
 8001b26:	f001 f89f 	bl	8002c68 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	201c      	movs	r0, #28
 8001b30:	f000 ffd1 	bl	8002ad6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b34:	201c      	movs	r0, #28
 8001b36:	f000 ffea 	bl	8002b0e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8001b3a:	e0ad      	b.n	8001c98 <HAL_TIM_Encoder_MspInit+0x224>
  else if(tim_encoderHandle->Instance==TIM3)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a5a      	ldr	r2, [pc, #360]	@ (8001cac <HAL_TIM_Encoder_MspInit+0x238>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d134      	bne.n	8001bb0 <HAL_TIM_Encoder_MspInit+0x13c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b46:	2300      	movs	r3, #0
 8001b48:	61fb      	str	r3, [r7, #28]
 8001b4a:	4b55      	ldr	r3, [pc, #340]	@ (8001ca0 <HAL_TIM_Encoder_MspInit+0x22c>)
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b4e:	4a54      	ldr	r2, [pc, #336]	@ (8001ca0 <HAL_TIM_Encoder_MspInit+0x22c>)
 8001b50:	f043 0302 	orr.w	r3, r3, #2
 8001b54:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b56:	4b52      	ldr	r3, [pc, #328]	@ (8001ca0 <HAL_TIM_Encoder_MspInit+0x22c>)
 8001b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	61fb      	str	r3, [r7, #28]
 8001b60:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b62:	2300      	movs	r3, #0
 8001b64:	61bb      	str	r3, [r7, #24]
 8001b66:	4b4e      	ldr	r3, [pc, #312]	@ (8001ca0 <HAL_TIM_Encoder_MspInit+0x22c>)
 8001b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b6a:	4a4d      	ldr	r2, [pc, #308]	@ (8001ca0 <HAL_TIM_Encoder_MspInit+0x22c>)
 8001b6c:	f043 0302 	orr.w	r3, r3, #2
 8001b70:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b72:	4b4b      	ldr	r3, [pc, #300]	@ (8001ca0 <HAL_TIM_Encoder_MspInit+0x22c>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	61bb      	str	r3, [r7, #24]
 8001b7c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001b7e:	2330      	movs	r3, #48	@ 0x30
 8001b80:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b82:	2302      	movs	r3, #2
 8001b84:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b86:	2300      	movs	r3, #0
 8001b88:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b8e:	2302      	movs	r3, #2
 8001b90:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b92:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b96:	4619      	mov	r1, r3
 8001b98:	4843      	ldr	r0, [pc, #268]	@ (8001ca8 <HAL_TIM_Encoder_MspInit+0x234>)
 8001b9a:	f001 f865 	bl	8002c68 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	201d      	movs	r0, #29
 8001ba4:	f000 ff97 	bl	8002ad6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001ba8:	201d      	movs	r0, #29
 8001baa:	f000 ffb0 	bl	8002b0e <HAL_NVIC_EnableIRQ>
}
 8001bae:	e073      	b.n	8001c98 <HAL_TIM_Encoder_MspInit+0x224>
  else if(tim_encoderHandle->Instance==TIM4)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a3e      	ldr	r2, [pc, #248]	@ (8001cb0 <HAL_TIM_Encoder_MspInit+0x23c>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d135      	bne.n	8001c26 <HAL_TIM_Encoder_MspInit+0x1b2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001bba:	2300      	movs	r3, #0
 8001bbc:	617b      	str	r3, [r7, #20]
 8001bbe:	4b38      	ldr	r3, [pc, #224]	@ (8001ca0 <HAL_TIM_Encoder_MspInit+0x22c>)
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc2:	4a37      	ldr	r2, [pc, #220]	@ (8001ca0 <HAL_TIM_Encoder_MspInit+0x22c>)
 8001bc4:	f043 0304 	orr.w	r3, r3, #4
 8001bc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bca:	4b35      	ldr	r3, [pc, #212]	@ (8001ca0 <HAL_TIM_Encoder_MspInit+0x22c>)
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bce:	f003 0304 	and.w	r3, r3, #4
 8001bd2:	617b      	str	r3, [r7, #20]
 8001bd4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	613b      	str	r3, [r7, #16]
 8001bda:	4b31      	ldr	r3, [pc, #196]	@ (8001ca0 <HAL_TIM_Encoder_MspInit+0x22c>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bde:	4a30      	ldr	r2, [pc, #192]	@ (8001ca0 <HAL_TIM_Encoder_MspInit+0x22c>)
 8001be0:	f043 0308 	orr.w	r3, r3, #8
 8001be4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001be6:	4b2e      	ldr	r3, [pc, #184]	@ (8001ca0 <HAL_TIM_Encoder_MspInit+0x22c>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bea:	f003 0308 	and.w	r3, r3, #8
 8001bee:	613b      	str	r3, [r7, #16]
 8001bf0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001bf2:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001bf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c00:	2300      	movs	r3, #0
 8001c02:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001c04:	2302      	movs	r3, #2
 8001c06:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c08:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	4829      	ldr	r0, [pc, #164]	@ (8001cb4 <HAL_TIM_Encoder_MspInit+0x240>)
 8001c10:	f001 f82a 	bl	8002c68 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001c14:	2200      	movs	r2, #0
 8001c16:	2100      	movs	r1, #0
 8001c18:	201e      	movs	r0, #30
 8001c1a:	f000 ff5c 	bl	8002ad6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001c1e:	201e      	movs	r0, #30
 8001c20:	f000 ff75 	bl	8002b0e <HAL_NVIC_EnableIRQ>
}
 8001c24:	e038      	b.n	8001c98 <HAL_TIM_Encoder_MspInit+0x224>
  else if(tim_encoderHandle->Instance==TIM5)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a23      	ldr	r2, [pc, #140]	@ (8001cb8 <HAL_TIM_Encoder_MspInit+0x244>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d133      	bne.n	8001c98 <HAL_TIM_Encoder_MspInit+0x224>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001c30:	2300      	movs	r3, #0
 8001c32:	60fb      	str	r3, [r7, #12]
 8001c34:	4b1a      	ldr	r3, [pc, #104]	@ (8001ca0 <HAL_TIM_Encoder_MspInit+0x22c>)
 8001c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c38:	4a19      	ldr	r2, [pc, #100]	@ (8001ca0 <HAL_TIM_Encoder_MspInit+0x22c>)
 8001c3a:	f043 0308 	orr.w	r3, r3, #8
 8001c3e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c40:	4b17      	ldr	r3, [pc, #92]	@ (8001ca0 <HAL_TIM_Encoder_MspInit+0x22c>)
 8001c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c44:	f003 0308 	and.w	r3, r3, #8
 8001c48:	60fb      	str	r3, [r7, #12]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	60bb      	str	r3, [r7, #8]
 8001c50:	4b13      	ldr	r3, [pc, #76]	@ (8001ca0 <HAL_TIM_Encoder_MspInit+0x22c>)
 8001c52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c54:	4a12      	ldr	r2, [pc, #72]	@ (8001ca0 <HAL_TIM_Encoder_MspInit+0x22c>)
 8001c56:	f043 0301 	orr.w	r3, r3, #1
 8001c5a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c5c:	4b10      	ldr	r3, [pc, #64]	@ (8001ca0 <HAL_TIM_Encoder_MspInit+0x22c>)
 8001c5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c60:	f003 0301 	and.w	r3, r3, #1
 8001c64:	60bb      	str	r3, [r7, #8]
 8001c66:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c70:	2300      	movs	r3, #0
 8001c72:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c74:	2300      	movs	r3, #0
 8001c76:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001c78:	2302      	movs	r3, #2
 8001c7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c7c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c80:	4619      	mov	r1, r3
 8001c82:	4808      	ldr	r0, [pc, #32]	@ (8001ca4 <HAL_TIM_Encoder_MspInit+0x230>)
 8001c84:	f000 fff0 	bl	8002c68 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001c88:	2200      	movs	r2, #0
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	2032      	movs	r0, #50	@ 0x32
 8001c8e:	f000 ff22 	bl	8002ad6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001c92:	2032      	movs	r0, #50	@ 0x32
 8001c94:	f000 ff3b 	bl	8002b0e <HAL_NVIC_EnableIRQ>
}
 8001c98:	bf00      	nop
 8001c9a:	3740      	adds	r7, #64	@ 0x40
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	40023800 	.word	0x40023800
 8001ca4:	40020000 	.word	0x40020000
 8001ca8:	40020400 	.word	0x40020400
 8001cac:	40000400 	.word	0x40000400
 8001cb0:	40000800 	.word	0x40000800
 8001cb4:	40020c00 	.word	0x40020c00
 8001cb8:	40000c00 	.word	0x40000c00

08001cbc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b08c      	sub	sp, #48	@ 0x30
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc4:	f107 031c 	add.w	r3, r7, #28
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]
 8001ccc:	605a      	str	r2, [r3, #4]
 8001cce:	609a      	str	r2, [r3, #8]
 8001cd0:	60da      	str	r2, [r3, #12]
 8001cd2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a5c      	ldr	r2, [pc, #368]	@ (8001e4c <HAL_TIM_MspPostInit+0x190>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d11f      	bne.n	8001d1e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001cde:	2300      	movs	r3, #0
 8001ce0:	61bb      	str	r3, [r7, #24]
 8001ce2:	4b5b      	ldr	r3, [pc, #364]	@ (8001e50 <HAL_TIM_MspPostInit+0x194>)
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce6:	4a5a      	ldr	r2, [pc, #360]	@ (8001e50 <HAL_TIM_MspPostInit+0x194>)
 8001ce8:	f043 0310 	orr.w	r3, r3, #16
 8001cec:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cee:	4b58      	ldr	r3, [pc, #352]	@ (8001e50 <HAL_TIM_MspPostInit+0x194>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf2:	f003 0310 	and.w	r3, r3, #16
 8001cf6:	61bb      	str	r3, [r7, #24]
 8001cf8:	69bb      	ldr	r3, [r7, #24]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8001cfa:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 8001cfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d00:	2302      	movs	r3, #2
 8001d02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d04:	2300      	movs	r3, #0
 8001d06:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d10:	f107 031c 	add.w	r3, r7, #28
 8001d14:	4619      	mov	r1, r3
 8001d16:	484f      	ldr	r0, [pc, #316]	@ (8001e54 <HAL_TIM_MspPostInit+0x198>)
 8001d18:	f000 ffa6 	bl	8002c68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8001d1c:	e091      	b.n	8001e42 <HAL_TIM_MspPostInit+0x186>
  else if(timHandle->Instance==TIM8)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a4d      	ldr	r2, [pc, #308]	@ (8001e58 <HAL_TIM_MspPostInit+0x19c>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d11f      	bne.n	8001d68 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d28:	2300      	movs	r3, #0
 8001d2a:	617b      	str	r3, [r7, #20]
 8001d2c:	4b48      	ldr	r3, [pc, #288]	@ (8001e50 <HAL_TIM_MspPostInit+0x194>)
 8001d2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d30:	4a47      	ldr	r2, [pc, #284]	@ (8001e50 <HAL_TIM_MspPostInit+0x194>)
 8001d32:	f043 0304 	orr.w	r3, r3, #4
 8001d36:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d38:	4b45      	ldr	r3, [pc, #276]	@ (8001e50 <HAL_TIM_MspPostInit+0x194>)
 8001d3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d3c:	f003 0304 	and.w	r3, r3, #4
 8001d40:	617b      	str	r3, [r7, #20]
 8001d42:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001d44:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8001d48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d52:	2300      	movs	r3, #0
 8001d54:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001d56:	2303      	movs	r3, #3
 8001d58:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d5a:	f107 031c 	add.w	r3, r7, #28
 8001d5e:	4619      	mov	r1, r3
 8001d60:	483e      	ldr	r0, [pc, #248]	@ (8001e5c <HAL_TIM_MspPostInit+0x1a0>)
 8001d62:	f000 ff81 	bl	8002c68 <HAL_GPIO_Init>
}
 8001d66:	e06c      	b.n	8001e42 <HAL_TIM_MspPostInit+0x186>
  else if(timHandle->Instance==TIM9)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a3c      	ldr	r2, [pc, #240]	@ (8001e60 <HAL_TIM_MspPostInit+0x1a4>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d11e      	bne.n	8001db0 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	613b      	str	r3, [r7, #16]
 8001d76:	4b36      	ldr	r3, [pc, #216]	@ (8001e50 <HAL_TIM_MspPostInit+0x194>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d7a:	4a35      	ldr	r2, [pc, #212]	@ (8001e50 <HAL_TIM_MspPostInit+0x194>)
 8001d7c:	f043 0310 	orr.w	r3, r3, #16
 8001d80:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d82:	4b33      	ldr	r3, [pc, #204]	@ (8001e50 <HAL_TIM_MspPostInit+0x194>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d86:	f003 0310 	and.w	r3, r3, #16
 8001d8a:	613b      	str	r3, [r7, #16]
 8001d8c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001d8e:	2360      	movs	r3, #96	@ 0x60
 8001d90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d92:	2302      	movs	r3, #2
 8001d94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d96:	2300      	movs	r3, #0
 8001d98:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001da2:	f107 031c 	add.w	r3, r7, #28
 8001da6:	4619      	mov	r1, r3
 8001da8:	482a      	ldr	r0, [pc, #168]	@ (8001e54 <HAL_TIM_MspPostInit+0x198>)
 8001daa:	f000 ff5d 	bl	8002c68 <HAL_GPIO_Init>
}
 8001dae:	e048      	b.n	8001e42 <HAL_TIM_MspPostInit+0x186>
  else if(timHandle->Instance==TIM11)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a2b      	ldr	r2, [pc, #172]	@ (8001e64 <HAL_TIM_MspPostInit+0x1a8>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d11f      	bne.n	8001dfa <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dba:	2300      	movs	r3, #0
 8001dbc:	60fb      	str	r3, [r7, #12]
 8001dbe:	4b24      	ldr	r3, [pc, #144]	@ (8001e50 <HAL_TIM_MspPostInit+0x194>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dc2:	4a23      	ldr	r2, [pc, #140]	@ (8001e50 <HAL_TIM_MspPostInit+0x194>)
 8001dc4:	f043 0302 	orr.w	r3, r3, #2
 8001dc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dca:	4b21      	ldr	r3, [pc, #132]	@ (8001e50 <HAL_TIM_MspPostInit+0x194>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	60fb      	str	r3, [r7, #12]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001dd6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001dda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ddc:	2302      	movs	r3, #2
 8001dde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de0:	2300      	movs	r3, #0
 8001de2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de4:	2300      	movs	r3, #0
 8001de6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8001de8:	2303      	movs	r3, #3
 8001dea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dec:	f107 031c 	add.w	r3, r7, #28
 8001df0:	4619      	mov	r1, r3
 8001df2:	481d      	ldr	r0, [pc, #116]	@ (8001e68 <HAL_TIM_MspPostInit+0x1ac>)
 8001df4:	f000 ff38 	bl	8002c68 <HAL_GPIO_Init>
}
 8001df8:	e023      	b.n	8001e42 <HAL_TIM_MspPostInit+0x186>
  else if(timHandle->Instance==TIM12)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a1b      	ldr	r2, [pc, #108]	@ (8001e6c <HAL_TIM_MspPostInit+0x1b0>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d11e      	bne.n	8001e42 <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e04:	2300      	movs	r3, #0
 8001e06:	60bb      	str	r3, [r7, #8]
 8001e08:	4b11      	ldr	r3, [pc, #68]	@ (8001e50 <HAL_TIM_MspPostInit+0x194>)
 8001e0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e0c:	4a10      	ldr	r2, [pc, #64]	@ (8001e50 <HAL_TIM_MspPostInit+0x194>)
 8001e0e:	f043 0302 	orr.w	r3, r3, #2
 8001e12:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e14:	4b0e      	ldr	r3, [pc, #56]	@ (8001e50 <HAL_TIM_MspPostInit+0x194>)
 8001e16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e18:	f003 0302 	and.w	r3, r3, #2
 8001e1c:	60bb      	str	r3, [r7, #8]
 8001e1e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001e20:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001e24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e26:	2302      	movs	r3, #2
 8001e28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001e32:	2309      	movs	r3, #9
 8001e34:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e36:	f107 031c 	add.w	r3, r7, #28
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	480a      	ldr	r0, [pc, #40]	@ (8001e68 <HAL_TIM_MspPostInit+0x1ac>)
 8001e3e:	f000 ff13 	bl	8002c68 <HAL_GPIO_Init>
}
 8001e42:	bf00      	nop
 8001e44:	3730      	adds	r7, #48	@ 0x30
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	40010000 	.word	0x40010000
 8001e50:	40023800 	.word	0x40023800
 8001e54:	40021000 	.word	0x40021000
 8001e58:	40010400 	.word	0x40010400
 8001e5c:	40020800 	.word	0x40020800
 8001e60:	40014000 	.word	0x40014000
 8001e64:	40014800 	.word	0x40014800
 8001e68:	40020400 	.word	0x40020400
 8001e6c:	40001800 	.word	0x40001800

08001e70 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e74:	4b11      	ldr	r3, [pc, #68]	@ (8001ebc <MX_USART1_UART_Init+0x4c>)
 8001e76:	4a12      	ldr	r2, [pc, #72]	@ (8001ec0 <MX_USART1_UART_Init+0x50>)
 8001e78:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001e7a:	4b10      	ldr	r3, [pc, #64]	@ (8001ebc <MX_USART1_UART_Init+0x4c>)
 8001e7c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e80:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e82:	4b0e      	ldr	r3, [pc, #56]	@ (8001ebc <MX_USART1_UART_Init+0x4c>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e88:	4b0c      	ldr	r3, [pc, #48]	@ (8001ebc <MX_USART1_UART_Init+0x4c>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e8e:	4b0b      	ldr	r3, [pc, #44]	@ (8001ebc <MX_USART1_UART_Init+0x4c>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e94:	4b09      	ldr	r3, [pc, #36]	@ (8001ebc <MX_USART1_UART_Init+0x4c>)
 8001e96:	220c      	movs	r2, #12
 8001e98:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e9a:	4b08      	ldr	r3, [pc, #32]	@ (8001ebc <MX_USART1_UART_Init+0x4c>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ea0:	4b06      	ldr	r3, [pc, #24]	@ (8001ebc <MX_USART1_UART_Init+0x4c>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ea6:	4805      	ldr	r0, [pc, #20]	@ (8001ebc <MX_USART1_UART_Init+0x4c>)
 8001ea8:	f003 f816 	bl	8004ed8 <HAL_UART_Init>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001eb2:	f7ff f803 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001eb6:	bf00      	nop
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	200004dc 	.word	0x200004dc
 8001ec0:	40011000 	.word	0x40011000

08001ec4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ec8:	4b11      	ldr	r3, [pc, #68]	@ (8001f10 <MX_USART2_UART_Init+0x4c>)
 8001eca:	4a12      	ldr	r2, [pc, #72]	@ (8001f14 <MX_USART2_UART_Init+0x50>)
 8001ecc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ece:	4b10      	ldr	r3, [pc, #64]	@ (8001f10 <MX_USART2_UART_Init+0x4c>)
 8001ed0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ed4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ed6:	4b0e      	ldr	r3, [pc, #56]	@ (8001f10 <MX_USART2_UART_Init+0x4c>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001edc:	4b0c      	ldr	r3, [pc, #48]	@ (8001f10 <MX_USART2_UART_Init+0x4c>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ee2:	4b0b      	ldr	r3, [pc, #44]	@ (8001f10 <MX_USART2_UART_Init+0x4c>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ee8:	4b09      	ldr	r3, [pc, #36]	@ (8001f10 <MX_USART2_UART_Init+0x4c>)
 8001eea:	220c      	movs	r2, #12
 8001eec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eee:	4b08      	ldr	r3, [pc, #32]	@ (8001f10 <MX_USART2_UART_Init+0x4c>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ef4:	4b06      	ldr	r3, [pc, #24]	@ (8001f10 <MX_USART2_UART_Init+0x4c>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001efa:	4805      	ldr	r0, [pc, #20]	@ (8001f10 <MX_USART2_UART_Init+0x4c>)
 8001efc:	f002 ffec 	bl	8004ed8 <HAL_UART_Init>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001f06:	f7fe ffd9 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f0a:	bf00      	nop
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	20000520 	.word	0x20000520
 8001f14:	40004400 	.word	0x40004400

08001f18 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001f1c:	4b11      	ldr	r3, [pc, #68]	@ (8001f64 <MX_USART3_UART_Init+0x4c>)
 8001f1e:	4a12      	ldr	r2, [pc, #72]	@ (8001f68 <MX_USART3_UART_Init+0x50>)
 8001f20:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001f22:	4b10      	ldr	r3, [pc, #64]	@ (8001f64 <MX_USART3_UART_Init+0x4c>)
 8001f24:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f28:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001f2a:	4b0e      	ldr	r3, [pc, #56]	@ (8001f64 <MX_USART3_UART_Init+0x4c>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001f30:	4b0c      	ldr	r3, [pc, #48]	@ (8001f64 <MX_USART3_UART_Init+0x4c>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001f36:	4b0b      	ldr	r3, [pc, #44]	@ (8001f64 <MX_USART3_UART_Init+0x4c>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001f3c:	4b09      	ldr	r3, [pc, #36]	@ (8001f64 <MX_USART3_UART_Init+0x4c>)
 8001f3e:	220c      	movs	r2, #12
 8001f40:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f42:	4b08      	ldr	r3, [pc, #32]	@ (8001f64 <MX_USART3_UART_Init+0x4c>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f48:	4b06      	ldr	r3, [pc, #24]	@ (8001f64 <MX_USART3_UART_Init+0x4c>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001f4e:	4805      	ldr	r0, [pc, #20]	@ (8001f64 <MX_USART3_UART_Init+0x4c>)
 8001f50:	f002 ffc2 	bl	8004ed8 <HAL_UART_Init>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001f5a:	f7fe ffaf 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001f5e:	bf00      	nop
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	20000564 	.word	0x20000564
 8001f68:	40004800 	.word	0x40004800

08001f6c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b08e      	sub	sp, #56	@ 0x38
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f78:	2200      	movs	r2, #0
 8001f7a:	601a      	str	r2, [r3, #0]
 8001f7c:	605a      	str	r2, [r3, #4]
 8001f7e:	609a      	str	r2, [r3, #8]
 8001f80:	60da      	str	r2, [r3, #12]
 8001f82:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a50      	ldr	r2, [pc, #320]	@ (80020cc <HAL_UART_MspInit+0x160>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d135      	bne.n	8001ffa <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f8e:	2300      	movs	r3, #0
 8001f90:	623b      	str	r3, [r7, #32]
 8001f92:	4b4f      	ldr	r3, [pc, #316]	@ (80020d0 <HAL_UART_MspInit+0x164>)
 8001f94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f96:	4a4e      	ldr	r2, [pc, #312]	@ (80020d0 <HAL_UART_MspInit+0x164>)
 8001f98:	f043 0310 	orr.w	r3, r3, #16
 8001f9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f9e:	4b4c      	ldr	r3, [pc, #304]	@ (80020d0 <HAL_UART_MspInit+0x164>)
 8001fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fa2:	f003 0310 	and.w	r3, r3, #16
 8001fa6:	623b      	str	r3, [r7, #32]
 8001fa8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001faa:	2300      	movs	r3, #0
 8001fac:	61fb      	str	r3, [r7, #28]
 8001fae:	4b48      	ldr	r3, [pc, #288]	@ (80020d0 <HAL_UART_MspInit+0x164>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb2:	4a47      	ldr	r2, [pc, #284]	@ (80020d0 <HAL_UART_MspInit+0x164>)
 8001fb4:	f043 0301 	orr.w	r3, r3, #1
 8001fb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fba:	4b45      	ldr	r3, [pc, #276]	@ (80020d0 <HAL_UART_MspInit+0x164>)
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	61fb      	str	r3, [r7, #28]
 8001fc4:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001fc6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001fca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fcc:	2302      	movs	r3, #2
 8001fce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001fd8:	2307      	movs	r3, #7
 8001fda:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fdc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	483c      	ldr	r0, [pc, #240]	@ (80020d4 <HAL_UART_MspInit+0x168>)
 8001fe4:	f000 fe40 	bl	8002c68 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001fe8:	2200      	movs	r2, #0
 8001fea:	2100      	movs	r1, #0
 8001fec:	2025      	movs	r0, #37	@ 0x25
 8001fee:	f000 fd72 	bl	8002ad6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001ff2:	2025      	movs	r0, #37	@ 0x25
 8001ff4:	f000 fd8b 	bl	8002b0e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001ff8:	e063      	b.n	80020c2 <HAL_UART_MspInit+0x156>
  else if(uartHandle->Instance==USART2)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a36      	ldr	r2, [pc, #216]	@ (80020d8 <HAL_UART_MspInit+0x16c>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d12c      	bne.n	800205e <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002004:	2300      	movs	r3, #0
 8002006:	61bb      	str	r3, [r7, #24]
 8002008:	4b31      	ldr	r3, [pc, #196]	@ (80020d0 <HAL_UART_MspInit+0x164>)
 800200a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800200c:	4a30      	ldr	r2, [pc, #192]	@ (80020d0 <HAL_UART_MspInit+0x164>)
 800200e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002012:	6413      	str	r3, [r2, #64]	@ 0x40
 8002014:	4b2e      	ldr	r3, [pc, #184]	@ (80020d0 <HAL_UART_MspInit+0x164>)
 8002016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002018:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800201c:	61bb      	str	r3, [r7, #24]
 800201e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002020:	2300      	movs	r3, #0
 8002022:	617b      	str	r3, [r7, #20]
 8002024:	4b2a      	ldr	r3, [pc, #168]	@ (80020d0 <HAL_UART_MspInit+0x164>)
 8002026:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002028:	4a29      	ldr	r2, [pc, #164]	@ (80020d0 <HAL_UART_MspInit+0x164>)
 800202a:	f043 0308 	orr.w	r3, r3, #8
 800202e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002030:	4b27      	ldr	r3, [pc, #156]	@ (80020d0 <HAL_UART_MspInit+0x164>)
 8002032:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002034:	f003 0308 	and.w	r3, r3, #8
 8002038:	617b      	str	r3, [r7, #20]
 800203a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800203c:	2360      	movs	r3, #96	@ 0x60
 800203e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002040:	2302      	movs	r3, #2
 8002042:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002044:	2300      	movs	r3, #0
 8002046:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002048:	2303      	movs	r3, #3
 800204a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800204c:	2307      	movs	r3, #7
 800204e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002050:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002054:	4619      	mov	r1, r3
 8002056:	4821      	ldr	r0, [pc, #132]	@ (80020dc <HAL_UART_MspInit+0x170>)
 8002058:	f000 fe06 	bl	8002c68 <HAL_GPIO_Init>
}
 800205c:	e031      	b.n	80020c2 <HAL_UART_MspInit+0x156>
  else if(uartHandle->Instance==USART3)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a1f      	ldr	r2, [pc, #124]	@ (80020e0 <HAL_UART_MspInit+0x174>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d12c      	bne.n	80020c2 <HAL_UART_MspInit+0x156>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002068:	2300      	movs	r3, #0
 800206a:	613b      	str	r3, [r7, #16]
 800206c:	4b18      	ldr	r3, [pc, #96]	@ (80020d0 <HAL_UART_MspInit+0x164>)
 800206e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002070:	4a17      	ldr	r2, [pc, #92]	@ (80020d0 <HAL_UART_MspInit+0x164>)
 8002072:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002076:	6413      	str	r3, [r2, #64]	@ 0x40
 8002078:	4b15      	ldr	r3, [pc, #84]	@ (80020d0 <HAL_UART_MspInit+0x164>)
 800207a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800207c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002080:	613b      	str	r3, [r7, #16]
 8002082:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002084:	2300      	movs	r3, #0
 8002086:	60fb      	str	r3, [r7, #12]
 8002088:	4b11      	ldr	r3, [pc, #68]	@ (80020d0 <HAL_UART_MspInit+0x164>)
 800208a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800208c:	4a10      	ldr	r2, [pc, #64]	@ (80020d0 <HAL_UART_MspInit+0x164>)
 800208e:	f043 0308 	orr.w	r3, r3, #8
 8002092:	6313      	str	r3, [r2, #48]	@ 0x30
 8002094:	4b0e      	ldr	r3, [pc, #56]	@ (80020d0 <HAL_UART_MspInit+0x164>)
 8002096:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002098:	f003 0308 	and.w	r3, r3, #8
 800209c:	60fb      	str	r3, [r7, #12]
 800209e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80020a0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80020a4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a6:	2302      	movs	r3, #2
 80020a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020aa:	2300      	movs	r3, #0
 80020ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ae:	2303      	movs	r3, #3
 80020b0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80020b2:	2307      	movs	r3, #7
 80020b4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020ba:	4619      	mov	r1, r3
 80020bc:	4807      	ldr	r0, [pc, #28]	@ (80020dc <HAL_UART_MspInit+0x170>)
 80020be:	f000 fdd3 	bl	8002c68 <HAL_GPIO_Init>
}
 80020c2:	bf00      	nop
 80020c4:	3738      	adds	r7, #56	@ 0x38
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	40011000 	.word	0x40011000
 80020d0:	40023800 	.word	0x40023800
 80020d4:	40020000 	.word	0x40020000
 80020d8:	40004400 	.word	0x40004400
 80020dc:	40020c00 	.word	0x40020c00
 80020e0:	40004800 	.word	0x40004800

080020e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80020e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800211c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020e8:	480d      	ldr	r0, [pc, #52]	@ (8002120 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80020ea:	490e      	ldr	r1, [pc, #56]	@ (8002124 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80020ec:	4a0e      	ldr	r2, [pc, #56]	@ (8002128 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80020ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020f0:	e002      	b.n	80020f8 <LoopCopyDataInit>

080020f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020f6:	3304      	adds	r3, #4

080020f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020fc:	d3f9      	bcc.n	80020f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020fe:	4a0b      	ldr	r2, [pc, #44]	@ (800212c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002100:	4c0b      	ldr	r4, [pc, #44]	@ (8002130 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002102:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002104:	e001      	b.n	800210a <LoopFillZerobss>

08002106 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002106:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002108:	3204      	adds	r2, #4

0800210a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800210a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800210c:	d3fb      	bcc.n	8002106 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800210e:	f7ff f815 	bl	800113c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002112:	f003 ff21 	bl	8005f58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002116:	f7fe fe2b 	bl	8000d70 <main>
  bx  lr    
 800211a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800211c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002120:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002124:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002128:	08005fe4 	.word	0x08005fe4
  ldr r2, =_sbss
 800212c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002130:	20000628 	.word	0x20000628

08002134 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002134:	e7fe      	b.n	8002134 <ADC_IRQHandler>
	...

08002138 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800213c:	4b0e      	ldr	r3, [pc, #56]	@ (8002178 <HAL_Init+0x40>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a0d      	ldr	r2, [pc, #52]	@ (8002178 <HAL_Init+0x40>)
 8002142:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002146:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002148:	4b0b      	ldr	r3, [pc, #44]	@ (8002178 <HAL_Init+0x40>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a0a      	ldr	r2, [pc, #40]	@ (8002178 <HAL_Init+0x40>)
 800214e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002152:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002154:	4b08      	ldr	r3, [pc, #32]	@ (8002178 <HAL_Init+0x40>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a07      	ldr	r2, [pc, #28]	@ (8002178 <HAL_Init+0x40>)
 800215a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800215e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002160:	2003      	movs	r0, #3
 8002162:	f000 fcad 	bl	8002ac0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002166:	200f      	movs	r0, #15
 8002168:	f000 f808 	bl	800217c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800216c:	f7fe ff4a 	bl	8001004 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	40023c00 	.word	0x40023c00

0800217c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002184:	4b12      	ldr	r3, [pc, #72]	@ (80021d0 <HAL_InitTick+0x54>)
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	4b12      	ldr	r3, [pc, #72]	@ (80021d4 <HAL_InitTick+0x58>)
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	4619      	mov	r1, r3
 800218e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002192:	fbb3 f3f1 	udiv	r3, r3, r1
 8002196:	fbb2 f3f3 	udiv	r3, r2, r3
 800219a:	4618      	mov	r0, r3
 800219c:	f000 fcc5 	bl	8002b2a <HAL_SYSTICK_Config>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e00e      	b.n	80021c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2b0f      	cmp	r3, #15
 80021ae:	d80a      	bhi.n	80021c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021b0:	2200      	movs	r2, #0
 80021b2:	6879      	ldr	r1, [r7, #4]
 80021b4:	f04f 30ff 	mov.w	r0, #4294967295
 80021b8:	f000 fc8d 	bl	8002ad6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021bc:	4a06      	ldr	r2, [pc, #24]	@ (80021d8 <HAL_InitTick+0x5c>)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021c2:	2300      	movs	r3, #0
 80021c4:	e000      	b.n	80021c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3708      	adds	r7, #8
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	20000000 	.word	0x20000000
 80021d4:	20000008 	.word	0x20000008
 80021d8:	20000004 	.word	0x20000004

080021dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021e0:	4b06      	ldr	r3, [pc, #24]	@ (80021fc <HAL_IncTick+0x20>)
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	461a      	mov	r2, r3
 80021e6:	4b06      	ldr	r3, [pc, #24]	@ (8002200 <HAL_IncTick+0x24>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4413      	add	r3, r2
 80021ec:	4a04      	ldr	r2, [pc, #16]	@ (8002200 <HAL_IncTick+0x24>)
 80021ee:	6013      	str	r3, [r2, #0]
}
 80021f0:	bf00      	nop
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	20000008 	.word	0x20000008
 8002200:	200005a8 	.word	0x200005a8

08002204 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
  return uwTick;
 8002208:	4b03      	ldr	r3, [pc, #12]	@ (8002218 <HAL_GetTick+0x14>)
 800220a:	681b      	ldr	r3, [r3, #0]
}
 800220c:	4618      	mov	r0, r3
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	200005a8 	.word	0x200005a8

0800221c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002224:	f7ff ffee 	bl	8002204 <HAL_GetTick>
 8002228:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002234:	d005      	beq.n	8002242 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002236:	4b0a      	ldr	r3, [pc, #40]	@ (8002260 <HAL_Delay+0x44>)
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	461a      	mov	r2, r3
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	4413      	add	r3, r2
 8002240:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002242:	bf00      	nop
 8002244:	f7ff ffde 	bl	8002204 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	68fa      	ldr	r2, [r7, #12]
 8002250:	429a      	cmp	r2, r3
 8002252:	d8f7      	bhi.n	8002244 <HAL_Delay+0x28>
  {
  }
}
 8002254:	bf00      	nop
 8002256:	bf00      	nop
 8002258:	3710      	adds	r7, #16
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	20000008 	.word	0x20000008

08002264 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800226c:	2300      	movs	r3, #0
 800226e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d101      	bne.n	800227a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e033      	b.n	80022e2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800227e:	2b00      	cmp	r3, #0
 8002280:	d109      	bne.n	8002296 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f7fe fa0e 	bl	80006a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800229a:	f003 0310 	and.w	r3, r3, #16
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d118      	bne.n	80022d4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80022aa:	f023 0302 	bic.w	r3, r3, #2
 80022ae:	f043 0202 	orr.w	r2, r3, #2
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f000 f93a 	bl	8002530 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2200      	movs	r2, #0
 80022c0:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c6:	f023 0303 	bic.w	r3, r3, #3
 80022ca:	f043 0201 	orr.w	r2, r3, #1
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	641a      	str	r2, [r3, #64]	@ 0x40
 80022d2:	e001      	b.n	80022d8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80022e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3710      	adds	r7, #16
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
	...

080022ec <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b085      	sub	sp, #20
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80022f6:	2300      	movs	r3, #0
 80022f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002300:	2b01      	cmp	r3, #1
 8002302:	d101      	bne.n	8002308 <HAL_ADC_ConfigChannel+0x1c>
 8002304:	2302      	movs	r3, #2
 8002306:	e105      	b.n	8002514 <HAL_ADC_ConfigChannel+0x228>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2201      	movs	r2, #1
 800230c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2b09      	cmp	r3, #9
 8002316:	d925      	bls.n	8002364 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	68d9      	ldr	r1, [r3, #12]
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	b29b      	uxth	r3, r3
 8002324:	461a      	mov	r2, r3
 8002326:	4613      	mov	r3, r2
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	4413      	add	r3, r2
 800232c:	3b1e      	subs	r3, #30
 800232e:	2207      	movs	r2, #7
 8002330:	fa02 f303 	lsl.w	r3, r2, r3
 8002334:	43da      	mvns	r2, r3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	400a      	ands	r2, r1
 800233c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	68d9      	ldr	r1, [r3, #12]
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	689a      	ldr	r2, [r3, #8]
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	b29b      	uxth	r3, r3
 800234e:	4618      	mov	r0, r3
 8002350:	4603      	mov	r3, r0
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	4403      	add	r3, r0
 8002356:	3b1e      	subs	r3, #30
 8002358:	409a      	lsls	r2, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	430a      	orrs	r2, r1
 8002360:	60da      	str	r2, [r3, #12]
 8002362:	e022      	b.n	80023aa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	6919      	ldr	r1, [r3, #16]
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	b29b      	uxth	r3, r3
 8002370:	461a      	mov	r2, r3
 8002372:	4613      	mov	r3, r2
 8002374:	005b      	lsls	r3, r3, #1
 8002376:	4413      	add	r3, r2
 8002378:	2207      	movs	r2, #7
 800237a:	fa02 f303 	lsl.w	r3, r2, r3
 800237e:	43da      	mvns	r2, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	400a      	ands	r2, r1
 8002386:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	6919      	ldr	r1, [r3, #16]
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	689a      	ldr	r2, [r3, #8]
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	b29b      	uxth	r3, r3
 8002398:	4618      	mov	r0, r3
 800239a:	4603      	mov	r3, r0
 800239c:	005b      	lsls	r3, r3, #1
 800239e:	4403      	add	r3, r0
 80023a0:	409a      	lsls	r2, r3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	430a      	orrs	r2, r1
 80023a8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	2b06      	cmp	r3, #6
 80023b0:	d824      	bhi.n	80023fc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685a      	ldr	r2, [r3, #4]
 80023bc:	4613      	mov	r3, r2
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	4413      	add	r3, r2
 80023c2:	3b05      	subs	r3, #5
 80023c4:	221f      	movs	r2, #31
 80023c6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ca:	43da      	mvns	r2, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	400a      	ands	r2, r1
 80023d2:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	b29b      	uxth	r3, r3
 80023e0:	4618      	mov	r0, r3
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	685a      	ldr	r2, [r3, #4]
 80023e6:	4613      	mov	r3, r2
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	4413      	add	r3, r2
 80023ec:	3b05      	subs	r3, #5
 80023ee:	fa00 f203 	lsl.w	r2, r0, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	430a      	orrs	r2, r1
 80023f8:	635a      	str	r2, [r3, #52]	@ 0x34
 80023fa:	e04c      	b.n	8002496 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	2b0c      	cmp	r3, #12
 8002402:	d824      	bhi.n	800244e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	685a      	ldr	r2, [r3, #4]
 800240e:	4613      	mov	r3, r2
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	4413      	add	r3, r2
 8002414:	3b23      	subs	r3, #35	@ 0x23
 8002416:	221f      	movs	r2, #31
 8002418:	fa02 f303 	lsl.w	r3, r2, r3
 800241c:	43da      	mvns	r2, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	400a      	ands	r2, r1
 8002424:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	b29b      	uxth	r3, r3
 8002432:	4618      	mov	r0, r3
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685a      	ldr	r2, [r3, #4]
 8002438:	4613      	mov	r3, r2
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	4413      	add	r3, r2
 800243e:	3b23      	subs	r3, #35	@ 0x23
 8002440:	fa00 f203 	lsl.w	r2, r0, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	430a      	orrs	r2, r1
 800244a:	631a      	str	r2, [r3, #48]	@ 0x30
 800244c:	e023      	b.n	8002496 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685a      	ldr	r2, [r3, #4]
 8002458:	4613      	mov	r3, r2
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	4413      	add	r3, r2
 800245e:	3b41      	subs	r3, #65	@ 0x41
 8002460:	221f      	movs	r2, #31
 8002462:	fa02 f303 	lsl.w	r3, r2, r3
 8002466:	43da      	mvns	r2, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	400a      	ands	r2, r1
 800246e:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	b29b      	uxth	r3, r3
 800247c:	4618      	mov	r0, r3
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	685a      	ldr	r2, [r3, #4]
 8002482:	4613      	mov	r3, r2
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	4413      	add	r3, r2
 8002488:	3b41      	subs	r3, #65	@ 0x41
 800248a:	fa00 f203 	lsl.w	r2, r0, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	430a      	orrs	r2, r1
 8002494:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002496:	4b22      	ldr	r3, [pc, #136]	@ (8002520 <HAL_ADC_ConfigChannel+0x234>)
 8002498:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a21      	ldr	r2, [pc, #132]	@ (8002524 <HAL_ADC_ConfigChannel+0x238>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d109      	bne.n	80024b8 <HAL_ADC_ConfigChannel+0x1cc>
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2b12      	cmp	r3, #18
 80024aa:	d105      	bne.n	80024b8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a19      	ldr	r2, [pc, #100]	@ (8002524 <HAL_ADC_ConfigChannel+0x238>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d123      	bne.n	800250a <HAL_ADC_ConfigChannel+0x21e>
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2b10      	cmp	r3, #16
 80024c8:	d003      	beq.n	80024d2 <HAL_ADC_ConfigChannel+0x1e6>
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2b11      	cmp	r3, #17
 80024d0:	d11b      	bne.n	800250a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2b10      	cmp	r3, #16
 80024e4:	d111      	bne.n	800250a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80024e6:	4b10      	ldr	r3, [pc, #64]	@ (8002528 <HAL_ADC_ConfigChannel+0x23c>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a10      	ldr	r2, [pc, #64]	@ (800252c <HAL_ADC_ConfigChannel+0x240>)
 80024ec:	fba2 2303 	umull	r2, r3, r2, r3
 80024f0:	0c9a      	lsrs	r2, r3, #18
 80024f2:	4613      	mov	r3, r2
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	4413      	add	r3, r2
 80024f8:	005b      	lsls	r3, r3, #1
 80024fa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80024fc:	e002      	b.n	8002504 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	3b01      	subs	r3, #1
 8002502:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d1f9      	bne.n	80024fe <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002512:	2300      	movs	r3, #0
}
 8002514:	4618      	mov	r0, r3
 8002516:	3714      	adds	r7, #20
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr
 8002520:	40012300 	.word	0x40012300
 8002524:	40012000 	.word	0x40012000
 8002528:	20000000 	.word	0x20000000
 800252c:	431bde83 	.word	0x431bde83

08002530 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002530:	b480      	push	{r7}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002538:	4b79      	ldr	r3, [pc, #484]	@ (8002720 <ADC_Init+0x1f0>)
 800253a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	685a      	ldr	r2, [r3, #4]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	431a      	orrs	r2, r3
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	685a      	ldr	r2, [r3, #4]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002564:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	6859      	ldr	r1, [r3, #4]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	691b      	ldr	r3, [r3, #16]
 8002570:	021a      	lsls	r2, r3, #8
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	430a      	orrs	r2, r1
 8002578:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	685a      	ldr	r2, [r3, #4]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002588:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	6859      	ldr	r1, [r3, #4]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	689a      	ldr	r2, [r3, #8]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	430a      	orrs	r2, r1
 800259a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	689a      	ldr	r2, [r3, #8]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80025aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	6899      	ldr	r1, [r3, #8]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	68da      	ldr	r2, [r3, #12]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	430a      	orrs	r2, r1
 80025bc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025c2:	4a58      	ldr	r2, [pc, #352]	@ (8002724 <ADC_Init+0x1f4>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d022      	beq.n	800260e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	689a      	ldr	r2, [r3, #8]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80025d6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	6899      	ldr	r1, [r3, #8]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	430a      	orrs	r2, r1
 80025e8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	689a      	ldr	r2, [r3, #8]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80025f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	6899      	ldr	r1, [r3, #8]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	430a      	orrs	r2, r1
 800260a:	609a      	str	r2, [r3, #8]
 800260c:	e00f      	b.n	800262e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	689a      	ldr	r2, [r3, #8]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800261c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	689a      	ldr	r2, [r3, #8]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800262c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	689a      	ldr	r2, [r3, #8]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f022 0202 	bic.w	r2, r2, #2
 800263c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	6899      	ldr	r1, [r3, #8]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	7e1b      	ldrb	r3, [r3, #24]
 8002648:	005a      	lsls	r2, r3, #1
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	430a      	orrs	r2, r1
 8002650:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d01b      	beq.n	8002694 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	685a      	ldr	r2, [r3, #4]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800266a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	685a      	ldr	r2, [r3, #4]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800267a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	6859      	ldr	r1, [r3, #4]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002686:	3b01      	subs	r3, #1
 8002688:	035a      	lsls	r2, r3, #13
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	430a      	orrs	r2, r1
 8002690:	605a      	str	r2, [r3, #4]
 8002692:	e007      	b.n	80026a4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	685a      	ldr	r2, [r3, #4]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80026a2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80026b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	69db      	ldr	r3, [r3, #28]
 80026be:	3b01      	subs	r3, #1
 80026c0:	051a      	lsls	r2, r3, #20
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	430a      	orrs	r2, r1
 80026c8:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	689a      	ldr	r2, [r3, #8]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80026d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	6899      	ldr	r1, [r3, #8]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80026e6:	025a      	lsls	r2, r3, #9
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	430a      	orrs	r2, r1
 80026ee:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	689a      	ldr	r2, [r3, #8]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	6899      	ldr	r1, [r3, #8]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	695b      	ldr	r3, [r3, #20]
 800270a:	029a      	lsls	r2, r3, #10
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	430a      	orrs	r2, r1
 8002712:	609a      	str	r2, [r3, #8]
}
 8002714:	bf00      	nop
 8002716:	3714      	adds	r7, #20
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr
 8002720:	40012300 	.word	0x40012300
 8002724:	0f000001 	.word	0x0f000001

08002728 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d101      	bne.n	800273a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e0ed      	b.n	8002916 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002740:	b2db      	uxtb	r3, r3
 8002742:	2b00      	cmp	r3, #0
 8002744:	d102      	bne.n	800274c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f7fe f8d4 	bl	80008f4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f042 0201 	orr.w	r2, r2, #1
 800275a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800275c:	f7ff fd52 	bl	8002204 <HAL_GetTick>
 8002760:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002762:	e012      	b.n	800278a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002764:	f7ff fd4e 	bl	8002204 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b0a      	cmp	r3, #10
 8002770:	d90b      	bls.n	800278a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002776:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2205      	movs	r2, #5
 8002782:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e0c5      	b.n	8002916 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f003 0301 	and.w	r3, r3, #1
 8002794:	2b00      	cmp	r3, #0
 8002796:	d0e5      	beq.n	8002764 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f022 0202 	bic.w	r2, r2, #2
 80027a6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80027a8:	f7ff fd2c 	bl	8002204 <HAL_GetTick>
 80027ac:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80027ae:	e012      	b.n	80027d6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80027b0:	f7ff fd28 	bl	8002204 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b0a      	cmp	r3, #10
 80027bc:	d90b      	bls.n	80027d6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2205      	movs	r2, #5
 80027ce:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e09f      	b.n	8002916 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f003 0302 	and.w	r3, r3, #2
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d1e5      	bne.n	80027b0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	7e1b      	ldrb	r3, [r3, #24]
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d108      	bne.n	80027fe <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80027fa:	601a      	str	r2, [r3, #0]
 80027fc:	e007      	b.n	800280e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800280c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	7e5b      	ldrb	r3, [r3, #25]
 8002812:	2b01      	cmp	r3, #1
 8002814:	d108      	bne.n	8002828 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002824:	601a      	str	r2, [r3, #0]
 8002826:	e007      	b.n	8002838 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002836:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	7e9b      	ldrb	r3, [r3, #26]
 800283c:	2b01      	cmp	r3, #1
 800283e:	d108      	bne.n	8002852 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f042 0220 	orr.w	r2, r2, #32
 800284e:	601a      	str	r2, [r3, #0]
 8002850:	e007      	b.n	8002862 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f022 0220 	bic.w	r2, r2, #32
 8002860:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	7edb      	ldrb	r3, [r3, #27]
 8002866:	2b01      	cmp	r3, #1
 8002868:	d108      	bne.n	800287c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f022 0210 	bic.w	r2, r2, #16
 8002878:	601a      	str	r2, [r3, #0]
 800287a:	e007      	b.n	800288c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f042 0210 	orr.w	r2, r2, #16
 800288a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	7f1b      	ldrb	r3, [r3, #28]
 8002890:	2b01      	cmp	r3, #1
 8002892:	d108      	bne.n	80028a6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f042 0208 	orr.w	r2, r2, #8
 80028a2:	601a      	str	r2, [r3, #0]
 80028a4:	e007      	b.n	80028b6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f022 0208 	bic.w	r2, r2, #8
 80028b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	7f5b      	ldrb	r3, [r3, #29]
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d108      	bne.n	80028d0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f042 0204 	orr.w	r2, r2, #4
 80028cc:	601a      	str	r2, [r3, #0]
 80028ce:	e007      	b.n	80028e0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f022 0204 	bic.w	r2, r2, #4
 80028de:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689a      	ldr	r2, [r3, #8]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	431a      	orrs	r2, r3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	431a      	orrs	r2, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	695b      	ldr	r3, [r3, #20]
 80028f4:	ea42 0103 	orr.w	r1, r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	1e5a      	subs	r2, r3, #1
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	430a      	orrs	r2, r1
 8002904:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3710      	adds	r7, #16
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
	...

08002920 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002920:	b480      	push	{r7}
 8002922:	b085      	sub	sp, #20
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f003 0307 	and.w	r3, r3, #7
 800292e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002930:	4b0c      	ldr	r3, [pc, #48]	@ (8002964 <__NVIC_SetPriorityGrouping+0x44>)
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002936:	68ba      	ldr	r2, [r7, #8]
 8002938:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800293c:	4013      	ands	r3, r2
 800293e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002948:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800294c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002950:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002952:	4a04      	ldr	r2, [pc, #16]	@ (8002964 <__NVIC_SetPriorityGrouping+0x44>)
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	60d3      	str	r3, [r2, #12]
}
 8002958:	bf00      	nop
 800295a:	3714      	adds	r7, #20
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr
 8002964:	e000ed00 	.word	0xe000ed00

08002968 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800296c:	4b04      	ldr	r3, [pc, #16]	@ (8002980 <__NVIC_GetPriorityGrouping+0x18>)
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	0a1b      	lsrs	r3, r3, #8
 8002972:	f003 0307 	and.w	r3, r3, #7
}
 8002976:	4618      	mov	r0, r3
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr
 8002980:	e000ed00 	.word	0xe000ed00

08002984 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	4603      	mov	r3, r0
 800298c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800298e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002992:	2b00      	cmp	r3, #0
 8002994:	db0b      	blt.n	80029ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002996:	79fb      	ldrb	r3, [r7, #7]
 8002998:	f003 021f 	and.w	r2, r3, #31
 800299c:	4907      	ldr	r1, [pc, #28]	@ (80029bc <__NVIC_EnableIRQ+0x38>)
 800299e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a2:	095b      	lsrs	r3, r3, #5
 80029a4:	2001      	movs	r0, #1
 80029a6:	fa00 f202 	lsl.w	r2, r0, r2
 80029aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029ae:	bf00      	nop
 80029b0:	370c      	adds	r7, #12
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
 80029ba:	bf00      	nop
 80029bc:	e000e100 	.word	0xe000e100

080029c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	4603      	mov	r3, r0
 80029c8:	6039      	str	r1, [r7, #0]
 80029ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	db0a      	blt.n	80029ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	b2da      	uxtb	r2, r3
 80029d8:	490c      	ldr	r1, [pc, #48]	@ (8002a0c <__NVIC_SetPriority+0x4c>)
 80029da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029de:	0112      	lsls	r2, r2, #4
 80029e0:	b2d2      	uxtb	r2, r2
 80029e2:	440b      	add	r3, r1
 80029e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029e8:	e00a      	b.n	8002a00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	b2da      	uxtb	r2, r3
 80029ee:	4908      	ldr	r1, [pc, #32]	@ (8002a10 <__NVIC_SetPriority+0x50>)
 80029f0:	79fb      	ldrb	r3, [r7, #7]
 80029f2:	f003 030f 	and.w	r3, r3, #15
 80029f6:	3b04      	subs	r3, #4
 80029f8:	0112      	lsls	r2, r2, #4
 80029fa:	b2d2      	uxtb	r2, r2
 80029fc:	440b      	add	r3, r1
 80029fe:	761a      	strb	r2, [r3, #24]
}
 8002a00:	bf00      	nop
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr
 8002a0c:	e000e100 	.word	0xe000e100
 8002a10:	e000ed00 	.word	0xe000ed00

08002a14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b089      	sub	sp, #36	@ 0x24
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	60b9      	str	r1, [r7, #8]
 8002a1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f003 0307 	and.w	r3, r3, #7
 8002a26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	f1c3 0307 	rsb	r3, r3, #7
 8002a2e:	2b04      	cmp	r3, #4
 8002a30:	bf28      	it	cs
 8002a32:	2304      	movcs	r3, #4
 8002a34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	3304      	adds	r3, #4
 8002a3a:	2b06      	cmp	r3, #6
 8002a3c:	d902      	bls.n	8002a44 <NVIC_EncodePriority+0x30>
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	3b03      	subs	r3, #3
 8002a42:	e000      	b.n	8002a46 <NVIC_EncodePriority+0x32>
 8002a44:	2300      	movs	r3, #0
 8002a46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a48:	f04f 32ff 	mov.w	r2, #4294967295
 8002a4c:	69bb      	ldr	r3, [r7, #24]
 8002a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a52:	43da      	mvns	r2, r3
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	401a      	ands	r2, r3
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a5c:	f04f 31ff 	mov.w	r1, #4294967295
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	fa01 f303 	lsl.w	r3, r1, r3
 8002a66:	43d9      	mvns	r1, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a6c:	4313      	orrs	r3, r2
         );
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3724      	adds	r7, #36	@ 0x24
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
	...

08002a7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	3b01      	subs	r3, #1
 8002a88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a8c:	d301      	bcc.n	8002a92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e00f      	b.n	8002ab2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a92:	4a0a      	ldr	r2, [pc, #40]	@ (8002abc <SysTick_Config+0x40>)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	3b01      	subs	r3, #1
 8002a98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a9a:	210f      	movs	r1, #15
 8002a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8002aa0:	f7ff ff8e 	bl	80029c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002aa4:	4b05      	ldr	r3, [pc, #20]	@ (8002abc <SysTick_Config+0x40>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002aaa:	4b04      	ldr	r3, [pc, #16]	@ (8002abc <SysTick_Config+0x40>)
 8002aac:	2207      	movs	r2, #7
 8002aae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3708      	adds	r7, #8
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	e000e010 	.word	0xe000e010

08002ac0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f7ff ff29 	bl	8002920 <__NVIC_SetPriorityGrouping>
}
 8002ace:	bf00      	nop
 8002ad0:	3708      	adds	r7, #8
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}

08002ad6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ad6:	b580      	push	{r7, lr}
 8002ad8:	b086      	sub	sp, #24
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	4603      	mov	r3, r0
 8002ade:	60b9      	str	r1, [r7, #8]
 8002ae0:	607a      	str	r2, [r7, #4]
 8002ae2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ae8:	f7ff ff3e 	bl	8002968 <__NVIC_GetPriorityGrouping>
 8002aec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	68b9      	ldr	r1, [r7, #8]
 8002af2:	6978      	ldr	r0, [r7, #20]
 8002af4:	f7ff ff8e 	bl	8002a14 <NVIC_EncodePriority>
 8002af8:	4602      	mov	r2, r0
 8002afa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002afe:	4611      	mov	r1, r2
 8002b00:	4618      	mov	r0, r3
 8002b02:	f7ff ff5d 	bl	80029c0 <__NVIC_SetPriority>
}
 8002b06:	bf00      	nop
 8002b08:	3718      	adds	r7, #24
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}

08002b0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b0e:	b580      	push	{r7, lr}
 8002b10:	b082      	sub	sp, #8
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	4603      	mov	r3, r0
 8002b16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7ff ff31 	bl	8002984 <__NVIC_EnableIRQ>
}
 8002b22:	bf00      	nop
 8002b24:	3708      	adds	r7, #8
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}

08002b2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b2a:	b580      	push	{r7, lr}
 8002b2c:	b082      	sub	sp, #8
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f7ff ffa2 	bl	8002a7c <SysTick_Config>
 8002b38:	4603      	mov	r3, r0
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3708      	adds	r7, #8
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}

08002b42 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b42:	b580      	push	{r7, lr}
 8002b44:	b084      	sub	sp, #16
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b4e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002b50:	f7ff fb58 	bl	8002204 <HAL_GetTick>
 8002b54:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d008      	beq.n	8002b74 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2280      	movs	r2, #128	@ 0x80
 8002b66:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e052      	b.n	8002c1a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f022 0216 	bic.w	r2, r2, #22
 8002b82:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	695a      	ldr	r2, [r3, #20]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002b92:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d103      	bne.n	8002ba4 <HAL_DMA_Abort+0x62>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d007      	beq.n	8002bb4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f022 0208 	bic.w	r2, r2, #8
 8002bb2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f022 0201 	bic.w	r2, r2, #1
 8002bc2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bc4:	e013      	b.n	8002bee <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002bc6:	f7ff fb1d 	bl	8002204 <HAL_GetTick>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	2b05      	cmp	r3, #5
 8002bd2:	d90c      	bls.n	8002bee <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2220      	movs	r2, #32
 8002bd8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2203      	movs	r2, #3
 8002bde:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e015      	b.n	8002c1a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0301 	and.w	r3, r3, #1
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d1e4      	bne.n	8002bc6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c00:	223f      	movs	r2, #63	@ 0x3f
 8002c02:	409a      	lsls	r2, r3
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3710      	adds	r7, #16
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}

08002c22 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c22:	b480      	push	{r7}
 8002c24:	b083      	sub	sp, #12
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d004      	beq.n	8002c40 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2280      	movs	r2, #128	@ 0x80
 8002c3a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e00c      	b.n	8002c5a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2205      	movs	r2, #5
 8002c44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f022 0201 	bic.w	r2, r2, #1
 8002c56:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	370c      	adds	r7, #12
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
	...

08002c68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b089      	sub	sp, #36	@ 0x24
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c72:	2300      	movs	r3, #0
 8002c74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c76:	2300      	movs	r3, #0
 8002c78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c7e:	2300      	movs	r3, #0
 8002c80:	61fb      	str	r3, [r7, #28]
 8002c82:	e16b      	b.n	8002f5c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c84:	2201      	movs	r2, #1
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	697a      	ldr	r2, [r7, #20]
 8002c94:	4013      	ands	r3, r2
 8002c96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c98:	693a      	ldr	r2, [r7, #16]
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	f040 815a 	bne.w	8002f56 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f003 0303 	and.w	r3, r3, #3
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d005      	beq.n	8002cba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d130      	bne.n	8002d1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	005b      	lsls	r3, r3, #1
 8002cc4:	2203      	movs	r2, #3
 8002cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cca:	43db      	mvns	r3, r3
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	4013      	ands	r3, r2
 8002cd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	68da      	ldr	r2, [r3, #12]
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	005b      	lsls	r3, r3, #1
 8002cda:	fa02 f303 	lsl.w	r3, r2, r3
 8002cde:	69ba      	ldr	r2, [r7, #24]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	69ba      	ldr	r2, [r7, #24]
 8002ce8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf8:	43db      	mvns	r3, r3
 8002cfa:	69ba      	ldr	r2, [r7, #24]
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	091b      	lsrs	r3, r3, #4
 8002d06:	f003 0201 	and.w	r2, r3, #1
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	69ba      	ldr	r2, [r7, #24]
 8002d1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f003 0303 	and.w	r3, r3, #3
 8002d24:	2b03      	cmp	r3, #3
 8002d26:	d017      	beq.n	8002d58 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	005b      	lsls	r3, r3, #1
 8002d32:	2203      	movs	r2, #3
 8002d34:	fa02 f303 	lsl.w	r3, r2, r3
 8002d38:	43db      	mvns	r3, r3
 8002d3a:	69ba      	ldr	r2, [r7, #24]
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	689a      	ldr	r2, [r3, #8]
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	005b      	lsls	r3, r3, #1
 8002d48:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	69ba      	ldr	r2, [r7, #24]
 8002d56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f003 0303 	and.w	r3, r3, #3
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d123      	bne.n	8002dac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	08da      	lsrs	r2, r3, #3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	3208      	adds	r2, #8
 8002d6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	f003 0307 	and.w	r3, r3, #7
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	220f      	movs	r2, #15
 8002d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d80:	43db      	mvns	r3, r3
 8002d82:	69ba      	ldr	r2, [r7, #24]
 8002d84:	4013      	ands	r3, r2
 8002d86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	691a      	ldr	r2, [r3, #16]
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	f003 0307 	and.w	r3, r3, #7
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	fa02 f303 	lsl.w	r3, r2, r3
 8002d98:	69ba      	ldr	r2, [r7, #24]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	08da      	lsrs	r2, r3, #3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	3208      	adds	r2, #8
 8002da6:	69b9      	ldr	r1, [r7, #24]
 8002da8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	2203      	movs	r2, #3
 8002db8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbc:	43db      	mvns	r3, r3
 8002dbe:	69ba      	ldr	r2, [r7, #24]
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f003 0203 	and.w	r2, r3, #3
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	005b      	lsls	r3, r3, #1
 8002dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd4:	69ba      	ldr	r2, [r7, #24]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	69ba      	ldr	r2, [r7, #24]
 8002dde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	f000 80b4 	beq.w	8002f56 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dee:	2300      	movs	r3, #0
 8002df0:	60fb      	str	r3, [r7, #12]
 8002df2:	4b60      	ldr	r3, [pc, #384]	@ (8002f74 <HAL_GPIO_Init+0x30c>)
 8002df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002df6:	4a5f      	ldr	r2, [pc, #380]	@ (8002f74 <HAL_GPIO_Init+0x30c>)
 8002df8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002dfc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002dfe:	4b5d      	ldr	r3, [pc, #372]	@ (8002f74 <HAL_GPIO_Init+0x30c>)
 8002e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e06:	60fb      	str	r3, [r7, #12]
 8002e08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e0a:	4a5b      	ldr	r2, [pc, #364]	@ (8002f78 <HAL_GPIO_Init+0x310>)
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	089b      	lsrs	r3, r3, #2
 8002e10:	3302      	adds	r3, #2
 8002e12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	f003 0303 	and.w	r3, r3, #3
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	220f      	movs	r2, #15
 8002e22:	fa02 f303 	lsl.w	r3, r2, r3
 8002e26:	43db      	mvns	r3, r3
 8002e28:	69ba      	ldr	r2, [r7, #24]
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a52      	ldr	r2, [pc, #328]	@ (8002f7c <HAL_GPIO_Init+0x314>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d02b      	beq.n	8002e8e <HAL_GPIO_Init+0x226>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a51      	ldr	r2, [pc, #324]	@ (8002f80 <HAL_GPIO_Init+0x318>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d025      	beq.n	8002e8a <HAL_GPIO_Init+0x222>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a50      	ldr	r2, [pc, #320]	@ (8002f84 <HAL_GPIO_Init+0x31c>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d01f      	beq.n	8002e86 <HAL_GPIO_Init+0x21e>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a4f      	ldr	r2, [pc, #316]	@ (8002f88 <HAL_GPIO_Init+0x320>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d019      	beq.n	8002e82 <HAL_GPIO_Init+0x21a>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a4e      	ldr	r2, [pc, #312]	@ (8002f8c <HAL_GPIO_Init+0x324>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d013      	beq.n	8002e7e <HAL_GPIO_Init+0x216>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a4d      	ldr	r2, [pc, #308]	@ (8002f90 <HAL_GPIO_Init+0x328>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d00d      	beq.n	8002e7a <HAL_GPIO_Init+0x212>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a4c      	ldr	r2, [pc, #304]	@ (8002f94 <HAL_GPIO_Init+0x32c>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d007      	beq.n	8002e76 <HAL_GPIO_Init+0x20e>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a4b      	ldr	r2, [pc, #300]	@ (8002f98 <HAL_GPIO_Init+0x330>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d101      	bne.n	8002e72 <HAL_GPIO_Init+0x20a>
 8002e6e:	2307      	movs	r3, #7
 8002e70:	e00e      	b.n	8002e90 <HAL_GPIO_Init+0x228>
 8002e72:	2308      	movs	r3, #8
 8002e74:	e00c      	b.n	8002e90 <HAL_GPIO_Init+0x228>
 8002e76:	2306      	movs	r3, #6
 8002e78:	e00a      	b.n	8002e90 <HAL_GPIO_Init+0x228>
 8002e7a:	2305      	movs	r3, #5
 8002e7c:	e008      	b.n	8002e90 <HAL_GPIO_Init+0x228>
 8002e7e:	2304      	movs	r3, #4
 8002e80:	e006      	b.n	8002e90 <HAL_GPIO_Init+0x228>
 8002e82:	2303      	movs	r3, #3
 8002e84:	e004      	b.n	8002e90 <HAL_GPIO_Init+0x228>
 8002e86:	2302      	movs	r3, #2
 8002e88:	e002      	b.n	8002e90 <HAL_GPIO_Init+0x228>
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e000      	b.n	8002e90 <HAL_GPIO_Init+0x228>
 8002e8e:	2300      	movs	r3, #0
 8002e90:	69fa      	ldr	r2, [r7, #28]
 8002e92:	f002 0203 	and.w	r2, r2, #3
 8002e96:	0092      	lsls	r2, r2, #2
 8002e98:	4093      	lsls	r3, r2
 8002e9a:	69ba      	ldr	r2, [r7, #24]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ea0:	4935      	ldr	r1, [pc, #212]	@ (8002f78 <HAL_GPIO_Init+0x310>)
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	089b      	lsrs	r3, r3, #2
 8002ea6:	3302      	adds	r3, #2
 8002ea8:	69ba      	ldr	r2, [r7, #24]
 8002eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002eae:	4b3b      	ldr	r3, [pc, #236]	@ (8002f9c <HAL_GPIO_Init+0x334>)
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	43db      	mvns	r3, r3
 8002eb8:	69ba      	ldr	r2, [r7, #24]
 8002eba:	4013      	ands	r3, r2
 8002ebc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d003      	beq.n	8002ed2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002eca:	69ba      	ldr	r2, [r7, #24]
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ed2:	4a32      	ldr	r2, [pc, #200]	@ (8002f9c <HAL_GPIO_Init+0x334>)
 8002ed4:	69bb      	ldr	r3, [r7, #24]
 8002ed6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ed8:	4b30      	ldr	r3, [pc, #192]	@ (8002f9c <HAL_GPIO_Init+0x334>)
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	43db      	mvns	r3, r3
 8002ee2:	69ba      	ldr	r2, [r7, #24]
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d003      	beq.n	8002efc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002ef4:	69ba      	ldr	r2, [r7, #24]
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002efc:	4a27      	ldr	r2, [pc, #156]	@ (8002f9c <HAL_GPIO_Init+0x334>)
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f02:	4b26      	ldr	r3, [pc, #152]	@ (8002f9c <HAL_GPIO_Init+0x334>)
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	43db      	mvns	r3, r3
 8002f0c:	69ba      	ldr	r2, [r7, #24]
 8002f0e:	4013      	ands	r3, r2
 8002f10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d003      	beq.n	8002f26 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002f1e:	69ba      	ldr	r2, [r7, #24]
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f26:	4a1d      	ldr	r2, [pc, #116]	@ (8002f9c <HAL_GPIO_Init+0x334>)
 8002f28:	69bb      	ldr	r3, [r7, #24]
 8002f2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f2c:	4b1b      	ldr	r3, [pc, #108]	@ (8002f9c <HAL_GPIO_Init+0x334>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	43db      	mvns	r3, r3
 8002f36:	69ba      	ldr	r2, [r7, #24]
 8002f38:	4013      	ands	r3, r2
 8002f3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d003      	beq.n	8002f50 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002f48:	69ba      	ldr	r2, [r7, #24]
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f50:	4a12      	ldr	r2, [pc, #72]	@ (8002f9c <HAL_GPIO_Init+0x334>)
 8002f52:	69bb      	ldr	r3, [r7, #24]
 8002f54:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	3301      	adds	r3, #1
 8002f5a:	61fb      	str	r3, [r7, #28]
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	2b0f      	cmp	r3, #15
 8002f60:	f67f ae90 	bls.w	8002c84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f64:	bf00      	nop
 8002f66:	bf00      	nop
 8002f68:	3724      	adds	r7, #36	@ 0x24
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop
 8002f74:	40023800 	.word	0x40023800
 8002f78:	40013800 	.word	0x40013800
 8002f7c:	40020000 	.word	0x40020000
 8002f80:	40020400 	.word	0x40020400
 8002f84:	40020800 	.word	0x40020800
 8002f88:	40020c00 	.word	0x40020c00
 8002f8c:	40021000 	.word	0x40021000
 8002f90:	40021400 	.word	0x40021400
 8002f94:	40021800 	.word	0x40021800
 8002f98:	40021c00 	.word	0x40021c00
 8002f9c:	40013c00 	.word	0x40013c00

08002fa0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	460b      	mov	r3, r1
 8002faa:	807b      	strh	r3, [r7, #2]
 8002fac:	4613      	mov	r3, r2
 8002fae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fb0:	787b      	ldrb	r3, [r7, #1]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d003      	beq.n	8002fbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fb6:	887a      	ldrh	r2, [r7, #2]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002fbc:	e003      	b.n	8002fc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002fbe:	887b      	ldrh	r3, [r7, #2]
 8002fc0:	041a      	lsls	r2, r3, #16
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	619a      	str	r2, [r3, #24]
}
 8002fc6:	bf00      	nop
 8002fc8:	370c      	adds	r7, #12
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr

08002fd2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002fd2:	b480      	push	{r7}
 8002fd4:	b085      	sub	sp, #20
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
 8002fda:	460b      	mov	r3, r1
 8002fdc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	695b      	ldr	r3, [r3, #20]
 8002fe2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002fe4:	887a      	ldrh	r2, [r7, #2]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	4013      	ands	r3, r2
 8002fea:	041a      	lsls	r2, r3, #16
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	43d9      	mvns	r1, r3
 8002ff0:	887b      	ldrh	r3, [r7, #2]
 8002ff2:	400b      	ands	r3, r1
 8002ff4:	431a      	orrs	r2, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	619a      	str	r2, [r3, #24]
}
 8002ffa:	bf00      	nop
 8002ffc:	3714      	adds	r7, #20
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
	...

08003008 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d101      	bne.n	800301a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e12b      	b.n	8003272 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003020:	b2db      	uxtb	r3, r3
 8003022:	2b00      	cmp	r3, #0
 8003024:	d106      	bne.n	8003034 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f7fd fe20 	bl	8000c74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2224      	movs	r2, #36	@ 0x24
 8003038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f022 0201 	bic.w	r2, r2, #1
 800304a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800305a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800306a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800306c:	f000 fd80 	bl	8003b70 <HAL_RCC_GetPCLK1Freq>
 8003070:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	4a81      	ldr	r2, [pc, #516]	@ (800327c <HAL_I2C_Init+0x274>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d807      	bhi.n	800308c <HAL_I2C_Init+0x84>
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	4a80      	ldr	r2, [pc, #512]	@ (8003280 <HAL_I2C_Init+0x278>)
 8003080:	4293      	cmp	r3, r2
 8003082:	bf94      	ite	ls
 8003084:	2301      	movls	r3, #1
 8003086:	2300      	movhi	r3, #0
 8003088:	b2db      	uxtb	r3, r3
 800308a:	e006      	b.n	800309a <HAL_I2C_Init+0x92>
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	4a7d      	ldr	r2, [pc, #500]	@ (8003284 <HAL_I2C_Init+0x27c>)
 8003090:	4293      	cmp	r3, r2
 8003092:	bf94      	ite	ls
 8003094:	2301      	movls	r3, #1
 8003096:	2300      	movhi	r3, #0
 8003098:	b2db      	uxtb	r3, r3
 800309a:	2b00      	cmp	r3, #0
 800309c:	d001      	beq.n	80030a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e0e7      	b.n	8003272 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	4a78      	ldr	r2, [pc, #480]	@ (8003288 <HAL_I2C_Init+0x280>)
 80030a6:	fba2 2303 	umull	r2, r3, r2, r3
 80030aa:	0c9b      	lsrs	r3, r3, #18
 80030ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	68ba      	ldr	r2, [r7, #8]
 80030be:	430a      	orrs	r2, r1
 80030c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	6a1b      	ldr	r3, [r3, #32]
 80030c8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	4a6a      	ldr	r2, [pc, #424]	@ (800327c <HAL_I2C_Init+0x274>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d802      	bhi.n	80030dc <HAL_I2C_Init+0xd4>
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	3301      	adds	r3, #1
 80030da:	e009      	b.n	80030f0 <HAL_I2C_Init+0xe8>
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80030e2:	fb02 f303 	mul.w	r3, r2, r3
 80030e6:	4a69      	ldr	r2, [pc, #420]	@ (800328c <HAL_I2C_Init+0x284>)
 80030e8:	fba2 2303 	umull	r2, r3, r2, r3
 80030ec:	099b      	lsrs	r3, r3, #6
 80030ee:	3301      	adds	r3, #1
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	6812      	ldr	r2, [r2, #0]
 80030f4:	430b      	orrs	r3, r1
 80030f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	69db      	ldr	r3, [r3, #28]
 80030fe:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003102:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	495c      	ldr	r1, [pc, #368]	@ (800327c <HAL_I2C_Init+0x274>)
 800310c:	428b      	cmp	r3, r1
 800310e:	d819      	bhi.n	8003144 <HAL_I2C_Init+0x13c>
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	1e59      	subs	r1, r3, #1
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	005b      	lsls	r3, r3, #1
 800311a:	fbb1 f3f3 	udiv	r3, r1, r3
 800311e:	1c59      	adds	r1, r3, #1
 8003120:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003124:	400b      	ands	r3, r1
 8003126:	2b00      	cmp	r3, #0
 8003128:	d00a      	beq.n	8003140 <HAL_I2C_Init+0x138>
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	1e59      	subs	r1, r3, #1
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	005b      	lsls	r3, r3, #1
 8003134:	fbb1 f3f3 	udiv	r3, r1, r3
 8003138:	3301      	adds	r3, #1
 800313a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800313e:	e051      	b.n	80031e4 <HAL_I2C_Init+0x1dc>
 8003140:	2304      	movs	r3, #4
 8003142:	e04f      	b.n	80031e4 <HAL_I2C_Init+0x1dc>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d111      	bne.n	8003170 <HAL_I2C_Init+0x168>
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	1e58      	subs	r0, r3, #1
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6859      	ldr	r1, [r3, #4]
 8003154:	460b      	mov	r3, r1
 8003156:	005b      	lsls	r3, r3, #1
 8003158:	440b      	add	r3, r1
 800315a:	fbb0 f3f3 	udiv	r3, r0, r3
 800315e:	3301      	adds	r3, #1
 8003160:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003164:	2b00      	cmp	r3, #0
 8003166:	bf0c      	ite	eq
 8003168:	2301      	moveq	r3, #1
 800316a:	2300      	movne	r3, #0
 800316c:	b2db      	uxtb	r3, r3
 800316e:	e012      	b.n	8003196 <HAL_I2C_Init+0x18e>
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	1e58      	subs	r0, r3, #1
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6859      	ldr	r1, [r3, #4]
 8003178:	460b      	mov	r3, r1
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	440b      	add	r3, r1
 800317e:	0099      	lsls	r1, r3, #2
 8003180:	440b      	add	r3, r1
 8003182:	fbb0 f3f3 	udiv	r3, r0, r3
 8003186:	3301      	adds	r3, #1
 8003188:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800318c:	2b00      	cmp	r3, #0
 800318e:	bf0c      	ite	eq
 8003190:	2301      	moveq	r3, #1
 8003192:	2300      	movne	r3, #0
 8003194:	b2db      	uxtb	r3, r3
 8003196:	2b00      	cmp	r3, #0
 8003198:	d001      	beq.n	800319e <HAL_I2C_Init+0x196>
 800319a:	2301      	movs	r3, #1
 800319c:	e022      	b.n	80031e4 <HAL_I2C_Init+0x1dc>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d10e      	bne.n	80031c4 <HAL_I2C_Init+0x1bc>
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	1e58      	subs	r0, r3, #1
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6859      	ldr	r1, [r3, #4]
 80031ae:	460b      	mov	r3, r1
 80031b0:	005b      	lsls	r3, r3, #1
 80031b2:	440b      	add	r3, r1
 80031b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80031b8:	3301      	adds	r3, #1
 80031ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80031c2:	e00f      	b.n	80031e4 <HAL_I2C_Init+0x1dc>
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	1e58      	subs	r0, r3, #1
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6859      	ldr	r1, [r3, #4]
 80031cc:	460b      	mov	r3, r1
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	440b      	add	r3, r1
 80031d2:	0099      	lsls	r1, r3, #2
 80031d4:	440b      	add	r3, r1
 80031d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80031da:	3301      	adds	r3, #1
 80031dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031e0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80031e4:	6879      	ldr	r1, [r7, #4]
 80031e6:	6809      	ldr	r1, [r1, #0]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	69da      	ldr	r2, [r3, #28]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a1b      	ldr	r3, [r3, #32]
 80031fe:	431a      	orrs	r2, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	430a      	orrs	r2, r1
 8003206:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003212:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	6911      	ldr	r1, [r2, #16]
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	68d2      	ldr	r2, [r2, #12]
 800321e:	4311      	orrs	r1, r2
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	6812      	ldr	r2, [r2, #0]
 8003224:	430b      	orrs	r3, r1
 8003226:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	695a      	ldr	r2, [r3, #20]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	699b      	ldr	r3, [r3, #24]
 800323a:	431a      	orrs	r2, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	430a      	orrs	r2, r1
 8003242:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f042 0201 	orr.w	r2, r2, #1
 8003252:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2220      	movs	r2, #32
 800325e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003270:	2300      	movs	r3, #0
}
 8003272:	4618      	mov	r0, r3
 8003274:	3710      	adds	r7, #16
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	000186a0 	.word	0x000186a0
 8003280:	001e847f 	.word	0x001e847f
 8003284:	003d08ff 	.word	0x003d08ff
 8003288:	431bde83 	.word	0x431bde83
 800328c:	10624dd3 	.word	0x10624dd3

08003290 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b086      	sub	sp, #24
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d101      	bne.n	80032a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e267      	b.n	8003772 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0301 	and.w	r3, r3, #1
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d075      	beq.n	800339a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032ae:	4b88      	ldr	r3, [pc, #544]	@ (80034d0 <HAL_RCC_OscConfig+0x240>)
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	f003 030c 	and.w	r3, r3, #12
 80032b6:	2b04      	cmp	r3, #4
 80032b8:	d00c      	beq.n	80032d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032ba:	4b85      	ldr	r3, [pc, #532]	@ (80034d0 <HAL_RCC_OscConfig+0x240>)
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032c2:	2b08      	cmp	r3, #8
 80032c4:	d112      	bne.n	80032ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032c6:	4b82      	ldr	r3, [pc, #520]	@ (80034d0 <HAL_RCC_OscConfig+0x240>)
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80032d2:	d10b      	bne.n	80032ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032d4:	4b7e      	ldr	r3, [pc, #504]	@ (80034d0 <HAL_RCC_OscConfig+0x240>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d05b      	beq.n	8003398 <HAL_RCC_OscConfig+0x108>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d157      	bne.n	8003398 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e242      	b.n	8003772 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032f4:	d106      	bne.n	8003304 <HAL_RCC_OscConfig+0x74>
 80032f6:	4b76      	ldr	r3, [pc, #472]	@ (80034d0 <HAL_RCC_OscConfig+0x240>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a75      	ldr	r2, [pc, #468]	@ (80034d0 <HAL_RCC_OscConfig+0x240>)
 80032fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003300:	6013      	str	r3, [r2, #0]
 8003302:	e01d      	b.n	8003340 <HAL_RCC_OscConfig+0xb0>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800330c:	d10c      	bne.n	8003328 <HAL_RCC_OscConfig+0x98>
 800330e:	4b70      	ldr	r3, [pc, #448]	@ (80034d0 <HAL_RCC_OscConfig+0x240>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a6f      	ldr	r2, [pc, #444]	@ (80034d0 <HAL_RCC_OscConfig+0x240>)
 8003314:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003318:	6013      	str	r3, [r2, #0]
 800331a:	4b6d      	ldr	r3, [pc, #436]	@ (80034d0 <HAL_RCC_OscConfig+0x240>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a6c      	ldr	r2, [pc, #432]	@ (80034d0 <HAL_RCC_OscConfig+0x240>)
 8003320:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003324:	6013      	str	r3, [r2, #0]
 8003326:	e00b      	b.n	8003340 <HAL_RCC_OscConfig+0xb0>
 8003328:	4b69      	ldr	r3, [pc, #420]	@ (80034d0 <HAL_RCC_OscConfig+0x240>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a68      	ldr	r2, [pc, #416]	@ (80034d0 <HAL_RCC_OscConfig+0x240>)
 800332e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003332:	6013      	str	r3, [r2, #0]
 8003334:	4b66      	ldr	r3, [pc, #408]	@ (80034d0 <HAL_RCC_OscConfig+0x240>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a65      	ldr	r2, [pc, #404]	@ (80034d0 <HAL_RCC_OscConfig+0x240>)
 800333a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800333e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d013      	beq.n	8003370 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003348:	f7fe ff5c 	bl	8002204 <HAL_GetTick>
 800334c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800334e:	e008      	b.n	8003362 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003350:	f7fe ff58 	bl	8002204 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	2b64      	cmp	r3, #100	@ 0x64
 800335c:	d901      	bls.n	8003362 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e207      	b.n	8003772 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003362:	4b5b      	ldr	r3, [pc, #364]	@ (80034d0 <HAL_RCC_OscConfig+0x240>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d0f0      	beq.n	8003350 <HAL_RCC_OscConfig+0xc0>
 800336e:	e014      	b.n	800339a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003370:	f7fe ff48 	bl	8002204 <HAL_GetTick>
 8003374:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003376:	e008      	b.n	800338a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003378:	f7fe ff44 	bl	8002204 <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	2b64      	cmp	r3, #100	@ 0x64
 8003384:	d901      	bls.n	800338a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e1f3      	b.n	8003772 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800338a:	4b51      	ldr	r3, [pc, #324]	@ (80034d0 <HAL_RCC_OscConfig+0x240>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d1f0      	bne.n	8003378 <HAL_RCC_OscConfig+0xe8>
 8003396:	e000      	b.n	800339a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003398:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0302 	and.w	r3, r3, #2
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d063      	beq.n	800346e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033a6:	4b4a      	ldr	r3, [pc, #296]	@ (80034d0 <HAL_RCC_OscConfig+0x240>)
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f003 030c 	and.w	r3, r3, #12
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d00b      	beq.n	80033ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033b2:	4b47      	ldr	r3, [pc, #284]	@ (80034d0 <HAL_RCC_OscConfig+0x240>)
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033ba:	2b08      	cmp	r3, #8
 80033bc:	d11c      	bne.n	80033f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033be:	4b44      	ldr	r3, [pc, #272]	@ (80034d0 <HAL_RCC_OscConfig+0x240>)
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d116      	bne.n	80033f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033ca:	4b41      	ldr	r3, [pc, #260]	@ (80034d0 <HAL_RCC_OscConfig+0x240>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0302 	and.w	r3, r3, #2
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d005      	beq.n	80033e2 <HAL_RCC_OscConfig+0x152>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d001      	beq.n	80033e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e1c7      	b.n	8003772 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033e2:	4b3b      	ldr	r3, [pc, #236]	@ (80034d0 <HAL_RCC_OscConfig+0x240>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	691b      	ldr	r3, [r3, #16]
 80033ee:	00db      	lsls	r3, r3, #3
 80033f0:	4937      	ldr	r1, [pc, #220]	@ (80034d0 <HAL_RCC_OscConfig+0x240>)
 80033f2:	4313      	orrs	r3, r2
 80033f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033f6:	e03a      	b.n	800346e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d020      	beq.n	8003442 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003400:	4b34      	ldr	r3, [pc, #208]	@ (80034d4 <HAL_RCC_OscConfig+0x244>)
 8003402:	2201      	movs	r2, #1
 8003404:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003406:	f7fe fefd 	bl	8002204 <HAL_GetTick>
 800340a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800340c:	e008      	b.n	8003420 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800340e:	f7fe fef9 	bl	8002204 <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	2b02      	cmp	r3, #2
 800341a:	d901      	bls.n	8003420 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e1a8      	b.n	8003772 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003420:	4b2b      	ldr	r3, [pc, #172]	@ (80034d0 <HAL_RCC_OscConfig+0x240>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0302 	and.w	r3, r3, #2
 8003428:	2b00      	cmp	r3, #0
 800342a:	d0f0      	beq.n	800340e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800342c:	4b28      	ldr	r3, [pc, #160]	@ (80034d0 <HAL_RCC_OscConfig+0x240>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	691b      	ldr	r3, [r3, #16]
 8003438:	00db      	lsls	r3, r3, #3
 800343a:	4925      	ldr	r1, [pc, #148]	@ (80034d0 <HAL_RCC_OscConfig+0x240>)
 800343c:	4313      	orrs	r3, r2
 800343e:	600b      	str	r3, [r1, #0]
 8003440:	e015      	b.n	800346e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003442:	4b24      	ldr	r3, [pc, #144]	@ (80034d4 <HAL_RCC_OscConfig+0x244>)
 8003444:	2200      	movs	r2, #0
 8003446:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003448:	f7fe fedc 	bl	8002204 <HAL_GetTick>
 800344c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800344e:	e008      	b.n	8003462 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003450:	f7fe fed8 	bl	8002204 <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	2b02      	cmp	r3, #2
 800345c:	d901      	bls.n	8003462 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e187      	b.n	8003772 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003462:	4b1b      	ldr	r3, [pc, #108]	@ (80034d0 <HAL_RCC_OscConfig+0x240>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0302 	and.w	r3, r3, #2
 800346a:	2b00      	cmp	r3, #0
 800346c:	d1f0      	bne.n	8003450 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0308 	and.w	r3, r3, #8
 8003476:	2b00      	cmp	r3, #0
 8003478:	d036      	beq.n	80034e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	695b      	ldr	r3, [r3, #20]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d016      	beq.n	80034b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003482:	4b15      	ldr	r3, [pc, #84]	@ (80034d8 <HAL_RCC_OscConfig+0x248>)
 8003484:	2201      	movs	r2, #1
 8003486:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003488:	f7fe febc 	bl	8002204 <HAL_GetTick>
 800348c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800348e:	e008      	b.n	80034a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003490:	f7fe feb8 	bl	8002204 <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	2b02      	cmp	r3, #2
 800349c:	d901      	bls.n	80034a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e167      	b.n	8003772 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034a2:	4b0b      	ldr	r3, [pc, #44]	@ (80034d0 <HAL_RCC_OscConfig+0x240>)
 80034a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034a6:	f003 0302 	and.w	r3, r3, #2
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d0f0      	beq.n	8003490 <HAL_RCC_OscConfig+0x200>
 80034ae:	e01b      	b.n	80034e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034b0:	4b09      	ldr	r3, [pc, #36]	@ (80034d8 <HAL_RCC_OscConfig+0x248>)
 80034b2:	2200      	movs	r2, #0
 80034b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034b6:	f7fe fea5 	bl	8002204 <HAL_GetTick>
 80034ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034bc:	e00e      	b.n	80034dc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034be:	f7fe fea1 	bl	8002204 <HAL_GetTick>
 80034c2:	4602      	mov	r2, r0
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d907      	bls.n	80034dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	e150      	b.n	8003772 <HAL_RCC_OscConfig+0x4e2>
 80034d0:	40023800 	.word	0x40023800
 80034d4:	42470000 	.word	0x42470000
 80034d8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034dc:	4b88      	ldr	r3, [pc, #544]	@ (8003700 <HAL_RCC_OscConfig+0x470>)
 80034de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034e0:	f003 0302 	and.w	r3, r3, #2
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d1ea      	bne.n	80034be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0304 	and.w	r3, r3, #4
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	f000 8097 	beq.w	8003624 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034f6:	2300      	movs	r3, #0
 80034f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034fa:	4b81      	ldr	r3, [pc, #516]	@ (8003700 <HAL_RCC_OscConfig+0x470>)
 80034fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d10f      	bne.n	8003526 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003506:	2300      	movs	r3, #0
 8003508:	60bb      	str	r3, [r7, #8]
 800350a:	4b7d      	ldr	r3, [pc, #500]	@ (8003700 <HAL_RCC_OscConfig+0x470>)
 800350c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800350e:	4a7c      	ldr	r2, [pc, #496]	@ (8003700 <HAL_RCC_OscConfig+0x470>)
 8003510:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003514:	6413      	str	r3, [r2, #64]	@ 0x40
 8003516:	4b7a      	ldr	r3, [pc, #488]	@ (8003700 <HAL_RCC_OscConfig+0x470>)
 8003518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800351a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800351e:	60bb      	str	r3, [r7, #8]
 8003520:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003522:	2301      	movs	r3, #1
 8003524:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003526:	4b77      	ldr	r3, [pc, #476]	@ (8003704 <HAL_RCC_OscConfig+0x474>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800352e:	2b00      	cmp	r3, #0
 8003530:	d118      	bne.n	8003564 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003532:	4b74      	ldr	r3, [pc, #464]	@ (8003704 <HAL_RCC_OscConfig+0x474>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a73      	ldr	r2, [pc, #460]	@ (8003704 <HAL_RCC_OscConfig+0x474>)
 8003538:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800353c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800353e:	f7fe fe61 	bl	8002204 <HAL_GetTick>
 8003542:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003544:	e008      	b.n	8003558 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003546:	f7fe fe5d 	bl	8002204 <HAL_GetTick>
 800354a:	4602      	mov	r2, r0
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	2b02      	cmp	r3, #2
 8003552:	d901      	bls.n	8003558 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003554:	2303      	movs	r3, #3
 8003556:	e10c      	b.n	8003772 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003558:	4b6a      	ldr	r3, [pc, #424]	@ (8003704 <HAL_RCC_OscConfig+0x474>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003560:	2b00      	cmp	r3, #0
 8003562:	d0f0      	beq.n	8003546 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	2b01      	cmp	r3, #1
 800356a:	d106      	bne.n	800357a <HAL_RCC_OscConfig+0x2ea>
 800356c:	4b64      	ldr	r3, [pc, #400]	@ (8003700 <HAL_RCC_OscConfig+0x470>)
 800356e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003570:	4a63      	ldr	r2, [pc, #396]	@ (8003700 <HAL_RCC_OscConfig+0x470>)
 8003572:	f043 0301 	orr.w	r3, r3, #1
 8003576:	6713      	str	r3, [r2, #112]	@ 0x70
 8003578:	e01c      	b.n	80035b4 <HAL_RCC_OscConfig+0x324>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	2b05      	cmp	r3, #5
 8003580:	d10c      	bne.n	800359c <HAL_RCC_OscConfig+0x30c>
 8003582:	4b5f      	ldr	r3, [pc, #380]	@ (8003700 <HAL_RCC_OscConfig+0x470>)
 8003584:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003586:	4a5e      	ldr	r2, [pc, #376]	@ (8003700 <HAL_RCC_OscConfig+0x470>)
 8003588:	f043 0304 	orr.w	r3, r3, #4
 800358c:	6713      	str	r3, [r2, #112]	@ 0x70
 800358e:	4b5c      	ldr	r3, [pc, #368]	@ (8003700 <HAL_RCC_OscConfig+0x470>)
 8003590:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003592:	4a5b      	ldr	r2, [pc, #364]	@ (8003700 <HAL_RCC_OscConfig+0x470>)
 8003594:	f043 0301 	orr.w	r3, r3, #1
 8003598:	6713      	str	r3, [r2, #112]	@ 0x70
 800359a:	e00b      	b.n	80035b4 <HAL_RCC_OscConfig+0x324>
 800359c:	4b58      	ldr	r3, [pc, #352]	@ (8003700 <HAL_RCC_OscConfig+0x470>)
 800359e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035a0:	4a57      	ldr	r2, [pc, #348]	@ (8003700 <HAL_RCC_OscConfig+0x470>)
 80035a2:	f023 0301 	bic.w	r3, r3, #1
 80035a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80035a8:	4b55      	ldr	r3, [pc, #340]	@ (8003700 <HAL_RCC_OscConfig+0x470>)
 80035aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035ac:	4a54      	ldr	r2, [pc, #336]	@ (8003700 <HAL_RCC_OscConfig+0x470>)
 80035ae:	f023 0304 	bic.w	r3, r3, #4
 80035b2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d015      	beq.n	80035e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035bc:	f7fe fe22 	bl	8002204 <HAL_GetTick>
 80035c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035c2:	e00a      	b.n	80035da <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035c4:	f7fe fe1e 	bl	8002204 <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d901      	bls.n	80035da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e0cb      	b.n	8003772 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035da:	4b49      	ldr	r3, [pc, #292]	@ (8003700 <HAL_RCC_OscConfig+0x470>)
 80035dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035de:	f003 0302 	and.w	r3, r3, #2
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d0ee      	beq.n	80035c4 <HAL_RCC_OscConfig+0x334>
 80035e6:	e014      	b.n	8003612 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035e8:	f7fe fe0c 	bl	8002204 <HAL_GetTick>
 80035ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035ee:	e00a      	b.n	8003606 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035f0:	f7fe fe08 	bl	8002204 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035fe:	4293      	cmp	r3, r2
 8003600:	d901      	bls.n	8003606 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e0b5      	b.n	8003772 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003606:	4b3e      	ldr	r3, [pc, #248]	@ (8003700 <HAL_RCC_OscConfig+0x470>)
 8003608:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800360a:	f003 0302 	and.w	r3, r3, #2
 800360e:	2b00      	cmp	r3, #0
 8003610:	d1ee      	bne.n	80035f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003612:	7dfb      	ldrb	r3, [r7, #23]
 8003614:	2b01      	cmp	r3, #1
 8003616:	d105      	bne.n	8003624 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003618:	4b39      	ldr	r3, [pc, #228]	@ (8003700 <HAL_RCC_OscConfig+0x470>)
 800361a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800361c:	4a38      	ldr	r2, [pc, #224]	@ (8003700 <HAL_RCC_OscConfig+0x470>)
 800361e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003622:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	699b      	ldr	r3, [r3, #24]
 8003628:	2b00      	cmp	r3, #0
 800362a:	f000 80a1 	beq.w	8003770 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800362e:	4b34      	ldr	r3, [pc, #208]	@ (8003700 <HAL_RCC_OscConfig+0x470>)
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	f003 030c 	and.w	r3, r3, #12
 8003636:	2b08      	cmp	r3, #8
 8003638:	d05c      	beq.n	80036f4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	699b      	ldr	r3, [r3, #24]
 800363e:	2b02      	cmp	r3, #2
 8003640:	d141      	bne.n	80036c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003642:	4b31      	ldr	r3, [pc, #196]	@ (8003708 <HAL_RCC_OscConfig+0x478>)
 8003644:	2200      	movs	r2, #0
 8003646:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003648:	f7fe fddc 	bl	8002204 <HAL_GetTick>
 800364c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800364e:	e008      	b.n	8003662 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003650:	f7fe fdd8 	bl	8002204 <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	2b02      	cmp	r3, #2
 800365c:	d901      	bls.n	8003662 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e087      	b.n	8003772 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003662:	4b27      	ldr	r3, [pc, #156]	@ (8003700 <HAL_RCC_OscConfig+0x470>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d1f0      	bne.n	8003650 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	69da      	ldr	r2, [r3, #28]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a1b      	ldr	r3, [r3, #32]
 8003676:	431a      	orrs	r2, r3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800367c:	019b      	lsls	r3, r3, #6
 800367e:	431a      	orrs	r2, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003684:	085b      	lsrs	r3, r3, #1
 8003686:	3b01      	subs	r3, #1
 8003688:	041b      	lsls	r3, r3, #16
 800368a:	431a      	orrs	r2, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003690:	061b      	lsls	r3, r3, #24
 8003692:	491b      	ldr	r1, [pc, #108]	@ (8003700 <HAL_RCC_OscConfig+0x470>)
 8003694:	4313      	orrs	r3, r2
 8003696:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003698:	4b1b      	ldr	r3, [pc, #108]	@ (8003708 <HAL_RCC_OscConfig+0x478>)
 800369a:	2201      	movs	r2, #1
 800369c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800369e:	f7fe fdb1 	bl	8002204 <HAL_GetTick>
 80036a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036a4:	e008      	b.n	80036b8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036a6:	f7fe fdad 	bl	8002204 <HAL_GetTick>
 80036aa:	4602      	mov	r2, r0
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d901      	bls.n	80036b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	e05c      	b.n	8003772 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036b8:	4b11      	ldr	r3, [pc, #68]	@ (8003700 <HAL_RCC_OscConfig+0x470>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d0f0      	beq.n	80036a6 <HAL_RCC_OscConfig+0x416>
 80036c4:	e054      	b.n	8003770 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036c6:	4b10      	ldr	r3, [pc, #64]	@ (8003708 <HAL_RCC_OscConfig+0x478>)
 80036c8:	2200      	movs	r2, #0
 80036ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036cc:	f7fe fd9a 	bl	8002204 <HAL_GetTick>
 80036d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036d2:	e008      	b.n	80036e6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036d4:	f7fe fd96 	bl	8002204 <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d901      	bls.n	80036e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e045      	b.n	8003772 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036e6:	4b06      	ldr	r3, [pc, #24]	@ (8003700 <HAL_RCC_OscConfig+0x470>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d1f0      	bne.n	80036d4 <HAL_RCC_OscConfig+0x444>
 80036f2:	e03d      	b.n	8003770 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	699b      	ldr	r3, [r3, #24]
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d107      	bne.n	800370c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e038      	b.n	8003772 <HAL_RCC_OscConfig+0x4e2>
 8003700:	40023800 	.word	0x40023800
 8003704:	40007000 	.word	0x40007000
 8003708:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800370c:	4b1b      	ldr	r3, [pc, #108]	@ (800377c <HAL_RCC_OscConfig+0x4ec>)
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	699b      	ldr	r3, [r3, #24]
 8003716:	2b01      	cmp	r3, #1
 8003718:	d028      	beq.n	800376c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003724:	429a      	cmp	r2, r3
 8003726:	d121      	bne.n	800376c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003732:	429a      	cmp	r2, r3
 8003734:	d11a      	bne.n	800376c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003736:	68fa      	ldr	r2, [r7, #12]
 8003738:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800373c:	4013      	ands	r3, r2
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003742:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003744:	4293      	cmp	r3, r2
 8003746:	d111      	bne.n	800376c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003752:	085b      	lsrs	r3, r3, #1
 8003754:	3b01      	subs	r3, #1
 8003756:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003758:	429a      	cmp	r2, r3
 800375a:	d107      	bne.n	800376c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003766:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003768:	429a      	cmp	r2, r3
 800376a:	d001      	beq.n	8003770 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e000      	b.n	8003772 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003770:	2300      	movs	r3, #0
}
 8003772:	4618      	mov	r0, r3
 8003774:	3718      	adds	r7, #24
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	40023800 	.word	0x40023800

08003780 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d101      	bne.n	8003794 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e0cc      	b.n	800392e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003794:	4b68      	ldr	r3, [pc, #416]	@ (8003938 <HAL_RCC_ClockConfig+0x1b8>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0307 	and.w	r3, r3, #7
 800379c:	683a      	ldr	r2, [r7, #0]
 800379e:	429a      	cmp	r2, r3
 80037a0:	d90c      	bls.n	80037bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037a2:	4b65      	ldr	r3, [pc, #404]	@ (8003938 <HAL_RCC_ClockConfig+0x1b8>)
 80037a4:	683a      	ldr	r2, [r7, #0]
 80037a6:	b2d2      	uxtb	r2, r2
 80037a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037aa:	4b63      	ldr	r3, [pc, #396]	@ (8003938 <HAL_RCC_ClockConfig+0x1b8>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0307 	and.w	r3, r3, #7
 80037b2:	683a      	ldr	r2, [r7, #0]
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d001      	beq.n	80037bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e0b8      	b.n	800392e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 0302 	and.w	r3, r3, #2
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d020      	beq.n	800380a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0304 	and.w	r3, r3, #4
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d005      	beq.n	80037e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037d4:	4b59      	ldr	r3, [pc, #356]	@ (800393c <HAL_RCC_ClockConfig+0x1bc>)
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	4a58      	ldr	r2, [pc, #352]	@ (800393c <HAL_RCC_ClockConfig+0x1bc>)
 80037da:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80037de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0308 	and.w	r3, r3, #8
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d005      	beq.n	80037f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037ec:	4b53      	ldr	r3, [pc, #332]	@ (800393c <HAL_RCC_ClockConfig+0x1bc>)
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	4a52      	ldr	r2, [pc, #328]	@ (800393c <HAL_RCC_ClockConfig+0x1bc>)
 80037f2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80037f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037f8:	4b50      	ldr	r3, [pc, #320]	@ (800393c <HAL_RCC_ClockConfig+0x1bc>)
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	494d      	ldr	r1, [pc, #308]	@ (800393c <HAL_RCC_ClockConfig+0x1bc>)
 8003806:	4313      	orrs	r3, r2
 8003808:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0301 	and.w	r3, r3, #1
 8003812:	2b00      	cmp	r3, #0
 8003814:	d044      	beq.n	80038a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	2b01      	cmp	r3, #1
 800381c:	d107      	bne.n	800382e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800381e:	4b47      	ldr	r3, [pc, #284]	@ (800393c <HAL_RCC_ClockConfig+0x1bc>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d119      	bne.n	800385e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e07f      	b.n	800392e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	2b02      	cmp	r3, #2
 8003834:	d003      	beq.n	800383e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800383a:	2b03      	cmp	r3, #3
 800383c:	d107      	bne.n	800384e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800383e:	4b3f      	ldr	r3, [pc, #252]	@ (800393c <HAL_RCC_ClockConfig+0x1bc>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d109      	bne.n	800385e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e06f      	b.n	800392e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800384e:	4b3b      	ldr	r3, [pc, #236]	@ (800393c <HAL_RCC_ClockConfig+0x1bc>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0302 	and.w	r3, r3, #2
 8003856:	2b00      	cmp	r3, #0
 8003858:	d101      	bne.n	800385e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e067      	b.n	800392e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800385e:	4b37      	ldr	r3, [pc, #220]	@ (800393c <HAL_RCC_ClockConfig+0x1bc>)
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f023 0203 	bic.w	r2, r3, #3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	4934      	ldr	r1, [pc, #208]	@ (800393c <HAL_RCC_ClockConfig+0x1bc>)
 800386c:	4313      	orrs	r3, r2
 800386e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003870:	f7fe fcc8 	bl	8002204 <HAL_GetTick>
 8003874:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003876:	e00a      	b.n	800388e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003878:	f7fe fcc4 	bl	8002204 <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003886:	4293      	cmp	r3, r2
 8003888:	d901      	bls.n	800388e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e04f      	b.n	800392e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800388e:	4b2b      	ldr	r3, [pc, #172]	@ (800393c <HAL_RCC_ClockConfig+0x1bc>)
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	f003 020c 	and.w	r2, r3, #12
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	429a      	cmp	r2, r3
 800389e:	d1eb      	bne.n	8003878 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038a0:	4b25      	ldr	r3, [pc, #148]	@ (8003938 <HAL_RCC_ClockConfig+0x1b8>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0307 	and.w	r3, r3, #7
 80038a8:	683a      	ldr	r2, [r7, #0]
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d20c      	bcs.n	80038c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ae:	4b22      	ldr	r3, [pc, #136]	@ (8003938 <HAL_RCC_ClockConfig+0x1b8>)
 80038b0:	683a      	ldr	r2, [r7, #0]
 80038b2:	b2d2      	uxtb	r2, r2
 80038b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038b6:	4b20      	ldr	r3, [pc, #128]	@ (8003938 <HAL_RCC_ClockConfig+0x1b8>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 0307 	and.w	r3, r3, #7
 80038be:	683a      	ldr	r2, [r7, #0]
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d001      	beq.n	80038c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e032      	b.n	800392e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0304 	and.w	r3, r3, #4
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d008      	beq.n	80038e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038d4:	4b19      	ldr	r3, [pc, #100]	@ (800393c <HAL_RCC_ClockConfig+0x1bc>)
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	4916      	ldr	r1, [pc, #88]	@ (800393c <HAL_RCC_ClockConfig+0x1bc>)
 80038e2:	4313      	orrs	r3, r2
 80038e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0308 	and.w	r3, r3, #8
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d009      	beq.n	8003906 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038f2:	4b12      	ldr	r3, [pc, #72]	@ (800393c <HAL_RCC_ClockConfig+0x1bc>)
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	691b      	ldr	r3, [r3, #16]
 80038fe:	00db      	lsls	r3, r3, #3
 8003900:	490e      	ldr	r1, [pc, #56]	@ (800393c <HAL_RCC_ClockConfig+0x1bc>)
 8003902:	4313      	orrs	r3, r2
 8003904:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003906:	f000 f821 	bl	800394c <HAL_RCC_GetSysClockFreq>
 800390a:	4602      	mov	r2, r0
 800390c:	4b0b      	ldr	r3, [pc, #44]	@ (800393c <HAL_RCC_ClockConfig+0x1bc>)
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	091b      	lsrs	r3, r3, #4
 8003912:	f003 030f 	and.w	r3, r3, #15
 8003916:	490a      	ldr	r1, [pc, #40]	@ (8003940 <HAL_RCC_ClockConfig+0x1c0>)
 8003918:	5ccb      	ldrb	r3, [r1, r3]
 800391a:	fa22 f303 	lsr.w	r3, r2, r3
 800391e:	4a09      	ldr	r2, [pc, #36]	@ (8003944 <HAL_RCC_ClockConfig+0x1c4>)
 8003920:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003922:	4b09      	ldr	r3, [pc, #36]	@ (8003948 <HAL_RCC_ClockConfig+0x1c8>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4618      	mov	r0, r3
 8003928:	f7fe fc28 	bl	800217c <HAL_InitTick>

  return HAL_OK;
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	3710      	adds	r7, #16
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	40023c00 	.word	0x40023c00
 800393c:	40023800 	.word	0x40023800
 8003940:	08005fb8 	.word	0x08005fb8
 8003944:	20000000 	.word	0x20000000
 8003948:	20000004 	.word	0x20000004

0800394c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800394c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003950:	b094      	sub	sp, #80	@ 0x50
 8003952:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003954:	2300      	movs	r3, #0
 8003956:	647b      	str	r3, [r7, #68]	@ 0x44
 8003958:	2300      	movs	r3, #0
 800395a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800395c:	2300      	movs	r3, #0
 800395e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003960:	2300      	movs	r3, #0
 8003962:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003964:	4b79      	ldr	r3, [pc, #484]	@ (8003b4c <HAL_RCC_GetSysClockFreq+0x200>)
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	f003 030c 	and.w	r3, r3, #12
 800396c:	2b08      	cmp	r3, #8
 800396e:	d00d      	beq.n	800398c <HAL_RCC_GetSysClockFreq+0x40>
 8003970:	2b08      	cmp	r3, #8
 8003972:	f200 80e1 	bhi.w	8003b38 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003976:	2b00      	cmp	r3, #0
 8003978:	d002      	beq.n	8003980 <HAL_RCC_GetSysClockFreq+0x34>
 800397a:	2b04      	cmp	r3, #4
 800397c:	d003      	beq.n	8003986 <HAL_RCC_GetSysClockFreq+0x3a>
 800397e:	e0db      	b.n	8003b38 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003980:	4b73      	ldr	r3, [pc, #460]	@ (8003b50 <HAL_RCC_GetSysClockFreq+0x204>)
 8003982:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003984:	e0db      	b.n	8003b3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003986:	4b73      	ldr	r3, [pc, #460]	@ (8003b54 <HAL_RCC_GetSysClockFreq+0x208>)
 8003988:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800398a:	e0d8      	b.n	8003b3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800398c:	4b6f      	ldr	r3, [pc, #444]	@ (8003b4c <HAL_RCC_GetSysClockFreq+0x200>)
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003994:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003996:	4b6d      	ldr	r3, [pc, #436]	@ (8003b4c <HAL_RCC_GetSysClockFreq+0x200>)
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d063      	beq.n	8003a6a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039a2:	4b6a      	ldr	r3, [pc, #424]	@ (8003b4c <HAL_RCC_GetSysClockFreq+0x200>)
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	099b      	lsrs	r3, r3, #6
 80039a8:	2200      	movs	r2, #0
 80039aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80039ac:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80039ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80039b6:	2300      	movs	r3, #0
 80039b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80039ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80039be:	4622      	mov	r2, r4
 80039c0:	462b      	mov	r3, r5
 80039c2:	f04f 0000 	mov.w	r0, #0
 80039c6:	f04f 0100 	mov.w	r1, #0
 80039ca:	0159      	lsls	r1, r3, #5
 80039cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039d0:	0150      	lsls	r0, r2, #5
 80039d2:	4602      	mov	r2, r0
 80039d4:	460b      	mov	r3, r1
 80039d6:	4621      	mov	r1, r4
 80039d8:	1a51      	subs	r1, r2, r1
 80039da:	6139      	str	r1, [r7, #16]
 80039dc:	4629      	mov	r1, r5
 80039de:	eb63 0301 	sbc.w	r3, r3, r1
 80039e2:	617b      	str	r3, [r7, #20]
 80039e4:	f04f 0200 	mov.w	r2, #0
 80039e8:	f04f 0300 	mov.w	r3, #0
 80039ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80039f0:	4659      	mov	r1, fp
 80039f2:	018b      	lsls	r3, r1, #6
 80039f4:	4651      	mov	r1, sl
 80039f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80039fa:	4651      	mov	r1, sl
 80039fc:	018a      	lsls	r2, r1, #6
 80039fe:	4651      	mov	r1, sl
 8003a00:	ebb2 0801 	subs.w	r8, r2, r1
 8003a04:	4659      	mov	r1, fp
 8003a06:	eb63 0901 	sbc.w	r9, r3, r1
 8003a0a:	f04f 0200 	mov.w	r2, #0
 8003a0e:	f04f 0300 	mov.w	r3, #0
 8003a12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a1e:	4690      	mov	r8, r2
 8003a20:	4699      	mov	r9, r3
 8003a22:	4623      	mov	r3, r4
 8003a24:	eb18 0303 	adds.w	r3, r8, r3
 8003a28:	60bb      	str	r3, [r7, #8]
 8003a2a:	462b      	mov	r3, r5
 8003a2c:	eb49 0303 	adc.w	r3, r9, r3
 8003a30:	60fb      	str	r3, [r7, #12]
 8003a32:	f04f 0200 	mov.w	r2, #0
 8003a36:	f04f 0300 	mov.w	r3, #0
 8003a3a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003a3e:	4629      	mov	r1, r5
 8003a40:	024b      	lsls	r3, r1, #9
 8003a42:	4621      	mov	r1, r4
 8003a44:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003a48:	4621      	mov	r1, r4
 8003a4a:	024a      	lsls	r2, r1, #9
 8003a4c:	4610      	mov	r0, r2
 8003a4e:	4619      	mov	r1, r3
 8003a50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a52:	2200      	movs	r2, #0
 8003a54:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a56:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003a58:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003a5c:	f7fc fbb4 	bl	80001c8 <__aeabi_uldivmod>
 8003a60:	4602      	mov	r2, r0
 8003a62:	460b      	mov	r3, r1
 8003a64:	4613      	mov	r3, r2
 8003a66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a68:	e058      	b.n	8003b1c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a6a:	4b38      	ldr	r3, [pc, #224]	@ (8003b4c <HAL_RCC_GetSysClockFreq+0x200>)
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	099b      	lsrs	r3, r3, #6
 8003a70:	2200      	movs	r2, #0
 8003a72:	4618      	mov	r0, r3
 8003a74:	4611      	mov	r1, r2
 8003a76:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003a7a:	623b      	str	r3, [r7, #32]
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a80:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003a84:	4642      	mov	r2, r8
 8003a86:	464b      	mov	r3, r9
 8003a88:	f04f 0000 	mov.w	r0, #0
 8003a8c:	f04f 0100 	mov.w	r1, #0
 8003a90:	0159      	lsls	r1, r3, #5
 8003a92:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a96:	0150      	lsls	r0, r2, #5
 8003a98:	4602      	mov	r2, r0
 8003a9a:	460b      	mov	r3, r1
 8003a9c:	4641      	mov	r1, r8
 8003a9e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003aa2:	4649      	mov	r1, r9
 8003aa4:	eb63 0b01 	sbc.w	fp, r3, r1
 8003aa8:	f04f 0200 	mov.w	r2, #0
 8003aac:	f04f 0300 	mov.w	r3, #0
 8003ab0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003ab4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003ab8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003abc:	ebb2 040a 	subs.w	r4, r2, sl
 8003ac0:	eb63 050b 	sbc.w	r5, r3, fp
 8003ac4:	f04f 0200 	mov.w	r2, #0
 8003ac8:	f04f 0300 	mov.w	r3, #0
 8003acc:	00eb      	lsls	r3, r5, #3
 8003ace:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ad2:	00e2      	lsls	r2, r4, #3
 8003ad4:	4614      	mov	r4, r2
 8003ad6:	461d      	mov	r5, r3
 8003ad8:	4643      	mov	r3, r8
 8003ada:	18e3      	adds	r3, r4, r3
 8003adc:	603b      	str	r3, [r7, #0]
 8003ade:	464b      	mov	r3, r9
 8003ae0:	eb45 0303 	adc.w	r3, r5, r3
 8003ae4:	607b      	str	r3, [r7, #4]
 8003ae6:	f04f 0200 	mov.w	r2, #0
 8003aea:	f04f 0300 	mov.w	r3, #0
 8003aee:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003af2:	4629      	mov	r1, r5
 8003af4:	028b      	lsls	r3, r1, #10
 8003af6:	4621      	mov	r1, r4
 8003af8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003afc:	4621      	mov	r1, r4
 8003afe:	028a      	lsls	r2, r1, #10
 8003b00:	4610      	mov	r0, r2
 8003b02:	4619      	mov	r1, r3
 8003b04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b06:	2200      	movs	r2, #0
 8003b08:	61bb      	str	r3, [r7, #24]
 8003b0a:	61fa      	str	r2, [r7, #28]
 8003b0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b10:	f7fc fb5a 	bl	80001c8 <__aeabi_uldivmod>
 8003b14:	4602      	mov	r2, r0
 8003b16:	460b      	mov	r3, r1
 8003b18:	4613      	mov	r3, r2
 8003b1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b1c:	4b0b      	ldr	r3, [pc, #44]	@ (8003b4c <HAL_RCC_GetSysClockFreq+0x200>)
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	0c1b      	lsrs	r3, r3, #16
 8003b22:	f003 0303 	and.w	r3, r3, #3
 8003b26:	3301      	adds	r3, #1
 8003b28:	005b      	lsls	r3, r3, #1
 8003b2a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003b2c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003b2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b34:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003b36:	e002      	b.n	8003b3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b38:	4b05      	ldr	r3, [pc, #20]	@ (8003b50 <HAL_RCC_GetSysClockFreq+0x204>)
 8003b3a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003b3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3750      	adds	r7, #80	@ 0x50
 8003b44:	46bd      	mov	sp, r7
 8003b46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b4a:	bf00      	nop
 8003b4c:	40023800 	.word	0x40023800
 8003b50:	00f42400 	.word	0x00f42400
 8003b54:	007a1200 	.word	0x007a1200

08003b58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b5c:	4b03      	ldr	r3, [pc, #12]	@ (8003b6c <HAL_RCC_GetHCLKFreq+0x14>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr
 8003b6a:	bf00      	nop
 8003b6c:	20000000 	.word	0x20000000

08003b70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b74:	f7ff fff0 	bl	8003b58 <HAL_RCC_GetHCLKFreq>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	4b05      	ldr	r3, [pc, #20]	@ (8003b90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	0a9b      	lsrs	r3, r3, #10
 8003b80:	f003 0307 	and.w	r3, r3, #7
 8003b84:	4903      	ldr	r1, [pc, #12]	@ (8003b94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b86:	5ccb      	ldrb	r3, [r1, r3]
 8003b88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	40023800 	.word	0x40023800
 8003b94:	08005fc8 	.word	0x08005fc8

08003b98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003b9c:	f7ff ffdc 	bl	8003b58 <HAL_RCC_GetHCLKFreq>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	4b05      	ldr	r3, [pc, #20]	@ (8003bb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	0b5b      	lsrs	r3, r3, #13
 8003ba8:	f003 0307 	and.w	r3, r3, #7
 8003bac:	4903      	ldr	r1, [pc, #12]	@ (8003bbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bae:	5ccb      	ldrb	r3, [r1, r3]
 8003bb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	40023800 	.word	0x40023800
 8003bbc:	08005fc8 	.word	0x08005fc8

08003bc0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b082      	sub	sp, #8
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d101      	bne.n	8003bd2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e07b      	b.n	8003cca <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d108      	bne.n	8003bec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003be2:	d009      	beq.n	8003bf8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	61da      	str	r2, [r3, #28]
 8003bea:	e005      	b.n	8003bf8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d106      	bne.n	8003c18 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f7fd f98e 	bl	8000f34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2202      	movs	r2, #2
 8003c1c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c2e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003c40:	431a      	orrs	r2, r3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c4a:	431a      	orrs	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	691b      	ldr	r3, [r3, #16]
 8003c50:	f003 0302 	and.w	r3, r3, #2
 8003c54:	431a      	orrs	r2, r3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	695b      	ldr	r3, [r3, #20]
 8003c5a:	f003 0301 	and.w	r3, r3, #1
 8003c5e:	431a      	orrs	r2, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	699b      	ldr	r3, [r3, #24]
 8003c64:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c68:	431a      	orrs	r2, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	69db      	ldr	r3, [r3, #28]
 8003c6e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003c72:	431a      	orrs	r2, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6a1b      	ldr	r3, [r3, #32]
 8003c78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c7c:	ea42 0103 	orr.w	r1, r2, r3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c84:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	430a      	orrs	r2, r1
 8003c8e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	699b      	ldr	r3, [r3, #24]
 8003c94:	0c1b      	lsrs	r3, r3, #16
 8003c96:	f003 0104 	and.w	r1, r3, #4
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c9e:	f003 0210 	and.w	r2, r3, #16
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	430a      	orrs	r2, r1
 8003ca8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	69da      	ldr	r2, [r3, #28]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003cb8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3708      	adds	r7, #8
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}

08003cd2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003cd2:	b580      	push	{r7, lr}
 8003cd4:	b082      	sub	sp, #8
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d101      	bne.n	8003ce4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e041      	b.n	8003d68 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d106      	bne.n	8003cfe <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	f7fd fe33 	bl	8001964 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2202      	movs	r2, #2
 8003d02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	3304      	adds	r3, #4
 8003d0e:	4619      	mov	r1, r3
 8003d10:	4610      	mov	r0, r2
 8003d12:	f000 fcef 	bl	80046f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2201      	movs	r2, #1
 8003d1a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2201      	movs	r2, #1
 8003d22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2201      	movs	r2, #1
 8003d2a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2201      	movs	r2, #1
 8003d32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2201      	movs	r2, #1
 8003d3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2201      	movs	r2, #1
 8003d42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2201      	movs	r2, #1
 8003d52:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2201      	movs	r2, #1
 8003d5a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2201      	movs	r2, #1
 8003d62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003d66:	2300      	movs	r3, #0
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3708      	adds	r7, #8
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b085      	sub	sp, #20
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d001      	beq.n	8003d88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e04e      	b.n	8003e26 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2202      	movs	r2, #2
 8003d8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	68da      	ldr	r2, [r3, #12]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f042 0201 	orr.w	r2, r2, #1
 8003d9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a23      	ldr	r2, [pc, #140]	@ (8003e34 <HAL_TIM_Base_Start_IT+0xc4>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d022      	beq.n	8003df0 <HAL_TIM_Base_Start_IT+0x80>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003db2:	d01d      	beq.n	8003df0 <HAL_TIM_Base_Start_IT+0x80>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a1f      	ldr	r2, [pc, #124]	@ (8003e38 <HAL_TIM_Base_Start_IT+0xc8>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d018      	beq.n	8003df0 <HAL_TIM_Base_Start_IT+0x80>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a1e      	ldr	r2, [pc, #120]	@ (8003e3c <HAL_TIM_Base_Start_IT+0xcc>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d013      	beq.n	8003df0 <HAL_TIM_Base_Start_IT+0x80>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a1c      	ldr	r2, [pc, #112]	@ (8003e40 <HAL_TIM_Base_Start_IT+0xd0>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d00e      	beq.n	8003df0 <HAL_TIM_Base_Start_IT+0x80>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a1b      	ldr	r2, [pc, #108]	@ (8003e44 <HAL_TIM_Base_Start_IT+0xd4>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d009      	beq.n	8003df0 <HAL_TIM_Base_Start_IT+0x80>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a19      	ldr	r2, [pc, #100]	@ (8003e48 <HAL_TIM_Base_Start_IT+0xd8>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d004      	beq.n	8003df0 <HAL_TIM_Base_Start_IT+0x80>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a18      	ldr	r2, [pc, #96]	@ (8003e4c <HAL_TIM_Base_Start_IT+0xdc>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d111      	bne.n	8003e14 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	f003 0307 	and.w	r3, r3, #7
 8003dfa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2b06      	cmp	r3, #6
 8003e00:	d010      	beq.n	8003e24 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f042 0201 	orr.w	r2, r2, #1
 8003e10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e12:	e007      	b.n	8003e24 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f042 0201 	orr.w	r2, r2, #1
 8003e22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3714      	adds	r7, #20
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr
 8003e32:	bf00      	nop
 8003e34:	40010000 	.word	0x40010000
 8003e38:	40000400 	.word	0x40000400
 8003e3c:	40000800 	.word	0x40000800
 8003e40:	40000c00 	.word	0x40000c00
 8003e44:	40010400 	.word	0x40010400
 8003e48:	40014000 	.word	0x40014000
 8003e4c:	40001800 	.word	0x40001800

08003e50 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b082      	sub	sp, #8
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d101      	bne.n	8003e62 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e041      	b.n	8003ee6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d106      	bne.n	8003e7c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f000 f839 	bl	8003eee <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2202      	movs	r2, #2
 8003e80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	3304      	adds	r3, #4
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	4610      	mov	r0, r2
 8003e90:	f000 fc30 	bl	80046f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003ee4:	2300      	movs	r3, #0
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3708      	adds	r7, #8
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}

08003eee <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003eee:	b480      	push	{r7}
 8003ef0:	b083      	sub	sp, #12
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003ef6:	bf00      	nop
 8003ef8:	370c      	adds	r7, #12
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr

08003f02 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003f02:	b580      	push	{r7, lr}
 8003f04:	b086      	sub	sp, #24
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
 8003f0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d101      	bne.n	8003f16 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e097      	b.n	8004046 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d106      	bne.n	8003f30 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f7fd fda2 	bl	8001a74 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2202      	movs	r2, #2
 8003f34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	6812      	ldr	r2, [r2, #0]
 8003f42:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003f46:	f023 0307 	bic.w	r3, r3, #7
 8003f4a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	3304      	adds	r3, #4
 8003f54:	4619      	mov	r1, r3
 8003f56:	4610      	mov	r0, r2
 8003f58:	f000 fbcc 	bl	80046f4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	699b      	ldr	r3, [r3, #24]
 8003f6a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	6a1b      	ldr	r3, [r3, #32]
 8003f72:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	697a      	ldr	r2, [r7, #20]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f84:	f023 0303 	bic.w	r3, r3, #3
 8003f88:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	689a      	ldr	r2, [r3, #8]
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	699b      	ldr	r3, [r3, #24]
 8003f92:	021b      	lsls	r3, r3, #8
 8003f94:	4313      	orrs	r3, r2
 8003f96:	693a      	ldr	r2, [r7, #16]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003fa2:	f023 030c 	bic.w	r3, r3, #12
 8003fa6:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003fae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003fb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	68da      	ldr	r2, [r3, #12]
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	69db      	ldr	r3, [r3, #28]
 8003fbc:	021b      	lsls	r3, r3, #8
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	693a      	ldr	r2, [r7, #16]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	011a      	lsls	r2, r3, #4
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	6a1b      	ldr	r3, [r3, #32]
 8003fd0:	031b      	lsls	r3, r3, #12
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	693a      	ldr	r2, [r7, #16]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003fe0:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8003fe8:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	685a      	ldr	r2, [r3, #4]
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	695b      	ldr	r3, [r3, #20]
 8003ff2:	011b      	lsls	r3, r3, #4
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	68fa      	ldr	r2, [r7, #12]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	697a      	ldr	r2, [r7, #20]
 8004002:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	693a      	ldr	r2, [r7, #16]
 800400a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	68fa      	ldr	r2, [r7, #12]
 8004012:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004044:	2300      	movs	r3, #0
}
 8004046:	4618      	mov	r0, r3
 8004048:	3718      	adds	r7, #24
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}

0800404e <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800404e:	b580      	push	{r7, lr}
 8004050:	b084      	sub	sp, #16
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]
 8004056:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800405e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004066:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800406e:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004076:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d110      	bne.n	80040a0 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800407e:	7bfb      	ldrb	r3, [r7, #15]
 8004080:	2b01      	cmp	r3, #1
 8004082:	d102      	bne.n	800408a <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004084:	7b7b      	ldrb	r3, [r7, #13]
 8004086:	2b01      	cmp	r3, #1
 8004088:	d001      	beq.n	800408e <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e069      	b.n	8004162 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2202      	movs	r2, #2
 8004092:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2202      	movs	r2, #2
 800409a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800409e:	e031      	b.n	8004104 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	2b04      	cmp	r3, #4
 80040a4:	d110      	bne.n	80040c8 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80040a6:	7bbb      	ldrb	r3, [r7, #14]
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d102      	bne.n	80040b2 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80040ac:	7b3b      	ldrb	r3, [r7, #12]
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d001      	beq.n	80040b6 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e055      	b.n	8004162 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2202      	movs	r2, #2
 80040ba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2202      	movs	r2, #2
 80040c2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80040c6:	e01d      	b.n	8004104 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80040c8:	7bfb      	ldrb	r3, [r7, #15]
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d108      	bne.n	80040e0 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80040ce:	7bbb      	ldrb	r3, [r7, #14]
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d105      	bne.n	80040e0 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80040d4:	7b7b      	ldrb	r3, [r7, #13]
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d102      	bne.n	80040e0 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80040da:	7b3b      	ldrb	r3, [r7, #12]
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d001      	beq.n	80040e4 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	e03e      	b.n	8004162 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2202      	movs	r2, #2
 80040e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2202      	movs	r2, #2
 80040f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2202      	movs	r2, #2
 80040f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2202      	movs	r2, #2
 8004100:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d003      	beq.n	8004112 <HAL_TIM_Encoder_Start+0xc4>
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	2b04      	cmp	r3, #4
 800410e:	d008      	beq.n	8004122 <HAL_TIM_Encoder_Start+0xd4>
 8004110:	e00f      	b.n	8004132 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	2201      	movs	r2, #1
 8004118:	2100      	movs	r1, #0
 800411a:	4618      	mov	r0, r3
 800411c:	f000 fdd4 	bl	8004cc8 <TIM_CCxChannelCmd>
      break;
 8004120:	e016      	b.n	8004150 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	2201      	movs	r2, #1
 8004128:	2104      	movs	r1, #4
 800412a:	4618      	mov	r0, r3
 800412c:	f000 fdcc 	bl	8004cc8 <TIM_CCxChannelCmd>
      break;
 8004130:	e00e      	b.n	8004150 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	2201      	movs	r2, #1
 8004138:	2100      	movs	r1, #0
 800413a:	4618      	mov	r0, r3
 800413c:	f000 fdc4 	bl	8004cc8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	2201      	movs	r2, #1
 8004146:	2104      	movs	r1, #4
 8004148:	4618      	mov	r0, r3
 800414a:	f000 fdbd 	bl	8004cc8 <TIM_CCxChannelCmd>
      break;
 800414e:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f042 0201 	orr.w	r2, r2, #1
 800415e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004160:	2300      	movs	r3, #0
}
 8004162:	4618      	mov	r0, r3
 8004164:	3710      	adds	r7, #16
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}

0800416a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800416a:	b580      	push	{r7, lr}
 800416c:	b082      	sub	sp, #8
 800416e:	af00      	add	r7, sp, #0
 8004170:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	691b      	ldr	r3, [r3, #16]
 8004178:	f003 0302 	and.w	r3, r3, #2
 800417c:	2b02      	cmp	r3, #2
 800417e:	d122      	bne.n	80041c6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	f003 0302 	and.w	r3, r3, #2
 800418a:	2b02      	cmp	r3, #2
 800418c:	d11b      	bne.n	80041c6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f06f 0202 	mvn.w	r2, #2
 8004196:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	699b      	ldr	r3, [r3, #24]
 80041a4:	f003 0303 	and.w	r3, r3, #3
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d003      	beq.n	80041b4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f000 fa82 	bl	80046b6 <HAL_TIM_IC_CaptureCallback>
 80041b2:	e005      	b.n	80041c0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f000 fa74 	bl	80046a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f000 fa85 	bl	80046ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	691b      	ldr	r3, [r3, #16]
 80041cc:	f003 0304 	and.w	r3, r3, #4
 80041d0:	2b04      	cmp	r3, #4
 80041d2:	d122      	bne.n	800421a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	f003 0304 	and.w	r3, r3, #4
 80041de:	2b04      	cmp	r3, #4
 80041e0:	d11b      	bne.n	800421a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f06f 0204 	mvn.w	r2, #4
 80041ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2202      	movs	r2, #2
 80041f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	699b      	ldr	r3, [r3, #24]
 80041f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d003      	beq.n	8004208 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f000 fa58 	bl	80046b6 <HAL_TIM_IC_CaptureCallback>
 8004206:	e005      	b.n	8004214 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f000 fa4a 	bl	80046a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f000 fa5b 	bl	80046ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	691b      	ldr	r3, [r3, #16]
 8004220:	f003 0308 	and.w	r3, r3, #8
 8004224:	2b08      	cmp	r3, #8
 8004226:	d122      	bne.n	800426e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	f003 0308 	and.w	r3, r3, #8
 8004232:	2b08      	cmp	r3, #8
 8004234:	d11b      	bne.n	800426e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f06f 0208 	mvn.w	r2, #8
 800423e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2204      	movs	r2, #4
 8004244:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	69db      	ldr	r3, [r3, #28]
 800424c:	f003 0303 	and.w	r3, r3, #3
 8004250:	2b00      	cmp	r3, #0
 8004252:	d003      	beq.n	800425c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f000 fa2e 	bl	80046b6 <HAL_TIM_IC_CaptureCallback>
 800425a:	e005      	b.n	8004268 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f000 fa20 	bl	80046a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f000 fa31 	bl	80046ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	691b      	ldr	r3, [r3, #16]
 8004274:	f003 0310 	and.w	r3, r3, #16
 8004278:	2b10      	cmp	r3, #16
 800427a:	d122      	bne.n	80042c2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	f003 0310 	and.w	r3, r3, #16
 8004286:	2b10      	cmp	r3, #16
 8004288:	d11b      	bne.n	80042c2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f06f 0210 	mvn.w	r2, #16
 8004292:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2208      	movs	r2, #8
 8004298:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	69db      	ldr	r3, [r3, #28]
 80042a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d003      	beq.n	80042b0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f000 fa04 	bl	80046b6 <HAL_TIM_IC_CaptureCallback>
 80042ae:	e005      	b.n	80042bc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f000 f9f6 	bl	80046a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f000 fa07 	bl	80046ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	691b      	ldr	r3, [r3, #16]
 80042c8:	f003 0301 	and.w	r3, r3, #1
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d10e      	bne.n	80042ee <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	f003 0301 	and.w	r3, r3, #1
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d107      	bne.n	80042ee <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f06f 0201 	mvn.w	r2, #1
 80042e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f000 f9d0 	bl	800468e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	691b      	ldr	r3, [r3, #16]
 80042f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042f8:	2b80      	cmp	r3, #128	@ 0x80
 80042fa:	d10e      	bne.n	800431a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004306:	2b80      	cmp	r3, #128	@ 0x80
 8004308:	d107      	bne.n	800431a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004312:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f000 fdd5 	bl	8004ec4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	691b      	ldr	r3, [r3, #16]
 8004320:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004324:	2b40      	cmp	r3, #64	@ 0x40
 8004326:	d10e      	bne.n	8004346 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004332:	2b40      	cmp	r3, #64	@ 0x40
 8004334:	d107      	bne.n	8004346 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800433e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	f000 f9cc 	bl	80046de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	691b      	ldr	r3, [r3, #16]
 800434c:	f003 0320 	and.w	r3, r3, #32
 8004350:	2b20      	cmp	r3, #32
 8004352:	d10e      	bne.n	8004372 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	f003 0320 	and.w	r3, r3, #32
 800435e:	2b20      	cmp	r3, #32
 8004360:	d107      	bne.n	8004372 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f06f 0220 	mvn.w	r2, #32
 800436a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f000 fd9f 	bl	8004eb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004372:	bf00      	nop
 8004374:	3708      	adds	r7, #8
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
	...

0800437c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b086      	sub	sp, #24
 8004380:	af00      	add	r7, sp, #0
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	60b9      	str	r1, [r7, #8]
 8004386:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004388:	2300      	movs	r3, #0
 800438a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004392:	2b01      	cmp	r3, #1
 8004394:	d101      	bne.n	800439a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004396:	2302      	movs	r3, #2
 8004398:	e0ae      	b.n	80044f8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2201      	movs	r2, #1
 800439e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2b0c      	cmp	r3, #12
 80043a6:	f200 809f 	bhi.w	80044e8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80043aa:	a201      	add	r2, pc, #4	@ (adr r2, 80043b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80043ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043b0:	080043e5 	.word	0x080043e5
 80043b4:	080044e9 	.word	0x080044e9
 80043b8:	080044e9 	.word	0x080044e9
 80043bc:	080044e9 	.word	0x080044e9
 80043c0:	08004425 	.word	0x08004425
 80043c4:	080044e9 	.word	0x080044e9
 80043c8:	080044e9 	.word	0x080044e9
 80043cc:	080044e9 	.word	0x080044e9
 80043d0:	08004467 	.word	0x08004467
 80043d4:	080044e9 	.word	0x080044e9
 80043d8:	080044e9 	.word	0x080044e9
 80043dc:	080044e9 	.word	0x080044e9
 80043e0:	080044a7 	.word	0x080044a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	68b9      	ldr	r1, [r7, #8]
 80043ea:	4618      	mov	r0, r3
 80043ec:	f000 fa22 	bl	8004834 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	699a      	ldr	r2, [r3, #24]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f042 0208 	orr.w	r2, r2, #8
 80043fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	699a      	ldr	r2, [r3, #24]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f022 0204 	bic.w	r2, r2, #4
 800440e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	6999      	ldr	r1, [r3, #24]
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	691a      	ldr	r2, [r3, #16]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	430a      	orrs	r2, r1
 8004420:	619a      	str	r2, [r3, #24]
      break;
 8004422:	e064      	b.n	80044ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	68b9      	ldr	r1, [r7, #8]
 800442a:	4618      	mov	r0, r3
 800442c:	f000 fa72 	bl	8004914 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	699a      	ldr	r2, [r3, #24]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800443e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	699a      	ldr	r2, [r3, #24]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800444e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	6999      	ldr	r1, [r3, #24]
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	691b      	ldr	r3, [r3, #16]
 800445a:	021a      	lsls	r2, r3, #8
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	430a      	orrs	r2, r1
 8004462:	619a      	str	r2, [r3, #24]
      break;
 8004464:	e043      	b.n	80044ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	68b9      	ldr	r1, [r7, #8]
 800446c:	4618      	mov	r0, r3
 800446e:	f000 fac7 	bl	8004a00 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	69da      	ldr	r2, [r3, #28]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f042 0208 	orr.w	r2, r2, #8
 8004480:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	69da      	ldr	r2, [r3, #28]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f022 0204 	bic.w	r2, r2, #4
 8004490:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	69d9      	ldr	r1, [r3, #28]
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	691a      	ldr	r2, [r3, #16]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	430a      	orrs	r2, r1
 80044a2:	61da      	str	r2, [r3, #28]
      break;
 80044a4:	e023      	b.n	80044ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	68b9      	ldr	r1, [r7, #8]
 80044ac:	4618      	mov	r0, r3
 80044ae:	f000 fb1b 	bl	8004ae8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	69da      	ldr	r2, [r3, #28]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80044c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	69da      	ldr	r2, [r3, #28]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	69d9      	ldr	r1, [r3, #28]
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	691b      	ldr	r3, [r3, #16]
 80044dc:	021a      	lsls	r2, r3, #8
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	430a      	orrs	r2, r1
 80044e4:	61da      	str	r2, [r3, #28]
      break;
 80044e6:	e002      	b.n	80044ee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	75fb      	strb	r3, [r7, #23]
      break;
 80044ec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2200      	movs	r2, #0
 80044f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80044f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3718      	adds	r7, #24
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}

08004500 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b084      	sub	sp, #16
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800450a:	2300      	movs	r3, #0
 800450c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004514:	2b01      	cmp	r3, #1
 8004516:	d101      	bne.n	800451c <HAL_TIM_ConfigClockSource+0x1c>
 8004518:	2302      	movs	r3, #2
 800451a:	e0b4      	b.n	8004686 <HAL_TIM_ConfigClockSource+0x186>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2202      	movs	r2, #2
 8004528:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800453a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004542:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	68ba      	ldr	r2, [r7, #8]
 800454a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004554:	d03e      	beq.n	80045d4 <HAL_TIM_ConfigClockSource+0xd4>
 8004556:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800455a:	f200 8087 	bhi.w	800466c <HAL_TIM_ConfigClockSource+0x16c>
 800455e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004562:	f000 8086 	beq.w	8004672 <HAL_TIM_ConfigClockSource+0x172>
 8004566:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800456a:	d87f      	bhi.n	800466c <HAL_TIM_ConfigClockSource+0x16c>
 800456c:	2b70      	cmp	r3, #112	@ 0x70
 800456e:	d01a      	beq.n	80045a6 <HAL_TIM_ConfigClockSource+0xa6>
 8004570:	2b70      	cmp	r3, #112	@ 0x70
 8004572:	d87b      	bhi.n	800466c <HAL_TIM_ConfigClockSource+0x16c>
 8004574:	2b60      	cmp	r3, #96	@ 0x60
 8004576:	d050      	beq.n	800461a <HAL_TIM_ConfigClockSource+0x11a>
 8004578:	2b60      	cmp	r3, #96	@ 0x60
 800457a:	d877      	bhi.n	800466c <HAL_TIM_ConfigClockSource+0x16c>
 800457c:	2b50      	cmp	r3, #80	@ 0x50
 800457e:	d03c      	beq.n	80045fa <HAL_TIM_ConfigClockSource+0xfa>
 8004580:	2b50      	cmp	r3, #80	@ 0x50
 8004582:	d873      	bhi.n	800466c <HAL_TIM_ConfigClockSource+0x16c>
 8004584:	2b40      	cmp	r3, #64	@ 0x40
 8004586:	d058      	beq.n	800463a <HAL_TIM_ConfigClockSource+0x13a>
 8004588:	2b40      	cmp	r3, #64	@ 0x40
 800458a:	d86f      	bhi.n	800466c <HAL_TIM_ConfigClockSource+0x16c>
 800458c:	2b30      	cmp	r3, #48	@ 0x30
 800458e:	d064      	beq.n	800465a <HAL_TIM_ConfigClockSource+0x15a>
 8004590:	2b30      	cmp	r3, #48	@ 0x30
 8004592:	d86b      	bhi.n	800466c <HAL_TIM_ConfigClockSource+0x16c>
 8004594:	2b20      	cmp	r3, #32
 8004596:	d060      	beq.n	800465a <HAL_TIM_ConfigClockSource+0x15a>
 8004598:	2b20      	cmp	r3, #32
 800459a:	d867      	bhi.n	800466c <HAL_TIM_ConfigClockSource+0x16c>
 800459c:	2b00      	cmp	r3, #0
 800459e:	d05c      	beq.n	800465a <HAL_TIM_ConfigClockSource+0x15a>
 80045a0:	2b10      	cmp	r3, #16
 80045a2:	d05a      	beq.n	800465a <HAL_TIM_ConfigClockSource+0x15a>
 80045a4:	e062      	b.n	800466c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6818      	ldr	r0, [r3, #0]
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	6899      	ldr	r1, [r3, #8]
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	685a      	ldr	r2, [r3, #4]
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	f000 fb67 	bl	8004c88 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80045c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	68ba      	ldr	r2, [r7, #8]
 80045d0:	609a      	str	r2, [r3, #8]
      break;
 80045d2:	e04f      	b.n	8004674 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6818      	ldr	r0, [r3, #0]
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	6899      	ldr	r1, [r3, #8]
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	685a      	ldr	r2, [r3, #4]
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	f000 fb50 	bl	8004c88 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	689a      	ldr	r2, [r3, #8]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80045f6:	609a      	str	r2, [r3, #8]
      break;
 80045f8:	e03c      	b.n	8004674 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6818      	ldr	r0, [r3, #0]
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	6859      	ldr	r1, [r3, #4]
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	461a      	mov	r2, r3
 8004608:	f000 fac4 	bl	8004b94 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2150      	movs	r1, #80	@ 0x50
 8004612:	4618      	mov	r0, r3
 8004614:	f000 fb1d 	bl	8004c52 <TIM_ITRx_SetConfig>
      break;
 8004618:	e02c      	b.n	8004674 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6818      	ldr	r0, [r3, #0]
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	6859      	ldr	r1, [r3, #4]
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	461a      	mov	r2, r3
 8004628:	f000 fae3 	bl	8004bf2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2160      	movs	r1, #96	@ 0x60
 8004632:	4618      	mov	r0, r3
 8004634:	f000 fb0d 	bl	8004c52 <TIM_ITRx_SetConfig>
      break;
 8004638:	e01c      	b.n	8004674 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6818      	ldr	r0, [r3, #0]
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	6859      	ldr	r1, [r3, #4]
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	461a      	mov	r2, r3
 8004648:	f000 faa4 	bl	8004b94 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2140      	movs	r1, #64	@ 0x40
 8004652:	4618      	mov	r0, r3
 8004654:	f000 fafd 	bl	8004c52 <TIM_ITRx_SetConfig>
      break;
 8004658:	e00c      	b.n	8004674 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4619      	mov	r1, r3
 8004664:	4610      	mov	r0, r2
 8004666:	f000 faf4 	bl	8004c52 <TIM_ITRx_SetConfig>
      break;
 800466a:	e003      	b.n	8004674 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	73fb      	strb	r3, [r7, #15]
      break;
 8004670:	e000      	b.n	8004674 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004672:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004684:	7bfb      	ldrb	r3, [r7, #15]
}
 8004686:	4618      	mov	r0, r3
 8004688:	3710      	adds	r7, #16
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}

0800468e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800468e:	b480      	push	{r7}
 8004690:	b083      	sub	sp, #12
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004696:	bf00      	nop
 8004698:	370c      	adds	r7, #12
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr

080046a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046a2:	b480      	push	{r7}
 80046a4:	b083      	sub	sp, #12
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80046aa:	bf00      	nop
 80046ac:	370c      	adds	r7, #12
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr

080046b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80046b6:	b480      	push	{r7}
 80046b8:	b083      	sub	sp, #12
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80046be:	bf00      	nop
 80046c0:	370c      	adds	r7, #12
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr

080046ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80046ca:	b480      	push	{r7}
 80046cc:	b083      	sub	sp, #12
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80046d2:	bf00      	nop
 80046d4:	370c      	adds	r7, #12
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr

080046de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80046de:	b480      	push	{r7}
 80046e0:	b083      	sub	sp, #12
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80046e6:	bf00      	nop
 80046e8:	370c      	adds	r7, #12
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr
	...

080046f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b085      	sub	sp, #20
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4a40      	ldr	r2, [pc, #256]	@ (8004808 <TIM_Base_SetConfig+0x114>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d013      	beq.n	8004734 <TIM_Base_SetConfig+0x40>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004712:	d00f      	beq.n	8004734 <TIM_Base_SetConfig+0x40>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	4a3d      	ldr	r2, [pc, #244]	@ (800480c <TIM_Base_SetConfig+0x118>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d00b      	beq.n	8004734 <TIM_Base_SetConfig+0x40>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	4a3c      	ldr	r2, [pc, #240]	@ (8004810 <TIM_Base_SetConfig+0x11c>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d007      	beq.n	8004734 <TIM_Base_SetConfig+0x40>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	4a3b      	ldr	r2, [pc, #236]	@ (8004814 <TIM_Base_SetConfig+0x120>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d003      	beq.n	8004734 <TIM_Base_SetConfig+0x40>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	4a3a      	ldr	r2, [pc, #232]	@ (8004818 <TIM_Base_SetConfig+0x124>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d108      	bne.n	8004746 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800473a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	68fa      	ldr	r2, [r7, #12]
 8004742:	4313      	orrs	r3, r2
 8004744:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a2f      	ldr	r2, [pc, #188]	@ (8004808 <TIM_Base_SetConfig+0x114>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d02b      	beq.n	80047a6 <TIM_Base_SetConfig+0xb2>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004754:	d027      	beq.n	80047a6 <TIM_Base_SetConfig+0xb2>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a2c      	ldr	r2, [pc, #176]	@ (800480c <TIM_Base_SetConfig+0x118>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d023      	beq.n	80047a6 <TIM_Base_SetConfig+0xb2>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a2b      	ldr	r2, [pc, #172]	@ (8004810 <TIM_Base_SetConfig+0x11c>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d01f      	beq.n	80047a6 <TIM_Base_SetConfig+0xb2>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4a2a      	ldr	r2, [pc, #168]	@ (8004814 <TIM_Base_SetConfig+0x120>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d01b      	beq.n	80047a6 <TIM_Base_SetConfig+0xb2>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4a29      	ldr	r2, [pc, #164]	@ (8004818 <TIM_Base_SetConfig+0x124>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d017      	beq.n	80047a6 <TIM_Base_SetConfig+0xb2>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4a28      	ldr	r2, [pc, #160]	@ (800481c <TIM_Base_SetConfig+0x128>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d013      	beq.n	80047a6 <TIM_Base_SetConfig+0xb2>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4a27      	ldr	r2, [pc, #156]	@ (8004820 <TIM_Base_SetConfig+0x12c>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d00f      	beq.n	80047a6 <TIM_Base_SetConfig+0xb2>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	4a26      	ldr	r2, [pc, #152]	@ (8004824 <TIM_Base_SetConfig+0x130>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d00b      	beq.n	80047a6 <TIM_Base_SetConfig+0xb2>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4a25      	ldr	r2, [pc, #148]	@ (8004828 <TIM_Base_SetConfig+0x134>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d007      	beq.n	80047a6 <TIM_Base_SetConfig+0xb2>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4a24      	ldr	r2, [pc, #144]	@ (800482c <TIM_Base_SetConfig+0x138>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d003      	beq.n	80047a6 <TIM_Base_SetConfig+0xb2>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4a23      	ldr	r2, [pc, #140]	@ (8004830 <TIM_Base_SetConfig+0x13c>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d108      	bne.n	80047b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	68fa      	ldr	r2, [r7, #12]
 80047b4:	4313      	orrs	r3, r2
 80047b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	695b      	ldr	r3, [r3, #20]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	68fa      	ldr	r2, [r7, #12]
 80047ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	689a      	ldr	r2, [r3, #8]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	4a0a      	ldr	r2, [pc, #40]	@ (8004808 <TIM_Base_SetConfig+0x114>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d003      	beq.n	80047ec <TIM_Base_SetConfig+0xf8>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	4a0c      	ldr	r2, [pc, #48]	@ (8004818 <TIM_Base_SetConfig+0x124>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d103      	bne.n	80047f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	691a      	ldr	r2, [r3, #16]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	615a      	str	r2, [r3, #20]
}
 80047fa:	bf00      	nop
 80047fc:	3714      	adds	r7, #20
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr
 8004806:	bf00      	nop
 8004808:	40010000 	.word	0x40010000
 800480c:	40000400 	.word	0x40000400
 8004810:	40000800 	.word	0x40000800
 8004814:	40000c00 	.word	0x40000c00
 8004818:	40010400 	.word	0x40010400
 800481c:	40014000 	.word	0x40014000
 8004820:	40014400 	.word	0x40014400
 8004824:	40014800 	.word	0x40014800
 8004828:	40001800 	.word	0x40001800
 800482c:	40001c00 	.word	0x40001c00
 8004830:	40002000 	.word	0x40002000

08004834 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004834:	b480      	push	{r7}
 8004836:	b087      	sub	sp, #28
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a1b      	ldr	r3, [r3, #32]
 8004842:	f023 0201 	bic.w	r2, r3, #1
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6a1b      	ldr	r3, [r3, #32]
 800484e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	699b      	ldr	r3, [r3, #24]
 800485a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004862:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f023 0303 	bic.w	r3, r3, #3
 800486a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	68fa      	ldr	r2, [r7, #12]
 8004872:	4313      	orrs	r3, r2
 8004874:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	f023 0302 	bic.w	r3, r3, #2
 800487c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	697a      	ldr	r2, [r7, #20]
 8004884:	4313      	orrs	r3, r2
 8004886:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	4a20      	ldr	r2, [pc, #128]	@ (800490c <TIM_OC1_SetConfig+0xd8>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d003      	beq.n	8004898 <TIM_OC1_SetConfig+0x64>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	4a1f      	ldr	r2, [pc, #124]	@ (8004910 <TIM_OC1_SetConfig+0xdc>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d10c      	bne.n	80048b2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	f023 0308 	bic.w	r3, r3, #8
 800489e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	697a      	ldr	r2, [r7, #20]
 80048a6:	4313      	orrs	r3, r2
 80048a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	f023 0304 	bic.w	r3, r3, #4
 80048b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4a15      	ldr	r2, [pc, #84]	@ (800490c <TIM_OC1_SetConfig+0xd8>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d003      	beq.n	80048c2 <TIM_OC1_SetConfig+0x8e>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4a14      	ldr	r2, [pc, #80]	@ (8004910 <TIM_OC1_SetConfig+0xdc>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d111      	bne.n	80048e6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80048c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80048d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	695b      	ldr	r3, [r3, #20]
 80048d6:	693a      	ldr	r2, [r7, #16]
 80048d8:	4313      	orrs	r3, r2
 80048da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	699b      	ldr	r3, [r3, #24]
 80048e0:	693a      	ldr	r2, [r7, #16]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	693a      	ldr	r2, [r7, #16]
 80048ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	68fa      	ldr	r2, [r7, #12]
 80048f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	685a      	ldr	r2, [r3, #4]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	697a      	ldr	r2, [r7, #20]
 80048fe:	621a      	str	r2, [r3, #32]
}
 8004900:	bf00      	nop
 8004902:	371c      	adds	r7, #28
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr
 800490c:	40010000 	.word	0x40010000
 8004910:	40010400 	.word	0x40010400

08004914 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004914:	b480      	push	{r7}
 8004916:	b087      	sub	sp, #28
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6a1b      	ldr	r3, [r3, #32]
 8004922:	f023 0210 	bic.w	r2, r3, #16
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6a1b      	ldr	r3, [r3, #32]
 800492e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	699b      	ldr	r3, [r3, #24]
 800493a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004942:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800494a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	021b      	lsls	r3, r3, #8
 8004952:	68fa      	ldr	r2, [r7, #12]
 8004954:	4313      	orrs	r3, r2
 8004956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	f023 0320 	bic.w	r3, r3, #32
 800495e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	011b      	lsls	r3, r3, #4
 8004966:	697a      	ldr	r2, [r7, #20]
 8004968:	4313      	orrs	r3, r2
 800496a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	4a22      	ldr	r2, [pc, #136]	@ (80049f8 <TIM_OC2_SetConfig+0xe4>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d003      	beq.n	800497c <TIM_OC2_SetConfig+0x68>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	4a21      	ldr	r2, [pc, #132]	@ (80049fc <TIM_OC2_SetConfig+0xe8>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d10d      	bne.n	8004998 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004982:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	011b      	lsls	r3, r3, #4
 800498a:	697a      	ldr	r2, [r7, #20]
 800498c:	4313      	orrs	r3, r2
 800498e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004996:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	4a17      	ldr	r2, [pc, #92]	@ (80049f8 <TIM_OC2_SetConfig+0xe4>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d003      	beq.n	80049a8 <TIM_OC2_SetConfig+0x94>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	4a16      	ldr	r2, [pc, #88]	@ (80049fc <TIM_OC2_SetConfig+0xe8>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d113      	bne.n	80049d0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80049ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80049b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	695b      	ldr	r3, [r3, #20]
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	693a      	ldr	r2, [r7, #16]
 80049c0:	4313      	orrs	r3, r2
 80049c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	699b      	ldr	r3, [r3, #24]
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	693a      	ldr	r2, [r7, #16]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	693a      	ldr	r2, [r7, #16]
 80049d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	68fa      	ldr	r2, [r7, #12]
 80049da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	685a      	ldr	r2, [r3, #4]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	697a      	ldr	r2, [r7, #20]
 80049e8:	621a      	str	r2, [r3, #32]
}
 80049ea:	bf00      	nop
 80049ec:	371c      	adds	r7, #28
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr
 80049f6:	bf00      	nop
 80049f8:	40010000 	.word	0x40010000
 80049fc:	40010400 	.word	0x40010400

08004a00 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b087      	sub	sp, #28
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6a1b      	ldr	r3, [r3, #32]
 8004a0e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a1b      	ldr	r3, [r3, #32]
 8004a1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	69db      	ldr	r3, [r3, #28]
 8004a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f023 0303 	bic.w	r3, r3, #3
 8004a36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	68fa      	ldr	r2, [r7, #12]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004a48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	021b      	lsls	r3, r3, #8
 8004a50:	697a      	ldr	r2, [r7, #20]
 8004a52:	4313      	orrs	r3, r2
 8004a54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a21      	ldr	r2, [pc, #132]	@ (8004ae0 <TIM_OC3_SetConfig+0xe0>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d003      	beq.n	8004a66 <TIM_OC3_SetConfig+0x66>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4a20      	ldr	r2, [pc, #128]	@ (8004ae4 <TIM_OC3_SetConfig+0xe4>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d10d      	bne.n	8004a82 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004a6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	021b      	lsls	r3, r3, #8
 8004a74:	697a      	ldr	r2, [r7, #20]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004a80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a16      	ldr	r2, [pc, #88]	@ (8004ae0 <TIM_OC3_SetConfig+0xe0>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d003      	beq.n	8004a92 <TIM_OC3_SetConfig+0x92>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a15      	ldr	r2, [pc, #84]	@ (8004ae4 <TIM_OC3_SetConfig+0xe4>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d113      	bne.n	8004aba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004a98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004aa0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	695b      	ldr	r3, [r3, #20]
 8004aa6:	011b      	lsls	r3, r3, #4
 8004aa8:	693a      	ldr	r2, [r7, #16]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	699b      	ldr	r3, [r3, #24]
 8004ab2:	011b      	lsls	r3, r3, #4
 8004ab4:	693a      	ldr	r2, [r7, #16]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	693a      	ldr	r2, [r7, #16]
 8004abe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	68fa      	ldr	r2, [r7, #12]
 8004ac4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	685a      	ldr	r2, [r3, #4]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	697a      	ldr	r2, [r7, #20]
 8004ad2:	621a      	str	r2, [r3, #32]
}
 8004ad4:	bf00      	nop
 8004ad6:	371c      	adds	r7, #28
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr
 8004ae0:	40010000 	.word	0x40010000
 8004ae4:	40010400 	.word	0x40010400

08004ae8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b087      	sub	sp, #28
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6a1b      	ldr	r3, [r3, #32]
 8004af6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a1b      	ldr	r3, [r3, #32]
 8004b02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	69db      	ldr	r3, [r3, #28]
 8004b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	021b      	lsls	r3, r3, #8
 8004b26:	68fa      	ldr	r2, [r7, #12]
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004b32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	031b      	lsls	r3, r3, #12
 8004b3a:	693a      	ldr	r2, [r7, #16]
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	4a12      	ldr	r2, [pc, #72]	@ (8004b8c <TIM_OC4_SetConfig+0xa4>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d003      	beq.n	8004b50 <TIM_OC4_SetConfig+0x68>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	4a11      	ldr	r2, [pc, #68]	@ (8004b90 <TIM_OC4_SetConfig+0xa8>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d109      	bne.n	8004b64 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004b56:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	695b      	ldr	r3, [r3, #20]
 8004b5c:	019b      	lsls	r3, r3, #6
 8004b5e:	697a      	ldr	r2, [r7, #20]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	697a      	ldr	r2, [r7, #20]
 8004b68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	68fa      	ldr	r2, [r7, #12]
 8004b6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	685a      	ldr	r2, [r3, #4]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	693a      	ldr	r2, [r7, #16]
 8004b7c:	621a      	str	r2, [r3, #32]
}
 8004b7e:	bf00      	nop
 8004b80:	371c      	adds	r7, #28
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr
 8004b8a:	bf00      	nop
 8004b8c:	40010000 	.word	0x40010000
 8004b90:	40010400 	.word	0x40010400

08004b94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b087      	sub	sp, #28
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	60f8      	str	r0, [r7, #12]
 8004b9c:	60b9      	str	r1, [r7, #8]
 8004b9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6a1b      	ldr	r3, [r3, #32]
 8004ba4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	6a1b      	ldr	r3, [r3, #32]
 8004baa:	f023 0201 	bic.w	r2, r3, #1
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	699b      	ldr	r3, [r3, #24]
 8004bb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004bbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	011b      	lsls	r3, r3, #4
 8004bc4:	693a      	ldr	r2, [r7, #16]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	f023 030a 	bic.w	r3, r3, #10
 8004bd0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004bd2:	697a      	ldr	r2, [r7, #20]
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	693a      	ldr	r2, [r7, #16]
 8004bde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	697a      	ldr	r2, [r7, #20]
 8004be4:	621a      	str	r2, [r3, #32]
}
 8004be6:	bf00      	nop
 8004be8:	371c      	adds	r7, #28
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr

08004bf2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bf2:	b480      	push	{r7}
 8004bf4:	b087      	sub	sp, #28
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	60f8      	str	r0, [r7, #12]
 8004bfa:	60b9      	str	r1, [r7, #8]
 8004bfc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	6a1b      	ldr	r3, [r3, #32]
 8004c02:	f023 0210 	bic.w	r2, r3, #16
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	699b      	ldr	r3, [r3, #24]
 8004c0e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6a1b      	ldr	r3, [r3, #32]
 8004c14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004c1c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	031b      	lsls	r3, r3, #12
 8004c22:	697a      	ldr	r2, [r7, #20]
 8004c24:	4313      	orrs	r3, r2
 8004c26:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004c2e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	011b      	lsls	r3, r3, #4
 8004c34:	693a      	ldr	r2, [r7, #16]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	697a      	ldr	r2, [r7, #20]
 8004c3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	693a      	ldr	r2, [r7, #16]
 8004c44:	621a      	str	r2, [r3, #32]
}
 8004c46:	bf00      	nop
 8004c48:	371c      	adds	r7, #28
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr

08004c52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c52:	b480      	push	{r7}
 8004c54:	b085      	sub	sp, #20
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	6078      	str	r0, [r7, #4]
 8004c5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c6a:	683a      	ldr	r2, [r7, #0]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	f043 0307 	orr.w	r3, r3, #7
 8004c74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	68fa      	ldr	r2, [r7, #12]
 8004c7a:	609a      	str	r2, [r3, #8]
}
 8004c7c:	bf00      	nop
 8004c7e:	3714      	adds	r7, #20
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr

08004c88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b087      	sub	sp, #28
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	60b9      	str	r1, [r7, #8]
 8004c92:	607a      	str	r2, [r7, #4]
 8004c94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004ca2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	021a      	lsls	r2, r3, #8
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	431a      	orrs	r2, r3
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	697a      	ldr	r2, [r7, #20]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	697a      	ldr	r2, [r7, #20]
 8004cba:	609a      	str	r2, [r3, #8]
}
 8004cbc:	bf00      	nop
 8004cbe:	371c      	adds	r7, #28
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr

08004cc8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b087      	sub	sp, #28
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	60b9      	str	r1, [r7, #8]
 8004cd2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	f003 031f 	and.w	r3, r3, #31
 8004cda:	2201      	movs	r2, #1
 8004cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6a1a      	ldr	r2, [r3, #32]
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	43db      	mvns	r3, r3
 8004cea:	401a      	ands	r2, r3
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	6a1a      	ldr	r2, [r3, #32]
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	f003 031f 	and.w	r3, r3, #31
 8004cfa:	6879      	ldr	r1, [r7, #4]
 8004cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8004d00:	431a      	orrs	r2, r3
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	621a      	str	r2, [r3, #32]
}
 8004d06:	bf00      	nop
 8004d08:	371c      	adds	r7, #28
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr
	...

08004d14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b085      	sub	sp, #20
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d101      	bne.n	8004d2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d28:	2302      	movs	r3, #2
 8004d2a:	e05a      	b.n	8004de2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2202      	movs	r2, #2
 8004d38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	68fa      	ldr	r2, [r7, #12]
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	68fa      	ldr	r2, [r7, #12]
 8004d64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a21      	ldr	r2, [pc, #132]	@ (8004df0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d022      	beq.n	8004db6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d78:	d01d      	beq.n	8004db6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a1d      	ldr	r2, [pc, #116]	@ (8004df4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d018      	beq.n	8004db6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a1b      	ldr	r2, [pc, #108]	@ (8004df8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d013      	beq.n	8004db6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a1a      	ldr	r2, [pc, #104]	@ (8004dfc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d00e      	beq.n	8004db6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a18      	ldr	r2, [pc, #96]	@ (8004e00 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d009      	beq.n	8004db6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a17      	ldr	r2, [pc, #92]	@ (8004e04 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d004      	beq.n	8004db6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a15      	ldr	r2, [pc, #84]	@ (8004e08 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d10c      	bne.n	8004dd0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004dbc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	68ba      	ldr	r2, [r7, #8]
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	68ba      	ldr	r2, [r7, #8]
 8004dce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004de0:	2300      	movs	r3, #0
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3714      	adds	r7, #20
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr
 8004dee:	bf00      	nop
 8004df0:	40010000 	.word	0x40010000
 8004df4:	40000400 	.word	0x40000400
 8004df8:	40000800 	.word	0x40000800
 8004dfc:	40000c00 	.word	0x40000c00
 8004e00:	40010400 	.word	0x40010400
 8004e04:	40014000 	.word	0x40014000
 8004e08:	40001800 	.word	0x40001800

08004e0c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b085      	sub	sp, #20
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004e16:	2300      	movs	r3, #0
 8004e18:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d101      	bne.n	8004e28 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004e24:	2302      	movs	r3, #2
 8004e26:	e03d      	b.n	8004ea4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	68db      	ldr	r3, [r3, #12]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	4313      	orrs	r3, r2
 8004e58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	691b      	ldr	r3, [r3, #16]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	695b      	ldr	r3, [r3, #20]
 8004e80:	4313      	orrs	r3, r2
 8004e82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	69db      	ldr	r3, [r3, #28]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	68fa      	ldr	r2, [r7, #12]
 8004e98:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004ea2:	2300      	movs	r3, #0
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3714      	adds	r7, #20
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr

08004eb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b083      	sub	sp, #12
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004eb8:	bf00      	nop
 8004eba:	370c      	adds	r7, #12
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr

08004ec4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ecc:	bf00      	nop
 8004ece:	370c      	adds	r7, #12
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr

08004ed8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b082      	sub	sp, #8
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d101      	bne.n	8004eea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e03f      	b.n	8004f6a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d106      	bne.n	8004f04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f7fd f834 	bl	8001f6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2224      	movs	r2, #36	@ 0x24
 8004f08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	68da      	ldr	r2, [r3, #12]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004f1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f000 fc7b 	bl	8005818 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	691a      	ldr	r2, [r3, #16]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004f30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	695a      	ldr	r2, [r3, #20]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004f40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	68da      	ldr	r2, [r3, #12]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004f50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2220      	movs	r2, #32
 8004f5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2220      	movs	r2, #32
 8004f64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004f68:	2300      	movs	r3, #0
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3708      	adds	r7, #8
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
	...

08004f74 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b0ba      	sub	sp, #232	@ 0xe8
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	695b      	ldr	r3, [r3, #20]
 8004f96:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004fa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004faa:	f003 030f 	and.w	r3, r3, #15
 8004fae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004fb2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d10f      	bne.n	8004fda <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004fba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fbe:	f003 0320 	and.w	r3, r3, #32
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d009      	beq.n	8004fda <HAL_UART_IRQHandler+0x66>
 8004fc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fca:	f003 0320 	and.w	r3, r3, #32
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d003      	beq.n	8004fda <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f000 fb65 	bl	80056a2 <UART_Receive_IT>
      return;
 8004fd8:	e256      	b.n	8005488 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004fda:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	f000 80de 	beq.w	80051a0 <HAL_UART_IRQHandler+0x22c>
 8004fe4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004fe8:	f003 0301 	and.w	r3, r3, #1
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d106      	bne.n	8004ffe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004ff0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ff4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	f000 80d1 	beq.w	80051a0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004ffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005002:	f003 0301 	and.w	r3, r3, #1
 8005006:	2b00      	cmp	r3, #0
 8005008:	d00b      	beq.n	8005022 <HAL_UART_IRQHandler+0xae>
 800500a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800500e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005012:	2b00      	cmp	r3, #0
 8005014:	d005      	beq.n	8005022 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800501a:	f043 0201 	orr.w	r2, r3, #1
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005026:	f003 0304 	and.w	r3, r3, #4
 800502a:	2b00      	cmp	r3, #0
 800502c:	d00b      	beq.n	8005046 <HAL_UART_IRQHandler+0xd2>
 800502e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005032:	f003 0301 	and.w	r3, r3, #1
 8005036:	2b00      	cmp	r3, #0
 8005038:	d005      	beq.n	8005046 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800503e:	f043 0202 	orr.w	r2, r3, #2
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005046:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800504a:	f003 0302 	and.w	r3, r3, #2
 800504e:	2b00      	cmp	r3, #0
 8005050:	d00b      	beq.n	800506a <HAL_UART_IRQHandler+0xf6>
 8005052:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005056:	f003 0301 	and.w	r3, r3, #1
 800505a:	2b00      	cmp	r3, #0
 800505c:	d005      	beq.n	800506a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005062:	f043 0204 	orr.w	r2, r3, #4
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800506a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800506e:	f003 0308 	and.w	r3, r3, #8
 8005072:	2b00      	cmp	r3, #0
 8005074:	d011      	beq.n	800509a <HAL_UART_IRQHandler+0x126>
 8005076:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800507a:	f003 0320 	and.w	r3, r3, #32
 800507e:	2b00      	cmp	r3, #0
 8005080:	d105      	bne.n	800508e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005082:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005086:	f003 0301 	and.w	r3, r3, #1
 800508a:	2b00      	cmp	r3, #0
 800508c:	d005      	beq.n	800509a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005092:	f043 0208 	orr.w	r2, r3, #8
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800509e:	2b00      	cmp	r3, #0
 80050a0:	f000 81ed 	beq.w	800547e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80050a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050a8:	f003 0320 	and.w	r3, r3, #32
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d008      	beq.n	80050c2 <HAL_UART_IRQHandler+0x14e>
 80050b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050b4:	f003 0320 	and.w	r3, r3, #32
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d002      	beq.n	80050c2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f000 faf0 	bl	80056a2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	695b      	ldr	r3, [r3, #20]
 80050c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050cc:	2b40      	cmp	r3, #64	@ 0x40
 80050ce:	bf0c      	ite	eq
 80050d0:	2301      	moveq	r3, #1
 80050d2:	2300      	movne	r3, #0
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050de:	f003 0308 	and.w	r3, r3, #8
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d103      	bne.n	80050ee <HAL_UART_IRQHandler+0x17a>
 80050e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d04f      	beq.n	800518e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 f9f8 	bl	80054e4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	695b      	ldr	r3, [r3, #20]
 80050fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050fe:	2b40      	cmp	r3, #64	@ 0x40
 8005100:	d141      	bne.n	8005186 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	3314      	adds	r3, #20
 8005108:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800510c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005110:	e853 3f00 	ldrex	r3, [r3]
 8005114:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005118:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800511c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005120:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	3314      	adds	r3, #20
 800512a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800512e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005132:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005136:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800513a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800513e:	e841 2300 	strex	r3, r2, [r1]
 8005142:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005146:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800514a:	2b00      	cmp	r3, #0
 800514c:	d1d9      	bne.n	8005102 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005152:	2b00      	cmp	r3, #0
 8005154:	d013      	beq.n	800517e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800515a:	4a7d      	ldr	r2, [pc, #500]	@ (8005350 <HAL_UART_IRQHandler+0x3dc>)
 800515c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005162:	4618      	mov	r0, r3
 8005164:	f7fd fd5d 	bl	8002c22 <HAL_DMA_Abort_IT>
 8005168:	4603      	mov	r3, r0
 800516a:	2b00      	cmp	r3, #0
 800516c:	d016      	beq.n	800519c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005172:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005178:	4610      	mov	r0, r2
 800517a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800517c:	e00e      	b.n	800519c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f000 f99a 	bl	80054b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005184:	e00a      	b.n	800519c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 f996 	bl	80054b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800518c:	e006      	b.n	800519c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f000 f992 	bl	80054b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 800519a:	e170      	b.n	800547e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800519c:	bf00      	nop
    return;
 800519e:	e16e      	b.n	800547e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	f040 814a 	bne.w	800543e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80051aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051ae:	f003 0310 	and.w	r3, r3, #16
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	f000 8143 	beq.w	800543e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80051b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051bc:	f003 0310 	and.w	r3, r3, #16
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	f000 813c 	beq.w	800543e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80051c6:	2300      	movs	r3, #0
 80051c8:	60bb      	str	r3, [r7, #8]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	60bb      	str	r3, [r7, #8]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	60bb      	str	r3, [r7, #8]
 80051da:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	695b      	ldr	r3, [r3, #20]
 80051e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051e6:	2b40      	cmp	r3, #64	@ 0x40
 80051e8:	f040 80b4 	bne.w	8005354 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80051f8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	f000 8140 	beq.w	8005482 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005206:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800520a:	429a      	cmp	r2, r3
 800520c:	f080 8139 	bcs.w	8005482 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005216:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800521c:	69db      	ldr	r3, [r3, #28]
 800521e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005222:	f000 8088 	beq.w	8005336 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	330c      	adds	r3, #12
 800522c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005230:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005234:	e853 3f00 	ldrex	r3, [r3]
 8005238:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800523c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005240:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005244:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	330c      	adds	r3, #12
 800524e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005252:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005256:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800525a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800525e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005262:	e841 2300 	strex	r3, r2, [r1]
 8005266:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800526a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800526e:	2b00      	cmp	r3, #0
 8005270:	d1d9      	bne.n	8005226 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	3314      	adds	r3, #20
 8005278:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800527a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800527c:	e853 3f00 	ldrex	r3, [r3]
 8005280:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005282:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005284:	f023 0301 	bic.w	r3, r3, #1
 8005288:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	3314      	adds	r3, #20
 8005292:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005296:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800529a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800529c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800529e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80052a2:	e841 2300 	strex	r3, r2, [r1]
 80052a6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80052a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d1e1      	bne.n	8005272 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	3314      	adds	r3, #20
 80052b4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80052b8:	e853 3f00 	ldrex	r3, [r3]
 80052bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80052be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80052c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80052c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	3314      	adds	r3, #20
 80052ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80052d2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80052d4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052d6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80052d8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80052da:	e841 2300 	strex	r3, r2, [r1]
 80052de:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80052e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d1e3      	bne.n	80052ae <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2220      	movs	r2, #32
 80052ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	330c      	adds	r3, #12
 80052fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80052fe:	e853 3f00 	ldrex	r3, [r3]
 8005302:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005304:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005306:	f023 0310 	bic.w	r3, r3, #16
 800530a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	330c      	adds	r3, #12
 8005314:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005318:	65ba      	str	r2, [r7, #88]	@ 0x58
 800531a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800531c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800531e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005320:	e841 2300 	strex	r3, r2, [r1]
 8005324:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005326:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005328:	2b00      	cmp	r3, #0
 800532a:	d1e3      	bne.n	80052f4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005330:	4618      	mov	r0, r3
 8005332:	f7fd fc06 	bl	8002b42 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800533e:	b29b      	uxth	r3, r3
 8005340:	1ad3      	subs	r3, r2, r3
 8005342:	b29b      	uxth	r3, r3
 8005344:	4619      	mov	r1, r3
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f000 f8c0 	bl	80054cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800534c:	e099      	b.n	8005482 <HAL_UART_IRQHandler+0x50e>
 800534e:	bf00      	nop
 8005350:	080055ab 	.word	0x080055ab
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800535c:	b29b      	uxth	r3, r3
 800535e:	1ad3      	subs	r3, r2, r3
 8005360:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005368:	b29b      	uxth	r3, r3
 800536a:	2b00      	cmp	r3, #0
 800536c:	f000 808b 	beq.w	8005486 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005370:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005374:	2b00      	cmp	r3, #0
 8005376:	f000 8086 	beq.w	8005486 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	330c      	adds	r3, #12
 8005380:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005384:	e853 3f00 	ldrex	r3, [r3]
 8005388:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800538a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800538c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005390:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	330c      	adds	r3, #12
 800539a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800539e:	647a      	str	r2, [r7, #68]	@ 0x44
 80053a0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053a2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80053a4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80053a6:	e841 2300 	strex	r3, r2, [r1]
 80053aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80053ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d1e3      	bne.n	800537a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	3314      	adds	r3, #20
 80053b8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053bc:	e853 3f00 	ldrex	r3, [r3]
 80053c0:	623b      	str	r3, [r7, #32]
   return(result);
 80053c2:	6a3b      	ldr	r3, [r7, #32]
 80053c4:	f023 0301 	bic.w	r3, r3, #1
 80053c8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	3314      	adds	r3, #20
 80053d2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80053d6:	633a      	str	r2, [r7, #48]	@ 0x30
 80053d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80053dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053de:	e841 2300 	strex	r3, r2, [r1]
 80053e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80053e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d1e3      	bne.n	80053b2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2220      	movs	r2, #32
 80053ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	330c      	adds	r3, #12
 80053fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	e853 3f00 	ldrex	r3, [r3]
 8005406:	60fb      	str	r3, [r7, #12]
   return(result);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f023 0310 	bic.w	r3, r3, #16
 800540e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	330c      	adds	r3, #12
 8005418:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800541c:	61fa      	str	r2, [r7, #28]
 800541e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005420:	69b9      	ldr	r1, [r7, #24]
 8005422:	69fa      	ldr	r2, [r7, #28]
 8005424:	e841 2300 	strex	r3, r2, [r1]
 8005428:	617b      	str	r3, [r7, #20]
   return(result);
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d1e3      	bne.n	80053f8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005430:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005434:	4619      	mov	r1, r3
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f000 f848 	bl	80054cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800543c:	e023      	b.n	8005486 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800543e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005442:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005446:	2b00      	cmp	r3, #0
 8005448:	d009      	beq.n	800545e <HAL_UART_IRQHandler+0x4ea>
 800544a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800544e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005452:	2b00      	cmp	r3, #0
 8005454:	d003      	beq.n	800545e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f000 f8bb 	bl	80055d2 <UART_Transmit_IT>
    return;
 800545c:	e014      	b.n	8005488 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800545e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005462:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005466:	2b00      	cmp	r3, #0
 8005468:	d00e      	beq.n	8005488 <HAL_UART_IRQHandler+0x514>
 800546a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800546e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005472:	2b00      	cmp	r3, #0
 8005474:	d008      	beq.n	8005488 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f000 f8fb 	bl	8005672 <UART_EndTransmit_IT>
    return;
 800547c:	e004      	b.n	8005488 <HAL_UART_IRQHandler+0x514>
    return;
 800547e:	bf00      	nop
 8005480:	e002      	b.n	8005488 <HAL_UART_IRQHandler+0x514>
      return;
 8005482:	bf00      	nop
 8005484:	e000      	b.n	8005488 <HAL_UART_IRQHandler+0x514>
      return;
 8005486:	bf00      	nop
  }
}
 8005488:	37e8      	adds	r7, #232	@ 0xe8
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
 800548e:	bf00      	nop

08005490 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005490:	b480      	push	{r7}
 8005492:	b083      	sub	sp, #12
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005498:	bf00      	nop
 800549a:	370c      	adds	r7, #12
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr

080054a4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b083      	sub	sp, #12
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80054ac:	bf00      	nop
 80054ae:	370c      	adds	r7, #12
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr

080054b8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b083      	sub	sp, #12
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80054c0:	bf00      	nop
 80054c2:	370c      	adds	r7, #12
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr

080054cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b083      	sub	sp, #12
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	460b      	mov	r3, r1
 80054d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80054d8:	bf00      	nop
 80054da:	370c      	adds	r7, #12
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr

080054e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b095      	sub	sp, #84	@ 0x54
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	330c      	adds	r3, #12
 80054f2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054f6:	e853 3f00 	ldrex	r3, [r3]
 80054fa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80054fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054fe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005502:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	330c      	adds	r3, #12
 800550a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800550c:	643a      	str	r2, [r7, #64]	@ 0x40
 800550e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005510:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005512:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005514:	e841 2300 	strex	r3, r2, [r1]
 8005518:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800551a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800551c:	2b00      	cmp	r3, #0
 800551e:	d1e5      	bne.n	80054ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	3314      	adds	r3, #20
 8005526:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005528:	6a3b      	ldr	r3, [r7, #32]
 800552a:	e853 3f00 	ldrex	r3, [r3]
 800552e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	f023 0301 	bic.w	r3, r3, #1
 8005536:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	3314      	adds	r3, #20
 800553e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005540:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005542:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005544:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005546:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005548:	e841 2300 	strex	r3, r2, [r1]
 800554c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800554e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005550:	2b00      	cmp	r3, #0
 8005552:	d1e5      	bne.n	8005520 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005558:	2b01      	cmp	r3, #1
 800555a:	d119      	bne.n	8005590 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	330c      	adds	r3, #12
 8005562:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	e853 3f00 	ldrex	r3, [r3]
 800556a:	60bb      	str	r3, [r7, #8]
   return(result);
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	f023 0310 	bic.w	r3, r3, #16
 8005572:	647b      	str	r3, [r7, #68]	@ 0x44
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	330c      	adds	r3, #12
 800557a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800557c:	61ba      	str	r2, [r7, #24]
 800557e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005580:	6979      	ldr	r1, [r7, #20]
 8005582:	69ba      	ldr	r2, [r7, #24]
 8005584:	e841 2300 	strex	r3, r2, [r1]
 8005588:	613b      	str	r3, [r7, #16]
   return(result);
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d1e5      	bne.n	800555c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2220      	movs	r2, #32
 8005594:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2200      	movs	r2, #0
 800559c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800559e:	bf00      	nop
 80055a0:	3754      	adds	r7, #84	@ 0x54
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr

080055aa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80055aa:	b580      	push	{r7, lr}
 80055ac:	b084      	sub	sp, #16
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055b6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2200      	movs	r2, #0
 80055bc:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2200      	movs	r2, #0
 80055c2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80055c4:	68f8      	ldr	r0, [r7, #12]
 80055c6:	f7ff ff77 	bl	80054b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055ca:	bf00      	nop
 80055cc:	3710      	adds	r7, #16
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}

080055d2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80055d2:	b480      	push	{r7}
 80055d4:	b085      	sub	sp, #20
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	2b21      	cmp	r3, #33	@ 0x21
 80055e4:	d13e      	bne.n	8005664 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055ee:	d114      	bne.n	800561a <UART_Transmit_IT+0x48>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	691b      	ldr	r3, [r3, #16]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d110      	bne.n	800561a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6a1b      	ldr	r3, [r3, #32]
 80055fc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	881b      	ldrh	r3, [r3, #0]
 8005602:	461a      	mov	r2, r3
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800560c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6a1b      	ldr	r3, [r3, #32]
 8005612:	1c9a      	adds	r2, r3, #2
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	621a      	str	r2, [r3, #32]
 8005618:	e008      	b.n	800562c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6a1b      	ldr	r3, [r3, #32]
 800561e:	1c59      	adds	r1, r3, #1
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	6211      	str	r1, [r2, #32]
 8005624:	781a      	ldrb	r2, [r3, #0]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005630:	b29b      	uxth	r3, r3
 8005632:	3b01      	subs	r3, #1
 8005634:	b29b      	uxth	r3, r3
 8005636:	687a      	ldr	r2, [r7, #4]
 8005638:	4619      	mov	r1, r3
 800563a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800563c:	2b00      	cmp	r3, #0
 800563e:	d10f      	bne.n	8005660 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	68da      	ldr	r2, [r3, #12]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800564e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	68da      	ldr	r2, [r3, #12]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800565e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005660:	2300      	movs	r3, #0
 8005662:	e000      	b.n	8005666 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005664:	2302      	movs	r3, #2
  }
}
 8005666:	4618      	mov	r0, r3
 8005668:	3714      	adds	r7, #20
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr

08005672 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005672:	b580      	push	{r7, lr}
 8005674:	b082      	sub	sp, #8
 8005676:	af00      	add	r7, sp, #0
 8005678:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	68da      	ldr	r2, [r3, #12]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005688:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2220      	movs	r2, #32
 800568e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f7ff fefc 	bl	8005490 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005698:	2300      	movs	r3, #0
}
 800569a:	4618      	mov	r0, r3
 800569c:	3708      	adds	r7, #8
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}

080056a2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80056a2:	b580      	push	{r7, lr}
 80056a4:	b08c      	sub	sp, #48	@ 0x30
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	2b22      	cmp	r3, #34	@ 0x22
 80056b4:	f040 80ab 	bne.w	800580e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056c0:	d117      	bne.n	80056f2 <UART_Receive_IT+0x50>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	691b      	ldr	r3, [r3, #16]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d113      	bne.n	80056f2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80056ca:	2300      	movs	r3, #0
 80056cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056d2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	b29b      	uxth	r3, r3
 80056dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056e0:	b29a      	uxth	r2, r3
 80056e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056e4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056ea:	1c9a      	adds	r2, r3, #2
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	629a      	str	r2, [r3, #40]	@ 0x28
 80056f0:	e026      	b.n	8005740 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80056f8:	2300      	movs	r3, #0
 80056fa:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005704:	d007      	beq.n	8005716 <UART_Receive_IT+0x74>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d10a      	bne.n	8005724 <UART_Receive_IT+0x82>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	691b      	ldr	r3, [r3, #16]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d106      	bne.n	8005724 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	b2da      	uxtb	r2, r3
 800571e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005720:	701a      	strb	r2, [r3, #0]
 8005722:	e008      	b.n	8005736 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	b2db      	uxtb	r3, r3
 800572c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005730:	b2da      	uxtb	r2, r3
 8005732:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005734:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800573a:	1c5a      	adds	r2, r3, #1
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005744:	b29b      	uxth	r3, r3
 8005746:	3b01      	subs	r3, #1
 8005748:	b29b      	uxth	r3, r3
 800574a:	687a      	ldr	r2, [r7, #4]
 800574c:	4619      	mov	r1, r3
 800574e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005750:	2b00      	cmp	r3, #0
 8005752:	d15a      	bne.n	800580a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	68da      	ldr	r2, [r3, #12]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f022 0220 	bic.w	r2, r2, #32
 8005762:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	68da      	ldr	r2, [r3, #12]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005772:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	695a      	ldr	r2, [r3, #20]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f022 0201 	bic.w	r2, r2, #1
 8005782:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2220      	movs	r2, #32
 8005788:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005790:	2b01      	cmp	r3, #1
 8005792:	d135      	bne.n	8005800 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2200      	movs	r2, #0
 8005798:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	330c      	adds	r3, #12
 80057a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	e853 3f00 	ldrex	r3, [r3]
 80057a8:	613b      	str	r3, [r7, #16]
   return(result);
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	f023 0310 	bic.w	r3, r3, #16
 80057b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	330c      	adds	r3, #12
 80057b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057ba:	623a      	str	r2, [r7, #32]
 80057bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057be:	69f9      	ldr	r1, [r7, #28]
 80057c0:	6a3a      	ldr	r2, [r7, #32]
 80057c2:	e841 2300 	strex	r3, r2, [r1]
 80057c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80057c8:	69bb      	ldr	r3, [r7, #24]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d1e5      	bne.n	800579a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f003 0310 	and.w	r3, r3, #16
 80057d8:	2b10      	cmp	r3, #16
 80057da:	d10a      	bne.n	80057f2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80057dc:	2300      	movs	r3, #0
 80057de:	60fb      	str	r3, [r7, #12]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	60fb      	str	r3, [r7, #12]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	60fb      	str	r3, [r7, #12]
 80057f0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80057f6:	4619      	mov	r1, r3
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f7ff fe67 	bl	80054cc <HAL_UARTEx_RxEventCallback>
 80057fe:	e002      	b.n	8005806 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f7ff fe4f 	bl	80054a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005806:	2300      	movs	r3, #0
 8005808:	e002      	b.n	8005810 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800580a:	2300      	movs	r3, #0
 800580c:	e000      	b.n	8005810 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800580e:	2302      	movs	r3, #2
  }
}
 8005810:	4618      	mov	r0, r3
 8005812:	3730      	adds	r7, #48	@ 0x30
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}

08005818 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005818:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800581c:	b0c0      	sub	sp, #256	@ 0x100
 800581e:	af00      	add	r7, sp, #0
 8005820:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	691b      	ldr	r3, [r3, #16]
 800582c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005834:	68d9      	ldr	r1, [r3, #12]
 8005836:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	ea40 0301 	orr.w	r3, r0, r1
 8005840:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005842:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005846:	689a      	ldr	r2, [r3, #8]
 8005848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800584c:	691b      	ldr	r3, [r3, #16]
 800584e:	431a      	orrs	r2, r3
 8005850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005854:	695b      	ldr	r3, [r3, #20]
 8005856:	431a      	orrs	r2, r3
 8005858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800585c:	69db      	ldr	r3, [r3, #28]
 800585e:	4313      	orrs	r3, r2
 8005860:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005870:	f021 010c 	bic.w	r1, r1, #12
 8005874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800587e:	430b      	orrs	r3, r1
 8005880:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005882:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	695b      	ldr	r3, [r3, #20]
 800588a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800588e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005892:	6999      	ldr	r1, [r3, #24]
 8005894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005898:	681a      	ldr	r2, [r3, #0]
 800589a:	ea40 0301 	orr.w	r3, r0, r1
 800589e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80058a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058a4:	681a      	ldr	r2, [r3, #0]
 80058a6:	4b8f      	ldr	r3, [pc, #572]	@ (8005ae4 <UART_SetConfig+0x2cc>)
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d005      	beq.n	80058b8 <UART_SetConfig+0xa0>
 80058ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	4b8d      	ldr	r3, [pc, #564]	@ (8005ae8 <UART_SetConfig+0x2d0>)
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d104      	bne.n	80058c2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80058b8:	f7fe f96e 	bl	8003b98 <HAL_RCC_GetPCLK2Freq>
 80058bc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80058c0:	e003      	b.n	80058ca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80058c2:	f7fe f955 	bl	8003b70 <HAL_RCC_GetPCLK1Freq>
 80058c6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058ce:	69db      	ldr	r3, [r3, #28]
 80058d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80058d4:	f040 810c 	bne.w	8005af0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80058d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058dc:	2200      	movs	r2, #0
 80058de:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80058e2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80058e6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80058ea:	4622      	mov	r2, r4
 80058ec:	462b      	mov	r3, r5
 80058ee:	1891      	adds	r1, r2, r2
 80058f0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80058f2:	415b      	adcs	r3, r3
 80058f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80058f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80058fa:	4621      	mov	r1, r4
 80058fc:	eb12 0801 	adds.w	r8, r2, r1
 8005900:	4629      	mov	r1, r5
 8005902:	eb43 0901 	adc.w	r9, r3, r1
 8005906:	f04f 0200 	mov.w	r2, #0
 800590a:	f04f 0300 	mov.w	r3, #0
 800590e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005912:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005916:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800591a:	4690      	mov	r8, r2
 800591c:	4699      	mov	r9, r3
 800591e:	4623      	mov	r3, r4
 8005920:	eb18 0303 	adds.w	r3, r8, r3
 8005924:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005928:	462b      	mov	r3, r5
 800592a:	eb49 0303 	adc.w	r3, r9, r3
 800592e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005932:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800593e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005942:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005946:	460b      	mov	r3, r1
 8005948:	18db      	adds	r3, r3, r3
 800594a:	653b      	str	r3, [r7, #80]	@ 0x50
 800594c:	4613      	mov	r3, r2
 800594e:	eb42 0303 	adc.w	r3, r2, r3
 8005952:	657b      	str	r3, [r7, #84]	@ 0x54
 8005954:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005958:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800595c:	f7fa fc34 	bl	80001c8 <__aeabi_uldivmod>
 8005960:	4602      	mov	r2, r0
 8005962:	460b      	mov	r3, r1
 8005964:	4b61      	ldr	r3, [pc, #388]	@ (8005aec <UART_SetConfig+0x2d4>)
 8005966:	fba3 2302 	umull	r2, r3, r3, r2
 800596a:	095b      	lsrs	r3, r3, #5
 800596c:	011c      	lsls	r4, r3, #4
 800596e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005972:	2200      	movs	r2, #0
 8005974:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005978:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800597c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005980:	4642      	mov	r2, r8
 8005982:	464b      	mov	r3, r9
 8005984:	1891      	adds	r1, r2, r2
 8005986:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005988:	415b      	adcs	r3, r3
 800598a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800598c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005990:	4641      	mov	r1, r8
 8005992:	eb12 0a01 	adds.w	sl, r2, r1
 8005996:	4649      	mov	r1, r9
 8005998:	eb43 0b01 	adc.w	fp, r3, r1
 800599c:	f04f 0200 	mov.w	r2, #0
 80059a0:	f04f 0300 	mov.w	r3, #0
 80059a4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80059a8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80059ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80059b0:	4692      	mov	sl, r2
 80059b2:	469b      	mov	fp, r3
 80059b4:	4643      	mov	r3, r8
 80059b6:	eb1a 0303 	adds.w	r3, sl, r3
 80059ba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80059be:	464b      	mov	r3, r9
 80059c0:	eb4b 0303 	adc.w	r3, fp, r3
 80059c4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80059c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	2200      	movs	r2, #0
 80059d0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80059d4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80059d8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80059dc:	460b      	mov	r3, r1
 80059de:	18db      	adds	r3, r3, r3
 80059e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80059e2:	4613      	mov	r3, r2
 80059e4:	eb42 0303 	adc.w	r3, r2, r3
 80059e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80059ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80059ee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80059f2:	f7fa fbe9 	bl	80001c8 <__aeabi_uldivmod>
 80059f6:	4602      	mov	r2, r0
 80059f8:	460b      	mov	r3, r1
 80059fa:	4611      	mov	r1, r2
 80059fc:	4b3b      	ldr	r3, [pc, #236]	@ (8005aec <UART_SetConfig+0x2d4>)
 80059fe:	fba3 2301 	umull	r2, r3, r3, r1
 8005a02:	095b      	lsrs	r3, r3, #5
 8005a04:	2264      	movs	r2, #100	@ 0x64
 8005a06:	fb02 f303 	mul.w	r3, r2, r3
 8005a0a:	1acb      	subs	r3, r1, r3
 8005a0c:	00db      	lsls	r3, r3, #3
 8005a0e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005a12:	4b36      	ldr	r3, [pc, #216]	@ (8005aec <UART_SetConfig+0x2d4>)
 8005a14:	fba3 2302 	umull	r2, r3, r3, r2
 8005a18:	095b      	lsrs	r3, r3, #5
 8005a1a:	005b      	lsls	r3, r3, #1
 8005a1c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005a20:	441c      	add	r4, r3
 8005a22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a26:	2200      	movs	r2, #0
 8005a28:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005a2c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005a30:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005a34:	4642      	mov	r2, r8
 8005a36:	464b      	mov	r3, r9
 8005a38:	1891      	adds	r1, r2, r2
 8005a3a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005a3c:	415b      	adcs	r3, r3
 8005a3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a40:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005a44:	4641      	mov	r1, r8
 8005a46:	1851      	adds	r1, r2, r1
 8005a48:	6339      	str	r1, [r7, #48]	@ 0x30
 8005a4a:	4649      	mov	r1, r9
 8005a4c:	414b      	adcs	r3, r1
 8005a4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a50:	f04f 0200 	mov.w	r2, #0
 8005a54:	f04f 0300 	mov.w	r3, #0
 8005a58:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005a5c:	4659      	mov	r1, fp
 8005a5e:	00cb      	lsls	r3, r1, #3
 8005a60:	4651      	mov	r1, sl
 8005a62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a66:	4651      	mov	r1, sl
 8005a68:	00ca      	lsls	r2, r1, #3
 8005a6a:	4610      	mov	r0, r2
 8005a6c:	4619      	mov	r1, r3
 8005a6e:	4603      	mov	r3, r0
 8005a70:	4642      	mov	r2, r8
 8005a72:	189b      	adds	r3, r3, r2
 8005a74:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005a78:	464b      	mov	r3, r9
 8005a7a:	460a      	mov	r2, r1
 8005a7c:	eb42 0303 	adc.w	r3, r2, r3
 8005a80:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005a90:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005a94:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005a98:	460b      	mov	r3, r1
 8005a9a:	18db      	adds	r3, r3, r3
 8005a9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005a9e:	4613      	mov	r3, r2
 8005aa0:	eb42 0303 	adc.w	r3, r2, r3
 8005aa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005aa6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005aaa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005aae:	f7fa fb8b 	bl	80001c8 <__aeabi_uldivmod>
 8005ab2:	4602      	mov	r2, r0
 8005ab4:	460b      	mov	r3, r1
 8005ab6:	4b0d      	ldr	r3, [pc, #52]	@ (8005aec <UART_SetConfig+0x2d4>)
 8005ab8:	fba3 1302 	umull	r1, r3, r3, r2
 8005abc:	095b      	lsrs	r3, r3, #5
 8005abe:	2164      	movs	r1, #100	@ 0x64
 8005ac0:	fb01 f303 	mul.w	r3, r1, r3
 8005ac4:	1ad3      	subs	r3, r2, r3
 8005ac6:	00db      	lsls	r3, r3, #3
 8005ac8:	3332      	adds	r3, #50	@ 0x32
 8005aca:	4a08      	ldr	r2, [pc, #32]	@ (8005aec <UART_SetConfig+0x2d4>)
 8005acc:	fba2 2303 	umull	r2, r3, r2, r3
 8005ad0:	095b      	lsrs	r3, r3, #5
 8005ad2:	f003 0207 	and.w	r2, r3, #7
 8005ad6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4422      	add	r2, r4
 8005ade:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005ae0:	e106      	b.n	8005cf0 <UART_SetConfig+0x4d8>
 8005ae2:	bf00      	nop
 8005ae4:	40011000 	.word	0x40011000
 8005ae8:	40011400 	.word	0x40011400
 8005aec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005af0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005af4:	2200      	movs	r2, #0
 8005af6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005afa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005afe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005b02:	4642      	mov	r2, r8
 8005b04:	464b      	mov	r3, r9
 8005b06:	1891      	adds	r1, r2, r2
 8005b08:	6239      	str	r1, [r7, #32]
 8005b0a:	415b      	adcs	r3, r3
 8005b0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b0e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005b12:	4641      	mov	r1, r8
 8005b14:	1854      	adds	r4, r2, r1
 8005b16:	4649      	mov	r1, r9
 8005b18:	eb43 0501 	adc.w	r5, r3, r1
 8005b1c:	f04f 0200 	mov.w	r2, #0
 8005b20:	f04f 0300 	mov.w	r3, #0
 8005b24:	00eb      	lsls	r3, r5, #3
 8005b26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b2a:	00e2      	lsls	r2, r4, #3
 8005b2c:	4614      	mov	r4, r2
 8005b2e:	461d      	mov	r5, r3
 8005b30:	4643      	mov	r3, r8
 8005b32:	18e3      	adds	r3, r4, r3
 8005b34:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005b38:	464b      	mov	r3, r9
 8005b3a:	eb45 0303 	adc.w	r3, r5, r3
 8005b3e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005b42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005b4e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005b52:	f04f 0200 	mov.w	r2, #0
 8005b56:	f04f 0300 	mov.w	r3, #0
 8005b5a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005b5e:	4629      	mov	r1, r5
 8005b60:	008b      	lsls	r3, r1, #2
 8005b62:	4621      	mov	r1, r4
 8005b64:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b68:	4621      	mov	r1, r4
 8005b6a:	008a      	lsls	r2, r1, #2
 8005b6c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005b70:	f7fa fb2a 	bl	80001c8 <__aeabi_uldivmod>
 8005b74:	4602      	mov	r2, r0
 8005b76:	460b      	mov	r3, r1
 8005b78:	4b60      	ldr	r3, [pc, #384]	@ (8005cfc <UART_SetConfig+0x4e4>)
 8005b7a:	fba3 2302 	umull	r2, r3, r3, r2
 8005b7e:	095b      	lsrs	r3, r3, #5
 8005b80:	011c      	lsls	r4, r3, #4
 8005b82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b86:	2200      	movs	r2, #0
 8005b88:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005b8c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005b90:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005b94:	4642      	mov	r2, r8
 8005b96:	464b      	mov	r3, r9
 8005b98:	1891      	adds	r1, r2, r2
 8005b9a:	61b9      	str	r1, [r7, #24]
 8005b9c:	415b      	adcs	r3, r3
 8005b9e:	61fb      	str	r3, [r7, #28]
 8005ba0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ba4:	4641      	mov	r1, r8
 8005ba6:	1851      	adds	r1, r2, r1
 8005ba8:	6139      	str	r1, [r7, #16]
 8005baa:	4649      	mov	r1, r9
 8005bac:	414b      	adcs	r3, r1
 8005bae:	617b      	str	r3, [r7, #20]
 8005bb0:	f04f 0200 	mov.w	r2, #0
 8005bb4:	f04f 0300 	mov.w	r3, #0
 8005bb8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005bbc:	4659      	mov	r1, fp
 8005bbe:	00cb      	lsls	r3, r1, #3
 8005bc0:	4651      	mov	r1, sl
 8005bc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005bc6:	4651      	mov	r1, sl
 8005bc8:	00ca      	lsls	r2, r1, #3
 8005bca:	4610      	mov	r0, r2
 8005bcc:	4619      	mov	r1, r3
 8005bce:	4603      	mov	r3, r0
 8005bd0:	4642      	mov	r2, r8
 8005bd2:	189b      	adds	r3, r3, r2
 8005bd4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005bd8:	464b      	mov	r3, r9
 8005bda:	460a      	mov	r2, r1
 8005bdc:	eb42 0303 	adc.w	r3, r2, r3
 8005be0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	2200      	movs	r2, #0
 8005bec:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005bee:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005bf0:	f04f 0200 	mov.w	r2, #0
 8005bf4:	f04f 0300 	mov.w	r3, #0
 8005bf8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005bfc:	4649      	mov	r1, r9
 8005bfe:	008b      	lsls	r3, r1, #2
 8005c00:	4641      	mov	r1, r8
 8005c02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c06:	4641      	mov	r1, r8
 8005c08:	008a      	lsls	r2, r1, #2
 8005c0a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005c0e:	f7fa fadb 	bl	80001c8 <__aeabi_uldivmod>
 8005c12:	4602      	mov	r2, r0
 8005c14:	460b      	mov	r3, r1
 8005c16:	4611      	mov	r1, r2
 8005c18:	4b38      	ldr	r3, [pc, #224]	@ (8005cfc <UART_SetConfig+0x4e4>)
 8005c1a:	fba3 2301 	umull	r2, r3, r3, r1
 8005c1e:	095b      	lsrs	r3, r3, #5
 8005c20:	2264      	movs	r2, #100	@ 0x64
 8005c22:	fb02 f303 	mul.w	r3, r2, r3
 8005c26:	1acb      	subs	r3, r1, r3
 8005c28:	011b      	lsls	r3, r3, #4
 8005c2a:	3332      	adds	r3, #50	@ 0x32
 8005c2c:	4a33      	ldr	r2, [pc, #204]	@ (8005cfc <UART_SetConfig+0x4e4>)
 8005c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c32:	095b      	lsrs	r3, r3, #5
 8005c34:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005c38:	441c      	add	r4, r3
 8005c3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c3e:	2200      	movs	r2, #0
 8005c40:	673b      	str	r3, [r7, #112]	@ 0x70
 8005c42:	677a      	str	r2, [r7, #116]	@ 0x74
 8005c44:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005c48:	4642      	mov	r2, r8
 8005c4a:	464b      	mov	r3, r9
 8005c4c:	1891      	adds	r1, r2, r2
 8005c4e:	60b9      	str	r1, [r7, #8]
 8005c50:	415b      	adcs	r3, r3
 8005c52:	60fb      	str	r3, [r7, #12]
 8005c54:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c58:	4641      	mov	r1, r8
 8005c5a:	1851      	adds	r1, r2, r1
 8005c5c:	6039      	str	r1, [r7, #0]
 8005c5e:	4649      	mov	r1, r9
 8005c60:	414b      	adcs	r3, r1
 8005c62:	607b      	str	r3, [r7, #4]
 8005c64:	f04f 0200 	mov.w	r2, #0
 8005c68:	f04f 0300 	mov.w	r3, #0
 8005c6c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005c70:	4659      	mov	r1, fp
 8005c72:	00cb      	lsls	r3, r1, #3
 8005c74:	4651      	mov	r1, sl
 8005c76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c7a:	4651      	mov	r1, sl
 8005c7c:	00ca      	lsls	r2, r1, #3
 8005c7e:	4610      	mov	r0, r2
 8005c80:	4619      	mov	r1, r3
 8005c82:	4603      	mov	r3, r0
 8005c84:	4642      	mov	r2, r8
 8005c86:	189b      	adds	r3, r3, r2
 8005c88:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005c8a:	464b      	mov	r3, r9
 8005c8c:	460a      	mov	r2, r1
 8005c8e:	eb42 0303 	adc.w	r3, r2, r3
 8005c92:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	663b      	str	r3, [r7, #96]	@ 0x60
 8005c9e:	667a      	str	r2, [r7, #100]	@ 0x64
 8005ca0:	f04f 0200 	mov.w	r2, #0
 8005ca4:	f04f 0300 	mov.w	r3, #0
 8005ca8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005cac:	4649      	mov	r1, r9
 8005cae:	008b      	lsls	r3, r1, #2
 8005cb0:	4641      	mov	r1, r8
 8005cb2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005cb6:	4641      	mov	r1, r8
 8005cb8:	008a      	lsls	r2, r1, #2
 8005cba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005cbe:	f7fa fa83 	bl	80001c8 <__aeabi_uldivmod>
 8005cc2:	4602      	mov	r2, r0
 8005cc4:	460b      	mov	r3, r1
 8005cc6:	4b0d      	ldr	r3, [pc, #52]	@ (8005cfc <UART_SetConfig+0x4e4>)
 8005cc8:	fba3 1302 	umull	r1, r3, r3, r2
 8005ccc:	095b      	lsrs	r3, r3, #5
 8005cce:	2164      	movs	r1, #100	@ 0x64
 8005cd0:	fb01 f303 	mul.w	r3, r1, r3
 8005cd4:	1ad3      	subs	r3, r2, r3
 8005cd6:	011b      	lsls	r3, r3, #4
 8005cd8:	3332      	adds	r3, #50	@ 0x32
 8005cda:	4a08      	ldr	r2, [pc, #32]	@ (8005cfc <UART_SetConfig+0x4e4>)
 8005cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8005ce0:	095b      	lsrs	r3, r3, #5
 8005ce2:	f003 020f 	and.w	r2, r3, #15
 8005ce6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4422      	add	r2, r4
 8005cee:	609a      	str	r2, [r3, #8]
}
 8005cf0:	bf00      	nop
 8005cf2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005cfc:	51eb851f 	.word	0x51eb851f

08005d00 <_ZN7Encoder7HandlerEv>:
**/

#include "Encoder.h"
#define trans_ratio_N20 298
#define ADD_overflow 65536
void Encoder::Handler() {
 8005d00:	b480      	push	{r7}
 8005d02:	b085      	sub	sp, #20
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
	static uint8_t enconder_init_flag = 0;
	if(enconder_init_flag == 0)
 8005d08:	4b20      	ldr	r3, [pc, #128]	@ (8005d8c <_ZN7Encoder7HandlerEv+0x8c>)
 8005d0a:	781b      	ldrb	r3, [r3, #0]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d103      	bne.n	8005d18 <_ZN7Encoder7HandlerEv+0x18>
	{
		enconder_init_flag = 1;
 8005d10:	4b1e      	ldr	r3, [pc, #120]	@ (8005d8c <_ZN7Encoder7HandlerEv+0x8c>)
 8005d12:	2201      	movs	r2, #1
 8005d14:	701a      	strb	r2, [r3, #0]
		return;
 8005d16:	e033      	b.n	8005d80 <_ZN7Encoder7HandlerEv+0x80>
	}
	uint32_t temp_CNT = (htim->Instance)->CNT;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	691b      	ldr	r3, [r3, #16]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d20:	60fb      	str	r3, [r7, #12]
	if(temp_CNT >= 0 && temp_CNT < ADD_overflow/2)
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d28:	d203      	bcs.n	8005d32 <_ZN7Encoder7HandlerEv+0x32>
		this->cir_direction = 0;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	731a      	strb	r2, [r3, #12]
 8005d30:	e00a      	b.n	8005d48 <_ZN7Encoder7HandlerEv+0x48>
	else  if(temp_CNT <= ADD_overflow && temp_CNT > ADD_overflow/2)
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d38:	d806      	bhi.n	8005d48 <_ZN7Encoder7HandlerEv+0x48>
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d40:	d902      	bls.n	8005d48 <_ZN7Encoder7HandlerEv+0x48>
		this->cir_direction = 1;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2201      	movs	r2, #1
 8005d46:	731a      	strb	r2, [r3, #12]

	if(this->cir_direction == 0)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	7b1b      	ldrb	r3, [r3, #12]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d109      	bne.n	8005d64 <_ZN7Encoder7HandlerEv+0x64>
	{
		this->pulse = this->temp_pulse + ADD_overflow;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	f503 3280 	add.w	r2, r3, #65536	@ 0x10000
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	601a      	str	r2, [r3, #0]
		this->temp_pulse = this->pulse;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	609a      	str	r2, [r3, #8]
	}
	if(this->cir_direction == 1)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	7b1b      	ldrb	r3, [r3, #12]
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d109      	bne.n	8005d80 <_ZN7Encoder7HandlerEv+0x80>
	{
		this->pulse = this->temp_pulse - ADD_overflow;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	f5a3 3280 	sub.w	r2, r3, #65536	@ 0x10000
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	601a      	str	r2, [r3, #0]
		this->temp_pulse = this->pulse;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	609a      	str	r2, [r3, #8]
	}
}
 8005d80:	3714      	adds	r7, #20
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr
 8005d8a:	bf00      	nop
 8005d8c:	200005ac 	.word	0x200005ac

08005d90 <_ZN7Encoder10circle_getEv>:

void Encoder::circle_get(){
 8005d90:	b480      	push	{r7}
 8005d92:	b083      	sub	sp, #12
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
		this->pulse = this->temp_pulse + ((int32_t)(htim->Instance)->CNT);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	687a      	ldr	r2, [r7, #4]
 8005d9e:	6912      	ldr	r2, [r2, #16]
 8005da0:	6812      	ldr	r2, [r2, #0]
 8005da2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005da4:	441a      	add	r2, r3
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	601a      	str	r2, [r3, #0]

	this->circle_CNT = (float)pulse/((float)(trans_ratio_N20*7*2));
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	ee07 3a90 	vmov	s15, r3
 8005db2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005db6:	eddf 6a06 	vldr	s13, [pc, #24]	@ 8005dd0 <_ZN7Encoder10circle_getEv+0x40>
 8005dba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8005dc4:	bf00      	nop
 8005dc6:	370c      	adds	r7, #12
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr
 8005dd0:	45826000 	.word	0x45826000

08005dd4 <_ZN7EncoderC1EP17TIM_HandleTypeDef>:

Encoder::Encoder(TIM_HandleTypeDef *htim) {
 8005dd4:	b480      	push	{r7}
 8005dd6:	b083      	sub	sp, #12
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
 8005ddc:	6039      	str	r1, [r7, #0]
    this->htim = htim;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	683a      	ldr	r2, [r7, #0]
 8005de2:	611a      	str	r2, [r3, #16]
    this->pulse = 0;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	601a      	str	r2, [r3, #0]
    this->temp_pulse = this->pulse;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681a      	ldr	r2, [r3, #0]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	609a      	str	r2, [r3, #8]
    this->circle_CNT = 0;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f04f 0200 	mov.w	r2, #0
 8005df8:	605a      	str	r2, [r3, #4]
    this->cir_direction = 0;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	731a      	strb	r2, [r3, #12]
}
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	4618      	mov	r0, r3
 8005e04:	370c      	adds	r7, #12
 8005e06:	46bd      	mov	sp, r7
 8005e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0c:	4770      	bx	lr

08005e0e <_ZN9N20_MotorC1EP17TIM_HandleTypeDefmmP7Encoderfff>:
            pwm_set_duty(pwm_channel2, 0);
        }break;
    }
}

N20_Motor::N20_Motor(TIM_HandleTypeDef *htim, uint32_t pwm_channel1, uint32_t pwm_channel2, Encoder *encoder,
 8005e0e:	b480      	push	{r7}
 8005e10:	b089      	sub	sp, #36	@ 0x24
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	61f8      	str	r0, [r7, #28]
 8005e16:	61b9      	str	r1, [r7, #24]
 8005e18:	617a      	str	r2, [r7, #20]
 8005e1a:	613b      	str	r3, [r7, #16]
 8005e1c:	ed87 0a03 	vstr	s0, [r7, #12]
 8005e20:	edc7 0a02 	vstr	s1, [r7, #8]
 8005e24:	ed87 1a01 	vstr	s2, [r7, #4]
                     float reduction_rate, float radius, float deadzone) {
    this->htim = htim;
 8005e28:	69fb      	ldr	r3, [r7, #28]
 8005e2a:	69ba      	ldr	r2, [r7, #24]
 8005e2c:	61da      	str	r2, [r3, #28]
    this->pwm_channel1 = pwm_channel1;
 8005e2e:	69fb      	ldr	r3, [r7, #28]
 8005e30:	697a      	ldr	r2, [r7, #20]
 8005e32:	621a      	str	r2, [r3, #32]
    this->pwm_channel2 = pwm_channel2;
 8005e34:	69fb      	ldr	r3, [r7, #28]
 8005e36:	693a      	ldr	r2, [r7, #16]
 8005e38:	625a      	str	r2, [r3, #36]	@ 0x24
    this->encoder = encoder;
 8005e3a:	69fb      	ldr	r3, [r7, #28]
 8005e3c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e3e:	60da      	str	r2, [r3, #12]
    this->reduction_rate = reduction_rate;
 8005e40:	69fb      	ldr	r3, [r7, #28]
 8005e42:	68fa      	ldr	r2, [r7, #12]
 8005e44:	611a      	str	r2, [r3, #16]
    this->radius = radius;
 8005e46:	69fb      	ldr	r3, [r7, #28]
 8005e48:	68ba      	ldr	r2, [r7, #8]
 8005e4a:	615a      	str	r2, [r3, #20]
    this->deadzone = deadzone;
 8005e4c:	69fb      	ldr	r3, [r7, #28]
 8005e4e:	687a      	ldr	r2, [r7, #4]
 8005e50:	619a      	str	r2, [r3, #24]

}
 8005e52:	69fb      	ldr	r3, [r7, #28]
 8005e54:	4618      	mov	r0, r3
 8005e56:	3724      	adds	r7, #36	@ 0x24
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr

08005e60 <loop>:

void setup(){

}

void loop(){
 8005e60:	b580      	push	{r7, lr}
 8005e62:	af00      	add	r7, sp, #0
    HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8005e64:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005e68:	4804      	ldr	r0, [pc, #16]	@ (8005e7c <loop+0x1c>)
 8005e6a:	f7fd f8b2 	bl	8002fd2 <HAL_GPIO_TogglePin>
    HAL_Delay(500);
 8005e6e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8005e72:	f7fc f9d3 	bl	800221c <HAL_Delay>
}
 8005e76:	bf00      	nop
 8005e78:	bd80      	pop	{r7, pc}
 8005e7a:	bf00      	nop
 8005e7c:	40020800 	.word	0x40020800

08005e80 <task_handler>:

void task_handler(){
 8005e80:	b580      	push	{r7, lr}
 8005e82:	af00      	add	r7, sp, #0
	left_encoder.circle_get();
 8005e84:	4802      	ldr	r0, [pc, #8]	@ (8005e90 <task_handler+0x10>)
 8005e86:	f7ff ff83 	bl	8005d90 <_ZN7Encoder10circle_getEv>
}
 8005e8a:	bf00      	nop
 8005e8c:	bd80      	pop	{r7, pc}
 8005e8e:	bf00      	nop
 8005e90:	200005b0 	.word	0x200005b0

08005e94 <TIM2_handler>:

void TIM2_handler(){
 8005e94:	b580      	push	{r7, lr}
 8005e96:	af00      	add	r7, sp, #0
	left_encoder.Handler();
 8005e98:	4802      	ldr	r0, [pc, #8]	@ (8005ea4 <TIM2_handler+0x10>)
 8005e9a:	f7ff ff31 	bl	8005d00 <_ZN7Encoder7HandlerEv>
}
 8005e9e:	bf00      	nop
 8005ea0:	bd80      	pop	{r7, pc}
 8005ea2:	bf00      	nop
 8005ea4:	200005b0 	.word	0x200005b0

08005ea8 <_Z41__static_initialization_and_destruction_0ii>:
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b084      	sub	sp, #16
 8005eac:	af02      	add	r7, sp, #8
 8005eae:	6078      	str	r0, [r7, #4]
 8005eb0:	6039      	str	r1, [r7, #0]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d128      	bne.n	8005f0a <_Z41__static_initialization_and_destruction_0ii+0x62>
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d123      	bne.n	8005f0a <_Z41__static_initialization_and_destruction_0ii+0x62>
Encoder left_encoder(&htim2);
 8005ec2:	4914      	ldr	r1, [pc, #80]	@ (8005f14 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8005ec4:	4814      	ldr	r0, [pc, #80]	@ (8005f18 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8005ec6:	f7ff ff85 	bl	8005dd4 <_ZN7EncoderC1EP17TIM_HandleTypeDef>
Encoder right_encoder(&htim3);
 8005eca:	4914      	ldr	r1, [pc, #80]	@ (8005f1c <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8005ecc:	4814      	ldr	r0, [pc, #80]	@ (8005f20 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8005ece:	f7ff ff81 	bl	8005dd4 <_ZN7EncoderC1EP17TIM_HandleTypeDef>
                     );
 8005ed2:	4b11      	ldr	r3, [pc, #68]	@ (8005f18 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8005ed4:	9300      	str	r3, [sp, #0]
 8005ed6:	ed9f 1a13 	vldr	s2, [pc, #76]	@ 8005f24 <_Z41__static_initialization_and_destruction_0ii+0x7c>
 8005eda:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8005ede:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 8005f28 <_Z41__static_initialization_and_destruction_0ii+0x80>
 8005ee2:	2304      	movs	r3, #4
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	4911      	ldr	r1, [pc, #68]	@ (8005f2c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8005ee8:	4811      	ldr	r0, [pc, #68]	@ (8005f30 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8005eea:	f7ff ff90 	bl	8005e0e <_ZN9N20_MotorC1EP17TIM_HandleTypeDefmmP7Encoderfff>
);
 8005eee:	4b0c      	ldr	r3, [pc, #48]	@ (8005f20 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8005ef0:	9300      	str	r3, [sp, #0]
 8005ef2:	ed9f 1a0c 	vldr	s2, [pc, #48]	@ 8005f24 <_Z41__static_initialization_and_destruction_0ii+0x7c>
 8005ef6:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8005efa:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 8005f28 <_Z41__static_initialization_and_destruction_0ii+0x80>
 8005efe:	230c      	movs	r3, #12
 8005f00:	2208      	movs	r2, #8
 8005f02:	490a      	ldr	r1, [pc, #40]	@ (8005f2c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8005f04:	480b      	ldr	r0, [pc, #44]	@ (8005f34 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8005f06:	f7ff ff82 	bl	8005e0e <_ZN9N20_MotorC1EP17TIM_HandleTypeDefmmP7Encoderfff>
}
 8005f0a:	bf00      	nop
 8005f0c:	3708      	adds	r7, #8
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
 8005f12:	bf00      	nop
 8005f14:	2000029c 	.word	0x2000029c
 8005f18:	200005b0 	.word	0x200005b0
 8005f1c:	200002e4 	.word	0x200002e4
 8005f20:	200005c4 	.word	0x200005c4
 8005f24:	00000000 	.word	0x00000000
 8005f28:	44950000 	.word	0x44950000
 8005f2c:	20000254 	.word	0x20000254
 8005f30:	200005d8 	.word	0x200005d8
 8005f34:	20000600 	.word	0x20000600

08005f38 <_GLOBAL__sub_I_left_encoder>:
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8005f40:	2001      	movs	r0, #1
 8005f42:	f7ff ffb1 	bl	8005ea8 <_Z41__static_initialization_and_destruction_0ii>
 8005f46:	bd80      	pop	{r7, pc}

08005f48 <memset>:
 8005f48:	4402      	add	r2, r0
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d100      	bne.n	8005f52 <memset+0xa>
 8005f50:	4770      	bx	lr
 8005f52:	f803 1b01 	strb.w	r1, [r3], #1
 8005f56:	e7f9      	b.n	8005f4c <memset+0x4>

08005f58 <__libc_init_array>:
 8005f58:	b570      	push	{r4, r5, r6, lr}
 8005f5a:	4d0d      	ldr	r5, [pc, #52]	@ (8005f90 <__libc_init_array+0x38>)
 8005f5c:	4c0d      	ldr	r4, [pc, #52]	@ (8005f94 <__libc_init_array+0x3c>)
 8005f5e:	1b64      	subs	r4, r4, r5
 8005f60:	10a4      	asrs	r4, r4, #2
 8005f62:	2600      	movs	r6, #0
 8005f64:	42a6      	cmp	r6, r4
 8005f66:	d109      	bne.n	8005f7c <__libc_init_array+0x24>
 8005f68:	4d0b      	ldr	r5, [pc, #44]	@ (8005f98 <__libc_init_array+0x40>)
 8005f6a:	4c0c      	ldr	r4, [pc, #48]	@ (8005f9c <__libc_init_array+0x44>)
 8005f6c:	f000 f818 	bl	8005fa0 <_init>
 8005f70:	1b64      	subs	r4, r4, r5
 8005f72:	10a4      	asrs	r4, r4, #2
 8005f74:	2600      	movs	r6, #0
 8005f76:	42a6      	cmp	r6, r4
 8005f78:	d105      	bne.n	8005f86 <__libc_init_array+0x2e>
 8005f7a:	bd70      	pop	{r4, r5, r6, pc}
 8005f7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f80:	4798      	blx	r3
 8005f82:	3601      	adds	r6, #1
 8005f84:	e7ee      	b.n	8005f64 <__libc_init_array+0xc>
 8005f86:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f8a:	4798      	blx	r3
 8005f8c:	3601      	adds	r6, #1
 8005f8e:	e7f2      	b.n	8005f76 <__libc_init_array+0x1e>
 8005f90:	08005fd8 	.word	0x08005fd8
 8005f94:	08005fd8 	.word	0x08005fd8
 8005f98:	08005fd8 	.word	0x08005fd8
 8005f9c:	08005fe0 	.word	0x08005fe0

08005fa0 <_init>:
 8005fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fa2:	bf00      	nop
 8005fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fa6:	bc08      	pop	{r3}
 8005fa8:	469e      	mov	lr, r3
 8005faa:	4770      	bx	lr

08005fac <_fini>:
 8005fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fae:	bf00      	nop
 8005fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fb2:	bc08      	pop	{r3}
 8005fb4:	469e      	mov	lr, r3
 8005fb6:	4770      	bx	lr
